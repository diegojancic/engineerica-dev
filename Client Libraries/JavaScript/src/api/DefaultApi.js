/**
 * AccuCampus OpenAPI 3 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the actionassignmentdelete operation.
     * @callback module:api/DefaultApi~actionassignmentdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an action item from an action plan
     * Allows a user to remove an action item from a user's action plan.
     * @param {String} token The authentication token.
     * @param {String} id The id of the action assignment to delete.
     * @param {module:api/DefaultApi~actionassignmentdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionassignmentdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionassignmentdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentget operation.
     * @callback module:api/DefaultApi~actionassignmentgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of an action item assigned to a user
     * Allows the user to view an individual action item and its details, minus all the action item's updates.
     * @param {String} token The authentication token.
     * @param {String} id The id of the action assignment to get.
     * @param {module:api/DefaultApi~actionassignmentgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionassignmentget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionassignmentget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentlist operation.
     * @callback module:api/DefaultApi~actionassignmentlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of action items in a user's plan
     * Allows the user to view the list of all action items for a specified user.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.assignee The assignee's id to filter the assignments.
     * @param {Number} opts.status The status to filter the assignments.
     * @param {module:api/DefaultApi~actionassignmentlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentlist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionassignmentlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling actionassignmentlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling actionassignmentlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'assignee': opts['assignee'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentlisthistory operation.
     * @callback module:api/DefaultApi~actionassignmentlisthistoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the history of an action item assigned to a user
     * Allows the user to view an individual action plan and its details, including all the action plan's updates.
     * @param {String} token The authentication token.
     * @param {String} actionassignment The action assignment's id whose history the user wants to get.
     * @param {module:api/DefaultApi~actionassignmentlisthistoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentlisthistory(token, actionassignment, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionassignmentlisthistory");
      }
      // verify the required parameter 'actionassignment' is set
      if (actionassignment === undefined || actionassignment === null) {
        throw new Error("Missing the required parameter 'actionassignment' when calling actionassignmentlisthistory");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'actionassignment': actionassignment
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentlisthistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentlistmine operation.
     * @callback module:api/DefaultApi~actionassignmentlistmineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List public action assignments assigned to the logged user
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.status The status to filter the assignments.
     * @param {module:api/DefaultApi~actionassignmentlistmineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentlistmine(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionassignmentlistmine");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling actionassignmentlistmine");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling actionassignmentlistmine");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentlistmine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentlistpublichistory operation.
     * @callback module:api/DefaultApi~actionassignmentlistpublichistoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List public action assignment history
     * @param {String} token The authentication token.
     * @param {String} actionassignment The action assignment's id whose history the user wants to get.
     * @param {module:api/DefaultApi~actionassignmentlistpublichistoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentlistpublichistory(token, actionassignment, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionassignmentlistpublichistory");
      }
      // verify the required parameter 'actionassignment' is set
      if (actionassignment === undefined || actionassignment === null) {
        throw new Error("Missing the required parameter 'actionassignment' when calling actionassignmentlistpublichistory");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'actionassignment': actionassignment
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentlistpublichistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentmarkcomplete operation.
     * @callback module:api/DefaultApi~actionassignmentmarkcompleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk complete action items
     * Allows the user to bulk complete action items.
     * @param {String} token The authentication token.
     * @param {String} item The action item to assign.
     * @param {Object} opts Optional parameters
     * @param {String} opts.assignee The assignee of the item.
     * @param {String} opts.group The group to assing the item.
     * @param {String} opts.notes The assignment's notes.
     * @param {module:api/DefaultApi~actionassignmentmarkcompleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentmarkcomplete(token, item, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionassignmentmarkcomplete");
      }
      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling actionassignmentmarkcomplete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'assignee': opts['assignee'],
        'group': opts['group'],
        'item': item,
        'notes': opts['notes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentmarkcomplete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentsave operation.
     * @callback module:api/DefaultApi~actionassignmentsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an action item to a user's action plan
     * Allows the user to edit or assign an action item to a user
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~actionassignmentsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentsavehistory operation.
     * @callback module:api/DefaultApi~actionassignmentsavehistoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an action item assigned to a user
     * Allows the user to update or mark an action item as complete.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~actionassignmentsavehistoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentsavehistory(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentsavehistory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionitemdelete operation.
     * @callback module:api/DefaultApi~actionitemdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an action item
     * Allows the user to delete an action item.
     * @param {String} token The authentication token.
     * @param {String} id The id of the action item to delete.
     * @param {module:api/DefaultApi~actionitemdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionitemdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionitemdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionitemdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionitemdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionitemget operation.
     * @callback module:api/DefaultApi~actionitemgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of an action item
     * Allows the user to view an individual action item and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the action item to get.
     * @param {module:api/DefaultApi~actionitemgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionitemget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionitemget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionitemget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionitemget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionitemlist operation.
     * @callback module:api/DefaultApi~actionitemlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of action items
     * Allows the user to view a list of action items
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~actionitemlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionitemlist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionitemlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling actionitemlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling actionitemlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionitemlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionitemsave operation.
     * @callback module:api/DefaultApi~actionitemsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit an action item
     * Allows the user to edit an action item.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~actionitemsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionitemsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionitemsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionloglist operation.
     * @callback module:api/DefaultApi~actionloglistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of users action logs
     * Allows the user to view the audit logs for the account.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.user The id of the user whose action logs have to be returned.
     * @param {Date} opts.startdate The start date of the period to filter the logs.
     * @param {Date} opts.enddate The end date of the period to filter the logs.
     * @param {String} opts.resource The resource to filter the action logs.
     * @param {String} opts.actionfilter The action to filter the action logs.
     * @param {String} opts.argument The id of the entity that was the argument of the executed action.
     * @param {module:api/DefaultApi~actionloglistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionloglist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionloglist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling actionloglist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling actionloglist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'user': opts['user'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate'],
        'resource': opts['resource'],
        'actionfilter': opts['actionfilter'],
        'argument': opts['argument'],
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionloglist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionpackassign operation.
     * @callback module:api/DefaultApi~actionpackassignCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign an action item pack to a user
     * Allows the user to assign an action pack to a user or group of users.
     * @param {String} token The authentication token.
     * @param {String} pack The id of the action pack to assign.
     * @param {Boolean} itemsdata A JSON array containing the action items' data needed to assign them to the assignee (Id, Event, DateDue, DateExpired, NotifyAssigne).
     * @param {Object} opts Optional parameters
     * @param {String} opts.assignee The assignee of the pack.
     * @param {String} opts.group The group to assign the pack.
     * @param {String} opts.notes The assignment's notes.
     * @param {module:api/DefaultApi~actionpackassignCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionpackassign(token, pack, itemsdata, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionpackassign");
      }
      // verify the required parameter 'pack' is set
      if (pack === undefined || pack === null) {
        throw new Error("Missing the required parameter 'pack' when calling actionpackassign");
      }
      // verify the required parameter 'itemsdata' is set
      if (itemsdata === undefined || itemsdata === null) {
        throw new Error("Missing the required parameter 'itemsdata' when calling actionpackassign");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'pack': pack,
        'assignee': opts['assignee'],
        'group': opts['group'],
        'itemsdata': itemsdata,
        'notes': opts['notes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionpackassign', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionpackdelete operation.
     * @callback module:api/DefaultApi~actionpackdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an action item pack
     * Allows the user to delete an action item pack.
     * @param {String} token The authentication token.
     * @param {String} id The id of the action pack to delete.
     * @param {module:api/DefaultApi~actionpackdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionpackdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionpackdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionpackdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionpackdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionpackget operation.
     * @callback module:api/DefaultApi~actionpackgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of an action item pack
     * Allows the user to view an individual action pack and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the action pack to get.
     * @param {module:api/DefaultApi~actionpackgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionpackget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionpackget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionpackget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionpackget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionpacklist operation.
     * @callback module:api/DefaultApi~actionpacklistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of action item packs
     * Allows the user to view the full list of action item packs.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~actionpacklistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionpacklist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionpacklist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling actionpacklist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling actionpacklist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionpacklist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionpacksave operation.
     * @callback module:api/DefaultApi~actionpacksaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit an action item pack
     * Allows the user to edit an action item pack.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~actionpacksaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionpacksave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionpacksave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actiontypedelete operation.
     * @callback module:api/DefaultApi~actiontypedeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an action item type
     * Allows the user to delete an action item type.
     * @param {String} token The authentication token.
     * @param {String} id The id of the action type to delete.
     * @param {module:api/DefaultApi~actiontypedeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actiontypedelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actiontypedelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actiontypedelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actiontypedelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actiontypeget operation.
     * @callback module:api/DefaultApi~actiontypegetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of an action item type
     * Allows the user to view an individual action item type and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the action type to get.
     * @param {module:api/DefaultApi~actiontypegetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actiontypeget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actiontypeget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actiontypeget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actiontypeget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actiontypelist operation.
     * @callback module:api/DefaultApi~actiontypelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of action item types
     * Allows the user to view the full list of action item types.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~actiontypelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actiontypelist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actiontypelist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling actiontypelist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling actiontypelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actiontypelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actiontypesave operation.
     * @callback module:api/DefaultApi~actiontypesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit an action item type
     * Allows the user to dit an action item type.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~actiontypesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actiontypesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actiontypesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocquerycheckexecution operation.
     * @callback module:api/DefaultApi~adhocquerycheckexecutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the status of an ad hoc query execution
     * Allows the user to check whether a query has executed, viewable on the query's execution page.
     * @param {String} token The authentication token.
     * @param {String} id The id of the ad hoc query execution to be checked.
     * @param {module:api/DefaultApi~adhocquerycheckexecutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocquerycheckexecution(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adhocquerycheckexecution");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adhocquerycheckexecution");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocquerycheckexecution', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocquerydelete operation.
     * @callback module:api/DefaultApi~adhocquerydeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an ad hoc query
     * Allows the user to delete a previously created ad hoc query.
     * @param {String} token The authentication token.
     * @param {String} id The id of the ad hoc query to delete.
     * @param {module:api/DefaultApi~adhocquerydeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocquerydelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adhocquerydelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adhocquerydelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocquerydelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocqueryexecute operation.
     * @callback module:api/DefaultApi~adhocqueryexecuteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute an ad hoc query
     * Allows the user to execute an ad hoc query.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The id of the query to execute.
     * @param {String} opts.query The query to execute.
     * @param {module:api/DefaultApi~adhocqueryexecuteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocqueryexecute(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adhocqueryexecute");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': opts['id'],
        'query': opts['query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocqueryexecute', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocqueryget operation.
     * @callback module:api/DefaultApi~adhocquerygetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of an ad hoc query
     * Allows the user to view an individual ad hoc query with its settings.
     * @param {String} token The authentication token.
     * @param {String} id The id of the query to get.
     * @param {module:api/DefaultApi~adhocquerygetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocqueryget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adhocqueryget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adhocqueryget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocqueryget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocquerygetschema operation.
     * @callback module:api/DefaultApi~adhocquerygetschemaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the database schema for making ad hoc queries
     * Allows the user to view the list of schema for ad hoc queries.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~adhocquerygetschemaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocquerygetschema(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adhocquerygetschema");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocquerygetschema', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocquerylist operation.
     * @callback module:api/DefaultApi~adhocquerylistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of saved ad hoc queries
     * Allows the user to view the full list of saved queries.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~adhocquerylistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocquerylist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adhocquerylist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling adhocquerylist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling adhocquerylist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocquerylist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocquerylistexecutions operation.
     * @callback module:api/DefaultApi~adhocquerylistexecutionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of ad hoc queries executions
     * Allows the user to view the full list of past query executions.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.query The first record to return.
     * @param {module:api/DefaultApi~adhocquerylistexecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocquerylistexecutions(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adhocquerylistexecutions");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling adhocquerylistexecutions");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling adhocquerylistexecutions");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'query': opts['query'],
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocquerylistexecutions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocquerysave operation.
     * @callback module:api/DefaultApi~adhocquerysaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit an ad hoc query
     * Allows the user to edit an ad hoc query.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~adhocquerysaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocquerysave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocquerysave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocquerystopexecution operation.
     * @callback module:api/DefaultApi~adhocquerystopexecutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops the execution of an ad hoc query
     * Allows the user to halt the execution of a query that is currently being executed.
     * @param {String} token The authentication token.
     * @param {String} id The id of the ad hoc query execution to be stopped.
     * @param {module:api/DefaultApi~adhocquerystopexecutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocquerystopexecution(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adhocquerystopexecution");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adhocquerystopexecution");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocquerystopexecution', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adhocreportsreqaccess operation.
     * @callback module:api/DefaultApi~adhocreportsreqaccessCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request access to the ad-hoc reports
     * Allows the user to request access to the ad-hoc reports by clicking, 'Request Access' under Institutional Research -> Ad-hoc Reports
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~adhocreportsreqaccessCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adhocreportsreqaccess(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adhocreportsreqaccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/adhocreportsreqaccess', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationcheckunknownuser operation.
     * @callback module:api/DefaultApi~advancedstationcheckunknownuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether the user is known by the system.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} user The card of the user.
     * @param {String} location The id of the location the user picked.
     * @param {module:api/DefaultApi~advancedstationcheckunknownuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationcheckunknownuser(station, user, location, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationcheckunknownuser");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationcheckunknownuser");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling advancedstationcheckunknownuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'user': user,
        'location': location
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstationcheckunknownuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationcheckuserrole operation.
     * @callback module:api/DefaultApi~advancedstationcheckuserroleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether the user is a staff member, an attendee or both.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} user The card of the user.
     * @param {String} location The id of the location the user picked.
     * @param {module:api/DefaultApi~advancedstationcheckuserroleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationcheckuserrole(station, user, location, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationcheckuserrole");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationcheckuserrole");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling advancedstationcheckuserrole");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'user': user,
        'location': location
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstationcheckuserrole', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationcreateuser operation.
     * @callback module:api/DefaultApi~advancedstationcreateuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a user via a sign-in station.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} user The card of the user to create.
     * @param {String} location The id of the location the user picked.
     * @param {String} firstname The first name of the user to create.
     * @param {String} lastname The last name of the user to create.
     * @param {String} email The email of the user to create.
     * @param {Object} opts Optional parameters
     * @param {String} opts.middlename The middle name of the user to create.
     * @param {module:api/DefaultApi~advancedstationcreateuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationcreateuser(station, user, location, firstname, lastname, email, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationcreateuser");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationcreateuser");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling advancedstationcreateuser");
      }
      // verify the required parameter 'firstname' is set
      if (firstname === undefined || firstname === null) {
        throw new Error("Missing the required parameter 'firstname' when calling advancedstationcreateuser");
      }
      // verify the required parameter 'lastname' is set
      if (lastname === undefined || lastname === null) {
        throw new Error("Missing the required parameter 'lastname' when calling advancedstationcreateuser");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling advancedstationcreateuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'user': user,
        'location': location,
        'firstname': firstname,
        'middlename': opts['middlename'],
        'lastname': lastname,
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstationcreateuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationgetevents operation.
     * @callback module:api/DefaultApi~advancedstationgeteventsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the courses available for a specific location and a specific student.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} location The id of the location the student picked.
     * @param {String} user The card of the user.
     * @param {module:api/DefaultApi~advancedstationgeteventsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationgetevents(station, location, user, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationgetevents");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling advancedstationgetevents");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationgetevents");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'location': location,
        'user': user
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstationgetevents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationgetinfo operation.
     * @callback module:api/DefaultApi~advancedstationgetinfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the info to display in the sign-in station by it's ID.
     * @param {String} id The id of the sign-in station to get.
     * @param {Object} opts Optional parameters
     * @param {String} opts.event The id of the event (or session), to override the scheduled one.
     * @param {module:api/DefaultApi~advancedstationgetinfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationgetinfo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling advancedstationgetinfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'event': opts['event']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstationgetinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationgetlocations operation.
     * @callback module:api/DefaultApi~advancedstationgetlocationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the locations available in a sign-in station.
     * @param {String} station The id of the sign-in station whose locations have to be returned.
     * @param {String} user The card of the user.
     * @param {module:api/DefaultApi~advancedstationgetlocationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationgetlocations(station, user, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationgetlocations");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationgetlocations");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'user': user
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstationgetlocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationgetlogstaff operation.
     * @callback module:api/DefaultApi~advancedstationgetlogstaffCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the staff/tutors available filtered by the location, course and services of the given attendance log.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} attendancelog The id of the attendance log to filter the staff members.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~advancedstationgetlogstaffCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationgetlogstaff(station, attendancelog, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationgetlogstaff");
      }
      // verify the required parameter 'attendancelog' is set
      if (attendancelog === undefined || attendancelog === null) {
        throw new Error("Missing the required parameter 'attendancelog' when calling advancedstationgetlogstaff");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'attendancelog': attendancelog,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstationgetlogstaff', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationgetroles operation.
     * @callback module:api/DefaultApi~advancedstationgetrolesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the user roles of the user trying to sign-in.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} signinrole Specifies how the user is signing-in.
     * @param {String} user The card of the user.
     * @param {String} location The id of the location the user picked.
     * @param {module:api/DefaultApi~advancedstationgetrolesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationgetroles(station, signinrole, user, location, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationgetroles");
      }
      // verify the required parameter 'signinrole' is set
      if (signinrole === undefined || signinrole === null) {
        throw new Error("Missing the required parameter 'signinrole' when calling advancedstationgetroles");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationgetroles");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling advancedstationgetroles");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'signinrole': signinrole,
        'user': user,
        'location': location
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstationgetroles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationgetservices operation.
     * @callback module:api/DefaultApi~advancedstationgetservicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the services available for a specific location.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} location The id of the location the student picked.
     * @param {String} user The card of the user.
     * @param {module:api/DefaultApi~advancedstationgetservicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationgetservices(station, location, user, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationgetservices");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling advancedstationgetservices");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationgetservices");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'location': location,
        'user': user
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstationgetservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationgetstaff operation.
     * @callback module:api/DefaultApi~advancedstationgetstaffCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the staff/tutors available for a specific location, course and service.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} locationid The id of the location the student picked.
     * @param {String} user The card of the user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.services The list of services selected by the user, in JSON format.
     * @param {String} opts.eventid The ID of the event selected.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~advancedstationgetstaffCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationgetstaff(station, locationid, user, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationgetstaff");
      }
      // verify the required parameter 'locationid' is set
      if (locationid === undefined || locationid === null) {
        throw new Error("Missing the required parameter 'locationid' when calling advancedstationgetstaff");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationgetstaff");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'locationid': locationid,
        'user': user,
        'services': opts['services'],
        'eventid': opts['eventid'],
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstationgetstaff', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advancedstationissignedin operation.
     * @callback module:api/DefaultApi~advancedstationissignedinCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets whether a user is signed-in or not.
     * @param {String} station The id of the sign-in station to get.
     * @param {Date} time The date and time of the swipe.
     * @param {String} user The card of the user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.location The id of the location the user picked.
     * @param {module:api/DefaultApi~advancedstationissignedinCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancedstationissignedin(station, time, user, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling advancedstationissignedin");
      }
      // verify the required parameter 'time' is set
      if (time === undefined || time === null) {
        throw new Error("Missing the required parameter 'time' when calling advancedstationissignedin");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling advancedstationissignedin");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'time': time,
        'user': user,
        'location': opts['location']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advancedstationissignedin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroleaddmissing operation.
     * @callback module:api/DefaultApi~advroleaddmissingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the missing permissions to a role. Requires access to advrole.save
     * @param {String} token The authentication token.
     * @param {String} roles CSV list of the role ids to check
     * @param {String} permissions CSV list of the permissions to check
     * @param {module:api/DefaultApi~advroleaddmissingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleaddmissing(token, roles, permissions, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advroleaddmissing");
      }
      // verify the required parameter 'roles' is set
      if (roles === undefined || roles === null) {
        throw new Error("Missing the required parameter 'roles' when calling advroleaddmissing");
      }
      // verify the required parameter 'permissions' is set
      if (permissions === undefined || permissions === null) {
        throw new Error("Missing the required parameter 'permissions' when calling advroleaddmissing");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'roles': roles,
        'permissions': permissions
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advroleaddmissing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advrolecheckperm operation.
     * @callback module:api/DefaultApi~advrolecheckpermCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the permissions are assigned for the given roles
     * @param {String} token The authentication token.
     * @param {String} roles CSV list of the role ids to check
     * @param {String} permissions CSV list of the permissions to check
     * @param {module:api/DefaultApi~advrolecheckpermCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advrolecheckperm(token, roles, permissions, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advrolecheckperm");
      }
      // verify the required parameter 'roles' is set
      if (roles === undefined || roles === null) {
        throw new Error("Missing the required parameter 'roles' when calling advrolecheckperm");
      }
      // verify the required parameter 'permissions' is set
      if (permissions === undefined || permissions === null) {
        throw new Error("Missing the required parameter 'permissions' when calling advrolecheckperm");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'roles': roles,
        'permissions': permissions
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrolecheckperm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroledelete operation.
     * @callback module:api/DefaultApi~advroledeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role
     * Allows the user to delete a role from the list of available roles.
     * @param {String} token The authentication token.
     * @param {String} id The id of the location to delete.
     * @param {module:api/DefaultApi~advroledeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroledelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advroledelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling advroledelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advroledelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroledeletemapping operation.
     * @callback module:api/DefaultApi~advroledeletemappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role mapping
     * Allows the user to delete a role from its mapped categories on the 'Role Mapping' page.
     * @param {String} token The authentication token.
     * @param {String} map The map name to save the role.
     * @param {String} roleid The id of the role.
     * @param {module:api/DefaultApi~advroledeletemappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroledeletemapping(token, map, roleid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advroledeletemapping");
      }
      // verify the required parameter 'map' is set
      if (map === undefined || map === null) {
        throw new Error("Missing the required parameter 'map' when calling advroledeletemapping");
      }
      // verify the required parameter 'roleid' is set
      if (roleid === undefined || roleid === null) {
        throw new Error("Missing the required parameter 'roleid' when calling advroledeletemapping");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'map': map,
        'roleid': roleid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advroledeletemapping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroleget operation.
     * @callback module:api/DefaultApi~advrolegetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a role
     * Allows the user to view a role and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the location to get.
     * @param {module:api/DefaultApi~advrolegetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advroleget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling advroleget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advroleget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advrolelist operation.
     * @callback module:api/DefaultApi~advrolelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the roles for the current account
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includepolicies True to include the policies, defaults to false.
     * @param {Boolean} opts.includeinternal True to include the internal roles too.
     * @param {String} opts.name Filter by name of the role.
     * @param {module:api/DefaultApi~advrolelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advrolelist(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advrolelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'includepolicies': opts['includepolicies'],
        'includeinternal': opts['includeinternal'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrolelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advrolelistmaps operation.
     * @callback module:api/DefaultApi~advrolelistmapsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the maps a roles is mapped to
     * @param {String} token The authentication token.
     * @param {String} roleid The id of the role to list the maps.
     * @param {module:api/DefaultApi~advrolelistmapsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advrolelistmaps(token, roleid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advrolelistmaps");
      }
      // verify the required parameter 'roleid' is set
      if (roleid === undefined || roleid === null) {
        throw new Error("Missing the required parameter 'roleid' when calling advrolelistmaps");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'roleid': roleid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrolelistmaps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advrolelistrolesmapped operation.
     * @callback module:api/DefaultApi~advrolelistrolesmappedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the roles mappings
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.map List only the roles in the specified map.
     * @param {module:api/DefaultApi~advrolelistrolesmappedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advrolelistrolesmapped(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advrolelistrolesmapped");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'map': opts['map']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrolelistrolesmapped', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advrolelisttemplates operation.
     * @callback module:api/DefaultApi~advrolelisttemplatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of role templates
     * Allows the user to view the full list of available role templates.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~advrolelisttemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advrolelisttemplates(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advrolelisttemplates");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrolelisttemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advrolesave operation.
     * @callback module:api/DefaultApi~advrolesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a role
     * Allows the user to create or edit a role's permissions.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~advrolesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advrolesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrolesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advrolesavemapping operation.
     * @callback module:api/DefaultApi~advrolesavemappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves a role mapping
     * Allows the user to add a role to a mapped category on the 'Role Mapping' page.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~advrolesavemappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advrolesavemapping(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrolesavemapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advrolesuserlist operation.
     * @callback module:api/DefaultApi~advrolesuserlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users. Alias to user.list, use that one instead.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.roleid The id of the role to filter users by, or empty to return all users.
     * @param {String} opts.onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~advrolesuserlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advrolesuserlist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advrolesuserlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling advrolesuserlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling advrolesuserlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'roleid': opts['roleid'],
        'onlywithoutcard': opts['onlywithoutcard'],
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrolesuserlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroleuserupgrade operation.
     * @callback module:api/DefaultApi~advroleuserupgradeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upgrade a user to another role (requires permission to edit those roles)
     * Allow the user to add a role to another user, given that he has access to view that other user and edit people with that new role.
     * @param {String} token The authentication token.
     * @param {String} userid Id of the user to upgrade
     * @param {String} roleid Id of the role to add
     * @param {module:api/DefaultApi~advroleuserupgradeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleuserupgrade(token, userid, roleid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advroleuserupgrade");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling advroleuserupgrade");
      }
      // verify the required parameter 'roleid' is set
      if (roleid === undefined || roleid === null) {
        throw new Error("Missing the required parameter 'roleid' when calling advroleuserupgrade");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'roleid': roleid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advroleuserupgrade', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentcancel operation.
     * @callback module:api/DefaultApi~appointmentcancelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an appointment
     * Allows the user to cancel an appointment.
     * @param {String} token The authentication token.
     * @param {String} id The id of the appointment to cancel.
     * @param {module:api/DefaultApi~appointmentcancelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentcancel(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmentcancel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentcancel");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentcancel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentcheckisvalid operation.
     * @callback module:api/DefaultApi~appointmentcheckisvalidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if an appointment is valid or not
     * @param {String} token The authentication token.
     * @param {String} id The id of the appointment to check.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.editing Specifies whether the check is for a new appointment or an existing one.
     * @param {module:api/DefaultApi~appointmentcheckisvalidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentcheckisvalid(token, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmentcheckisvalid");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentcheckisvalid");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'editing': opts['editing']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentcheckisvalid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmenteditanyway operation.
     * @callback module:api/DefaultApi~appointmenteditanywayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an appointment even if it breaks activated rules
     * Allows the user to edit an existing appointment even if it breaks the rules or settings of that location.
     * @param {String} token The authentication token.
     * @param {String} id The id of the appointment to edit.
     * @param {String} attendee The id of the attendee involved in the appointment.
     * @param {String} staff The id of the staff member involved in the appointment.
     * @param {String} location The id of the location where the appointment will take place.
     * @param {Date} start The appointment's start date & time.
     * @param {Date} end The appointment's end date & time.
     * @param {Object} opts Optional parameters
     * @param {String} opts.term The id of the term when the appointment takes place.
     * @param {String} opts.event The id of the event of the appointment.
     * @param {String} opts.services Comma-separated string containing the ids of the services of the appointment.
     * @param {String} opts.notes The notes of the appointment.
     * @param {module:api/DefaultApi~appointmenteditanywayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmenteditanyway(token, id, attendee, staff, location, start, end, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmenteditanyway");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmenteditanyway");
      }
      // verify the required parameter 'attendee' is set
      if (attendee === undefined || attendee === null) {
        throw new Error("Missing the required parameter 'attendee' when calling appointmenteditanyway");
      }
      // verify the required parameter 'staff' is set
      if (staff === undefined || staff === null) {
        throw new Error("Missing the required parameter 'staff' when calling appointmenteditanyway");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling appointmenteditanyway");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling appointmenteditanyway");
      }
      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling appointmenteditanyway");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'term': opts['term'],
        'attendee': attendee,
        'staff': staff,
        'location': location,
        'start': start,
        'end': end,
        'event': opts['event'],
        'services': opts['services'],
        'notes': opts['notes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmenteditanyway', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmenteditpresence operation.
     * @callback module:api/DefaultApi~appointmenteditpresenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit the no-show status of an appointment
     * Allows the user to edit the no-show status of an appointment by marking it as Voided, Restored, or as a Show.
     * @param {String} token The authentication token.
     * @param {String} id The id of the appointment to edit its presence.
     * @param {Boolean} showedup Specifies whether the attendee was showed-up or not in the appointment.
     * @param {module:api/DefaultApi~appointmenteditpresenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmenteditpresence(token, id, showedup, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmenteditpresence");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmenteditpresence");
      }
      // verify the required parameter 'showedup' is set
      if (showedup === undefined || showedup === null) {
        throw new Error("Missing the required parameter 'showedup' when calling appointmenteditpresence");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'showedup': showedup
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmenteditpresence', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentfindallstaffslots operation.
     * @callback module:api/DefaultApi~appointmentfindallstaffslotsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds all staff available slots filtered by service, date, etc
     * Allows the user to view available appointment slots when creating an appointment.
     * @param {String} token The authentication token.
     * @param {Date} starttime The start time of the range to look for slots.
     * @param {Date} endtime The end time of the range to look for slots.
     * @param {String} serviceids CSV list of the service Ids to filter by.
     * @param {String} locationid The id of the service to filter by.
     * @param {Object} opts Optional parameters
     * @param {String} opts.eventid The id of the event to filter by.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~appointmentfindallstaffslotsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentfindallstaffslots(token, starttime, endtime, serviceids, locationid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmentfindallstaffslots");
      }
      // verify the required parameter 'starttime' is set
      if (starttime === undefined || starttime === null) {
        throw new Error("Missing the required parameter 'starttime' when calling appointmentfindallstaffslots");
      }
      // verify the required parameter 'endtime' is set
      if (endtime === undefined || endtime === null) {
        throw new Error("Missing the required parameter 'endtime' when calling appointmentfindallstaffslots");
      }
      // verify the required parameter 'serviceids' is set
      if (serviceids === undefined || serviceids === null) {
        throw new Error("Missing the required parameter 'serviceids' when calling appointmentfindallstaffslots");
      }
      // verify the required parameter 'locationid' is set
      if (locationid === undefined || locationid === null) {
        throw new Error("Missing the required parameter 'locationid' when calling appointmentfindallstaffslots");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'starttime': starttime,
        'endtime': endtime,
        'serviceids': serviceids,
        'eventid': opts['eventid'],
        'locationid': locationid,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentfindallstaffslots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentfindslots operation.
     * @callback module:api/DefaultApi~appointmentfindslotsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds available slots filtered by service, date, staff, etc
     * Allows the user to view available appointment slots when creating an appointment.
     * @param {String} token The authentication token.
     * @param {String} staffid The id of the staff to filter by.
     * @param {Date} starttime The start time of the range to look for slots.
     * @param {Date} endtime The end time of the range to look for slots.
     * @param {String} serviceids CSV list of the service Ids to filter by.
     * @param {Object} opts Optional parameters
     * @param {String} opts.eventid The id of the event to filter by.
     * @param {String} opts.locationid The id of the service to filter by.
     * @param {module:api/DefaultApi~appointmentfindslotsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentfindslots(token, staffid, starttime, endtime, serviceids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmentfindslots");
      }
      // verify the required parameter 'staffid' is set
      if (staffid === undefined || staffid === null) {
        throw new Error("Missing the required parameter 'staffid' when calling appointmentfindslots");
      }
      // verify the required parameter 'starttime' is set
      if (starttime === undefined || starttime === null) {
        throw new Error("Missing the required parameter 'starttime' when calling appointmentfindslots");
      }
      // verify the required parameter 'endtime' is set
      if (endtime === undefined || endtime === null) {
        throw new Error("Missing the required parameter 'endtime' when calling appointmentfindslots");
      }
      // verify the required parameter 'serviceids' is set
      if (serviceids === undefined || serviceids === null) {
        throw new Error("Missing the required parameter 'serviceids' when calling appointmentfindslots");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'staffid': staffid,
        'starttime': starttime,
        'endtime': endtime,
        'serviceids': serviceids,
        'eventid': opts['eventid'],
        'locationid': opts['locationid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentfindslots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentfindstaff operation.
     * @callback module:api/DefaultApi~appointmentfindstaffCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds staff available by service, date, event, etc
     * Allows the user to view staff availability when creating an appointment.
     * @param {String} token The authentication token.
     * @param {String} serviceids CSV list of the service ids to filter by.
     * @param {Date} starttime The start time of the range to look for slots.
     * @param {Date} endtime The end time of the range to look for slots.
     * @param {Object} opts Optional parameters
     * @param {String} opts.eventid The id of the event to filter by.
     * @param {String} opts.locationid The id of the service to filter by.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~appointmentfindstaffCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentfindstaff(token, serviceids, starttime, endtime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmentfindstaff");
      }
      // verify the required parameter 'serviceids' is set
      if (serviceids === undefined || serviceids === null) {
        throw new Error("Missing the required parameter 'serviceids' when calling appointmentfindstaff");
      }
      // verify the required parameter 'starttime' is set
      if (starttime === undefined || starttime === null) {
        throw new Error("Missing the required parameter 'starttime' when calling appointmentfindstaff");
      }
      // verify the required parameter 'endtime' is set
      if (endtime === undefined || endtime === null) {
        throw new Error("Missing the required parameter 'endtime' when calling appointmentfindstaff");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'serviceids': serviceids,
        'eventid': opts['eventid'],
        'starttime': starttime,
        'endtime': endtime,
        'locationid': opts['locationid'],
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentfindstaff', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentget operation.
     * @callback module:api/DefaultApi~appointmentgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of an appointment
     * Allows the user to view an individual appointment and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the appointment to get.
     * @param {module:api/DefaultApi~appointmentgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmentget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentgetcurrent operation.
     * @callback module:api/DefaultApi~appointmentgetcurrentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current appointments for the user that is about to sign-in via the specified sign-in station.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} user The card of the user.
     * @param {String} location The id of the location where the user wants to sign-in.
     * @param {module:api/DefaultApi~appointmentgetcurrentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentgetcurrent(station, user, location, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling appointmentgetcurrent");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling appointmentgetcurrent");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling appointmentgetcurrent");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'user': user,
        'location': location
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentgetcurrent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentgetlocations operation.
     * @callback module:api/DefaultApi~appointmentgetlocationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find locations where a service is available
     * Allows the user to search for appointment availability by location or service.
     * @param {String} token The authentication token.
     * @param {String} serviceid The id of the service to get its locations.
     * @param {module:api/DefaultApi~appointmentgetlocationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentgetlocations(token, serviceid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmentgetlocations");
      }
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling appointmentgetlocations");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'serviceid': serviceid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentgetlocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentlist operation.
     * @callback module:api/DefaultApi~appointmentlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of appointments
     * Allows the user to view all upcoming appointments for the location or locations they are scoped to.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startdate The start date of the period to filter the appointments.
     * @param {Date} opts.enddate The end date of the period to filter the appointments.
     * @param {String} opts.userid The attendee id to filter the appointments.
     * @param {module:api/DefaultApi~appointmentlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentlist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmentlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling appointmentlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling appointmentlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'startdate': opts['startdate'],
        'enddate': opts['enddate'],
        'userid': opts['userid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentlistmine operation.
     * @callback module:api/DefaultApi~appointmentlistmineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all my upcoming appointments
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.start If specified, only appointments that start after the specified date will be returned.
     * @param {Date} opts.modifiedafter If specified, only appointments modified after the specified date will be returned.
     * @param {module:api/DefaultApi~appointmentlistmineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentlistmine(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmentlistmine");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'start': opts['start'],
        'modifiedafter': opts['modifiedafter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentlistmine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentlistupcoming operation.
     * @callback module:api/DefaultApi~appointmentlistupcomingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of all my upcoming appointments
     * Allows the user to view all of their own upcoming appointments.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.start If specified, only appointments that start after the specified date will be returned.
     * @param {Date} opts.modifiedafter If specified, only appointments modified after the specified date will be returned.
     * @param {module:api/DefaultApi~appointmentlistupcomingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentlistupcoming(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmentlistupcoming");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'start': opts['start'],
        'modifiedafter': opts['modifiedafter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentlistupcoming', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentrescheduleoutlook operation.
     * @callback module:api/DefaultApi~appointmentrescheduleoutlookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reschedule an appointment from MS Outlook.
     * Allows the user to reschedule, edit, or cancel appointments via MS Outlook if the user has the AccuCampus add-on installed on their Outlook.
     * @param {String} token The authentication token.
     * @param {String} id The id of the appointment to edit.
     * @param {Date} start The appointment's start date & time.
     * @param {Date} end The appointment's end date & time.
     * @param {module:api/DefaultApi~appointmentrescheduleoutlookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentrescheduleoutlook(token, id, start, end, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmentrescheduleoutlook");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentrescheduleoutlook");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling appointmentrescheduleoutlook");
      }
      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling appointmentrescheduleoutlook");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'start': start,
        'end': end
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentrescheduleoutlook', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentrestore operation.
     * @callback module:api/DefaultApi~appointmentrestoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore an appointment
     * Allows the user to restore a canceled appointment.
     * @param {String} token The authentication token.
     * @param {String} id The id of the appointment to restore.
     * @param {module:api/DefaultApi~appointmentrestoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentrestore(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmentrestore");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentrestore");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentrestore', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentrestoreanyway operation.
     * @callback module:api/DefaultApi~appointmentrestoreanywayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore an appointment even if it breaks activated rules
     * Allows the user to restore a canceled appointment even if that appointment breaks the rules or settings of that location.
     * @param {String} token The authentication token.
     * @param {String} id The id of the appointment to restore.
     * @param {module:api/DefaultApi~appointmentrestoreanywayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentrestoreanyway(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmentrestoreanyway");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentrestoreanyway");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentrestoreanyway', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentsave operation.
     * @callback module:api/DefaultApi~appointmentsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedule an appointment
     * Allows the user to schedule an appointment within the rules of the location and the availability of staff members.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~appointmentsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentsetasvalid operation.
     * @callback module:api/DefaultApi~appointmentsetasvalidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedule an appointment even if it breaks activated rules
     * Allows the user to schedule an appointment even if it breaks the rules or settings of that location or if it goes against the availability of the staff member.
     * @param {String} token The authentication token.
     * @param {String} id The id of the appointment to set as valid.
     * @param {module:api/DefaultApi~appointmentsetasvalidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentsetasvalid(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmentsetasvalid");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentsetasvalid");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentsetasvalid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentsuggestlocations operation.
     * @callback module:api/DefaultApi~appointmentsuggestlocationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the locations with most appointments
     * Allows the user to view suggestions for the most popular locations in which to make appointments
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~appointmentsuggestlocationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentsuggestlocations(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmentsuggestlocations");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentsuggestlocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentsuggestservices operation.
     * @callback module:api/DefaultApi~appointmentsuggestservicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the services with most appointments
     * Allows the user to view suggestions for the most popular services for which to make appointments.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~appointmentsuggestservicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentsuggestservices(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmentsuggestservices");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentsuggestservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appointmentvoid operation.
     * @callback module:api/DefaultApi~appointmentvoidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Void an appointment
     * Allows the user to void an appointment that has been marked as a no-show so that it does not count against the student's restrictions.
     * @param {String} token The authentication token.
     * @param {String} id The id of the appointment to cancel.
     * @param {module:api/DefaultApi~appointmentvoidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentvoid(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appointmentvoid");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appointmentvoid");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointmentvoid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsharegetphone operation.
     * @callback module:api/DefaultApi~appsharegetphoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the phone number of the current user
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~appsharegetphoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsharegetphone(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appsharegetphone");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appsharegetphone', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsharesendtext operation.
     * @callback module:api/DefaultApi~appsharesendtextCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an SMS with the link to the app
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.phonenumber Phone number to where to send the link. Leave empty to the number on file.
     * @param {module:api/DefaultApi~appsharesendtextCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsharesendtext(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appsharesendtext");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'phonenumber': opts['phonenumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appsharesendtext', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogcommentdelete operation.
     * @callback module:api/DefaultApi~attendancelogcommentdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a comment on an attendance log
     * @param {String} token The authentication token.
     * @param {String} id The id of the attendance log comment to delete.
     * @param {module:api/DefaultApi~attendancelogcommentdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogcommentdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling attendancelogcommentdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendancelogcommentdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogcommentdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogcommentget operation.
     * @callback module:api/DefaultApi~attendancelogcommentgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a comment on an attendance log
     * @param {String} token The authentication token.
     * @param {String} id The id of the comment to get.
     * @param {module:api/DefaultApi~attendancelogcommentgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogcommentget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling attendancelogcommentget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendancelogcommentget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogcommentget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogcommentlist operation.
     * @callback module:api/DefaultApi~attendancelogcommentlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the comments on a specific attendance log
     * @param {String} attendancelog The id of the attendance log whose comments have to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {module:api/DefaultApi~attendancelogcommentlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogcommentlist(attendancelog, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'attendancelog' is set
      if (attendancelog === undefined || attendancelog === null) {
        throw new Error("Missing the required parameter 'attendancelog' when calling attendancelogcommentlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'attendancelog': attendancelog
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogcommentlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogcommentsave operation.
     * @callback module:api/DefaultApi~attendancelogcommentsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a comment on an attendance log
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~attendancelogcommentsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogcommentsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogcommentsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogdelete operation.
     * @callback module:api/DefaultApi~attendancelogdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an attendance log
     * Allows the user to delete an existing attendance log.
     * @param {String} token The authentication token.
     * @param {String} id The id of the attendance log to delete.
     * @param {module:api/DefaultApi~attendancelogdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling attendancelogdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendancelogdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogget operation.
     * @callback module:api/DefaultApi~attendanceloggetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of an attendance log
     * Allows the user to view an individual attendance log and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the attendance log to get.
     * @param {module:api/DefaultApi~attendanceloggetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling attendancelogget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendancelogget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendanceloggetchangehistory operation.
     * @callback module:api/DefaultApi~attendanceloggetchangehistoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of an attendance log's swipe history
     * Allows the user to view the swipes of an individual attendance logs (sign ins and sign outs).
     * @param {String} token The authentication token.
     * @param {String} id The id of the attendance log to get.
     * @param {module:api/DefaultApi~attendanceloggetchangehistoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendanceloggetchangehistory(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling attendanceloggetchangehistory");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendanceloggetchangehistory");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendanceloggetchangehistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendanceloglist operation.
     * @callback module:api/DefaultApi~attendanceloglistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of attendance logs
     * Allows the user to view the list of all attendance logs in the location or locations in which the user is scoped.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {String} opts.filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
     * @param {String} opts.userid The user ID of the user to get the logs.
     * @param {module:api/DefaultApi~attendanceloglistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendanceloglist(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling attendanceloglist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling attendanceloglist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'from': from,
        'count': count,
        'filter': opts['filter'],
        'userid': opts['userid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendanceloglist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendanceloglistmine operation.
     * @callback module:api/DefaultApi~attendanceloglistmineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the attendance logs of the current user
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {String} opts.filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
     * @param {module:api/DefaultApi~attendanceloglistmineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendanceloglistmine(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling attendanceloglistmine");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling attendanceloglistmine");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'from': from,
        'count': count,
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendanceloglistmine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogliststaff operation.
     * @callback module:api/DefaultApi~attendancelogliststaffCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the attendance logs that the current user is involved in as staff
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {String} opts.filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
     * @param {module:api/DefaultApi~attendancelogliststaffCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogliststaff(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling attendancelogliststaff");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling attendancelogliststaff");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'from': from,
        'count': count,
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogliststaff', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogsave operation.
     * @callback module:api/DefaultApi~attendancelogsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit an attendance log
     * Allows the user to create or edit an attendance log.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~attendancelogsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogsignout operation.
     * @callback module:api/DefaultApi~attendancelogsignoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign out an attendance log
     * Allows the user to sign out am attendance log from the Who's In page.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The id of the attendance log to sign-out.
     * @param {String} opts.location The id of the location to filter the users to sign out.
     * @param {String} opts.event The id of the event to filter the users to sign out.
     * @param {Date} opts.datetime Specifies the date and time when the specified logs have to be signed out.
     * @param {module:api/DefaultApi~attendancelogsignoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogsignout(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling attendancelogsignout");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': opts['id'],
        'location': opts['location'],
        'event': opts['event'],
        'datetime': opts['datetime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogsignout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogwhosin operation.
     * @callback module:api/DefaultApi~attendancelogwhosinCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View who's in a location
     * Allows the user to view the Who's In page and view all users who are logged into locations in which the user is scoped.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {String} opts.location The id of the location to search for users that are in.
     * @param {String} opts.event The id of the event to search for users that are in.
     * @param {String} opts.sorting Field to sort by. Either first-name, last-name or sign-in-time.
     * @param {String} opts.roles The comma-separated list of ids of the roles to search for users that are in.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {String} opts.extensions A JSON array containing the extension filters (i.e [{name: 'nametofilter', value: 'valuetofilter'}]).
     * @param {Boolean} opts._export True to export the results as CSV
     * @param {module:api/DefaultApi~attendancelogwhosinCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogwhosin(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling attendancelogwhosin");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling attendancelogwhosin");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'from': from,
        'count': count,
        'location': opts['location'],
        'event': opts['event'],
        'sorting': opts['sorting'],
        'roles': opts['roles'],
        'photosize': opts['photosize'],
        'extensions': opts['extensions'],
        'export': opts['_export']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogwhosin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancerestrictiondelete operation.
     * @callback module:api/DefaultApi~attendancerestrictiondeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an attendance restriction
     * Allows the user to delete an existing attendance restriction.
     * @param {String} token The authentication token.
     * @param {String} id The id of the restriction to delete.
     * @param {module:api/DefaultApi~attendancerestrictiondeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancerestrictiondelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling attendancerestrictiondelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendancerestrictiondelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancerestrictiondelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancerestrictionget operation.
     * @callback module:api/DefaultApi~attendancerestrictiongetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of an attendance restriction
     * Allows the user to view an individual attendance restriction and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the restriction to get.
     * @param {module:api/DefaultApi~attendancerestrictiongetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancerestrictionget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling attendancerestrictionget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendancerestrictionget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancerestrictionget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancerestrictionlist operation.
     * @callback module:api/DefaultApi~attendancerestrictionlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of attendance restrictions
     * Allows the user to view the list of all attendance restrictions.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~attendancerestrictionlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancerestrictionlist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling attendancerestrictionlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling attendancerestrictionlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling attendancerestrictionlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancerestrictionlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancerestrictionsave operation.
     * @callback module:api/DefaultApi~attendancerestrictionsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit an attendance restriction
     * Allows the user to create or edit an attendance restriction.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~attendancerestrictionsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancerestrictionsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancerestrictionsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beacondelete operation.
     * @callback module:api/DefaultApi~beacondeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a beacon profile
     * Allows the user to delete an existing beacon profile.
     * @param {String} token The authentication token.
     * @param {String} id The id of the beacon to delete.
     * @param {module:api/DefaultApi~beacondeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beacondelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling beacondelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling beacondelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacondelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beacondisable operation.
     * @callback module:api/DefaultApi~beacondisableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable beacon support account wide
     * Allows the user to enable or disable beacon usage account wide.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~beacondisableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beacondisable(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling beacondisable");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacondisable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconget operation.
     * @callback module:api/DefaultApi~beacongetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a beacon profile
     * Allows the user to view an individual beacon profile and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the beacon to get.
     * @param {module:api/DefaultApi~beacongetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling beaconget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling beaconget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beaconget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beacongetlocations operation.
     * @callback module:api/DefaultApi~beacongetlocationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the sign-in stations assigned to specific beacons.
     * @param {String} token The authentication token.
     * @param {String} beacons A JSON array containg the beacons data (region, minor and major) values.
     * @param {module:api/DefaultApi~beacongetlocationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beacongetlocations(token, beacons, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling beacongetlocations");
      }
      // verify the required parameter 'beacons' is set
      if (beacons === undefined || beacons === null) {
        throw new Error("Missing the required parameter 'beacons' when calling beacongetlocations");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'beacons': beacons
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacongetlocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beacongetstationlocation operation.
     * @callback module:api/DefaultApi~beacongetstationlocationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the location settings in the specified sign-in station.
     * @param {String} token The authentication token.
     * @param {String} station The id of the sign-in station whose location information has to be retrieved.
     * @param {String} location The id of the location whose information has to be retrieved.
     * @param {module:api/DefaultApi~beacongetstationlocationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beacongetstationlocation(token, station, location, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling beacongetstationlocation");
      }
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling beacongetstationlocation");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling beacongetstationlocation");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'station': station,
        'location': location
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacongetstationlocation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beacongetuuid operation.
     * @callback module:api/DefaultApi~beacongetuuidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the identifier for the account's beacon region (for sign-in stations).
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~beacongetuuidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beacongetuuid(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling beacongetuuid");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beacongetuuid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconlist operation.
     * @callback module:api/DefaultApi~beaconlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of beacon profiles
     * Allows the user to view the list of all beacon profiles without their basic details.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~beaconlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconlist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling beaconlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling beaconlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling beaconlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beaconlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconlistprofiles operation.
     * @callback module:api/DefaultApi~beaconlistprofilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of beacon profiles with their characteristics
     * Allows the user to view the list of all beacon profiles with their basic details.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~beaconlistprofilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconlistprofiles(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling beaconlistprofiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beaconlistprofiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconresetuuid operation.
     * @callback module:api/DefaultApi~beaconresetuuidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate or reset the identifier for the account's beacon region.
     * Allows the user to reset the identifier for the beacon region, generally not necessary.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~beaconresetuuidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconresetuuid(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling beaconresetuuid");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beaconresetuuid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconsave operation.
     * @callback module:api/DefaultApi~beaconsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a beacon profile
     * Allows the user to create or edit a beacon profile.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~beaconsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beaconsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconscanlocations operation.
     * @callback module:api/DefaultApi~beaconscanlocationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if there's location available to sign-in / out.
     * @param {String} token The authentication token.
     * @param {String} beacons A JSON array containg the beacons data (region, minor and major) values.
     * @param {module:api/DefaultApi~beaconscanlocationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconscanlocations(token, beacons, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling beaconscanlocations");
      }
      // verify the required parameter 'beacons' is set
      if (beacons === undefined || beacons === null) {
        throw new Error("Missing the required parameter 'beacons' when calling beaconscanlocations");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'beacons': beacons
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beaconscanlocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconsetuuid operation.
     * @callback module:api/DefaultApi~beaconsetuuidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the identifier for the account's beacon region (for sign-in stations).
     * Allows the user to set the identifier for the account's beacon regions for sign-in stations, generally not necessary as each sign-in station profile generates its own region.
     * @param {String} token The authentication token.
     * @param {String} id The custom region UUID.
     * @param {module:api/DefaultApi~beaconsetuuidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconsetuuid(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling beaconsetuuid");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling beaconsetuuid");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beaconsetuuid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconsilentregions operation.
     * @callback module:api/DefaultApi~beaconsilentregionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the beacon regions defined for silent tracking
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~beaconsilentregionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconsilentregions(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling beaconsilentregions");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beaconsilentregions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconsilentsignin operation.
     * @callback module:api/DefaultApi~beaconsilentsigninCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign-in silently from the location specified by a beacon
     * @param {String} token The authentication token.
     * @param {String} uuid The id of the region the user is in.
     * @param {module:api/DefaultApi~beaconsilentsigninCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconsilentsignin(token, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling beaconsilentsignin");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling beaconsilentsignin");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'uuid': uuid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beaconsilentsignin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the beaconsilentsignout operation.
     * @callback module:api/DefaultApi~beaconsilentsignoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign-out silently from the location specified by a beacon
     * @param {String} token The authentication token.
     * @param {String} uuid The id of the region the user has left.
     * @param {module:api/DefaultApi~beaconsilentsignoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    beaconsilentsignout(token, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling beaconsilentsignout");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling beaconsilentsignout");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'uuid': uuid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/beaconsilentsignout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bgjobgetstatus operation.
     * @callback module:api/DefaultApi~bgjobgetstatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get background job status
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.jobid The ID of the job to get the status. 10 most recent will be returned if not specified.
     * @param {String} opts.jobtype The job type to filter by.
     * @param {module:api/DefaultApi~bgjobgetstatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bgjobgetstatus(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling bgjobgetstatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'jobid': opts['jobid'],
        'jobtype': opts['jobtype']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bgjobgetstatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callExport operation.
     * @callback module:api/DefaultApi~callExportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export AccuCampus data
     * Allows the user to export data from AccuCampus into a CSV, HTML, or Excel format.
     * @param {String} token The authentication token.
     * @param {String} exporttype What to export.
     * @param {String} exportformat The format of the resulting file. Valid types are CSV, HTML, XLS.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filters Pipe separated filters for the export, eg: aaa=val|bbb=val|...
     * @param {module:api/DefaultApi~callExportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    callExport(token, exporttype, exportformat, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling callExport");
      }
      // verify the required parameter 'exporttype' is set
      if (exporttype === undefined || exporttype === null) {
        throw new Error("Missing the required parameter 'exporttype' when calling callExport");
      }
      // verify the required parameter 'exportformat' is set
      if (exportformat === undefined || exportformat === null) {
        throw new Error("Missing the required parameter 'exportformat' when calling callExport");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'exporttype': exporttype,
        'exportformat': exportformat,
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callImport operation.
     * @callback module:api/DefaultApi~callImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import data into AccuCampus
     * Allows the user to import data into AccuCampus via CSV or flat files either manually or automatically using the import utility.
     * @param {String} token The authentication token.
     * @param {String} importtype The kind of data that is being uploaded.
     * @param {String} upload Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).
     * @param {Object} opts Optional parameters
     * @param {String} opts.filename The local name of the uploaded file. For later reference.
     * @param {String} opts.parameters Import parameters, in a key-value pair JSON-serialized object. Eg {'parameter':'value'}.
     * @param {module:api/DefaultApi~callImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    callImport(token, importtype, upload, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling callImport");
      }
      // verify the required parameter 'importtype' is set
      if (importtype === undefined || importtype === null) {
        throw new Error("Missing the required parameter 'importtype' when calling callImport");
      }
      // verify the required parameter 'upload' is set
      if (upload === undefined || upload === null) {
        throw new Error("Missing the required parameter 'upload' when calling callImport");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'importtype': importtype,
        'upload': upload,
        'filename': opts['filename'],
        'parameters': opts['parameters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/import', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the captchagetchallenge operation.
     * @callback module:api/DefaultApi~captchagetchallengeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a captcha challenge that the user must complete to do certain requests.
     * @param {module:api/DefaultApi~captchagetchallengeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    captchagetchallenge(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/captchagetchallenge', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the captchagetimage operation.
     * @callback module:api/DefaultApi~captchagetimageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a captcha image that the user must complete to do certain requests.
     * @param {String} captchatoken The captcha token or ID returned by the captcha.getchallenge action
     * @param {module:api/DefaultApi~captchagetimageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    captchagetimage(captchatoken, callback) {
      let postBody = null;
      // verify the required parameter 'captchatoken' is set
      if (captchatoken === undefined || captchatoken === null) {
        throw new Error("Missing the required parameter 'captchatoken' when calling captchagetimage");
      }

      let pathParams = {
      };
      let queryParams = {
        'captchatoken': captchatoken
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/captchagetimage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changelog operation.
     * @callback module:api/DefaultApi~changelogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the application change log
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~changelogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changelog(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling changelog");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/changelog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientget operation.
     * @callback module:api/DefaultApi~clientgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get client
     * @param {String} token The authentication token.
     * @param {String} client The unique id of the client.
     * @param {Object} opts Optional parameters
     * @param {String} opts.clientname The custom name of the client.
     * @param {module:api/DefaultApi~clientgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientget(token, client, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling clientget");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling clientget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'client': client,
        'clientname': opts['clientname']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/clientget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientlist operation.
     * @callback module:api/DefaultApi~clientlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the clients of the specified conference
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~clientlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientlist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling clientlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling clientlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling clientlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/clientlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientsave operation.
     * @callback module:api/DefaultApi~clientsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves a client
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~clientsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/clientsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientsendmessage operation.
     * @callback module:api/DefaultApi~clientsendmessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a message to a client
     * @param {String} token The authentication token.
     * @param {String} uniqueclientid The unique id of the client.
     * @param {String} message The body of the message to send.
     * @param {module:api/DefaultApi~clientsendmessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientsendmessage(token, uniqueclientid, message, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling clientsendmessage");
      }
      // verify the required parameter 'uniqueclientid' is set
      if (uniqueclientid === undefined || uniqueclientid === null) {
        throw new Error("Missing the required parameter 'uniqueclientid' when calling clientsendmessage");
      }
      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling clientsendmessage");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'uniqueclientid': uniqueclientid,
        'message': message
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/clientsendmessage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the communityinvite operation.
     * @callback module:api/DefaultApi~communityinviteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an invitation to everyone to AccuCampus Communities
     * Allows the user to invite all other users to the AccuCampus Communities.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~communityinviteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    communityinvite(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling communityinvite");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/communityinvite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the communityjoin operation.
     * @callback module:api/DefaultApi~communityjoinCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an invitation for myself to AccuCampus Communities
     * Allows the user to access the AccuCampus Communities.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~communityjoinCallback} callback The callback function, accepting three arguments: error, data, response
     */
    communityjoin(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling communityjoin");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/communityjoin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the compasscategorydelete operation.
     * @callback module:api/DefaultApi~compasscategorydeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a compass category
     * Allows the user to delete an existing compass category.
     * @param {String} token The authentication token.
     * @param {String} id The id of the category to delete.
     * @param {module:api/DefaultApi~compasscategorydeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    compasscategorydelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling compasscategorydelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling compasscategorydelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/compasscategorydelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the compasscategoryget operation.
     * @callback module:api/DefaultApi~compasscategorygetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a compass category
     * Allows the user to view an indvidiaul compass category and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the category to get.
     * @param {module:api/DefaultApi~compasscategorygetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    compasscategoryget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling compasscategoryget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling compasscategoryget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/compasscategoryget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the compasscategorylist operation.
     * @callback module:api/DefaultApi~compasscategorylistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of compass categories
     * Allows the user to view the full list of compass categories.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The first record to return.
     * @param {Number} opts.count The max number of records to return.
     * @param {Boolean} opts.onlywithservices Specified whether only categories with services are returned or all.
     * @param {module:api/DefaultApi~compasscategorylistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    compasscategorylist(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling compasscategorylist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': opts['from'],
        'count': opts['count'],
        'onlywithservices': opts['onlywithservices']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/compasscategorylist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the compasscategorysave operation.
     * @callback module:api/DefaultApi~compasscategorysaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a compass category
     * Allows the user to create or edit a compass category.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~compasscategorysaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    compasscategorysave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/compasscategorysave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the compassservicelist operation.
     * @callback module:api/DefaultApi~compassservicelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the services added to the compass
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.category The id of the category to filter the services.
     * @param {module:api/DefaultApi~compassservicelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    compassservicelist(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling compassservicelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'category': opts['category']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/compassservicelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the compassservicelistlocations operation.
     * @callback module:api/DefaultApi~compassservicelistlocationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the locations where a service added to the compass is available
     * @param {String} token The authentication token.
     * @param {String} serviceid The id of the service to get its locations.
     * @param {module:api/DefaultApi~compassservicelistlocationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    compassservicelistlocations(token, serviceid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling compassservicelistlocations");
      }
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling compassservicelistlocations");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'serviceid': serviceid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/compassservicelistlocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computerlabdeletecomputer operation.
     * @callback module:api/DefaultApi~computerlabdeletecomputerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a computer
     * Allows the user to delete an existing computer.
     * @param {String} token The authentication token.
     * @param {String} id The unique device id of the computer to delete.
     * @param {module:api/DefaultApi~computerlabdeletecomputerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    computerlabdeletecomputer(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling computerlabdeletecomputer");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling computerlabdeletecomputer");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/computerlabdeletecomputer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computerlabgetcomputer operation.
     * @callback module:api/DefaultApi~computerlabgetcomputerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a computer
     * Allows the user to search and view an individual computer and its details.
     * @param {String} token The authentication token.
     * @param {String} id The unique device id of the computer to get.
     * @param {module:api/DefaultApi~computerlabgetcomputerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    computerlabgetcomputer(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling computerlabgetcomputer");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling computerlabgetcomputer");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/computerlabgetcomputer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computerlabgetsettings operation.
     * @callback module:api/DefaultApi~computerlabgetsettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loads the settings for a computer lab
     * Loads the settings for a computer lab.
     * @param {String} id The id of the computer lab/location.
     * @param {module:api/DefaultApi~computerlabgetsettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    computerlabgetsettings(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling computerlabgetsettings");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/computerlabgetsettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computerlabissignedin operation.
     * @callback module:api/DefaultApi~computerlabissignedinCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets whether a user is signed-in or not.
     * @param {String} station The id of the sign-in station to get.
     * @param {String} user The card of the user.
     * @param {module:api/DefaultApi~computerlabissignedinCallback} callback The callback function, accepting three arguments: error, data, response
     */
    computerlabissignedin(station, user, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling computerlabissignedin");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling computerlabissignedin");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'user': user
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/computerlabissignedin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computerlablistcomputers operation.
     * @callback module:api/DefaultApi~computerlablistcomputersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of computers
     * Allows the user to view the list of all computers.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.location The id of the location whose computers have to be returned.
     * @param {Boolean} opts.freeonly If true, only free computers will be returned.
     * @param {module:api/DefaultApi~computerlablistcomputersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    computerlablistcomputers(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling computerlablistcomputers");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling computerlablistcomputers");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling computerlablistcomputers");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'location': opts['location'],
        'freeonly': opts['freeonly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/computerlablistcomputers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computerlablistlabs operation.
     * @callback module:api/DefaultApi~computerlablistlabsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of the locations that use the Computer Lab add-on
     * Allows the user to view the list of all labs.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~computerlablistlabsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    computerlablistlabs(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling computerlablistlabs");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/computerlablistlabs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computerlabliststations operation.
     * @callback module:api/DefaultApi~computerlabliststationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of sign-in stations available for computer labs.
     * Allows the user to view the list of sign-in stations that are available for computer labs.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~computerlabliststationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    computerlabliststations(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling computerlabliststations");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/computerlabliststations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computerlabsavecomputer operation.
     * @callback module:api/DefaultApi~computerlabsavecomputerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a computer
     * Allows the user to create or edit a computer.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~computerlabsavecomputerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    computerlabsavecomputer(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/computerlabsavecomputer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computerlabsavesettings operation.
     * @callback module:api/DefaultApi~computerlabsavesettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves the settings for a computer lab
     * Saves the settings for a computer lab.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~computerlabsavesettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    computerlabsavesettings(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/computerlabsavesettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computerlabsaveswipe operation.
     * @callback module:api/DefaultApi~computerlabsaveswipeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a new swipe from a computer in a computer lab.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~computerlabsaveswipeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    computerlabsaveswipe(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/computerlabsaveswipe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deadendrecordingdelete operation.
     * @callback module:api/DefaultApi~deadendrecordingdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a dead-end record group
     * Allows the user to delete a dead end record group.
     * @param {String} token The authentication token.
     * @param {String} hierarchykey The hierarchy key of the record to delete.
     * @param {module:api/DefaultApi~deadendrecordingdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deadendrecordingdelete(token, hierarchykey, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deadendrecordingdelete");
      }
      // verify the required parameter 'hierarchykey' is set
      if (hierarchykey === undefined || hierarchykey === null) {
        throw new Error("Missing the required parameter 'hierarchykey' when calling deadendrecordingdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'hierarchykey': hierarchykey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/deadendrecordingdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deadendrecordinglist operation.
     * @callback module:api/DefaultApi~deadendrecordinglistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the recorded dead ends, if enabled
     * Allows the user to view the list of dead ends, provided dead end recording is enabled for the account.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~deadendrecordinglistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deadendrecordinglist(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deadendrecordinglist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/deadendrecordinglist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deadendrecordinglistcomments operation.
     * @callback module:api/DefaultApi~deadendrecordinglistcommentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the comments for a specific dead end
     * Allows the user to view the comments made on dead end sessions.
     * @param {String} token The authentication token.
     * @param {String} hierarchykey The hierarchy key of the record to get the feedback.
     * @param {module:api/DefaultApi~deadendrecordinglistcommentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deadendrecordinglistcomments(token, hierarchykey, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deadendrecordinglistcomments");
      }
      // verify the required parameter 'hierarchykey' is set
      if (hierarchykey === undefined || hierarchykey === null) {
        throw new Error("Missing the required parameter 'hierarchykey' when calling deadendrecordinglistcomments");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'hierarchykey': hierarchykey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/deadendrecordinglistcomments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deadendrecordingsave operation.
     * @callback module:api/DefaultApi~deadendrecordingsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves a dead-end record
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~deadendrecordingsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deadendrecordingsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/deadendrecordingsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the departmentdelete operation.
     * @callback module:api/DefaultApi~departmentdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a college department
     * Allows the user to delete an existing college department.
     * @param {String} token The authentication token.
     * @param {String} id The id of the department to delete.
     * @param {module:api/DefaultApi~departmentdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    departmentdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling departmentdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling departmentdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/departmentdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the departmentget operation.
     * @callback module:api/DefaultApi~departmentgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a college department
     * Allows the user to view an individual college department and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the department to get.
     * @param {module:api/DefaultApi~departmentgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    departmentget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling departmentget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling departmentget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/departmentget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the departmentlist operation.
     * @callback module:api/DefaultApi~departmentlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of college departments
     * Allows the user to view the full list of college departments.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~departmentlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    departmentlist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling departmentlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling departmentlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling departmentlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/departmentlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the departmentsave operation.
     * @callback module:api/DefaultApi~departmentsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a college department
     * Allows the user to create or edit a college department.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~departmentsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    departmentsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/departmentsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doc operation.
     * @callback module:api/DefaultApi~docCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the documentation
     * Retrieves the list of actions available in the system.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.excludeanonymous If true it excludes the anonymous actions from the returned list.
     * @param {module:api/DefaultApi~docCallback} callback The callback function, accepting three arguments: error, data, response
     */
    doc(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'excludeanonymous': opts['excludeanonymous']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/doc', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the easyloginaddbgimage operation.
     * @callback module:api/DefaultApi~easyloginaddbgimageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds background image for the login
     * Allows the user to set the background image that all users will see when logging into an AccuCampus account not using SSO.
     * @param {String} token The authentication token.
     * @param {String} upload Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).
     * @param {String} filename The original filename, needed to process the file.
     * @param {module:api/DefaultApi~easyloginaddbgimageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    easyloginaddbgimage(token, upload, filename, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling easyloginaddbgimage");
      }
      // verify the required parameter 'upload' is set
      if (upload === undefined || upload === null) {
        throw new Error("Missing the required parameter 'upload' when calling easyloginaddbgimage");
      }
      // verify the required parameter 'filename' is set
      if (filename === undefined || filename === null) {
        throw new Error("Missing the required parameter 'filename' when calling easyloginaddbgimage");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'upload': upload,
        'filename': filename
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/easyloginaddbgimage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventchecksessions operation.
     * @callback module:api/DefaultApi~eventchecksessionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an event's sessions according to their schedule
     * Allows the user to edit event sessions.
     * @param {String} token The authentication token.
     * @param {String} eventid The id of the event to check.
     * @param {Boolean} autorepair True to automatically fix the invalid sessions.
     * @param {module:api/DefaultApi~eventchecksessionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventchecksessions(token, eventid, autorepair, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventchecksessions");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling eventchecksessions");
      }
      // verify the required parameter 'autorepair' is set
      if (autorepair === undefined || autorepair === null) {
        throw new Error("Missing the required parameter 'autorepair' when calling eventchecksessions");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'eventid': eventid,
        'autorepair': autorepair
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventchecksessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventdelete operation.
     * @callback module:api/DefaultApi~eventdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a course
     * Allows the user to delete an existing course.
     * @param {String} token The authentication token.
     * @param {String} id The id of the event to delete.
     * @param {module:api/DefaultApi~eventdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventget operation.
     * @callback module:api/DefaultApi~eventgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a course
     * Allows the user to view an individual course and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the event to get.
     * @param {module:api/DefaultApi~eventgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventgetsessionsbydate operation.
     * @callback module:api/DefaultApi~eventgetsessionsbydateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of courses by date
     * Allows the user to view a list of courses by date.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.location The location to filter the events.
     * @param {Date} opts._date The date to filter the events. Today will be used if this parameter is omitted.
     * @param {String} opts.type Type of event to list.
     * @param {module:api/DefaultApi~eventgetsessionsbydateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventgetsessionsbydate(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventgetsessionsbydate");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'location': opts['location'],
        'date': opts['_date'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventgetsessionsbydate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventlist operation.
     * @callback module:api/DefaultApi~eventlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of courses
     * Allows the user to view the full list of courses.
     * @param {String} token The authentication token.
     * @param {String} from The first record to return.
     * @param {String} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false.
     * @param {String} opts.termid Id of the term to list the events. Null to list all events.
     * @param {module:api/DefaultApi~eventlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventlist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling eventlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling eventlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'summaryonly': opts['summaryonly'],
        'termid': opts['termid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventlistregistered operation.
     * @callback module:api/DefaultApi~eventlistregisteredCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of courses I am registered to
     * Allows the user to view the courses they are registered to.
     * @param {String} token The authentication token.
     * @param {String} from The first record to return.
     * @param {String} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false.
     * @param {String} opts.termid Id of the term to list the events. Null to list all events.
     * @param {module:api/DefaultApi~eventlistregisteredCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventlistregistered(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventlistregistered");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling eventlistregistered");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling eventlistregistered");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'summaryonly': opts['summaryonly'],
        'termid': opts['termid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventlistregistered', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventregaddme operation.
     * @callback module:api/DefaultApi~eventregaddmeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register current user to a course
     * Allows the user to make themselves available for individual courses.
     * @param {String} token The authentication token.
     * @param {String} eventid The id of the event.
     * @param {String} listname The name of the list where the user has to be registered.
     * @param {module:api/DefaultApi~eventregaddmeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventregaddme(token, eventid, listname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventregaddme");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling eventregaddme");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventregaddme");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'eventid': eventid,
        'listname': listname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventregaddme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventregaddmetoall operation.
     * @callback module:api/DefaultApi~eventregaddmetoallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register current user to all courses
     * Allows the user to make themselves available for all courses.
     * @param {String} token The authentication token.
     * @param {String} listname The name of the list where the user has to be registered.
     * @param {module:api/DefaultApi~eventregaddmetoallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventregaddmetoall(token, listname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventregaddmetoall");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventregaddmetoall");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'listname': listname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventregaddmetoall', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventregaddmetogroup operation.
     * @callback module:api/DefaultApi~eventregaddmetogroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register current user to a course group
     * Allows the user to make themselves available for a course group.
     * @param {String} token The authentication token.
     * @param {String} codegroup The code used to group events.
     * @param {String} listname The name of the list where the user has to be registered.
     * @param {module:api/DefaultApi~eventregaddmetogroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventregaddmetogroup(token, codegroup, listname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventregaddmetogroup");
      }
      // verify the required parameter 'codegroup' is set
      if (codegroup === undefined || codegroup === null) {
        throw new Error("Missing the required parameter 'codegroup' when calling eventregaddmetogroup");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventregaddmetogroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'codegroup': codegroup,
        'listname': listname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventregaddmetogroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventregadduser operation.
     * @callback module:api/DefaultApi~eventregadduserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a user to a course for attendance
     * Allows the user to register a user to a course.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to add.
     * @param {String} eventid The id of the event.
     * @param {String} listname The name of the list where the user has to be registered.
     * @param {module:api/DefaultApi~eventregadduserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventregadduser(token, userid, eventid, listname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventregadduser");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling eventregadduser");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling eventregadduser");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventregadduser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'eventid': eventid,
        'listname': listname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventregadduser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventregaddusertoall operation.
     * @callback module:api/DefaultApi~eventregaddusertoallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a user to assist with all courses
     * Allows the user to make a staff member available to assist with all courses.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to add.
     * @param {String} listname The name of the list where the user has to be registered.
     * @param {module:api/DefaultApi~eventregaddusertoallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventregaddusertoall(token, userid, listname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventregaddusertoall");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling eventregaddusertoall");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventregaddusertoall");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'listname': listname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventregaddusertoall', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventregaddusertogroup operation.
     * @callback module:api/DefaultApi~eventregaddusertogroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a user to an course group
     * Allows the user to make a staff member available for a course group.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to add.
     * @param {String} codegroup The code used to group events.
     * @param {String} listname The name of the list where the user has to be registered.
     * @param {module:api/DefaultApi~eventregaddusertogroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventregaddusertogroup(token, userid, codegroup, listname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventregaddusertogroup");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling eventregaddusertogroup");
      }
      // verify the required parameter 'codegroup' is set
      if (codegroup === undefined || codegroup === null) {
        throw new Error("Missing the required parameter 'codegroup' when calling eventregaddusertogroup");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventregaddusertogroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'codegroup': codegroup,
        'listname': listname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventregaddusertogroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventreggetevents operation.
     * @callback module:api/DefaultApi~eventreggeteventsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View course registration by user
     * Allows the user to view all courses a given user is registered to, provided they have permission to view that user.
     * @param {String} token The authentication token.
     * @param {String} userid The user id to list events.
     * @param {String} listname The name of the list where the user is registered.
     * @param {Object} opts Optional parameters
     * @param {String} opts.termid The term id to list events.
     * @param {String} opts.namefilter The value used to filter the events by name.
     * @param {module:api/DefaultApi~eventreggeteventsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventreggetevents(token, userid, listname, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventreggetevents");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling eventreggetevents");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventreggetevents");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'listname': listname,
        'termid': opts['termid'],
        'namefilter': opts['namefilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventreggetevents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventreggetgroups operation.
     * @callback module:api/DefaultApi~eventreggetgroupsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the course group registrations of a user
     * Allows the user to view the course groups a staff member is available for.
     * @param {String} token The authentication token.
     * @param {String} userid The user id to list events.
     * @param {String} listname The name of the list where the user is registered.
     * @param {module:api/DefaultApi~eventreggetgroupsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventreggetgroups(token, userid, listname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventreggetgroups");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling eventreggetgroups");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventreggetgroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'listname': listname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventreggetgroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventreggetmyevents operation.
     * @callback module:api/DefaultApi~eventreggetmyeventsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the event registrations of the current user
     * @param {String} token The authentication token.
     * @param {String} listname The name of the list where the user is registered.
     * @param {Object} opts Optional parameters
     * @param {String} opts.termid The term id to list events.
     * @param {String} opts.namefilter The value used to filter the events by name.
     * @param {module:api/DefaultApi~eventreggetmyeventsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventreggetmyevents(token, listname, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventreggetmyevents");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventreggetmyevents");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'listname': listname,
        'termid': opts['termid'],
        'namefilter': opts['namefilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventreggetmyevents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventreggetmygroups operation.
     * @callback module:api/DefaultApi~eventreggetmygroupsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all current user registrations to course groups
     * Allows the user to view all his registrations to course groups.
     * @param {String} token The authentication token.
     * @param {String} listname The name of the list where the user is registered.
     * @param {module:api/DefaultApi~eventreggetmygroupsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventreggetmygroups(token, listname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventreggetmygroups");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventreggetmygroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'listname': listname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventreggetmygroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventreggetusers operation.
     * @callback module:api/DefaultApi~eventreggetusersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View course registration
     * Allows the user to view all users registered for an individual course.
     * @param {String} token The authentication token.
     * @param {String} eventid The event id to list users.
     * @param {String} listname The name of the list to get.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~eventreggetusersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventreggetusers(token, eventid, listname, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventreggetusers");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling eventreggetusers");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventreggetusers");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'eventid': eventid,
        'listname': listname,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventreggetusers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventreggetusersfromgroup operation.
     * @callback module:api/DefaultApi~eventreggetusersfromgroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the registrations for a course group
     * Allows the user the get the staff members registered to a specific course group
     * @param {String} token The authentication token.
     * @param {String} codegroup The code group to list users.
     * @param {String} listname The name of the list to get.
     * @param {module:api/DefaultApi~eventreggetusersfromgroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventreggetusersfromgroup(token, codegroup, listname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventreggetusersfromgroup");
      }
      // verify the required parameter 'codegroup' is set
      if (codegroup === undefined || codegroup === null) {
        throw new Error("Missing the required parameter 'codegroup' when calling eventreggetusersfromgroup");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventreggetusersfromgroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'codegroup': codegroup,
        'listname': listname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventreggetusersfromgroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventreggetuserstoall operation.
     * @callback module:api/DefaultApi~eventreggetuserstoallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the users that are registered to all courses
     * Allows the user to view all staff members available for all courses.
     * @param {String} token The authentication token.
     * @param {String} listname The name of the list to get.
     * @param {module:api/DefaultApi~eventreggetuserstoallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventreggetuserstoall(token, listname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventreggetuserstoall");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventreggetuserstoall");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'listname': listname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventreggetuserstoall', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventregremoveme operation.
     * @callback module:api/DefaultApi~eventregremovemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unregister current user from a course
     * Allows the user to remove themselves from registration to a course.
     * @param {String} token The authentication token.
     * @param {String} eventid The id of the event.
     * @param {String} listname The name of the list where the user is registered.
     * @param {module:api/DefaultApi~eventregremovemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventregremoveme(token, eventid, listname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventregremoveme");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling eventregremoveme");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventregremoveme");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'eventid': eventid,
        'listname': listname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventregremoveme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventregremovemefromall operation.
     * @callback module:api/DefaultApi~eventregremovemefromallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove current user from the registration to all courses
     * Allows the user to remove themselves from availability to all courses.
     * @param {String} token The authentication token.
     * @param {String} listname The name of the list where the user is registered.
     * @param {module:api/DefaultApi~eventregremovemefromallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventregremovemefromall(token, listname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventregremovemefromall");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventregremovemefromall");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'listname': listname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventregremovemefromall', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventregremovemefromgroup operation.
     * @callback module:api/DefaultApi~eventregremovemefromgroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove current user from a course group
     * Allows the user to remove themselves from availability to a course group.
     * @param {String} token The authentication token.
     * @param {String} codegroup The code group of the events/courses.
     * @param {String} listname The name of the list where the user is registered.
     * @param {module:api/DefaultApi~eventregremovemefromgroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventregremovemefromgroup(token, codegroup, listname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventregremovemefromgroup");
      }
      // verify the required parameter 'codegroup' is set
      if (codegroup === undefined || codegroup === null) {
        throw new Error("Missing the required parameter 'codegroup' when calling eventregremovemefromgroup");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventregremovemefromgroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'codegroup': codegroup,
        'listname': listname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventregremovemefromgroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventregremoveuser operation.
     * @callback module:api/DefaultApi~eventregremoveuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user from a course
     * Allows the user to remove a user from a course's registration.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to remove.
     * @param {String} eventid The id of the event.
     * @param {String} listname The name of the list where the user is registered.
     * @param {module:api/DefaultApi~eventregremoveuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventregremoveuser(token, userid, eventid, listname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventregremoveuser");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling eventregremoveuser");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling eventregremoveuser");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventregremoveuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'eventid': eventid,
        'listname': listname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventregremoveuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventregremoveuserfromall operation.
     * @callback module:api/DefaultApi~eventregremoveuserfromallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user from the registration to all courses
     * Allows the user to remove a staff member from availability to all courses.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to remove.
     * @param {String} listname The name of the list where the user is registered.
     * @param {module:api/DefaultApi~eventregremoveuserfromallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventregremoveuserfromall(token, userid, listname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventregremoveuserfromall");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling eventregremoveuserfromall");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventregremoveuserfromall");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'listname': listname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventregremoveuserfromall', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventregremoveuserfromgroup operation.
     * @callback module:api/DefaultApi~eventregremoveuserfromgroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user from a course group
     * Allows the user to remove a staff member from availability to a course group.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to remove.
     * @param {String} codegroup The code group of the events/courses.
     * @param {String} listname The name of the list where the user is registered.
     * @param {module:api/DefaultApi~eventregremoveuserfromgroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventregremoveuserfromgroup(token, userid, codegroup, listname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventregremoveuserfromgroup");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling eventregremoveuserfromgroup");
      }
      // verify the required parameter 'codegroup' is set
      if (codegroup === undefined || codegroup === null) {
        throw new Error("Missing the required parameter 'codegroup' when calling eventregremoveuserfromgroup");
      }
      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling eventregremoveuserfromgroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'codegroup': codegroup,
        'listname': listname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventregremoveuserfromgroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsave operation.
     * @callback module:api/DefaultApi~eventsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a course
     * Allows the user to create or edit a course.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~eventsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsearchgroup operation.
     * @callback module:api/DefaultApi~eventsearchgroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for the available event groups
     * @param {String} token The authentication token.
     * @param {String} query Query to search event groups.
     * @param {module:api/DefaultApi~eventsearchgroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventsearchgroup(token, query, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventsearchgroup");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling eventsearchgroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'query': query
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventsearchgroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportlisttypes operation.
     * @callback module:api/DefaultApi~exportlisttypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists available export types
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~exportlisttypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportlisttypes(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling exportlisttypes");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/exportlisttypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featurelist operation.
     * @callback module:api/DefaultApi~featurelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the available features.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~featurelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    featurelist(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling featurelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/featurelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the holidaylist operation.
     * @callback module:api/DefaultApi~holidaylistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of entered holidays
     * Allows the user to view all holidays entered.
     * @param {String} token The authentication token.
     * @param {String} term The term to get holidays from.
     * @param {module:api/DefaultApi~holidaylistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    holidaylist(token, term, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling holidaylist");
      }
      // verify the required parameter 'term' is set
      if (term === undefined || term === null) {
        throw new Error("Missing the required parameter 'term' when calling holidaylist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'term': term
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/holidaylist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the holidaysave operation.
     * @callback module:api/DefaultApi~holidaysaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a list of holidays
     * Allows the user to create or edit holidays.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~holidaysaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    holidaysave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/holidaysave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the holidaysuggest operation.
     * @callback module:api/DefaultApi~holidaysuggestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the holiday suggestions in the given term
     * Allows the user to view the holiday suggestions for each term.
     * @param {String} token The authentication token.
     * @param {String} term The term to get holidays from.
     * @param {module:api/DefaultApi~holidaysuggestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    holidaysuggest(token, term, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling holidaysuggest");
      }
      // verify the required parameter 'term' is set
      if (term === undefined || term === null) {
        throw new Error("Missing the required parameter 'term' when calling holidaysuggest");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'term': term
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/holidaysuggest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importlisttypes operation.
     * @callback module:api/DefaultApi~importlisttypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists available import types
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~importlisttypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importlisttypes(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling importlisttypes");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/importlisttypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactiondelete operation.
     * @callback module:api/DefaultApi~interactiondeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an interaction
     * @param {String} token The authentication token.
     * @param {String} id The id of the interaction to delete.
     * @param {module:api/DefaultApi~interactiondeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    interactiondelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling interactiondelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling interactiondelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/interactiondelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionfeed operation.
     * @callback module:api/DefaultApi~interactionfeedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the interactions feed
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startdate If set, only interactions that happened after this date are returned.
     * @param {Boolean} opts._public Specifies whether to return public or private interactions.
     * @param {String} opts.contexttype The type of the context of the interactions to return.
     * @param {String} opts.contextid The id of the context of the interactions to return.
     * @param {String} opts.types The  comma separated types of the interactions to return.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {Boolean} opts.showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.
     * @param {Boolean} opts.orderdescending If true, last interactions will be shown first. Otherwise, interactions will be ordered ascendantly.
     * @param {module:api/DefaultApi~interactionfeedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    interactionfeed(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling interactionfeed");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling interactionfeed");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling interactionfeed");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'startdate': opts['startdate'],
        'public': opts['_public'],
        'contexttype': opts['contexttype'],
        'contextid': opts['contextid'],
        'types': opts['types'],
        'photosize': opts['photosize'],
        'showdefaultphoto': opts['showdefaultphoto'],
        'orderdescending': opts['orderdescending']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/interactionfeed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionget operation.
     * @callback module:api/DefaultApi~interactiongetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View an interaction
     * @param {String} token The authentication token.
     * @param {String} id The id of the interaction.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.thumbnailmediasize The size in pixels of the thumbnail media URLs returned. Defaults to 680. If the size specified is not available, a similar one will be returned.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~interactiongetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    interactionget(token, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling interactionget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling interactionget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'thumbnailmediasize': opts['thumbnailmediasize'],
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/interactionget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionlistprivatesummary operation.
     * @callback module:api/DefaultApi~interactionlistprivatesummaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user's latest private interactions
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {Boolean} opts.showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.
     * @param {module:api/DefaultApi~interactionlistprivatesummaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    interactionlistprivatesummary(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling interactionlistprivatesummary");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'photosize': opts['photosize'],
        'showdefaultphoto': opts['showdefaultphoto']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/interactionlistprivatesummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionsave operation.
     * @callback module:api/DefaultApi~interactionsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save an interaction
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~interactionsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    interactionsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/interactionsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licenseacceptagreement operation.
     * @callback module:api/DefaultApi~licenseacceptagreementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept the license agreement
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~licenseacceptagreementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    licenseacceptagreement(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling licenseacceptagreement");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/licenseacceptagreement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licensegetagreementstatus operation.
     * @callback module:api/DefaultApi~licensegetagreementstatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if license agreement has been accepted
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~licensegetagreementstatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    licensegetagreementstatus(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling licensegetagreementstatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/licensegetagreementstatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licensegetcurrent operation.
     * @callback module:api/DefaultApi~licensegetcurrentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current license information
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {module:api/DefaultApi~licensegetcurrentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    licensegetcurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/licensegetcurrent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licenserenew operation.
     * @callback module:api/DefaultApi~licenserenewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contact Engineerica in order to renew the AccuCampus subscription
     * Allows the user to select the option to contact Engineerica when the AccuCampus account is nearing its renewal date.
     * @param {String} token The authentication token.
     * @param {String} email The e-mail of the user sending the request.
     * @param {String} phonenumber The phone number of the user sending the request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.jobtitle The job title of the user sending the request.
     * @param {String} opts.institution The institution of the user sending the request.
     * @param {String} opts.comments Comments entered by the user sending the request.
     * @param {module:api/DefaultApi~licenserenewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    licenserenew(token, email, phonenumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling licenserenew");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling licenserenew");
      }
      // verify the required parameter 'phonenumber' is set
      if (phonenumber === undefined || phonenumber === null) {
        throw new Error("Missing the required parameter 'phonenumber' when calling licenserenew");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'email': email,
        'phonenumber': phonenumber,
        'jobtitle': opts['jobtitle'],
        'institution': opts['institution'],
        'comments': opts['comments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/licenserenew', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the likedelete operation.
     * @callback module:api/DefaultApi~likedeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a like
     * @param {String} token The authentication token.
     * @param {String} interactionid The id of the interaction to unlike.
     * @param {module:api/DefaultApi~likedeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    likedelete(token, interactionid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling likedelete");
      }
      // verify the required parameter 'interactionid' is set
      if (interactionid === undefined || interactionid === null) {
        throw new Error("Missing the required parameter 'interactionid' when calling likedelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'interactionid': interactionid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/likedelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the likelist operation.
     * @callback module:api/DefaultApi~likelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the likes associated to a target
     * @param {String} token The authentication token.
     * @param {String} interactionid The id of the interaction to unlike.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~likelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    likelist(token, interactionid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling likelist");
      }
      // verify the required parameter 'interactionid' is set
      if (interactionid === undefined || interactionid === null) {
        throw new Error("Missing the required parameter 'interactionid' when calling likelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'interactionid': interactionid,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/likelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the likesave operation.
     * @callback module:api/DefaultApi~likesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a like
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~likesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    likesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/likesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listtimezones operation.
     * @callback module:api/DefaultApi~listtimezonesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the available timezones
     * @param {module:api/DefaultApi~listtimezonesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listtimezones(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listtimezones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationdelete operation.
     * @callback module:api/DefaultApi~locationdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a location
     * Allows the user to delete an existing location.
     * @param {String} token The authentication token.
     * @param {String} id The id of the location to delete.
     * @param {module:api/DefaultApi~locationdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    locationdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling locationdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling locationdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/locationdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationget operation.
     * @callback module:api/DefaultApi~locationgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a location
     * Allows the user to search and view an individual location and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the location to get.
     * @param {module:api/DefaultApi~locationgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    locationget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling locationget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling locationget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/locationget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationlist operation.
     * @callback module:api/DefaultApi~locationlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of locations
     * Allows the user to view the list of all locations to which they are scoped.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locations The comma-separated list containing the ids of the locations to list.
     * @param {Boolean} opts.sortbygroup True to list locations sorted by the 'Located In' property. Defaults to false.
     * @param {module:api/DefaultApi~locationlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    locationlist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling locationlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling locationlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling locationlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'locations': opts['locations'],
        'sortbygroup': opts['sortbygroup']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/locationlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationsave operation.
     * @callback module:api/DefaultApi~locationsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a location
     * Allows the user to create or edit a location.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~locationsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    locationsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/locationsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/DefaultApi~loginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * @param {String} domain The account domain to login.
     * @param {String} username The username (email) of the user to login as.
     * @param {String} password The password of the user to login as.
     * @param {String} method The authentication method. Valid values are 'token' and 'cookie'.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.rememberme If true then the session will not expire.
     * @param {module:api/DefaultApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    login(domain, username, password, method, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling login");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling login");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling login");
      }
      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
        'domain': domain,
        'username': username,
        'password': password,
        'method': method,
        'rememberme': opts['rememberme']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/DefaultApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token used to login.
     * @param {module:api/DefaultApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logout(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediacheckin operation.
     * @callback module:api/DefaultApi~mediacheckinCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check in media item
     * Allows the user to check in a media item.
     * @param {String} token The authentication token.
     * @param {String} media The id of the media item to checkin.
     * @param {Date} checkindate The checkout date.
     * @param {Object} opts Optional parameters
     * @param {String} opts.notes The notes of the checkout.
     * @param {module:api/DefaultApi~mediacheckinCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediacheckin(token, media, checkindate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling mediacheckin");
      }
      // verify the required parameter 'media' is set
      if (media === undefined || media === null) {
        throw new Error("Missing the required parameter 'media' when calling mediacheckin");
      }
      // verify the required parameter 'checkindate' is set
      if (checkindate === undefined || checkindate === null) {
        throw new Error("Missing the required parameter 'checkindate' when calling mediacheckin");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'media': media,
        'checkindate': checkindate,
        'notes': opts['notes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mediacheckin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediacheckout operation.
     * @callback module:api/DefaultApi~mediacheckoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check out media item
     * Allows the user to check out a media item.
     * @param {String} token The authentication token.
     * @param {String} media The id of the media item to checkout.
     * @param {String} user The id of the user that is checking the item out.
     * @param {Date} checkoutdate The checkout date.
     * @param {Date} duedate The date when the checkout is due.
     * @param {Object} opts Optional parameters
     * @param {String} opts.staff The id of the staff member related to the checkout.
     * @param {String} opts.event The id of the event related to the checkout.
     * @param {String} opts.notes The notes of the checkout.
     * @param {module:api/DefaultApi~mediacheckoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediacheckout(token, media, user, checkoutdate, duedate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling mediacheckout");
      }
      // verify the required parameter 'media' is set
      if (media === undefined || media === null) {
        throw new Error("Missing the required parameter 'media' when calling mediacheckout");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling mediacheckout");
      }
      // verify the required parameter 'checkoutdate' is set
      if (checkoutdate === undefined || checkoutdate === null) {
        throw new Error("Missing the required parameter 'checkoutdate' when calling mediacheckout");
      }
      // verify the required parameter 'duedate' is set
      if (duedate === undefined || duedate === null) {
        throw new Error("Missing the required parameter 'duedate' when calling mediacheckout");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'media': media,
        'user': user,
        'staff': opts['staff'],
        'event': opts['event'],
        'checkoutdate': checkoutdate,
        'duedate': duedate,
        'notes': opts['notes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mediacheckout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediacheckoutlist operation.
     * @callback module:api/DefaultApi~mediacheckoutlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of past media checkouts
     * Allows the user to view a list of all past checkouts
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.media Used to filter the checkouts of a specific media item.
     * @param {String} opts.user Used to filter the checkouts made by a specific user.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~mediacheckoutlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediacheckoutlist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling mediacheckoutlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling mediacheckoutlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling mediacheckoutlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'media': opts['media'],
        'user': opts['user'],
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mediacheckoutlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediadelete operation.
     * @callback module:api/DefaultApi~mediadeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a media item
     * Allows the user to delete an existing media item.
     * @param {String} token The authentication token.
     * @param {String} id The id of the media item to delete.
     * @param {module:api/DefaultApi~mediadeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediadelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling mediadelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mediadelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mediadelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediadeletecheckoutlog operation.
     * @callback module:api/DefaultApi~mediadeletecheckoutlogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a media checkout log
     * Allows the user to delete a media item's checkout log.
     * @param {String} token The authentication token.
     * @param {String} id The id of the checkout log to delete.
     * @param {module:api/DefaultApi~mediadeletecheckoutlogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediadeletecheckoutlog(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling mediadeletecheckoutlog");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mediadeletecheckoutlog");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mediadeletecheckoutlog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaget operation.
     * @callback module:api/DefaultApi~mediagetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a media item
     * Allows the user to view an individual media item and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the media item to get.
     * @param {module:api/DefaultApi~mediagetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling mediaget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mediaget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mediaget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediagetbycode operation.
     * @callback module:api/DefaultApi~mediagetbycodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search media item by unique code
     * Allows the user to search for media items by their unique code.
     * @param {String} token The authentication token.
     * @param {String} code The code of the media item to get.
     * @param {Object} opts Optional parameters
     * @param {String} opts.location The location where to look for the media item.
     * @param {module:api/DefaultApi~mediagetbycodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediagetbycode(token, code, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling mediagetbycode");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling mediagetbycode");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'code': code,
        'location': opts['location']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mediagetbycode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediagetcheckout operation.
     * @callback module:api/DefaultApi~mediagetcheckoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a media item checkout information
     * Allows the user to view a media item's checkout information.
     * @param {String} token The authentication token.
     * @param {String} id The id of the media item whose checkout information has to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~mediagetcheckoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediagetcheckout(token, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling mediagetcheckout");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mediagetcheckout");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mediagetcheckout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediagetcheckoutlog operation.
     * @callback module:api/DefaultApi~mediagetcheckoutlogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a media checkout log
     * Allows the user to view a media item's checkout history.
     * @param {String} token The authentication token.
     * @param {String} id The id of the media item whose checkout information has to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~mediagetcheckoutlogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediagetcheckoutlog(token, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling mediagetcheckoutlog");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mediagetcheckoutlog");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mediagetcheckoutlog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the medialist operation.
     * @callback module:api/DefaultApi~medialistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of media items
     * Allows the user to view the list of all media items tied to locations in which the user is scoped.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.status Used to filter the media items by their checkout status (0 = CheckedIn, 1 = CheckedOut, Unspecified = All).
     * @param {String} opts.user Used to filter the media items that are checked-out by a specific user.
     * @param {module:api/DefaultApi~medialistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    medialist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling medialist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling medialist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling medialist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'status': opts['status'],
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/medialist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediasave operation.
     * @callback module:api/DefaultApi~mediasaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a media item
     * Allows the user to create or edit a media item.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~mediasaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediasave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mediasave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediatypedelete operation.
     * @callback module:api/DefaultApi~mediatypedeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a media type
     * Allows the user to delete an existing media type.
     * @param {String} token The authentication token.
     * @param {String} id The id of the media type to delete.
     * @param {module:api/DefaultApi~mediatypedeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediatypedelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling mediatypedelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mediatypedelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mediatypedelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediatypeget operation.
     * @callback module:api/DefaultApi~mediatypegetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a media type
     * Allows the user to view a media type and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the media type to get.
     * @param {module:api/DefaultApi~mediatypegetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediatypeget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling mediatypeget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mediatypeget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mediatypeget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediatypelist operation.
     * @callback module:api/DefaultApi~mediatypelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of media types
     * Allows the user to view the list of all media types.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~mediatypelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediatypelist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling mediatypelist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling mediatypelist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling mediatypelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mediatypelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediatypesave operation.
     * @callback module:api/DefaultApi~mediatypesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a media type
     * Allows the user to create or edit a media type.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~mediatypesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediatypesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mediatypesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memorizedreportdelete operation.
     * @callback module:api/DefaultApi~memorizedreportdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete memorized report
     * Allows the user to delete a memorized report that they have created.
     * @param {String} token The authentication token.
     * @param {String} id The id of the report settings to delete.
     * @param {module:api/DefaultApi~memorizedreportdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    memorizedreportdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling memorizedreportdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling memorizedreportdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/memorizedreportdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memorizedreportget operation.
     * @callback module:api/DefaultApi~memorizedreportgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a memorized report
     * Allows the user to view an individual memorized report and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the report configuration to get.
     * @param {module:api/DefaultApi~memorizedreportgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    memorizedreportget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling memorizedreportget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling memorizedreportget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/memorizedreportget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memorizedreportlist operation.
     * @callback module:api/DefaultApi~memorizedreportlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of all his memorized reports
     * Allows the user to view the list of all memorized reports that they have created.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.customname If specified filters the memorized reports by custom name.
     * @param {module:api/DefaultApi~memorizedreportlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    memorizedreportlist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling memorizedreportlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling memorizedreportlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling memorizedreportlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'customname': opts['customname'],
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/memorizedreportlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memorizedreportsave operation.
     * @callback module:api/DefaultApi~memorizedreportsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a memorized report
     * Allows the user to create or edit a memorized report for themselves.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~memorizedreportsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    memorizedreportsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/memorizedreportsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the menugetitems operation.
     * @callback module:api/DefaultApi~menugetitemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the items on the menu
     * @param {String} menuid The Id of the menu to get.
     * @param {module:api/DefaultApi~menugetitemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    menugetitems(menuid, callback) {
      let postBody = null;
      // verify the required parameter 'menuid' is set
      if (menuid === undefined || menuid === null) {
        throw new Error("Missing the required parameter 'menuid' when calling menugetitems");
      }

      let pathParams = {
      };
      let queryParams = {
        'menuid': menuid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/menugetitems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myaccount operation.
     * @callback module:api/DefaultApi~myaccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the logged in user account.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~myaccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myaccount(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling myaccount");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/myaccount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myianatimezone operation.
     * @callback module:api/DefaultApi~myianatimezoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current time zone's iana name
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~myianatimezoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myianatimezone(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling myianatimezone");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/myianatimezone', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myprofile operation.
     * @callback module:api/DefaultApi~myprofileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the logged in user information.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~myprofileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myprofile(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling myprofile");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/myprofile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myrights operation.
     * @callback module:api/DefaultApi~myrightsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of actions the user can execute.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~myrightsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myrights(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling myrights");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/myrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mysaveprofile operation.
     * @callback module:api/DefaultApi~mysaveprofileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates logged user's profile information
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~mysaveprofileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mysaveprofile(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mysaveprofile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationdelete operation.
     * @callback module:api/DefaultApi~notificationdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a notification
     * Allows the user to delete an existing notification.
     * @param {String} token The authentication token.
     * @param {String} id The id of the notification to delete.
     * @param {module:api/DefaultApi~notificationdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling notificationdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationget operation.
     * @callback module:api/DefaultApi~notificationgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a notification
     * @param {String} token The authentication token.
     * @param {String} id The id of the notification to get.
     * @param {module:api/DefaultApi~notificationgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling notificationget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationgetforstation operation.
     * @callback module:api/DefaultApi~notificationgetforstationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all public (in station) notifications for the specific user
     * @param {String} station The id of the sign-in station to get.
     * @param {String} user The card of the user.
     * @param {module:api/DefaultApi~notificationgetforstationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationgetforstation(station, user, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling notificationgetforstation");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling notificationgetforstation");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'user': user
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationgetforstation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationgetunreadcount operation.
     * @callback module:api/DefaultApi~notificationgetunreadcountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the number of unread notifications
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~notificationgetunreadcountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationgetunreadcount(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationgetunreadcount");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationgetunreadcount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationlist operation.
     * @callback module:api/DefaultApi~notificationlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of all sent notifications
     * Allows the user to view the list of all sent notifications.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.recipient The recipient whose notifications have to be listed.
     * @param {Number} opts.status The status of the notifications to list. Read, Unread or All.
     * @param {Date} opts.startdate The start date of the period to filter the notifications.
     * @param {Date} opts.enddate The end date of the period to filter the notifications.
     * @param {Boolean} opts.sentonscreen Specifies whether to list the notifications that were sent on-screen or not.
     * @param {Boolean} opts.sentemail Specifies whether to list the notifications that were sent via e-mail or not.
     * @param {Boolean} opts.sentsms Specifies whether to list the notifications that were sent via sms or not.
     * @param {module:api/DefaultApi~notificationlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationlist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling notificationlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling notificationlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'recipient': opts['recipient'],
        'status': opts['status'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate'],
        'sentonscreen': opts['sentonscreen'],
        'sentemail': opts['sentemail'],
        'sentsms': opts['sentsms']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationlistmine operation.
     * @callback module:api/DefaultApi~notificationlistmineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the notifications sent to the current user
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.status Specifies the status of the notifications to list. Read, Unread or All.
     * @param {Date} opts.startdate The start date of the period to filter the notifications.
     * @param {Date} opts.enddate The end date of the period to filter the notifications.
     * @param {module:api/DefaultApi~notificationlistmineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationlistmine(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationlistmine");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling notificationlistmine");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling notificationlistmine");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'status': opts['status'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationlistmine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationmarkasread operation.
     * @callback module:api/DefaultApi~notificationmarkasreadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a notification as read
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read.
     * @param {Number} opts.status Specifies the status to filter the notifications. Read, Unread or All.
     * @param {Date} opts.startdate The start date of the period to filter the notifications.
     * @param {Date} opts.enddate The end date of the period to filter the notifications.
     * @param {module:api/DefaultApi~notificationmarkasreadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationmarkasread(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationmarkasread");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': opts['id'],
        'status': opts['status'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationmarkasread', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationmarkasunread operation.
     * @callback module:api/DefaultApi~notificationmarkasunreadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a notification as unread
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread.
     * @param {Number} opts.status Specifies the status to filter the notifications. Read, Unread or All.
     * @param {Date} opts.startdate The start date of the period to filter the notifications.
     * @param {Date} opts.enddate The end date of the period to filter the notifications.
     * @param {module:api/DefaultApi~notificationmarkasunreadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationmarkasunread(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationmarkasunread");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': opts['id'],
        'status': opts['status'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationmarkasunread', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsend operation.
     * @callback module:api/DefaultApi~notificationsendCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send notifications on screen, via email or text to users
     * Allows the user to send notifications to other users through the Send Message link.
     * @param {String} token The authentication token.
     * @param {Boolean} emailenabled Whether send the notification via email.
     * @param {Boolean} onscreenenabled Whether to display the notification on screen.
     * @param {Boolean} smsenabled Whether to send the notification via text message.
     * @param {String} title Notification title.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tousers Comma-separated Ids of users to send the notification.
     * @param {String} opts.togroups Comma-separated Ids of user groups to send the notification.
     * @param {String} opts.onscreenbody Body of the message for on-screen display.
     * @param {String} opts.onscreenclick What to do when the notification is clicked. Valid values: hide, view, url.
     * @param {String} opts.onscreenurl Url to redirect the user, if onscreenclick=url.
     * @param {String} opts.onscreenclass How to display the notification. Valid values: info, success, warning, error
     * @param {Number} opts.onscreenduration Time in seconds to display the notification.
     * @param {Number} opts.showonstation Whether to show the notification in the sign-in station.
     * @param {String} opts.emailfromname Name of the email sender.
     * @param {String} opts.emailfrom Reply-to email.
     * @param {String} opts.emailsubject Subject of the email.
     * @param {String} opts.emailbody Body of the email.
     * @param {String} opts.textmessagebody Message for SMS. Max 160 characters.
     * @param {module:api/DefaultApi~notificationsendCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationsend(token, emailenabled, onscreenenabled, smsenabled, title, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationsend");
      }
      // verify the required parameter 'emailenabled' is set
      if (emailenabled === undefined || emailenabled === null) {
        throw new Error("Missing the required parameter 'emailenabled' when calling notificationsend");
      }
      // verify the required parameter 'onscreenenabled' is set
      if (onscreenenabled === undefined || onscreenenabled === null) {
        throw new Error("Missing the required parameter 'onscreenenabled' when calling notificationsend");
      }
      // verify the required parameter 'smsenabled' is set
      if (smsenabled === undefined || smsenabled === null) {
        throw new Error("Missing the required parameter 'smsenabled' when calling notificationsend");
      }
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling notificationsend");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'tousers': opts['tousers'],
        'togroups': opts['togroups'],
        'emailenabled': emailenabled,
        'onscreenenabled': onscreenenabled,
        'smsenabled': smsenabled,
        'title': title,
        'onscreenbody': opts['onscreenbody'],
        'onscreenclick': opts['onscreenclick'],
        'onscreenurl': opts['onscreenurl'],
        'onscreenclass': opts['onscreenclass'],
        'onscreenduration': opts['onscreenduration'],
        'showonstation': opts['showonstation'],
        'emailfromname': opts['emailfromname'],
        'emailfrom': opts['emailfrom'],
        'emailsubject': opts['emailsubject'],
        'emailbody': opts['emailbody'],
        'textmessagebody': opts['textmessagebody']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationsend', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsendonscreen operation.
     * @callback module:api/DefaultApi~notificationsendonscreenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send on-screen notifications
     * @param {String} token The authentication token.
     * @param {String} notification The ID of the notification to send.
     * @param {module:api/DefaultApi~notificationsendonscreenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationsendonscreen(token, notification, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationsendonscreen");
      }
      // verify the required parameter 'notification' is set
      if (notification === undefined || notification === null) {
        throw new Error("Missing the required parameter 'notification' when calling notificationsendonscreen");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'notification': notification
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationsendonscreen', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationtopicdelete operation.
     * @callback module:api/DefaultApi~notificationtopicdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a notification topic
     * Allows the user to delete an existing notification topic.
     * @param {String} token The authentication token.
     * @param {String} id The id of the notification topic to delete.
     * @param {module:api/DefaultApi~notificationtopicdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationtopicdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationtopicdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling notificationtopicdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationtopicdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationtopicget operation.
     * @callback module:api/DefaultApi~notificationtopicgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a notification topic
     * Allows the user to view an individual notification topic and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the notification topic to get.
     * @param {module:api/DefaultApi~notificationtopicgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationtopicget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationtopicget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling notificationtopicget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationtopicget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationtopiclist operation.
     * @callback module:api/DefaultApi~notificationtopiclistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the notification topics
     * Allows the user to view the list of all notification topics.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~notificationtopiclistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationtopiclist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationtopiclist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling notificationtopiclist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling notificationtopiclist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationtopiclist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationtopiclistsubscribe operation.
     * @callback module:api/DefaultApi~notificationtopiclistsubscribeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the notification topics available to subscribe
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~notificationtopiclistsubscribeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationtopiclistsubscribe(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationtopiclistsubscribe");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationtopiclistsubscribe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationtopicsave operation.
     * @callback module:api/DefaultApi~notificationtopicsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a notification topic
     * Allows the user to create and edit a notification topic.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~notificationtopicsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationtopicsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationtopicsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pushderegister operation.
     * @callback module:api/DefaultApi~pushderegisterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deregisters the current device to receive push notifications
     * @param {String} devicetoken The device token where to send the notification.
     * @param {String} platform Either ios or android
     * @param {module:api/DefaultApi~pushderegisterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pushderegister(devicetoken, platform, callback) {
      let postBody = null;
      // verify the required parameter 'devicetoken' is set
      if (devicetoken === undefined || devicetoken === null) {
        throw new Error("Missing the required parameter 'devicetoken' when calling pushderegister");
      }
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling pushderegister");
      }

      let pathParams = {
      };
      let queryParams = {
        'devicetoken': devicetoken,
        'platform': platform
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/pushderegister', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pushregister operation.
     * @callback module:api/DefaultApi~pushregisterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers the current device to receive push notifications
     * @param {String} devicetoken The device token where to send the notification.
     * @param {String} platform Either ios or android
     * @param {module:api/DefaultApi~pushregisterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pushregister(devicetoken, platform, callback) {
      let postBody = null;
      // verify the required parameter 'devicetoken' is set
      if (devicetoken === undefined || devicetoken === null) {
        throw new Error("Missing the required parameter 'devicetoken' when calling pushregister");
      }
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling pushregister");
      }

      let pathParams = {
      };
      let queryParams = {
        'devicetoken': devicetoken,
        'platform': platform
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/pushregister', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qrlabelsprint operation.
     * @callback module:api/DefaultApi~qrlabelsprintCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print and email QR labels
     * Allows the user to generate a printable PDF of QR labels containing user Card Numbers to be emailed to users and used as attendance tracking for events.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.user The id of the user whose label needs to be printed.
     * @param {String} opts.group The id of the group whose members' labels need to be printed.
     * @param {module:api/DefaultApi~qrlabelsprintCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qrlabelsprint(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling qrlabelsprint");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'user': opts['user'],
        'group': opts['group']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/qrlabelsprint', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qrloginget operation.
     * @callback module:api/DefaultApi~qrlogingetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an image of a QR token
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~qrlogingetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qrloginget(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling qrloginget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/qrloginget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qrloginlogin operation.
     * @callback module:api/DefaultApi~qrloginloginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * @param {String} onetimetoken The token read from the QR code.
     * @param {module:api/DefaultApi~qrloginloginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qrloginlogin(onetimetoken, callback) {
      let postBody = null;
      // verify the required parameter 'onetimetoken' is set
      if (onetimetoken === undefined || onetimetoken === null) {
        throw new Error("Missing the required parameter 'onetimetoken' when calling qrloginlogin");
      }

      let pathParams = {
      };
      let queryParams = {
        'onetimetoken': onetimetoken
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/qrloginlogin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpaneldeletewidget operation.
     * @callback module:api/DefaultApi~quickpaneldeletewidgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a widget from the Quick Panel
     * Allows the user to delete a widget that has been added to the Quick Panel.
     * @param {String} token The authentication token.
     * @param {String} id The id of the widget.
     * @param {module:api/DefaultApi~quickpaneldeletewidgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpaneldeletewidget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling quickpaneldeletewidget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quickpaneldeletewidget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpaneldeletewidget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanelfetchwidget operation.
     * @callback module:api/DefaultApi~quickpanelfetchwidgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the information for a specific widget.
     * @param {String} token The authentication token.
     * @param {String} widgetid The ID of the data to fetch it's data.
     * @param {module:api/DefaultApi~quickpanelfetchwidgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelfetchwidget(token, widgetid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling quickpanelfetchwidget");
      }
      // verify the required parameter 'widgetid' is set
      if (widgetid === undefined || widgetid === null) {
        throw new Error("Missing the required parameter 'widgetid' when calling quickpanelfetchwidget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'widgetid': widgetid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanelfetchwidget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanelgetwidget operation.
     * @callback module:api/DefaultApi~quickpanelgetwidgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a widget included in the Quick Panel
     * Allows the user to view a widget added in as Quick Panel.
     * @param {String} token The authentication token.
     * @param {String} id The id of the widget to get.
     * @param {module:api/DefaultApi~quickpanelgetwidgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelgetwidget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling quickpanelgetwidget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quickpanelgetwidget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanelgetwidget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanelinit operation.
     * @callback module:api/DefaultApi~quickpanelinitCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the initial information required to show the quick panels
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~quickpanelinitCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelinit(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling quickpanelinit");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanelinit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanellistwidgets operation.
     * @callback module:api/DefaultApi~quickpanellistwidgetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the widgets that are added in the Quick Panel
     * Allows the user to view the widgets that have been added to the Quick Panel.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~quickpanellistwidgetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanellistwidgets(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling quickpanellistwidgets");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanellistwidgets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanellistwidgettypes operation.
     * @callback module:api/DefaultApi~quickpanellistwidgettypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the widget types available in the system
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~quickpanellistwidgettypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanellistwidgettypes(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling quickpanellistwidgettypes");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanellistwidgettypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanelreorderwidgets operation.
     * @callback module:api/DefaultApi~quickpanelreorderwidgetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reorders the widgets and moves them to a specific column
     * @param {String} token The authentication token.
     * @param {String} sectionname The section name where to sort the widgets.
     * @param {String} orderids CSV list of the widgets to reorder.
     * @param {module:api/DefaultApi~quickpanelreorderwidgetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelreorderwidgets(token, sectionname, orderids, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling quickpanelreorderwidgets");
      }
      // verify the required parameter 'sectionname' is set
      if (sectionname === undefined || sectionname === null) {
        throw new Error("Missing the required parameter 'sectionname' when calling quickpanelreorderwidgets");
      }
      // verify the required parameter 'orderids' is set
      if (orderids === undefined || orderids === null) {
        throw new Error("Missing the required parameter 'orderids' when calling quickpanelreorderwidgets");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'sectionname': sectionname,
        'orderids': orderids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanelreorderwidgets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanelsavewidget operation.
     * @callback module:api/DefaultApi~quickpanelsavewidgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves a widget for the Quick Panel
     * Allows the user to save a widget to the Quick Panel.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~quickpanelsavewidgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelsavewidget(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanelsavewidget', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingflag operation.
     * @callback module:api/DefaultApi~ratingflagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flags one rating for moderation
     * @param {String} token The authentication token.
     * @param {String} id The rating to flag.
     * @param {Object} opts Optional parameters
     * @param {String} opts.comment Comment why should this should be removed.
     * @param {module:api/DefaultApi~ratingflagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingflag(token, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ratingflag");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ratingflag");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'comment': opts['comment']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ratingflag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingflagcomment operation.
     * @callback module:api/DefaultApi~ratingflagcommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flags one comment for moderation
     * @param {String} token The authentication token.
     * @param {String} id The comment to flag.
     * @param {Object} opts Optional parameters
     * @param {String} opts.comment Comment why should this should be removed.
     * @param {module:api/DefaultApi~ratingflagcommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingflagcomment(token, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ratingflagcomment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ratingflagcomment");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'comment': opts['comment']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ratingflagcomment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingget operation.
     * @callback module:api/DefaultApi~ratinggetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get rating for one or more entities
     * @param {String} token The authentication token.
     * @param {String} type The entity type to get the rating.
     * @param {String} entityids List of ids to get the ratings.
     * @param {module:api/DefaultApi~ratinggetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingget(token, type, entityids, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ratingget");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling ratingget");
      }
      // verify the required parameter 'entityids' is set
      if (entityids === undefined || entityids === null) {
        throw new Error("Missing the required parameter 'entityids' when calling ratingget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'type': type,
        'entityids': entityids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ratingget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratinggetall operation.
     * @callback module:api/DefaultApi~ratinggetallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the full ratings and comments for a specific entity
     * @param {String} token The authentication token.
     * @param {String} type The entity type to get the rating.
     * @param {String} entityid Id of the entity to get the ratings.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.mostrecentfirst True to show most recent first, otherwise most helpful first.
     * @param {module:api/DefaultApi~ratinggetallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratinggetall(token, type, entityid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ratinggetall");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling ratinggetall");
      }
      // verify the required parameter 'entityid' is set
      if (entityid === undefined || entityid === null) {
        throw new Error("Missing the required parameter 'entityid' when calling ratinggetall");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'type': type,
        'entityid': entityid,
        'mostrecentfirst': opts['mostrecentfirst']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ratinggetall', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratinggetcomments operation.
     * @callback module:api/DefaultApi~ratinggetcommentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the comments for a rating
     * @param {String} token The authentication token.
     * @param {String} ratingid The ID of the rating to get all comments.
     * @param {module:api/DefaultApi~ratinggetcommentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratinggetcomments(token, ratingid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ratinggetcomments");
      }
      // verify the required parameter 'ratingid' is set
      if (ratingid === undefined || ratingid === null) {
        throw new Error("Missing the required parameter 'ratingid' when calling ratinggetcomments");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'ratingid': ratingid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ratinggetcomments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratinggetpending operation.
     * @callback module:api/DefaultApi~ratinggetpendingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets info of pre-saved and pre-approved ratings
     * @param {String} getgroup The ID of the group of pending ratings to get.
     * @param {Object} opts Optional parameters
     * @param {String} opts.rateid Rate this before returning.
     * @param {Number} opts.rateval The value used to rate the item specified in rateid.
     * @param {module:api/DefaultApi~ratinggetpendingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratinggetpending(getgroup, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'getgroup' is set
      if (getgroup === undefined || getgroup === null) {
        throw new Error("Missing the required parameter 'getgroup' when calling ratinggetpending");
      }

      let pathParams = {
      };
      let queryParams = {
        'getgroup': getgroup,
        'rateid': opts['rateid'],
        'rateval': opts['rateval']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ratinggetpending', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratinggetpendingmoderation operation.
     * @callback module:api/DefaultApi~ratinggetpendingmoderationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows a list of the ratings and comments that are pending for moderation
     * Allows the user to view the list of pending ratings and comments.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~ratinggetpendingmoderationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratinggetpendingmoderation(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ratinggetpendingmoderation");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ratinggetpendingmoderation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingmoderate operation.
     * @callback module:api/DefaultApi~ratingmoderateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows the user to accept or reject a comment
     * Allows the user to approve or reject a comment or rating.
     * @param {String} token The authentication token.
     * @param {String} type Either 'rating' or 'comment' depending on what you want to moderate.
     * @param {String} id Id of the rating or comment, as specified in type.
     * @param {Boolean} approve True to approve, false to reject.
     * @param {module:api/DefaultApi~ratingmoderateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingmoderate(token, type, id, approve, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ratingmoderate");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling ratingmoderate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ratingmoderate");
      }
      // verify the required parameter 'approve' is set
      if (approve === undefined || approve === null) {
        throw new Error("Missing the required parameter 'approve' when calling ratingmoderate");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'type': type,
        'id': id,
        'approve': approve
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ratingmoderate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingpostcomment operation.
     * @callback module:api/DefaultApi~ratingpostcommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Posts a comments for in a rating
     * @param {String} token The authentication token.
     * @param {String} ratingid The ID of the rating to post the comment.
     * @param {String} comment Text of the comment to post.
     * @param {Boolean} annonymous True to post the comment annonymously.
     * @param {module:api/DefaultApi~ratingpostcommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingpostcomment(token, ratingid, comment, annonymous, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ratingpostcomment");
      }
      // verify the required parameter 'ratingid' is set
      if (ratingid === undefined || ratingid === null) {
        throw new Error("Missing the required parameter 'ratingid' when calling ratingpostcomment");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling ratingpostcomment");
      }
      // verify the required parameter 'annonymous' is set
      if (annonymous === undefined || annonymous === null) {
        throw new Error("Missing the required parameter 'annonymous' when calling ratingpostcomment");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'ratingid': ratingid,
        'comment': comment,
        'annonymous': annonymous
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ratingpostcomment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingrate operation.
     * @callback module:api/DefaultApi~ratingrateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rates one entity
     * @param {String} token The authentication token.
     * @param {String} type The entity type to rate.
     * @param {String} entityid Id of the entity to rate.
     * @param {Boolean} annonymous Whether to post as annonymous.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.value Value from 0 to 100 with the rating.
     * @param {String} opts.comment Comment associated with this review. Comment can be updated later on another request too.
     * @param {Boolean} opts.updatecomment Whether to update the comments. Defaults to true.
     * @param {module:api/DefaultApi~ratingrateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingrate(token, type, entityid, annonymous, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ratingrate");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling ratingrate");
      }
      // verify the required parameter 'entityid' is set
      if (entityid === undefined || entityid === null) {
        throw new Error("Missing the required parameter 'entityid' when calling ratingrate");
      }
      // verify the required parameter 'annonymous' is set
      if (annonymous === undefined || annonymous === null) {
        throw new Error("Missing the required parameter 'annonymous' when calling ratingrate");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'type': type,
        'entityid': entityid,
        'value': opts['value'],
        'annonymous': annonymous,
        'comment': opts['comment'],
        'updatecomment': opts['updatecomment']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ratingrate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingratepending operation.
     * @callback module:api/DefaultApi~ratingratependingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rates a pre-saved and pre-approved entity
     * @param {String} group The ID of the group of with pre-approved ratings.
     * @param {Boolean} annonymous Whether to post as annonymous.
     * @param {Object} opts Optional parameters
     * @param {String} opts.rateid Rate this before returning.
     * @param {Number} opts.value Value from 0 to 100 with the rating.
     * @param {String} opts.comment Comment associated with this review. Comment can be updated later on another request too.
     * @param {Boolean} opts.updatecomment Whether to update the comments. Defaults to true.
     * @param {module:api/DefaultApi~ratingratependingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingratepending(group, annonymous, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling ratingratepending");
      }
      // verify the required parameter 'annonymous' is set
      if (annonymous === undefined || annonymous === null) {
        throw new Error("Missing the required parameter 'annonymous' when calling ratingratepending");
      }

      let pathParams = {
      };
      let queryParams = {
        'group': group,
        'rateid': opts['rateid'],
        'value': opts['value'],
        'annonymous': annonymous,
        'comment': opts['comment'],
        'updatecomment': opts['updatecomment']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ratingratepending', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingvote operation.
     * @callback module:api/DefaultApi~ratingvoteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Votes up or down a rating
     * @param {String} token The authentication token.
     * @param {String} ratingid The ID of the rating to vote on.
     * @param {Number} vote 1 to vote up, -1 to vote down.
     * @param {module:api/DefaultApi~ratingvoteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ratingvote(token, ratingid, vote, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ratingvote");
      }
      // verify the required parameter 'ratingid' is set
      if (ratingid === undefined || ratingid === null) {
        throw new Error("Missing the required parameter 'ratingid' when calling ratingvote");
      }
      // verify the required parameter 'vote' is set
      if (vote === undefined || vote === null) {
        throw new Error("Missing the required parameter 'vote' when calling ratingvote");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'ratingid': ratingid,
        'vote': vote
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ratingvote', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportattanalyticsprepare operation.
     * @callback module:api/DefaultApi~reportattanalyticsprepareCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query and load an attendance analytics report
     * Allows the user to query and load attendance analytics reports.
     * @param {String} token The authentication token.
     * @param {String} reportname The name of the report to execute
     * @param {Object} opts Optional parameters
     * @param {String} opts.params A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
     * @param {String} opts.refreshgroup The ID of the group to check (and refresh) before processing the report.
     * @param {module:api/DefaultApi~reportattanalyticsprepareCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportattanalyticsprepare(token, reportname, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling reportattanalyticsprepare");
      }
      // verify the required parameter 'reportname' is set
      if (reportname === undefined || reportname === null) {
        throw new Error("Missing the required parameter 'reportname' when calling reportattanalyticsprepare");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'reportname': reportname,
        'params': opts['params'],
        'refreshgroup': opts['refreshgroup']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reportattanalyticsprepare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportlist operation.
     * @callback module:api/DefaultApi~reportlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of available reports
     * Allows the user to view the complete list of available, canned reports.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~reportlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportlist(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling reportlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reportlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportpermissionsbyuser operation.
     * @callback module:api/DefaultApi~reportpermissionsbyuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permissions by user report
     * Lists all the users in the system including their corresponding permissions.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.params A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
     * @param {module:api/DefaultApi~reportpermissionsbyuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportpermissionsbyuser(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling reportpermissionsbyuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'params': opts['params']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reportpermissionsbyuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportprepare operation.
     * @callback module:api/DefaultApi~reportprepareCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries and loads the specified report, in background.
     * Allows the user to run reports, in background, with the exception of attendance analytics reports.
     * @param {String} token The authentication token.
     * @param {String} reportname The name of the report to execute
     * @param {Object} opts Optional parameters
     * @param {String} opts.params A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
     * @param {String} opts.repformat The format of the resulting report. Json, pdf, csv, ...
     * @param {String} opts.fillgroupid If specified, the result is used to fill the group with the given ID
     * @param {String} opts.groupby How to group the records. In the format 'col1+col2|col3+col4
     * @param {String} opts.refreshgroup The ID of the group to check (and refresh) before processing the report.
     * @param {String} opts.filtertext The user friendly text of the applied filters.
     * @param {module:api/DefaultApi~reportprepareCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportprepare(token, reportname, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling reportprepare");
      }
      // verify the required parameter 'reportname' is set
      if (reportname === undefined || reportname === null) {
        throw new Error("Missing the required parameter 'reportname' when calling reportprepare");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'reportname': reportname,
        'params': opts['params'],
        'repformat': opts['repformat'],
        'fillgroupid': opts['fillgroupid'],
        'groupby': opts['groupby'],
        'refreshgroup': opts['refreshgroup'],
        'filtertext': opts['filtertext']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reportprepare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportquery operation.
     * @callback module:api/DefaultApi~reportqueryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query and load a specified report
     * Allows the user to run reports with the exception of attendance analytics reports.
     * @param {String} token The authentication token.
     * @param {String} reportname The name of the report to execute
     * @param {Object} opts Optional parameters
     * @param {String} opts.params A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
     * @param {module:api/DefaultApi~reportqueryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportquery(token, reportname, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling reportquery");
      }
      // verify the required parameter 'reportname' is set
      if (reportname === undefined || reportname === null) {
        throw new Error("Missing the required parameter 'reportname' when calling reportquery");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'reportname': reportname,
        'params': opts['params']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reportquery', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportscheduledelete operation.
     * @callback module:api/DefaultApi~reportscheduledeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a report schedule
     * Allows the user to delete a scheduled report that they created.
     * @param {String} token The authentication token.
     * @param {String} id The id of the report schedule to delete.
     * @param {module:api/DefaultApi~reportscheduledeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportscheduledelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling reportscheduledelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportscheduledelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reportscheduledelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportscheduleget operation.
     * @callback module:api/DefaultApi~reportschedulegetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a report schedule
     * Allows the user to view the list of reports that they scheduled.
     * @param {String} token The authentication token.
     * @param {String} id The id of the schedule to get.
     * @param {module:api/DefaultApi~reportschedulegetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportscheduleget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling reportscheduleget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportscheduleget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reportscheduleget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportschedulelist operation.
     * @callback module:api/DefaultApi~reportschedulelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of the scheduled reports
     * Allows the user to view a list of the scheduled reports.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~reportschedulelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportschedulelist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling reportschedulelist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling reportschedulelist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling reportschedulelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reportschedulelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportschedulesave operation.
     * @callback module:api/DefaultApi~reportschedulesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a report schedule
     * Allows the user to create or edit a scheduled report.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~reportschedulesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportschedulesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reportschedulesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reporttagresults operation.
     * @callback module:api/DefaultApi~reporttagresultsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries and loads a report in background and assigns (or unassigns) the specified tags to (from) the resulting users.
     * Allows the user to use a report to assign or unassign tags.
     * @param {String} token The authentication token.
     * @param {String} reportname The name of the report to execute
     * @param {Boolean} assign Specify whether the specified tags have to be assigned or unassigned.
     * @param {String} tags The tags to assign (or unassign) to the resulting users in the report, in JSON format.
     * @param {Object} opts Optional parameters
     * @param {String} opts.params A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
     * @param {module:api/DefaultApi~reporttagresultsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reporttagresults(token, reportname, assign, tags, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling reporttagresults");
      }
      // verify the required parameter 'reportname' is set
      if (reportname === undefined || reportname === null) {
        throw new Error("Missing the required parameter 'reportname' when calling reporttagresults");
      }
      // verify the required parameter 'assign' is set
      if (assign === undefined || assign === null) {
        throw new Error("Missing the required parameter 'assign' when calling reporttagresults");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling reporttagresults");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'reportname': reportname,
        'assign': assign,
        'tags': tags,
        'params': opts['params']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reporttagresults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the riskmodelcheckanalysis operation.
     * @callback module:api/DefaultApi~riskmodelcheckanalysisCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the status of the analysis of a specified risk assessment model
     * Allows the user to check the status of a risk assessment model as it is being processed.
     * @param {String} token The authentication token.
     * @param {String} id The id of the risk assessment model whose analysis status has to be returned.
     * @param {module:api/DefaultApi~riskmodelcheckanalysisCallback} callback The callback function, accepting three arguments: error, data, response
     */
    riskmodelcheckanalysis(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling riskmodelcheckanalysis");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling riskmodelcheckanalysis");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/riskmodelcheckanalysis', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the riskmodeldelete operation.
     * @callback module:api/DefaultApi~riskmodeldeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a risk assessment model
     * Allows the user to delete a previously created risk assessment model.
     * @param {String} token The authentication token.
     * @param {String} id The id of the risk assessment model to delete.
     * @param {module:api/DefaultApi~riskmodeldeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    riskmodeldelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling riskmodeldelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling riskmodeldelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/riskmodeldelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the riskmodelget operation.
     * @callback module:api/DefaultApi~riskmodelgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a risk assessment model
     * Allows the user to view an individual risk assessment model and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the risk assessment model to get.
     * @param {module:api/DefaultApi~riskmodelgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    riskmodelget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling riskmodelget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling riskmodelget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/riskmodelget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the riskmodelgetscore operation.
     * @callback module:api/DefaultApi~riskmodelgetscoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the risk score for a specific user
     * Allows the user to view the risk score of another user.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to get the risk score.
     * @param {module:api/DefaultApi~riskmodelgetscoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    riskmodelgetscore(token, userid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling riskmodelgetscore");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling riskmodelgetscore");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/riskmodelgetscore', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the riskmodellist operation.
     * @callback module:api/DefaultApi~riskmodellistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of risk assessment models
     * Allows the user to view the full list of risk assessment models.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~riskmodellistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    riskmodellist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling riskmodellist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling riskmodellist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling riskmodellist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/riskmodellist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the riskmodelpredict operation.
     * @callback module:api/DefaultApi~riskmodelpredictCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predict risk based on an assessment model
     * Allows a user to process a risk prediction from a risk assessment model that has processed.
     * @param {String} token The authentication token.
     * @param {String} id The id of the assessment model to use in order to predict risk.
     * @param {module:api/DefaultApi~riskmodelpredictCallback} callback The callback function, accepting three arguments: error, data, response
     */
    riskmodelpredict(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling riskmodelpredict");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling riskmodelpredict");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/riskmodelpredict', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the riskmodelprocess operation.
     * @callback module:api/DefaultApi~riskmodelprocessCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Process a risk assessment model
     * Allows the user to process a risk assessment model once it has been created.
     * @param {String} token The authentication token.
     * @param {String} id The id of the risk assessment model to process.
     * @param {module:api/DefaultApi~riskmodelprocessCallback} callback The callback function, accepting three arguments: error, data, response
     */
    riskmodelprocess(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling riskmodelprocess");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling riskmodelprocess");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/riskmodelprocess', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the riskmodelrefresh operation.
     * @callback module:api/DefaultApi~riskmodelrefreshCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh the information used in a risk assessment model
     * Allows the user to refresh a risk assessment model.
     * @param {String} token The authentication token.
     * @param {String} id The id of the risk assessment model whose information has to be refreshed.
     * @param {module:api/DefaultApi~riskmodelrefreshCallback} callback The callback function, accepting three arguments: error, data, response
     */
    riskmodelrefresh(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling riskmodelrefresh");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling riskmodelrefresh");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/riskmodelrefresh', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the riskmodelsave operation.
     * @callback module:api/DefaultApi~riskmodelsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a risk assessment model
     * Allows the user to create or edit a risk assessment model.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~riskmodelsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    riskmodelsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/riskmodelsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the riskmodeltermprecedences operation.
     * @callback module:api/DefaultApi~riskmodeltermprecedencesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all default term precedences
     * Allows the user to view the default term precedences used in a model.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~riskmodeltermprecedencesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    riskmodeltermprecedences(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling riskmodeltermprecedences");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/riskmodeltermprecedences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rolelist operation.
     * @callback module:api/DefaultApi~rolelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show a list of roles
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name of the role.
     * @param {module:api/DefaultApi~rolelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rolelist(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling rolelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rolelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ruledelete operation.
     * @callback module:api/DefaultApi~ruledeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a rule
     * Allows the user to delete an existing rule.
     * @param {String} token The authentication token.
     * @param {String} id The id of the rule to delete.
     * @param {module:api/DefaultApi~ruledeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ruledelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ruledelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ruledelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ruledelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ruleget operation.
     * @callback module:api/DefaultApi~rulegetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a rule
     * Allows the user to view an individual rule and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the rule to get.
     * @param {module:api/DefaultApi~rulegetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ruleget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ruleget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ruleget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ruleget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rulegeteventtype operation.
     * @callback module:api/DefaultApi~rulegeteventtypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a rule event type
     * Allows the user to view the trigger and its available conditions for the rule.
     * @param {String} token The authentication token.
     * @param {String} event The name of the event to refresh.
     * @param {module:api/DefaultApi~rulegeteventtypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rulegeteventtype(token, event, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling rulegeteventtype");
      }
      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling rulegeteventtype");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'event': event
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulegeteventtype', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rulelist operation.
     * @callback module:api/DefaultApi~rulelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of user rules
     * Allows the user to view the list of all rules.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~rulelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rulelist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling rulelist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling rulelist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling rulelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rulelistactions operation.
     * @callback module:api/DefaultApi~rulelistactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of rule actions available
     * Allows the user to view all the available rule actions.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~rulelistactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rulelistactions(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling rulelistactions");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulelistactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rulelisteventtypes operation.
     * @callback module:api/DefaultApi~rulelisteventtypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of rule event types
     * Allows the user to view a list of available triggers for rules.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~rulelisteventtypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rulelisteventtypes(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling rulelisteventtypes");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulelisteventtypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rulelisthttprequests operation.
     * @callback module:api/DefaultApi~rulelisthttprequestsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the http requests sent as a result of a rule
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.failed If true only failed requests will be returned
     * @param {Number} opts.status The http status to filter the requests
     * @param {module:api/DefaultApi~rulelisthttprequestsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rulelisthttprequests(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling rulelisthttprequests");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling rulelisthttprequests");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling rulelisthttprequests");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'failed': opts['failed'],
        'status': opts['status'],
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulelisthttprequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rulesave operation.
     * @callback module:api/DefaultApi~rulesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a rule
     * Allows the user to create or edit a rule.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~rulesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rulesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduledelete operation.
     * @callback module:api/DefaultApi~scheduledeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a schedule slot
     * Allows the user to delete a schedule slot from another user.
     * @param {String} token The authentication token.
     * @param {String} scheduleid The id of the schedule.
     * @param {module:api/DefaultApi~scheduledeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduledelete(token, scheduleid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling scheduledelete");
      }
      // verify the required parameter 'scheduleid' is set
      if (scheduleid === undefined || scheduleid === null) {
        throw new Error("Missing the required parameter 'scheduleid' when calling scheduledelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'scheduleid': scheduleid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scheduledelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduledeletemine operation.
     * @callback module:api/DefaultApi~scheduledeletemineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific block from a user's own schedule
     * Allows the user to delete a schedule block from their own availability.
     * @param {String} token The authentication token.
     * @param {String} scheduleid The id of the schedule.
     * @param {module:api/DefaultApi~scheduledeletemineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduledeletemine(token, scheduleid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling scheduledeletemine");
      }
      // verify the required parameter 'scheduleid' is set
      if (scheduleid === undefined || scheduleid === null) {
        throw new Error("Missing the required parameter 'scheduleid' when calling scheduledeletemine");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'scheduleid': scheduleid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scheduledeletemine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleenable operation.
     * @callback module:api/DefaultApi~scheduleenableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable or disable the schedule for a specific person
     * Allows the user to enable or disable a schedule for another user.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to enable or disable the schedule.
     * @param {Boolean} enable True to enable schedules, false to disable.
     * @param {module:api/DefaultApi~scheduleenableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleenable(token, userid, enable, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling scheduleenable");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling scheduleenable");
      }
      // verify the required parameter 'enable' is set
      if (enable === undefined || enable === null) {
        throw new Error("Missing the required parameter 'enable' when calling scheduleenable");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'enable': enable
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scheduleenable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleenablemine operation.
     * @callback module:api/DefaultApi~scheduleenablemineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable or disable current user's schedule
     * Allows the user to enable or disable a schedule for himself.
     * @param {String} token The authentication token.
     * @param {Boolean} enable True to enable schedules, false to disable.
     * @param {module:api/DefaultApi~scheduleenablemineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleenablemine(token, enable, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling scheduleenablemine");
      }
      // verify the required parameter 'enable' is set
      if (enable === undefined || enable === null) {
        throw new Error("Missing the required parameter 'enable' when calling scheduleenablemine");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'enable': enable
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scheduleenablemine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulefindallstaffslots operation.
     * @callback module:api/DefaultApi~schedulefindallstaffslotsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search available schedule slots by service, event, date
     * Allows users to search available slots.
     * @param {String} token The authentication token.
     * @param {Date} starttime The start time of the range to look for slots.
     * @param {Date} endtime The end time of the range to look for slots.
     * @param {Object} opts Optional parameters
     * @param {String} opts.staffid The id of the staff to filter by.
     * @param {String} opts.serviceids CSV list of the service Ids to filter by.
     * @param {String} opts.eventid The id of the event to filter by.
     * @param {String} opts.locationid The id of the location to filter by.
     * @param {String} opts.staffroleids CSV list of the staff member role ids to filter by.
     * @param {String} opts.availablefor The specific availability type to filter by.
     * @param {module:api/DefaultApi~schedulefindallstaffslotsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    schedulefindallstaffslots(token, starttime, endtime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling schedulefindallstaffslots");
      }
      // verify the required parameter 'starttime' is set
      if (starttime === undefined || starttime === null) {
        throw new Error("Missing the required parameter 'starttime' when calling schedulefindallstaffslots");
      }
      // verify the required parameter 'endtime' is set
      if (endtime === undefined || endtime === null) {
        throw new Error("Missing the required parameter 'endtime' when calling schedulefindallstaffslots");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'starttime': starttime,
        'endtime': endtime,
        'staffid': opts['staffid'],
        'serviceids': opts['serviceids'],
        'eventid': opts['eventid'],
        'locationid': opts['locationid'],
        'staffroleids': opts['staffroleids'],
        'availablefor': opts['availablefor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedulefindallstaffslots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulefindslots operation.
     * @callback module:api/DefaultApi~schedulefindslotsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search available schedule slots by service, event, date and/or staff
     * Allows users to search available slots when making appointments.
     * @param {String} token The authentication token.
     * @param {String} staffid The id of the staff to filter by.
     * @param {Date} starttime The start time of the range to look for slots.
     * @param {Date} endtime The end time of the range to look for slots.
     * @param {Object} opts Optional parameters
     * @param {String} opts.serviceids CSV list of the service Ids to filter by.
     * @param {String} opts.eventid The id of the event to filter by.
     * @param {String} opts.locationid The id of the service to filter by.
     * @param {String} opts.availablefor The specific availability type to filter by.
     * @param {module:api/DefaultApi~schedulefindslotsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    schedulefindslots(token, staffid, starttime, endtime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling schedulefindslots");
      }
      // verify the required parameter 'staffid' is set
      if (staffid === undefined || staffid === null) {
        throw new Error("Missing the required parameter 'staffid' when calling schedulefindslots");
      }
      // verify the required parameter 'starttime' is set
      if (starttime === undefined || starttime === null) {
        throw new Error("Missing the required parameter 'starttime' when calling schedulefindslots");
      }
      // verify the required parameter 'endtime' is set
      if (endtime === undefined || endtime === null) {
        throw new Error("Missing the required parameter 'endtime' when calling schedulefindslots");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'staffid': staffid,
        'starttime': starttime,
        'endtime': endtime,
        'serviceids': opts['serviceids'],
        'eventid': opts['eventid'],
        'locationid': opts['locationid'],
        'availablefor': opts['availablefor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedulefindslots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulefindstaffavail operation.
     * @callback module:api/DefaultApi~schedulefindstaffavailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search available staff members slots by service, event, and/or date
     * Allows users to search available staff.
     * @param {String} token The authentication token.
     * @param {Date} starttime The start time of the range to look for slots.
     * @param {Date} endtime The end time of the range to look for slots.
     * @param {Object} opts Optional parameters
     * @param {String} opts.serviceids CSV list of the service ids to filter by.
     * @param {String} opts.eventid The id of the event to filter by.
     * @param {String} opts.locationid The id of the service to filter by.
     * @param {String} opts.staffroleids CSV list of the staff member role ids to filter by.
     * @param {String} opts.availablefor Filter slots by a specific availability type.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~schedulefindstaffavailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    schedulefindstaffavail(token, starttime, endtime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling schedulefindstaffavail");
      }
      // verify the required parameter 'starttime' is set
      if (starttime === undefined || starttime === null) {
        throw new Error("Missing the required parameter 'starttime' when calling schedulefindstaffavail");
      }
      // verify the required parameter 'endtime' is set
      if (endtime === undefined || endtime === null) {
        throw new Error("Missing the required parameter 'endtime' when calling schedulefindstaffavail");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'serviceids': opts['serviceids'],
        'eventid': opts['eventid'],
        'starttime': starttime,
        'endtime': endtime,
        'locationid': opts['locationid'],
        'staffroleids': opts['staffroleids'],
        'availablefor': opts['availablefor'],
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedulefindstaffavail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleget operation.
     * @callback module:api/DefaultApi~schedulegetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a specific schedule slot
     * Allows the user to view the details of schedule shifts for any user role that the user has permission to view.
     * @param {String} token The authentication token.
     * @param {String} scheduleid The id of the schedule.
     * @param {module:api/DefaultApi~schedulegetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleget(token, scheduleid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling scheduleget");
      }
      // verify the required parameter 'scheduleid' is set
      if (scheduleid === undefined || scheduleid === null) {
        throw new Error("Missing the required parameter 'scheduleid' when calling scheduleget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'scheduleid': scheduleid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scheduleget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulegetmine operation.
     * @callback module:api/DefaultApi~schedulegetmineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a specific schedule block, for current user
     * Allows the user to view the details of their own schedule shifts.
     * @param {String} token The authentication token.
     * @param {String} scheduleid The id of the schedule.
     * @param {module:api/DefaultApi~schedulegetmineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    schedulegetmine(token, scheduleid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling schedulegetmine");
      }
      // verify the required parameter 'scheduleid' is set
      if (scheduleid === undefined || scheduleid === null) {
        throw new Error("Missing the required parameter 'scheduleid' when calling schedulegetmine");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'scheduleid': scheduleid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedulegetmine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulegetstaff operation.
     * @callback module:api/DefaultApi~schedulegetstaffCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of schedule information of a specified person
     * Allows the user to view the schedule shifts for user roles that the user has permission to access.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to get info.
     * @param {module:api/DefaultApi~schedulegetstaffCallback} callback The callback function, accepting three arguments: error, data, response
     */
    schedulegetstaff(token, userid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling schedulegetstaff");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling schedulegetstaff");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedulegetstaff', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulegetstaffmine operation.
     * @callback module:api/DefaultApi~schedulegetstaffmineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View current user's schedule information
     * Allows the user to view their own schedule.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~schedulegetstaffmineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    schedulegetstaffmine(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling schedulegetstaffmine");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedulegetstaffmine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleintegrationdeleteitem operation.
     * @callback module:api/DefaultApi~scheduleintegrationdeleteitemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a schedule item looking up by a third party ID
     * @param {String} token The authentication token.
     * @param {String} thirdpartyid The third party id to search the schedule block / appointment.
     * @param {module:api/DefaultApi~scheduleintegrationdeleteitemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleintegrationdeleteitem(token, thirdpartyid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling scheduleintegrationdeleteitem");
      }
      // verify the required parameter 'thirdpartyid' is set
      if (thirdpartyid === undefined || thirdpartyid === null) {
        throw new Error("Missing the required parameter 'thirdpartyid' when calling scheduleintegrationdeleteitem");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'thirdpartyid': thirdpartyid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scheduleintegrationdeleteitem', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleintegrationdeleteitemsbymasterid operation.
     * @callback module:api/DefaultApi~scheduleintegrationdeleteitemsbymasteridCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete multiple schedule items looking up by a third party master ID
     * @param {String} token The authentication token.
     * @param {String} thirdpartymasterid The third party master id to search the schedule items.
     * @param {module:api/DefaultApi~scheduleintegrationdeleteitemsbymasteridCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleintegrationdeleteitemsbymasterid(token, thirdpartymasterid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling scheduleintegrationdeleteitemsbymasterid");
      }
      // verify the required parameter 'thirdpartymasterid' is set
      if (thirdpartymasterid === undefined || thirdpartymasterid === null) {
        throw new Error("Missing the required parameter 'thirdpartymasterid' when calling scheduleintegrationdeleteitemsbymasterid");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'thirdpartymasterid': thirdpartymasterid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scheduleintegrationdeleteitemsbymasterid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleintegrationgetitem operation.
     * @callback module:api/DefaultApi~scheduleintegrationgetitemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a schedule item looking up by a third party ID
     * @param {String} token The authentication token.
     * @param {String} thirdpartyid The third party id to search for the schedule item.
     * @param {module:api/DefaultApi~scheduleintegrationgetitemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleintegrationgetitem(token, thirdpartyid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling scheduleintegrationgetitem");
      }
      // verify the required parameter 'thirdpartyid' is set
      if (thirdpartyid === undefined || thirdpartyid === null) {
        throw new Error("Missing the required parameter 'thirdpartyid' when calling scheduleintegrationgetitem");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'thirdpartyid': thirdpartyid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scheduleintegrationgetitem', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleintegrationsaveitem operation.
     * @callback module:api/DefaultApi~scheduleintegrationsaveitemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a schedule item looking up by a third party ID
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~scheduleintegrationsaveitemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleintegrationsaveitem(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scheduleintegrationsaveitem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleintegrationsetid operation.
     * @callback module:api/DefaultApi~scheduleintegrationsetidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a 3rd party ID on a specific schedule item
     * @param {String} token The authentication token.
     * @param {String} id The id of the schedule block / appointment.
     * @param {String} thirdpartyid The 3rd party ID to set.
     * @param {Object} opts Optional parameters
     * @param {String} opts.thirdpartymasterid The 3rd party master ID to set (useful to handle recurring items).
     * @param {module:api/DefaultApi~scheduleintegrationsetidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduleintegrationsetid(token, id, thirdpartyid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling scheduleintegrationsetid");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scheduleintegrationsetid");
      }
      // verify the required parameter 'thirdpartyid' is set
      if (thirdpartyid === undefined || thirdpartyid === null) {
        throw new Error("Missing the required parameter 'thirdpartyid' when calling scheduleintegrationsetid");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'thirdpartyid': thirdpartyid,
        'thirdpartymasterid': opts['thirdpartymasterid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scheduleintegrationsetid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulemyofftimes operation.
     * @callback module:api/DefaultApi~schedulemyofftimesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View current user's schedule exceptions
     * Allows the user to view their own schedule exceptions.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includedeleted If true the deleted offtimes are also returned.
     * @param {Boolean} opts.onlyupcoming If true then only upcoming offtimes are returned.
     * @param {Date} opts.modifiedafter If specified, only offtimes modified after the specified date will be returned.
     * @param {module:api/DefaultApi~schedulemyofftimesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    schedulemyofftimes(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling schedulemyofftimes");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'includedeleted': opts['includedeleted'],
        'onlyupcoming': opts['onlyupcoming'],
        'modifiedafter': opts['modifiedafter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedulemyofftimes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesave operation.
     * @callback module:api/DefaultApi~schedulesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a schedule slot
     * Allows the user to create or edit a schedule slot of another user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~schedulesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    schedulesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedulesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesavemine operation.
     * @callback module:api/DefaultApi~schedulesavemineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a block in current user's schedule
     * Allows the user to create or edit a schedule shift in their own availability.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~schedulesavemineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    schedulesavemine(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedulesavemine', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/DefaultApi~searchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search
     * @param {String} token The authentication token.
     * @param {String} query The query to search for.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Current page to show, zero-based.
     * @param {module:api/DefaultApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    search(token, query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling search");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling search");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'query': query,
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchgetentities operation.
     * @callback module:api/DefaultApi~searchgetentitiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information of the entities that can be searched
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~searchgetentitiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchgetentities(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling searchgetentities");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/searchgetentities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityassesspermission operation.
     * @callback module:api/DefaultApi~securityassesspermissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of users for a specific permission
     * @param {String} token The authentication token.
     * @param {String} commandname Name of the action or command to get the roles.
     * @param {module:api/DefaultApi~securityassesspermissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    securityassesspermission(token, commandname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling securityassesspermission");
      }
      // verify the required parameter 'commandname' is set
      if (commandname === undefined || commandname === null) {
        throw new Error("Missing the required parameter 'commandname' when calling securityassesspermission");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'commandname': commandname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/securityassesspermission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityassessrole operation.
     * @callback module:api/DefaultApi~securityassessroleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of permissions for a specific role
     * @param {String} token The authentication token.
     * @param {String} roleid Role ID to list the effective permissions.
     * @param {module:api/DefaultApi~securityassessroleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    securityassessrole(token, roleid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling securityassessrole");
      }
      // verify the required parameter 'roleid' is set
      if (roleid === undefined || roleid === null) {
        throw new Error("Missing the required parameter 'roleid' when calling securityassessrole");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'roleid': roleid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/securityassessrole', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityassessscope operation.
     * @callback module:api/DefaultApi~securityassessscopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of users for a specific user
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locationid Location ID to list the users with that scope.
     * @param {module:api/DefaultApi~securityassessscopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    securityassessscope(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling securityassessscope");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'locationid': opts['locationid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/securityassessscope', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityassessuser operation.
     * @callback module:api/DefaultApi~securityassessuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of permissions for a specific user
     * @param {String} token The authentication token.
     * @param {String} userid User ID to list the effective permissions.
     * @param {module:api/DefaultApi~securityassessuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    securityassessuser(token, userid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling securityassessuser");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling securityassessuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/securityassessuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seminardelete operation.
     * @callback module:api/DefaultApi~seminardeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an event
     * Allows the user to delete an existing event.
     * @param {String} token The authentication token.
     * @param {String} id The id of the seminar to delete.
     * @param {module:api/DefaultApi~seminardeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    seminardelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling seminardelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling seminardelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/seminardelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seminarget operation.
     * @callback module:api/DefaultApi~seminargetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a event
     * Allows the user to view a event and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the seminar to get.
     * @param {module:api/DefaultApi~seminargetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    seminarget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling seminarget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling seminarget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/seminarget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seminarlist operation.
     * @callback module:api/DefaultApi~seminarlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of events
     * Allows the user to view the full list of events in the past, present, and future.
     * @param {String} token The authentication token.
     * @param {String} from The first record to return.
     * @param {String} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false.
     * @param {String} opts.termid Id of the term to list the events. Null to list all events.
     * @param {module:api/DefaultApi~seminarlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    seminarlist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling seminarlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling seminarlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling seminarlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'summaryonly': opts['summaryonly'],
        'termid': opts['termid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/seminarlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seminarsave operation.
     * @callback module:api/DefaultApi~seminarsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a event
     * Allows the user to create or edit a event.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~seminarsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    seminarsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/seminarsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceassignmentaddservice operation.
     * @callback module:api/DefaultApi~serviceassignmentaddserviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a service in a specific location
     * Allows the user to enable a service in a location to which they are scoped.
     * @param {String} token The authentication token.
     * @param {String} serviceid The id of the service to add.
     * @param {String} locationid The id of the location.
     * @param {module:api/DefaultApi~serviceassignmentaddserviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serviceassignmentaddservice(token, serviceid, locationid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling serviceassignmentaddservice");
      }
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling serviceassignmentaddservice");
      }
      // verify the required parameter 'locationid' is set
      if (locationid === undefined || locationid === null) {
        throw new Error("Missing the required parameter 'locationid' when calling serviceassignmentaddservice");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'serviceid': serviceid,
        'locationid': locationid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/serviceassignmentaddservice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceassignmentgetlocation operation.
     * @callback module:api/DefaultApi~serviceassignmentgetlocationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of services enabled for a specific location
     * Allows the user to view a list of services available in a location to which they are scoped.
     * @param {String} token The authentication token.
     * @param {String} locationid The id of the location to get.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includegloballyavailable Specifies whether the services available globally must be returned or not.
     * @param {Boolean} opts.namefilter Filters the name of the services to return.
     * @param {Number} opts.count The max number of services to return.
     * @param {module:api/DefaultApi~serviceassignmentgetlocationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serviceassignmentgetlocation(token, locationid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling serviceassignmentgetlocation");
      }
      // verify the required parameter 'locationid' is set
      if (locationid === undefined || locationid === null) {
        throw new Error("Missing the required parameter 'locationid' when calling serviceassignmentgetlocation");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'locationid': locationid,
        'includegloballyavailable': opts['includegloballyavailable'],
        'namefilter': opts['namefilter'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/serviceassignmentgetlocation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceassignmentgetservice operation.
     * @callback module:api/DefaultApi~serviceassignmentgetserviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of locations where a service is available
     * Allows the user to view a list of locations in which a service is available.
     * @param {String} token The authentication token.
     * @param {String} serviceid The id of the service to get its locations.
     * @param {module:api/DefaultApi~serviceassignmentgetserviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serviceassignmentgetservice(token, serviceid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling serviceassignmentgetservice");
      }
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling serviceassignmentgetservice");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'serviceid': serviceid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/serviceassignmentgetservice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceassignmentremoveservice operation.
     * @callback module:api/DefaultApi~serviceassignmentremoveserviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a service from a location
     * Allows the user to disable a service from a location to which they are scoped.
     * @param {String} token The authentication token.
     * @param {String} serviceid The id of the service to remove.
     * @param {String} locationid The id of the location to remove the service from.
     * @param {module:api/DefaultApi~serviceassignmentremoveserviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serviceassignmentremoveservice(token, serviceid, locationid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling serviceassignmentremoveservice");
      }
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling serviceassignmentremoveservice");
      }
      // verify the required parameter 'locationid' is set
      if (locationid === undefined || locationid === null) {
        throw new Error("Missing the required parameter 'locationid' when calling serviceassignmentremoveservice");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'serviceid': serviceid,
        'locationid': locationid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/serviceassignmentremoveservice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicedelete operation.
     * @callback module:api/DefaultApi~servicedeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a service
     * Allows the user to delete a service from the existing list.
     * @param {String} token The authentication token.
     * @param {String} id The id of the service to delete.
     * @param {module:api/DefaultApi~servicedeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicedelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling servicedelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling servicedelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servicedelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceget operation.
     * @callback module:api/DefaultApi~servicegetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a service
     * Allows the user to view an individual service and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the service to get.
     * @param {module:api/DefaultApi~servicegetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serviceget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling serviceget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling serviceget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/serviceget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicelist operation.
     * @callback module:api/DefaultApi~servicelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of services
     * Allows the user to view the full list of existing services.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~servicelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicelist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling servicelist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling servicelist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling servicelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servicelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesave operation.
     * @callback module:api/DefaultApi~servicesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a service
     * Allows the user to create or edit a service.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~servicesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servicesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionattendancelogaddnote operation.
     * @callback module:api/DefaultApi~sessionattendancelogaddnoteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a note to a class attendance log
     * Allows the user to add a note to a class attendance log.
     * @param {String} token The authentication token.
     * @param {String} id The id of the attendance log.
     * @param {String} text The text of the note to add.
     * @param {module:api/DefaultApi~sessionattendancelogaddnoteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendancelogaddnote(token, id, text, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionattendancelogaddnote");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sessionattendancelogaddnote");
      }
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling sessionattendancelogaddnote");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendancelogaddnote', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionattendancelogget operation.
     * @callback module:api/DefaultApi~sessionattendanceloggetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a class attendance log
     * Allows the user to view an individual class attendance log and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the attendance log to get.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~sessionattendanceloggetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendancelogget(token, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionattendancelogget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sessionattendancelogget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendancelogget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionattendanceloggetuser operation.
     * @callback module:api/DefaultApi~sessionattendanceloggetuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the class session attendance information for a specific user
     * Allows the user to view the attendance for a specified student.
     * @param {String} attendee The id of the attendee to get statistic for.
     * @param {String} eventid The id of the event whose attendee statistics have to be returned.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {module:api/DefaultApi~sessionattendanceloggetuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendanceloggetuser(attendee, eventid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'attendee' is set
      if (attendee === undefined || attendee === null) {
        throw new Error("Missing the required parameter 'attendee' when calling sessionattendanceloggetuser");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionattendanceloggetuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'attendee': attendee,
        'eventid': eventid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendanceloggetuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionattendanceloglist operation.
     * @callback module:api/DefaultApi~sessionattendanceloglistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View attendance logs of the specified session
     * Allows the user to view the full list of logs from a specified session
     * @param {String} token The authentication token.
     * @param {String} session The id of the session whose attendees logs have to be returned.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~sessionattendanceloglistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendanceloglist(token, session, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionattendanceloglist");
      }
      // verify the required parameter 'session' is set
      if (session === undefined || session === null) {
        throw new Error("Missing the required parameter 'session' when calling sessionattendanceloglist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling sessionattendanceloglist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling sessionattendanceloglist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'session': session,
        'from': from,
        'count': count,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendanceloglist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionattendanceloglistevent operation.
     * @callback module:api/DefaultApi~sessionattendanceloglisteventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the attendance information of an entire class
     * Allows the user to view the attendance information for an entire class
     * @param {String} eventid The id of the event whose attendance has to be returned.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {module:api/DefaultApi~sessionattendanceloglisteventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendanceloglistevent(eventid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionattendanceloglistevent");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'eventid': eventid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendanceloglistevent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionattendanceloglistsummary operation.
     * @callback module:api/DefaultApi~sessionattendanceloglistsummaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the attendance summary for a class and/or a attendee
     * Allows the user to view the attendance summary for a given class and/or attendee.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {String} opts.eventid The id of the event whose attendance has to be returned.
     * @param {String} opts.attendeeid The id of the attendee whose attendance has to be returned.
     * @param {String} opts.groupid The id of the group whose attendance has to be returned.
     * @param {String} opts.start The start date to filter (beginning of time by default).
     * @param {String} opts.end The end date to filter (today by default).
     * @param {module:api/DefaultApi~sessionattendanceloglistsummaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendanceloglistsummary(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'eventid': opts['eventid'],
        'attendeeid': opts['attendeeid'],
        'groupid': opts['groupid'],
        'start': opts['start'],
        'end': opts['end']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendanceloglistsummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionattendancelogmylistsummary operation.
     * @callback module:api/DefaultApi~sessionattendancelogmylistsummaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View my attendance summary
     * Allows the user to view their own attendance summary.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {String} opts.eventid The id of the event whose attendance has to be returned.
     * @param {String} opts.start The start date to filter (beginning of time by default).
     * @param {String} opts.end The end date to filter (today by default).
     * @param {module:api/DefaultApi~sessionattendancelogmylistsummaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendancelogmylistsummary(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'eventid': opts['eventid'],
        'start': opts['start'],
        'end': opts['end']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendancelogmylistsummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionattendancelogsave operation.
     * @callback module:api/DefaultApi~sessionattendancelogsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a class attendance log
     * Allows the user to create or edit a class attendance log.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~sessionattendancelogsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendancelogsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendancelogsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionattendancelogsaveswipe operation.
     * @callback module:api/DefaultApi~sessionattendancelogsaveswipeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a class attendance log swipe
     * Allows the user to create or edit a class attendance log swipe, which are the details of time in or out.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~sessionattendancelogsaveswipeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionattendancelogsaveswipe(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionattendancelogsaveswipe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionbulkupdate operation.
     * @callback module:api/DefaultApi~sessionbulkupdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk update event sessions
     * Allows the user to bulk update event sessions by setting multiple attendees as present, absent, tardy, etc.
     * @param {String} token The authentication token.
     * @param {String} eventid The id of the event to bulk update.
     * @param {String} sessions A JSON-formatted array, with all the sessions to update, create or delete. Each item must contain an action (set/remove) and the session properties.
     * @param {module:api/DefaultApi~sessionbulkupdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionbulkupdate(token, eventid, sessions, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionbulkupdate");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionbulkupdate");
      }
      // verify the required parameter 'sessions' is set
      if (sessions === undefined || sessions === null) {
        throw new Error("Missing the required parameter 'sessions' when calling sessionbulkupdate");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'eventid': eventid,
        'sessions': sessions
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionbulkupdate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionget operation.
     * @callback module:api/DefaultApi~sessiongetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a session
     * Allows the user to view a session in order to take attendance.
     * @param {String} token The authentication token.
     * @param {String} id The id of the session to get.
     * @param {module:api/DefaultApi~sessiongetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sessionget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessiongetschedule operation.
     * @callback module:api/DefaultApi~sessiongetscheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the schedule for a location, instructor or attendees
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {Date} opts.day The day to return. It will also return the whole week for that day.
     * @param {String} opts.attendee The id of the attendee to get the schedule.
     * @param {String} opts.location The id of the location to get the schedule.
     * @param {String} opts.instructor The id of the instructor to get the schedule.
     * @param {module:api/DefaultApi~sessiongetscheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessiongetschedule(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'day': opts['day'],
        'attendee': opts['attendee'],
        'location': opts['location'],
        'instructor': opts['instructor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessiongetschedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionlist operation.
     * @callback module:api/DefaultApi~sessionlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all future sessions of the current semester
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {Date} opts.startdate The start date to filter the sessions
     * @param {Date} opts.enddate The end date to filter the sessions.
     * @param {module:api/DefaultApi~sessionlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionlist(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling sessionlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling sessionlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'from': from,
        'count': count,
        'startdate': opts['startdate'],
        'enddate': opts['enddate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregaddcurrentuser operation.
     * @callback module:api/DefaultApi~sessionregaddcurrentuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register current user to an event session
     * Allows the user to register themselves for an event.
     * @param {String} token The authentication token.
     * @param {String} eventid The id of the event.
     * @param {Date} sessiondate The date and time when the session starts.
     * @param {module:api/DefaultApi~sessionregaddcurrentuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregaddcurrentuser(token, eventid, sessiondate, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionregaddcurrentuser");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionregaddcurrentuser");
      }
      // verify the required parameter 'sessiondate' is set
      if (sessiondate === undefined || sessiondate === null) {
        throw new Error("Missing the required parameter 'sessiondate' when calling sessionregaddcurrentuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'eventid': eventid,
        'sessiondate': sessiondate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionregaddcurrentuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregadduser operation.
     * @callback module:api/DefaultApi~sessionregadduserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register users for events
     * Allows the user to register another user for an upcoming event.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to add.
     * @param {String} eventid The id of the event.
     * @param {Date} sessiondate The date and time when the session starts.
     * @param {module:api/DefaultApi~sessionregadduserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregadduser(token, userid, eventid, sessiondate, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionregadduser");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling sessionregadduser");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionregadduser");
      }
      // verify the required parameter 'sessiondate' is set
      if (sessiondate === undefined || sessiondate === null) {
        throw new Error("Missing the required parameter 'sessiondate' when calling sessionregadduser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'eventid': eventid,
        'sessiondate': sessiondate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionregadduser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionreggetmysessions operation.
     * @callback module:api/DefaultApi~sessionreggetmysessionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the sessions the logged user is registered to
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {Date} opts._date Start date to filter the sessions.
     * @param {module:api/DefaultApi~sessionreggetmysessionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionreggetmysessions(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionreggetmysessions");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'date': opts['_date']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreggetmysessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionreggetsessions operation.
     * @callback module:api/DefaultApi~sessionreggetsessionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the registrations for a specific user
     * Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
     * @param {String} token The authentication token.
     * @param {String} userid The user id to list sessions.
     * @param {module:api/DefaultApi~sessionreggetsessionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionreggetsessions(token, userid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionreggetsessions");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling sessionreggetsessions");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreggetsessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionreggetsettings operation.
     * @callback module:api/DefaultApi~sessionreggetsettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the settings for session registration
     * Allows the user to view a event's session registration settings.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locationid The id of the location to save settings.
     * @param {String} opts.eventid The id of the event to save settings.
     * @param {Date} opts.sessiondate The date and time when the session starts.
     * @param {Boolean} opts.noinherit True to get the location/event/session specific settings without looking for the more global settings.
     * @param {module:api/DefaultApi~sessionreggetsettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionreggetsettings(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionreggetsettings");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'locationid': opts['locationid'],
        'eventid': opts['eventid'],
        'sessiondate': opts['sessiondate'],
        'noinherit': opts['noinherit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreggetsettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionreggetusers operation.
     * @callback module:api/DefaultApi~sessionreggetusersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the registrations for a specific session
     * Allows the user to view the registration for a specified event session.
     * @param {String} token The authentication token.
     * @param {String} eventid The event id to list sessions.
     * @param {Date} sessiondate The date of the session to find.
     * @param {module:api/DefaultApi~sessionreggetusersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionreggetusers(token, eventid, sessiondate, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionreggetusers");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionreggetusers");
      }
      // verify the required parameter 'sessiondate' is set
      if (sessiondate === undefined || sessiondate === null) {
        throw new Error("Missing the required parameter 'sessiondate' when calling sessionreggetusers");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'eventid': eventid,
        'sessiondate': sessiondate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreggetusers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionreglistsessions operation.
     * @callback module:api/DefaultApi~sessionreglistsessionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the sessions available for a specific event
     * Allows the user to view all the sessions available for a recurring event.
     * @param {String} token The authentication token.
     * @param {String} eventid The event id to list sessions.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.sessiondate The date of the session to find.
     * @param {module:api/DefaultApi~sessionreglistsessionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionreglistsessions(token, eventid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionreglistsessions");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionreglistsessions");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'eventid': eventid,
        'sessiondate': opts['sessiondate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreglistsessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionreglistupcoming operation.
     * @callback module:api/DefaultApi~sessionreglistupcomingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of upcoming event sessions
     * Allows the user to view the full list of upcoming events.
     * @param {String} token The authentication token.
     * @param {Date} _date Only sessions in the week of the specified date will be returned.
     * @param {module:api/DefaultApi~sessionreglistupcomingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionreglistupcoming(token, _date, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionreglistupcoming");
      }
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling sessionreglistupcoming");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'date': _date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreglistupcoming', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionreglistupcomingevent operation.
     * @callback module:api/DefaultApi~sessionreglistupcomingeventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of upcoming sessions of a particular event
     * Allows the user to view the upcoming recurring sessions of a specified event.
     * @param {String} token The authentication token.
     * @param {Date} _date Start date to filter the returned sessions.
     * @param {String} event The id of the event whose sessions will be returned
     * @param {module:api/DefaultApi~sessionreglistupcomingeventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionreglistupcomingevent(token, _date, event, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionreglistupcomingevent");
      }
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling sessionreglistupcomingevent");
      }
      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling sessionreglistupcomingevent");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'date': _date,
        'event': event
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreglistupcomingevent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregremovecurrentuser operation.
     * @callback module:api/DefaultApi~sessionregremovecurrentuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unregister current user from an event session
     * Allows the user to un-register themselves from an event.
     * @param {String} token The authentication token.
     * @param {String} eventid The id of the event.
     * @param {Date} sessiondate The date and time when the session starts.
     * @param {module:api/DefaultApi~sessionregremovecurrentuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregremovecurrentuser(token, eventid, sessiondate, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionregremovecurrentuser");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionregremovecurrentuser");
      }
      // verify the required parameter 'sessiondate' is set
      if (sessiondate === undefined || sessiondate === null) {
        throw new Error("Missing the required parameter 'sessiondate' when calling sessionregremovecurrentuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'eventid': eventid,
        'sessiondate': sessiondate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionregremovecurrentuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregremoveuser operation.
     * @callback module:api/DefaultApi~sessionregremoveuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user from an event session
     * Allows the user to un-register another user from an event.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to remove.
     * @param {String} eventid The id of the event.
     * @param {Date} sessiondate The date and time when the session starts.
     * @param {module:api/DefaultApi~sessionregremoveuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregremoveuser(token, userid, eventid, sessiondate, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionregremoveuser");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling sessionregremoveuser");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionregremoveuser");
      }
      // verify the required parameter 'sessiondate' is set
      if (sessiondate === undefined || sessiondate === null) {
        throw new Error("Missing the required parameter 'sessiondate' when calling sessionregremoveuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'eventid': eventid,
        'sessiondate': sessiondate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionregremoveuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregsavesettings operation.
     * @callback module:api/DefaultApi~sessionregsavesettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save the settings for an event's session registration
     * Allows the user to save the settings for an event.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~sessionregsavesettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregsavesettings(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionregsavesettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionswipedelete operation.
     * @callback module:api/DefaultApi~sessionswipedeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a session swipe
     * Allows the user to delete an existing class attendance swipe.
     * @param {String} token The authentication token.
     * @param {String} id The id of the session swipe to delete.
     * @param {module:api/DefaultApi~sessionswipedeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionswipedelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionswipedelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sessionswipedelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionswipedelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionswipeget operation.
     * @callback module:api/DefaultApi~sessionswipegetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a class attendance swipe
     * Allows the user to view an individual class attendance swipe.
     * @param {String} token The authentication token.
     * @param {String} id The id of the swipe to get.
     * @param {module:api/DefaultApi~sessionswipegetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionswipeget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionswipeget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sessionswipeget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionswipeget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionswipelistunresolved operation.
     * @callback module:api/DefaultApi~sessionswipelistunresolvedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of unresolved swipes
     * Allows the user to view all unresolved swipes.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {module:api/DefaultApi~sessionswipelistunresolvedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionswipelistunresolved(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling sessionswipelistunresolved");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling sessionswipelistunresolved");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionswipelistunresolved', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionswiperesolve operation.
     * @callback module:api/DefaultApi~sessionswiperesolveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resolve a swipe and create the corresponding attendance log
     * Allows the user to resolve an unresolved swipe, which would result in the creation of an attendance log.
     * @param {String} token The authentication token.
     * @param {String} id The id of the swipe to resolve.
     * @param {Object} opts Optional parameters
     * @param {String} opts.session The id of the session whose swipe has to be saved.
     * @param {String} opts.user The id of the user who signed-in.
     * @param {module:api/DefaultApi~sessionswiperesolveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionswiperesolve(token, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionswiperesolve");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sessionswiperesolve");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'session': opts['session'],
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionswiperesolve', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionswipesave operation.
     * @callback module:api/DefaultApi~sessionswipesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new swipe, and if possible, creates the attendance log
     * Allows the user to create a new swipe, which would usually result in an attendance log.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~sessionswipesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionswipesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionswipesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionswipesaveanonym operation.
     * @callback module:api/DefaultApi~sessionswipesaveanonymCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new swipe from a sign-in station, and if possible, creates the attendance log
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~sessionswipesaveanonymCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionswipesaveanonym(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionswipesaveanonym', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingaddlogo operation.
     * @callback module:api/DefaultApi~settingaddlogoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a logo to the account
     * Allows the user to add the logo for the account, which appears on all pages on the AccuCampus browser version.
     * @param {String} token The authentication token.
     * @param {String} upload Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).
     * @param {String} filename The original filename, needed to process the file.
     * @param {module:api/DefaultApi~settingaddlogoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    settingaddlogo(token, upload, filename, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling settingaddlogo");
      }
      // verify the required parameter 'upload' is set
      if (upload === undefined || upload === null) {
        throw new Error("Missing the required parameter 'upload' when calling settingaddlogo");
      }
      // verify the required parameter 'filename' is set
      if (filename === undefined || filename === null) {
        throw new Error("Missing the required parameter 'filename' when calling settingaddlogo");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'upload': upload,
        'filename': filename
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/settingaddlogo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingget operation.
     * @callback module:api/DefaultApi~settinggetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get settings for the account or the specified scope
     * @param {String} keys The option keys to get values for. Enter multiple separated by comma.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {String} opts.domain The account domain, in case of reading settings annonymously.
     * @param {String} opts.scope The scope of the settings to get.
     * @param {module:api/DefaultApi~settinggetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    settingget(keys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'keys' is set
      if (keys === undefined || keys === null) {
        throw new Error("Missing the required parameter 'keys' when calling settingget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'domain': opts['domain'],
        'keys': keys,
        'scope': opts['scope']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/settingget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsave operation.
     * @callback module:api/DefaultApi~settingsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save settings for the account or the specified scope
     * Allows the user to affect settings that are not specified elsewhere in permissions. This includes Attendance, Appointments, Compass, Media, and Social Activity.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~settingsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    settingsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/settingsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingviewgeneral operation.
     * @callback module:api/DefaultApi~settingviewgeneralCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View general settings for the account
     * Allows the user to view the settings' general section.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~settingviewgeneralCallback} callback The callback function, accepting three arguments: error, data, response
     */
    settingviewgeneral(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling settingviewgeneral");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/settingviewgeneral', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialcontacts operation.
     * @callback module:api/DefaultApi~socialcontactsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of contacts in the network
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Text to filter results.
     * @param {Boolean} opts.showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.
     * @param {module:api/DefaultApi~socialcontactsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    socialcontacts(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling socialcontacts");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'filter': opts['filter'],
        'showdefaultphoto': opts['showdefaultphoto']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/socialcontacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialgroupaddmembers operation.
     * @callback module:api/DefaultApi~socialgroupaddmembersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds new members to a group (which the user must own already)
     * @param {String} token The authentication token.
     * @param {String} id ID of the group to add members to.
     * @param {String} userids Csv list of user Ids to add.
     * @param {module:api/DefaultApi~socialgroupaddmembersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    socialgroupaddmembers(token, id, userids, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling socialgroupaddmembers");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling socialgroupaddmembers");
      }
      // verify the required parameter 'userids' is set
      if (userids === undefined || userids === null) {
        throw new Error("Missing the required parameter 'userids' when calling socialgroupaddmembers");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'userids': userids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/socialgroupaddmembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialgroupdelete operation.
     * @callback module:api/DefaultApi~socialgroupdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a group
     * @param {String} token The authentication token.
     * @param {String} id ID of the group to delete.
     * @param {module:api/DefaultApi~socialgroupdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    socialgroupdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling socialgroupdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling socialgroupdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/socialgroupdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialgrouplist operation.
     * @callback module:api/DefaultApi~socialgrouplistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the groups the current user is in
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~socialgrouplistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    socialgrouplist(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling socialgrouplist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/socialgrouplist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialgrouplistmembers operation.
     * @callback module:api/DefaultApi~socialgrouplistmembersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the members of a group
     * @param {String} token The authentication token.
     * @param {String} id ID of the group to list members.
     * @param {module:api/DefaultApi~socialgrouplistmembersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    socialgrouplistmembers(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling socialgrouplistmembers");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling socialgrouplistmembers");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/socialgrouplistmembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialgroupremovemembers operation.
     * @callback module:api/DefaultApi~socialgroupremovemembersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes members from a group (which the user must own already)
     * @param {String} token The authentication token.
     * @param {String} id ID of the group to remove members from.
     * @param {String} userids Csv list of user Ids to remove.
     * @param {module:api/DefaultApi~socialgroupremovemembersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    socialgroupremovemembers(token, id, userids, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling socialgroupremovemembers");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling socialgroupremovemembers");
      }
      // verify the required parameter 'userids' is set
      if (userids === undefined || userids === null) {
        throw new Error("Missing the required parameter 'userids' when calling socialgroupremovemembers");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'userids': userids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/socialgroupremovemembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialgroupremovemyself operation.
     * @callback module:api/DefaultApi~socialgroupremovemyselfCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes myself from an existent group
     * @param {String} token The authentication token.
     * @param {String} id ID of the group to remove me from.
     * @param {module:api/DefaultApi~socialgroupremovemyselfCallback} callback The callback function, accepting three arguments: error, data, response
     */
    socialgroupremovemyself(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling socialgroupremovemyself");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling socialgroupremovemyself");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/socialgroupremovemyself', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialgroupsave operation.
     * @callback module:api/DefaultApi~socialgroupsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves a new group
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~socialgroupsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    socialgroupsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/socialgroupsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ssogeneratekey operation.
     * @callback module:api/DefaultApi~ssogeneratekeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate/reset single sign on access key.
     * Allows the user to generate or reset the access key for single sign-on.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~ssogeneratekeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ssogeneratekey(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ssogeneratekey");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ssogeneratekey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ssogetsettings operation.
     * @callback module:api/DefaultApi~ssogetsettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View single sign on settings.
     * Allows the user to view settings for single sign-on.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~ssogetsettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ssogetsettings(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ssogetsettings");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ssogetsettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ssoissuetoken operation.
     * @callback module:api/DefaultApi~ssoissuetokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issue single sign-on token
     * @param {String} key The single sign-on key of the account.
     * @param {String} username The email of the user to sign-on.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.expires Specifies whether the session should expire when inactive.
     * @param {module:api/DefaultApi~ssoissuetokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ssoissuetoken(key, username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling ssoissuetoken");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling ssoissuetoken");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'username': username,
        'expires': opts['expires']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ssoissuetoken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ssosavesettings operation.
     * @callback module:api/DefaultApi~ssosavesettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit single sign-on settings.
     * Allows the user to edit settings for single sign-on.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~ssosavesettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ssosavesettings(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ssosavesettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailaddmetoallservices operation.
     * @callback module:api/DefaultApi~staffavailaddmetoallservicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate current user to all services
     * Allows the user to associate themselves to all services, provided they have a staff role.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~staffavailaddmetoallservicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailaddmetoallservices(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling staffavailaddmetoallservices");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavailaddmetoallservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailaddmetoservice operation.
     * @callback module:api/DefaultApi~staffavailaddmetoserviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate current user to a service
     * Allows the user to associate themselves to a service, provided they have a staff role.
     * @param {String} token The authentication token.
     * @param {String} serviceid The id of the service.
     * @param {module:api/DefaultApi~staffavailaddmetoserviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailaddmetoservice(token, serviceid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling staffavailaddmetoservice");
      }
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling staffavailaddmetoservice");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'serviceid': serviceid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavailaddmetoservice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailaddusertoallservices operation.
     * @callback module:api/DefaultApi~staffavailaddusertoallservicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate a staff member to all services
     * Allows the user to make a staff member available for all services.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to add.
     * @param {module:api/DefaultApi~staffavailaddusertoallservicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailaddusertoallservices(token, userid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling staffavailaddusertoallservices");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling staffavailaddusertoallservices");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavailaddusertoallservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailaddusertoservice operation.
     * @callback module:api/DefaultApi~staffavailaddusertoserviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate a staff member to a service
     * Allows the user to make a staff member available for a service.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to add.
     * @param {String} serviceid The id of the service.
     * @param {module:api/DefaultApi~staffavailaddusertoserviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailaddusertoservice(token, userid, serviceid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling staffavailaddusertoservice");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling staffavailaddusertoservice");
      }
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling staffavailaddusertoservice");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'serviceid': serviceid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavailaddusertoservice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailgetmyservices operation.
     * @callback module:api/DefaultApi~staffavailgetmyservicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the services the current user is available for
     * Allows the user to view a list of services that they are associated with.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~staffavailgetmyservicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailgetmyservices(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling staffavailgetmyservices");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavailgetmyservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailgetservices operation.
     * @callback module:api/DefaultApi~staffavailgetservicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of services that a staff member is available for
     * Allows the user to view the list of services that a staff member is available for.
     * @param {String} token The authentication token.
     * @param {String} userid The user id to list services.
     * @param {module:api/DefaultApi~staffavailgetservicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailgetservices(token, userid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling staffavailgetservices");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling staffavailgetservices");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavailgetservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailgetusersforservice operation.
     * @callback module:api/DefaultApi~staffavailgetusersforserviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of staff members that are available for a specific service
     * Allows the user to view all staff members who are available for a service.
     * @param {String} token The authentication token.
     * @param {String} serviceid The service id to list users.
     * @param {module:api/DefaultApi~staffavailgetusersforserviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailgetusersforservice(token, serviceid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling staffavailgetusersforservice");
      }
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling staffavailgetusersforservice");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'serviceid': serviceid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavailgetusersforservice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavaillisttypes operation.
     * @callback module:api/DefaultApi~staffavaillisttypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the availability types
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~staffavaillisttypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavaillisttypes(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling staffavaillisttypes");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavaillisttypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailremovemefromallservices operation.
     * @callback module:api/DefaultApi~staffavailremovemefromallservicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove current user from all services
     * Allows the user to disassociate themselves from all services, provided they have a staff role.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~staffavailremovemefromallservicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailremovemefromallservices(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling staffavailremovemefromallservices");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavailremovemefromallservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailremovemefromservice operation.
     * @callback module:api/DefaultApi~staffavailremovemefromserviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove current user from a service
     * Allows the user to disassociate themselves from a service, provided they have a staff role.
     * @param {String} token The authentication token.
     * @param {String} serviceid The id of the service.
     * @param {module:api/DefaultApi~staffavailremovemefromserviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailremovemefromservice(token, serviceid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling staffavailremovemefromservice");
      }
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling staffavailremovemefromservice");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'serviceid': serviceid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavailremovemefromservice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailremoveuserfromallservices operation.
     * @callback module:api/DefaultApi~staffavailremoveuserfromallservicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a staff member from the registration to all services
     * Allows the user to remove a staff member's availability to all services.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to remove.
     * @param {module:api/DefaultApi~staffavailremoveuserfromallservicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailremoveuserfromallservices(token, userid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling staffavailremoveuserfromallservices");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling staffavailremoveuserfromallservices");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavailremoveuserfromallservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailremoveuserfromservice operation.
     * @callback module:api/DefaultApi~staffavailremoveuserfromserviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a staff member from a service
     * Allows the user to remove a staff member's service availability.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to remove.
     * @param {String} serviceid The id of the service.
     * @param {module:api/DefaultApi~staffavailremoveuserfromserviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailremoveuserfromservice(token, userid, serviceid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling staffavailremoveuserfromservice");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling staffavailremoveuserfromservice");
      }
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling staffavailremoveuserfromservice");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'serviceid': serviceid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavailremoveuserfromservice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailsetavailability operation.
     * @callback module:api/DefaultApi~staffavailsetavailabilityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make a staff member available for a specific availability type
     * Allows the user to set a staff member as available for walk ins, appointments, or both.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user whose specific availability has to be set.
     * @param {Object} opts Optional parameters
     * @param {String} opts.availablefor Specific availability to set.
     * @param {module:api/DefaultApi~staffavailsetavailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailsetavailability(token, userid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling staffavailsetavailability");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling staffavailsetavailability");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'availablefor': opts['availablefor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavailsetavailability', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staffavailsetmyavailability operation.
     * @callback module:api/DefaultApi~staffavailsetmyavailabilityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change current user's availability type
     * Allows the user to make themselves available for walk ins, appointments, or both.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.availablefor Specific availability to set.
     * @param {module:api/DefaultApi~staffavailsetmyavailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    staffavailsetmyavailability(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling staffavailsetmyavailability");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'availablefor': opts['availablefor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/staffavailsetmyavailability', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationdelete operation.
     * @callback module:api/DefaultApi~stationdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a sign-in station
     * Allows the user to delete a sign-in station from the list of existing sign-in stations that they can view based on their scope.
     * @param {String} token The authentication token.
     * @param {String} id The id of the sign-in station to delete.
     * @param {module:api/DefaultApi~stationdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling stationdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stationdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationget operation.
     * @callback module:api/DefaultApi~stationgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a sign-in station
     * Allows the user to view an individual sign-in station and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the sign-in station to get.
     * @param {module:api/DefaultApi~stationgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling stationget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stationget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationgetcurrentterms operation.
     * @callback module:api/DefaultApi~stationgetcurrenttermsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the current terms
     * @param {String} station The id of the sign-in station whose account's current terms have to be retrieved.
     * @param {module:api/DefaultApi~stationgetcurrenttermsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationgetcurrentterms(station, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling stationgetcurrentterms");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationgetcurrentterms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationgetinfo operation.
     * @callback module:api/DefaultApi~stationgetinfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a the info to display in the sign-in station by it's ID.
     * @param {String} id The id of the sign-in station to get.
     * @param {Object} opts Optional parameters
     * @param {String} opts.event The id of the event, to override the one by schedule.
     * @param {module:api/DefaultApi~stationgetinfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationgetinfo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stationgetinfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'event': opts['event']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationgetinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationgetlicense operation.
     * @callback module:api/DefaultApi~stationgetlicenseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current license information
     * @param {String} station The id of the sign-in station whose account's license has to be retrieved.
     * @param {module:api/DefaultApi~stationgetlicenseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationgetlicense(station, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling stationgetlicense");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationgetlicense', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationgetlocationsettings operation.
     * @callback module:api/DefaultApi~stationgetlocationsettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the sign-in station settings of a specified location
     * Allows the user to view the location settings of a sign-in station.
     * @param {String} location The id of the location whose station settings have to be returned.
     * @param {module:api/DefaultApi~stationgetlocationsettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationgetlocationsettings(location, callback) {
      let postBody = null;
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling stationgetlocationsettings");
      }

      let pathParams = {
      };
      let queryParams = {
        'location': location
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationgetlocationsettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationlist operation.
     * @callback module:api/DefaultApi~stationlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of sign-in stations
     * Allows the user to view the list of sign-in stations, limited to the stations in the locations to which they are scoped.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~stationlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationlist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling stationlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling stationlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling stationlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationsave operation.
     * @callback module:api/DefaultApi~stationsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a sign-in station
     * Allows the user to create, edit, or install a sign-in station based in an area to which they are scoped.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~stationsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationsavemine operation.
     * @callback module:api/DefaultApi~stationsavemineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a class attendance sign-in station for myself
     * Allows the user to create a class attendance sign-in station for a course for which they are available as staff.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~stationsavemineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationsavemine(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationsavemine', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationunlock operation.
     * @callback module:api/DefaultApi~stationunlockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlocks the sign-in station.
     * @param {String} id The id of the sign-in station to unlock.
     * @param {String} passcode The passcode to unlock the station.
     * @param {String} method The authentication method. Valid values are 'token' and 'cookie'.
     * @param {module:api/DefaultApi~stationunlockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationunlock(id, passcode, method, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stationunlock");
      }
      // verify the required parameter 'passcode' is set
      if (passcode === undefined || passcode === null) {
        throw new Error("Missing the required parameter 'passcode' when calling stationunlock");
      }
      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling stationunlock");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'passcode': passcode,
        'method': method
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationunlock', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the swipedelete operation.
     * @callback module:api/DefaultApi~swipedeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a swipe
     * Allows the user to delete an existing attendance swipe.
     * @param {String} token The authentication token.
     * @param {String} id The id of the swipe to delete.
     * @param {module:api/DefaultApi~swipedeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    swipedelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling swipedelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling swipedelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/swipedelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the swipeget operation.
     * @callback module:api/DefaultApi~swipegetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a swipe
     * Allows the user to view an individual attendance swipe.
     * @param {String} token The authentication token.
     * @param {String} id The id of the swipe to get.
     * @param {module:api/DefaultApi~swipegetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    swipeget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling swipeget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling swipeget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/swipeget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the swipelist operation.
     * @callback module:api/DefaultApi~swipelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of swipes
     * Allows the user to view a list of all swipes for the location or locations in which the user is scoped.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {module:api/DefaultApi~swipelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    swipelist(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling swipelist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling swipelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/swipelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the swipesave operation.
     * @callback module:api/DefaultApi~swipesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a swipe, and if possible, save the related attendance log
     * Allows the user to save an attendance swipe, which will also save the attendance log if the information in the swipe is enough.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~swipesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    swipesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/swipesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the swipesaveanonym operation.
     * @callback module:api/DefaultApi~swipesaveanonymCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new swipe from a sign-in station, and if possible, creates the attendance log
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~swipesaveanonymCallback} callback The callback function, accepting three arguments: error, data, response
     */
    swipesaveanonym(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/swipesaveanonym', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagdelete operation.
     * @callback module:api/DefaultApi~tagdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag
     * Allows the user to delete an existing tag.
     * @param {String} token The authentication token.
     * @param {String} id The id of the tag to delete.
     * @param {module:api/DefaultApi~tagdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling tagdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tagdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tagdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagget operation.
     * @callback module:api/DefaultApi~taggetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a specified tag
     * Allows the user to click on and view the settings for a tag.
     * @param {String} token The authentication token.
     * @param {String} id The id of the tag to get.
     * @param {module:api/DefaultApi~taggetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling tagget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tagget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tagget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taglist operation.
     * @callback module:api/DefaultApi~taglistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of tags
     * Allows the user to view the list of tags.
     * @param {String} token The authentication token.
     * @param {String} group The group of the tags to return.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~taglistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    taglist(token, group, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling taglist");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling taglist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling taglist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling taglist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'group': group,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/taglist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taglistgroups operation.
     * @callback module:api/DefaultApi~taglistgroupsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of entities that can be tagged
     * Allows the user to view the list of user roles that can be tagged, according to that tag's settings.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~taglistgroupsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    taglistgroups(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling taglistgroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/taglistgroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsave operation.
     * @callback module:api/DefaultApi~tagsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a tag
     * Allows the user to create or edit a tag.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~tagsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tagsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsearch operation.
     * @callback module:api/DefaultApi~tagsearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for tags in the account
     * Allows the user to search for tags.
     * @param {String} token The authentication token.
     * @param {String} query The query to search tags. Use group:<group> to search in a specific group (mandatory).
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.allowcreatingnew Specifies whether an option to create a new tag should be retrieved.
     * @param {module:api/DefaultApi~tagsearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagsearch(token, query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling tagsearch");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling tagsearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'query': query,
        'allowcreatingnew': opts['allowcreatingnew']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tagsearch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateaddimage operation.
     * @callback module:api/DefaultApi~templateaddimageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an image to a template
     * Allows the user to add an image to a badge or certificate template.
     * @param {String} token The authentication token.
     * @param {String} template The id of the template where the image has to be added
     * @param {String} upload Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).
     * @param {Object} opts Optional parameters
     * @param {String} opts.filename The local name of the uploaded file. For later reference.
     * @param {module:api/DefaultApi~templateaddimageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templateaddimage(token, template, upload, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling templateaddimage");
      }
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling templateaddimage");
      }
      // verify the required parameter 'upload' is set
      if (upload === undefined || upload === null) {
        throw new Error("Missing the required parameter 'upload' when calling templateaddimage");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'template': template,
        'upload': upload,
        'filename': opts['filename']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templateaddimage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatedelete operation.
     * @callback module:api/DefaultApi~templatedeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a template
     * Allows the user to delete an existing template.
     * @param {String} token The authentication token.
     * @param {String} id The id of the template to delete.
     * @param {module:api/DefaultApi~templatedeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templatedelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling templatedelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling templatedelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templatedelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateemail operation.
     * @callback module:api/DefaultApi~templateemailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send generated templates by email
     * Allows the user to send generated templates via email through AccuCampus.
     * @param {String} token The authentication token.
     * @param {String} jobid The id of the job that is creating the templates.
     * @param {String} emailsubject Args depending on the send-to flag.
     * @param {String} emailbody Args depending on the send-to flag.
     * @param {Object} opts Optional parameters
     * @param {String} opts.templatekind The kind of the template you're sending. It must be included in (badge, certificate).
     * @param {String} opts.emailfrom The name of the sender to be displayed in the receipients inbox
     * @param {String} opts.emailreplyto The reply-to field for the emails.
     * @param {module:api/DefaultApi~templateemailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templateemail(token, jobid, emailsubject, emailbody, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling templateemail");
      }
      // verify the required parameter 'jobid' is set
      if (jobid === undefined || jobid === null) {
        throw new Error("Missing the required parameter 'jobid' when calling templateemail");
      }
      // verify the required parameter 'emailsubject' is set
      if (emailsubject === undefined || emailsubject === null) {
        throw new Error("Missing the required parameter 'emailsubject' when calling templateemail");
      }
      // verify the required parameter 'emailbody' is set
      if (emailbody === undefined || emailbody === null) {
        throw new Error("Missing the required parameter 'emailbody' when calling templateemail");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'jobid': jobid,
        'templatekind': opts['templatekind'],
        'emailfrom': opts['emailfrom'],
        'emailreplyto': opts['emailreplyto'],
        'emailsubject': emailsubject,
        'emailbody': emailbody
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templateemail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templategenerate operation.
     * @callback module:api/DefaultApi~templategenerateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate specified templates
     * Allows the user to generate an existing template as badges or certificates.
     * @param {String} token The authentication token.
     * @param {String} template The id of the template to generate.
     * @param {String} source The source key of the selected template data source.
     * @param {Boolean} singlefile True if all the templates should be placed in the same file, false if each one shoud be in its own file.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userid Only the template for these users is created (and emailed if 'email' is true), enter multiple separated by commas.
     * @param {Boolean} opts.forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading
     * @param {String} opts.role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor
     * @param {String} opts.filters Pipe separated filters for the generation, eg: aaa=val|bbb=val|...
     * @param {module:api/DefaultApi~templategenerateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templategenerate(token, template, source, singlefile, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling templategenerate");
      }
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling templategenerate");
      }
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling templategenerate");
      }
      // verify the required parameter 'singlefile' is set
      if (singlefile === undefined || singlefile === null) {
        throw new Error("Missing the required parameter 'singlefile' when calling templategenerate");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'template': template,
        'source': source,
        'singlefile': singlefile,
        'userid': opts['userid'],
        'forsending': opts['forsending'],
        'role': opts['role'],
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templategenerate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateget operation.
     * @callback module:api/DefaultApi~templategetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a template
     * Allows the user to view a template and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the template to get.
     * @param {module:api/DefaultApi~templategetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templateget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling templateget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling templateget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templateget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templategetgenerated operation.
     * @callback module:api/DefaultApi~templategetgeneratedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View generated templates
     * Allows the user to view templates which have been generated as badges or certificates.
     * @param {String} token The authentication token.
     * @param {String} jobid The id of the job that is creating the templates.
     * @param {module:api/DefaultApi~templategetgeneratedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templategetgenerated(token, jobid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling templategetgenerated");
      }
      // verify the required parameter 'jobid' is set
      if (jobid === undefined || jobid === null) {
        throw new Error("Missing the required parameter 'jobid' when calling templategetgenerated");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'jobid': jobid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templategetgenerated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatelist operation.
     * @callback module:api/DefaultApi~templatelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of defined templates
     * Allows the user to view the full list of created templates.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {String} kind The kind of the templates to return. It must be included in (badge, certificate).
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.designedonly If true then it only returns the templates that were designed. Otherwise, it returns all.
     * @param {module:api/DefaultApi~templatelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templatelist(token, from, count, kind, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling templatelist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling templatelist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling templatelist");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling templatelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'kind': kind,
        'designedonly': opts['designedonly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templatelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatelistsources operation.
     * @callback module:api/DefaultApi~templatelistsourcesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of templates' data sources
     * Allows the user to see tokens to be used in the template
     * @param {String} token The authentication token.
     * @param {String} kind The kind of the templates to return. It must be included in (badge, certificate).
     * @param {module:api/DefaultApi~templatelistsourcesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templatelistsources(token, kind, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling templatelistsources");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling templatelistsources");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'kind': kind
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templatelistsources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesave operation.
     * @callback module:api/DefaultApi~templatesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a template
     * Allows the user to create or edit a template.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~templatesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templatesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templatesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesavelayout operation.
     * @callback module:api/DefaultApi~templatesavelayoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save the layout of a template
     * Allows the user to edit a template's layout.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~templatesavelayoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templatesavelayout(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templatesavelayout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the termdelete operation.
     * @callback module:api/DefaultApi~termdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a term
     * Allows the user to delete a term from the existing list.
     * @param {String} token The authentication token.
     * @param {String} id The id of the term to delete.
     * @param {module:api/DefaultApi~termdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    termdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling termdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling termdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/termdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the termget operation.
     * @callback module:api/DefaultApi~termgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a term
     * Allows the user to view a term and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the term to get.
     * @param {module:api/DefaultApi~termgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    termget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling termget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling termget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/termget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the termlist operation.
     * @callback module:api/DefaultApi~termlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of all terms
     * Allows the user to view the full list of existing term.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The first record to return.
     * @param {Number} opts.count The max number of records to return.
     * @param {Boolean} opts.notpast Specifies whether the terms in the past should be returned or not.
     * @param {module:api/DefaultApi~termlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    termlist(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling termlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': opts['from'],
        'count': opts['count'],
        'notpast': opts['notpast']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/termlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the termsave operation.
     * @callback module:api/DefaultApi~termsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create and edit terms
     * Allows the user to create and edit terms.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~termsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    termsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/termsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the textcreditremaining operation.
     * @callback module:api/DefaultApi~textcreditremainingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the remaining text credits for the account
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~textcreditremainingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    textcreditremaining(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling textcreditremaining");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/textcreditremaining', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the texttoimage operation.
     * @callback module:api/DefaultApi~texttoimageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a dynamic image from text
     * @param {String} token The authentication token.
     * @param {String} text The text to convert to an image, use double pipes (||) as a new line.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fontcolor The color of the text, in hex format, without the #.
     * @param {Number} opts.fontsize The size of the text, in points.
     * @param {String} opts.direction Either vertical or horizontal, default horizontal.
     * @param {Number} opts.width The image width in pixels (or height if the direction is vertical).
     * @param {module:api/DefaultApi~texttoimageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    texttoimage(token, text, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling texttoimage");
      }
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling texttoimage");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'text': text,
        'fontcolor': opts['fontcolor'],
        'fontsize': opts['fontsize'],
        'direction': opts['direction'],
        'width': opts['width']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/texttoimage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translationget operation.
     * @callback module:api/DefaultApi~translationgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the translations of the specified values
     * @param {String} token The authentication token.
     * @param {String} universal Pipe separated list of universal text to be translated.
     * @param {module:api/DefaultApi~translationgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    translationget(token, universal, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling translationget");
      }
      // verify the required parameter 'universal' is set
      if (universal === undefined || universal === null) {
        throw new Error("Missing the required parameter 'universal' when calling translationget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'universal': universal
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/translationget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translationgetcachefile operation.
     * @callback module:api/DefaultApi~translationgetcachefileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the file containing the translations
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {String} opts.account The id of the account whose translations file has to be retrieved.
     * @param {module:api/DefaultApi~translationgetcachefileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    translationgetcachefile(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'account': opts['account']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/translationgetcachefile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translationlist operation.
     * @callback module:api/DefaultApi~translationlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the available translations in the system
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Text to search/filter translations.
     * @param {Boolean} opts.nondefaultonly If true then it returns only the terms translated. Otherwise, it returns all.
     * @param {Boolean} opts.appdefaultasuniversal If true then it uses the app default translation as the universal term.
     * @param {module:api/DefaultApi~translationlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    translationlist(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling translationlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'filter': opts['filter'],
        'nondefaultonly': opts['nondefaultonly'],
        'appdefaultasuniversal': opts['appdefaultasuniversal']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/translationlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translationsave operation.
     * @callback module:api/DefaultApi~translationsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a translation
     * Allows the user to edit a translation for the entire account.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~translationsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    translationsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/translationsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userchangepwd operation.
     * @callback module:api/DefaultApi~userchangepwdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change user's own password
     * Allows the user to change their own password.
     * @param {String} token The authentication token.
     * @param {String} oldpass The old password of the authenticated user.
     * @param {String} newpass The new password of the authenticated user.
     * @param {module:api/DefaultApi~userchangepwdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userchangepwd(token, oldpass, newpass, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userchangepwd");
      }
      // verify the required parameter 'oldpass' is set
      if (oldpass === undefined || oldpass === null) {
        throw new Error("Missing the required parameter 'oldpass' when calling userchangepwd");
      }
      // verify the required parameter 'newpass' is set
      if (newpass === undefined || newpass === null) {
        throw new Error("Missing the required parameter 'newpass' when calling userchangepwd");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'oldpass': oldpass,
        'newpass': newpass
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userchangepwd', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userchangepwdbyreq operation.
     * @callback module:api/DefaultApi~userchangepwdbyreqCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the user password using a change password request id
     * @param {String} changereq The change password request ID sent by email to the user.
     * @param {String} newpass The new password of the user.
     * @param {module:api/DefaultApi~userchangepwdbyreqCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userchangepwdbyreq(changereq, newpass, callback) {
      let postBody = null;
      // verify the required parameter 'changereq' is set
      if (changereq === undefined || changereq === null) {
        throw new Error("Missing the required parameter 'changereq' when calling userchangepwdbyreq");
      }
      // verify the required parameter 'newpass' is set
      if (newpass === undefined || newpass === null) {
        throw new Error("Missing the required parameter 'newpass' when calling userchangepwdbyreq");
      }

      let pathParams = {
      };
      let queryParams = {
        'changereq': changereq,
        'newpass': newpass
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userchangepwdbyreq', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userdelete operation.
     * @callback module:api/DefaultApi~userdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user
     * Allows the user to delete a user.
     * @param {String} token The authentication token.
     * @param {String} id The id of the user to delete.
     * @param {module:api/DefaultApi~userdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userfindsimilar operation.
     * @callback module:api/DefaultApi~userfindsimilarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds similar users to prevent duplicates
     * Allows the user to be warned if a user they are creating has the same card number as another user.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.currentid The id of the current user.
     * @param {String} opts.phonenumber A phone number to search for similar users.
     * @param {String} opts.cardnumber A card number to search for similar users.
     * @param {module:api/DefaultApi~userfindsimilarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userfindsimilar(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userfindsimilar");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'currentid': opts['currentid'],
        'phonenumber': opts['phonenumber'],
        'cardnumber': opts['cardnumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userfindsimilar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userget operation.
     * @callback module:api/DefaultApi~usergetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a user
     * Allows the user to search and view a user and their details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the user to get.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~usergetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userget(token, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergetbycard operation.
     * @callback module:api/DefaultApi~usergetbycardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search user by card number
     * Allows the user to search for a user by their card number.
     * @param {String} token The authentication token.
     * @param {String} card The card number of the user to get.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~usergetbycardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergetbycard(token, card, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergetbycard");
      }
      // verify the required parameter 'card' is set
      if (card === undefined || card === null) {
        throw new Error("Missing the required parameter 'card' when calling usergetbycard");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'card': card,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergetbycard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupaddmember operation.
     * @callback module:api/DefaultApi~usergroupaddmemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a user to a group
     * Allows the user to add a user to a group that they have permission to edit.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to add.
     * @param {String} groupid The id of the group.
     * @param {module:api/DefaultApi~usergroupaddmemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupaddmember(token, userid, groupid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupaddmember");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling usergroupaddmember");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling usergroupaddmember");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'groupid': groupid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroupaddmember', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupdelete operation.
     * @callback module:api/DefaultApi~usergroupdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a group
     * Allows the user to delete a group that they have permission to edit.
     * @param {String} token The authentication token.
     * @param {String} id The id of the group to delete.
     * @param {module:api/DefaultApi~usergroupdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usergroupdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroupdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupget operation.
     * @callback module:api/DefaultApi~usergroupgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a user group
     * Allows the user to view a user group and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the user group to get.
     * @param {module:api/DefaultApi~usergroupgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usergroupget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroupget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupgetmembers operation.
     * @callback module:api/DefaultApi~usergroupgetmembersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the members of a user group
     * Allows the user to view the list of users in a group that they have permission to view.
     * @param {String} token The authentication token.
     * @param {String} groupid The id of the user group to get.
     * @param {module:api/DefaultApi~usergroupgetmembersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupgetmembers(token, groupid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupgetmembers");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling usergroupgetmembers");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'groupid': groupid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroupgetmembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupgetuser operation.
     * @callback module:api/DefaultApi~usergroupgetuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the groups which a user is registered to
     * Allows the user to view the groups an individual user is registered to, based on group and user permissions.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to get his groups.
     * @param {module:api/DefaultApi~usergroupgetuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupgetuser(token, userid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupgetuser");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling usergroupgetuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroupgetuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergrouplist operation.
     * @callback module:api/DefaultApi~usergrouplistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of user groups
     * Allows the user to view the list of groups that they have permission to view.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The first record to return.
     * @param {Number} opts.count The max number of records to return.
     * @param {String} opts.type The type of the groups to return. Either 'user', 'dynamic' or any other type of group.
     * @param {module:api/DefaultApi~usergrouplistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergrouplist(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergrouplist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': opts['from'],
        'count': opts['count'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergrouplist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergrouprefresh operation.
     * @callback module:api/DefaultApi~usergrouprefreshCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh the dynamic group
     * Allows the user to refresh a dynamic group that they have permission to edit.
     * @param {String} token The authentication token.
     * @param {String} group The ID of the group to refresh.
     * @param {module:api/DefaultApi~usergrouprefreshCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergrouprefresh(token, group, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergrouprefresh");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling usergrouprefresh");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'group': group
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergrouprefresh', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupremovemember operation.
     * @callback module:api/DefaultApi~usergroupremovememberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user from a group
     * Allows the user to remove a user from a group that they have permission to edit.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to remove.
     * @param {String} groupid The id of the group.
     * @param {module:api/DefaultApi~usergroupremovememberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupremovemember(token, userid, groupid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupremovemember");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling usergroupremovemember");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling usergroupremovemember");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'groupid': groupid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroupremovemember', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupsave operation.
     * @callback module:api/DefaultApi~usergroupsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a group
     * Allows the user to create a new group or edit a group that they have permission to edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~usergroupsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroupsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergrouptagmembers operation.
     * @callback module:api/DefaultApi~usergrouptagmembersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign tags to the members of a specified group
     * Allows the user to assign tags to the users of a group that they have permission to edit.
     * @param {String} token The authentication token.
     * @param {String} group The id of the group to save whose members have to be tagged.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tags The tags to assign to the members of the specified group, in JSON format.
     * @param {module:api/DefaultApi~usergrouptagmembersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergrouptagmembers(token, group, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergrouptagmembers");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling usergrouptagmembers");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'group': group,
        'tags': opts['tags']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergrouptagmembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupuntagmembers operation.
     * @callback module:api/DefaultApi~usergroupuntagmembersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unassign tags from the members of a specified group
     * Allows the user to unassign tags to the users of a group that they have permission to edit.
     * @param {String} token The authentication token.
     * @param {String} group The id of the group to save whose members have to be untagged.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tags The tags to unassign from the members of the specified group, in JSON format.
     * @param {module:api/DefaultApi~usergroupuntagmembersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupuntagmembers(token, group, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupuntagmembers");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling usergroupuntagmembers");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'group': group,
        'tags': opts['tags']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroupuntagmembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userlist operation.
     * @callback module:api/DefaultApi~userlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of users
     * Allows the user to view the full list of users and is based on role permissions.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.roleid The id of the role to filter users by, or empty to return all users.
     * @param {String} opts.onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~userlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userlist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling userlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling userlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'roleid': opts['roleid'],
        'onlywithoutcard': opts['onlywithoutcard'],
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userloadphoto operation.
     * @callback module:api/DefaultApi~userloadphotoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a photo for a specific user
     * Allows the user to upload a photo for a user.
     * @param {String} token The authentication token.
     * @param {String} upload Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).
     * @param {Object} opts Optional parameters
     * @param {String} opts.filename The local name of the uploaded file. For later reference.
     * @param {String} opts.userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in 'user.save'.
     * @param {Boolean} opts.automatch Set this to true to find the specific user based on the file name. 
     * @param {module:api/DefaultApi~userloadphotoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userloadphoto(token, upload, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userloadphoto");
      }
      // verify the required parameter 'upload' is set
      if (upload === undefined || upload === null) {
        throw new Error("Missing the required parameter 'upload' when calling userloadphoto");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'upload': upload,
        'filename': opts['filename'],
        'userid': opts['userid'],
        'automatch': opts['automatch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userloadphoto', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usermovedata operation.
     * @callback module:api/DefaultApi~usermovedataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move data between users
     * Allows administrators to move data between users.
     * @param {String} token The authentication token.
     * @param {String} source The id of the user that is the source of the data.
     * @param {String} destination The id of the user that is the destination of the data.
     * @param {module:api/DefaultApi~usermovedataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usermovedata(token, source, destination, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usermovedata");
      }
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling usermovedata");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling usermovedata");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'source': source,
        'destination': destination
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usermovedata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userprofiledelete operation.
     * @callback module:api/DefaultApi~userprofiledeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user profile
     * Allows the user to delete a profile from the list of profiles that they have permission to edit.
     * @param {String} token The authentication token.
     * @param {String} id The id of the user profile to delete.
     * @param {module:api/DefaultApi~userprofiledeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userprofiledelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userprofiledelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userprofiledelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userprofiledelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userprofileget operation.
     * @callback module:api/DefaultApi~userprofilegetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a specific user profile
     * Allows the user to view individual user profiles and their details, provided they have permission to view that profile.
     * @param {String} token The authentication token.
     * @param {String} id The id of the profile question set.
     * @param {module:api/DefaultApi~userprofilegetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userprofileget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userprofileget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userprofileget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userprofileget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userprofilegetallview operation.
     * @callback module:api/DefaultApi~userprofilegetallviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows the profile for a specific (or current) user, based on each profile questionnaire questions.
     * Allows the user to view a profile for a user, provided they have permission to view that user and profile.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The id of the user to view, or empty for current user.
     * @param {module:api/DefaultApi~userprofilegetallviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userprofilegetallview(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userprofilegetallview");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userprofilegetallview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userprofilelist operation.
     * @callback module:api/DefaultApi~userprofilelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the list of user profiles
     * Allows the user to view the full list of profiles that they have permission to view.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The first record to return.
     * @param {Number} opts.count The max number of records to return.
     * @param {module:api/DefaultApi~userprofilelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userprofilelist(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userprofilelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': opts['from'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userprofilelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userprofilelistquestions operation.
     * @callback module:api/DefaultApi~userprofilelistquestionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of all the available user questions
     * Allows the user to view the list of questions in a profile that they have permission to view.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~userprofilelistquestionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userprofilelistquestions(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userprofilelistquestions");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userprofilelistquestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userprofilepreparestats operation.
     * @callback module:api/DefaultApi~userprofilepreparestatsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the statistics of a user group
     * Allows the user to view the demographic statistics of a user group.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.params The ID of the group, specified as 'group=...'
     * @param {module:api/DefaultApi~userprofilepreparestatsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userprofilepreparestats(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userprofilepreparestats");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'params': opts['params']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userprofilepreparestats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userprofilesave operation.
     * @callback module:api/DefaultApi~userprofilesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit user profile questions
     * Allows the user to create or edit a user profile.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~userprofilesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userprofilesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userprofilesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userprofilesaveanswers operation.
     * @callback module:api/DefaultApi~userprofilesaveanswersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves the profile for a specific (or current) user. Additional security applies on a per profile basis.
     * Allows the user to edit a profile for a user, provided they have permission to edit that user and profile.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~userprofilesaveanswersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userprofilesaveanswers(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userprofilesaveanswers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userrequestpwdchange operation.
     * @callback module:api/DefaultApi~userrequestpwdchangeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests a password change
     * @param {String} domain The domain of the account where the user exists.
     * @param {String} email The email of the user.
     * @param {module:api/DefaultApi~userrequestpwdchangeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userrequestpwdchange(domain, email, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling userrequestpwdchange");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling userrequestpwdchange");
      }

      let pathParams = {
      };
      let queryParams = {
        'domain': domain,
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userrequestpwdchange', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersave operation.
     * @callback module:api/DefaultApi~usersaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a user
     * Allows the user to create or edit a user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~usersaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usersave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersavepwdchange operation.
     * @callback module:api/DefaultApi~usersavepwdchangeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send email to the specified user(s) to set/change their passwords
     * Allows the user to trigger an email to another user asking them to set or change their password.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~usersavepwdchangeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersavepwdchange(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usersavepwdchange', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersettingsget operation.
     * @callback module:api/DefaultApi~usersettingsgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists available user settings
     * @param {String} token The authentication token.
     * @param {String} keys Setting key to get. Can be multiple separated by commas.
     * @param {Object} opts Optional parameters
     * @param {String} opts.user The user id whose settings have to be returned.
     * @param {module:api/DefaultApi~usersettingsgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersettingsget(token, keys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usersettingsget");
      }
      // verify the required parameter 'keys' is set
      if (keys === undefined || keys === null) {
        throw new Error("Missing the required parameter 'keys' when calling usersettingsget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'keys': keys,
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usersettingsget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersettingsgetmultiple operation.
     * @callback module:api/DefaultApi~usersettingsgetmultipleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get multiple user settings
     * @param {String} token The authentication token.
     * @param {String} keys Setting key to get. Can be multiple separated by commas.
     * @param {Object} opts Optional parameters
     * @param {String} opts.user The user id whose settings have to be returned.
     * @param {module:api/DefaultApi~usersettingsgetmultipleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersettingsgetmultiple(token, keys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usersettingsgetmultiple");
      }
      // verify the required parameter 'keys' is set
      if (keys === undefined || keys === null) {
        throw new Error("Missing the required parameter 'keys' when calling usersettingsgetmultiple");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'keys': keys,
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usersettingsgetmultiple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersettingssave operation.
     * @callback module:api/DefaultApi~usersettingssaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves a user setting
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~usersettingssaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersettingssave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usersettingssave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersettingssavemultiple operation.
     * @callback module:api/DefaultApi~usersettingssavemultipleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save multiple user settings at once
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~usersettingssavemultipleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersettingssavemultiple(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usersettingssavemultiple', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the version operation.
     * @callback module:api/DefaultApi~versionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current version information
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~versionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    version(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling version");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/version', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtuallineaddmyself operation.
     * @callback module:api/DefaultApi~virtuallineaddmyselfCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add myself to a waiting line
     * Allows the user to add themselves to a waiting line from the AccuCampus mobile app.
     * @param {String} token The authentication token.
     * @param {String} waitinglineid ID of the waiting line to join.
     * @param {module:api/DefaultApi~virtuallineaddmyselfCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtuallineaddmyself(token, waitinglineid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling virtuallineaddmyself");
      }
      // verify the required parameter 'waitinglineid' is set
      if (waitinglineid === undefined || waitinglineid === null) {
        throw new Error("Missing the required parameter 'waitinglineid' when calling virtuallineaddmyself");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'waitinglineid': waitinglineid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtuallineaddmyself', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtuallinelist operation.
     * @callback module:api/DefaultApi~virtuallinelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists waiting lines that have remote access enabled
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~virtuallinelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtuallinelist(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling virtuallinelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtuallinelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtuallineremovemyself operation.
     * @callback module:api/DefaultApi~virtuallineremovemyselfCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove myself from a waiting line
     * Allows the user to remove themselves from a waiting line in the AccuCampus mobile app.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~virtuallineremovemyselfCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtuallineremovemyself(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling virtuallineremovemyself");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtuallineremovemyself', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the waitinglineadduser operation.
     * @callback module:api/DefaultApi~waitinglineadduserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put user in a waiting line
     * @param {String} station The id of the sign-in station.
     * @param {String} user The user's card number.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locationid The location's id where the swipe must be saved.
     * @param {Date} opts.time The date and time of the swipe.
     * @param {String} opts.signinrole Specifies if the sign-in is for an attendee or a staff member
     * @param {String} opts.roleid Specifies the role the user has selected in order to sign-in
     * @param {String} opts.services The services ids the user has selected.
     * @param {String} opts.eventid The id of the event the user selected.
     * @param {String} opts.staff The id of the staff member the user selected.
     * @param {Number} opts.photosize The swiping user's photo size.
     * @param {module:api/DefaultApi~waitinglineadduserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    waitinglineadduser(station, user, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling waitinglineadduser");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling waitinglineadduser");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'locationid': opts['locationid'],
        'time': opts['time'],
        'user': user,
        'signinrole': opts['signinrole'],
        'roleid': opts['roleid'],
        'services': opts['services'],
        'eventid': opts['eventid'],
        'staff': opts['staff'],
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/waitinglineadduser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the waitinglinedelete operation.
     * @callback module:api/DefaultApi~waitinglinedeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a waiting line
     * Allows the user to delete an existing waiting line, provided it is in a location that the user is scoped to.
     * @param {String} token The authentication token.
     * @param {String} id The id of the line to delete.
     * @param {module:api/DefaultApi~waitinglinedeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    waitinglinedelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling waitinglinedelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling waitinglinedelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/waitinglinedelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the waitinglineget operation.
     * @callback module:api/DefaultApi~waitinglinegetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a waiting line
     * Allows the user to view the details of a waiting line in a location to which they are scoped.
     * @param {String} token The authentication token.
     * @param {String} id The id of the waiting line to get.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~waitinglinegetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    waitinglineget(token, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling waitinglineget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling waitinglineget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/waitinglineget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the waitinglineisuserin operation.
     * @callback module:api/DefaultApi~waitinglineisuserinCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether a user is in a waiting line, signed-in or is not in the area
     * @param {String} station The id of the sign-in station.
     * @param {Date} time The date and time of the swipe.
     * @param {String} user The card number of the user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.location The id of the location the user picked.
     * @param {module:api/DefaultApi~waitinglineisuserinCallback} callback The callback function, accepting three arguments: error, data, response
     */
    waitinglineisuserin(station, time, user, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling waitinglineisuserin");
      }
      // verify the required parameter 'time' is set
      if (time === undefined || time === null) {
        throw new Error("Missing the required parameter 'time' when calling waitinglineisuserin");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling waitinglineisuserin");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'time': time,
        'user': user,
        'location': opts['location']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/waitinglineisuserin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the waitinglinelist operation.
     * @callback module:api/DefaultApi~waitinglinelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of waiting lines
     * Allows the user to view the list of waiting lines in locations to which they are scoped.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~waitinglinelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    waitinglinelist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling waitinglinelist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling waitinglinelist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling waitinglinelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/waitinglinelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the waitinglineremoveuser operation.
     * @callback module:api/DefaultApi~waitinglineremoveuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user from a waiting line
     * Allows the user to remove a user from a waiting line, provided they have permission to access that waiting line.
     * @param {String} token The authentication token.
     * @param {String} waitingline The id of the waiting line whose item has to be removed.
     * @param {String} itemid The ID of the item that has to be removed.
     * @param {module:api/DefaultApi~waitinglineremoveuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    waitinglineremoveuser(token, waitingline, itemid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling waitinglineremoveuser");
      }
      // verify the required parameter 'waitingline' is set
      if (waitingline === undefined || waitingline === null) {
        throw new Error("Missing the required parameter 'waitingline' when calling waitinglineremoveuser");
      }
      // verify the required parameter 'itemid' is set
      if (itemid === undefined || itemid === null) {
        throw new Error("Missing the required parameter 'itemid' when calling waitinglineremoveuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'waitingline': waitingline,
        'itemid': itemid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/waitinglineremoveuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the waitinglinesave operation.
     * @callback module:api/DefaultApi~waitinglinesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a waiting line
     * Allows the user to create or edit a waiting line in a location to which they are scoped.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~waitinglinesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    waitinglinesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/waitinglinesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the waitinglinesigninuser operation.
     * @callback module:api/DefaultApi~waitinglinesigninuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign a user in from a waiting line
     * Allows the user to sign a user in from a waiting line, provided they have permission to access that waiting line.
     * @param {String} token The authentication token.
     * @param {String} waitingline The id of the waiting line whose item needs to be signed-in.
     * @param {String} itemid The ID of the item that has to be signed-in.
     * @param {String} staff The id of the staff member selected to sign-in.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The swiping user's photo size.
     * @param {module:api/DefaultApi~waitinglinesigninuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    waitinglinesigninuser(token, waitingline, itemid, staff, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling waitinglinesigninuser");
      }
      // verify the required parameter 'waitingline' is set
      if (waitingline === undefined || waitingline === null) {
        throw new Error("Missing the required parameter 'waitingline' when calling waitinglinesigninuser");
      }
      // verify the required parameter 'itemid' is set
      if (itemid === undefined || itemid === null) {
        throw new Error("Missing the required parameter 'itemid' when calling waitinglinesigninuser");
      }
      // verify the required parameter 'staff' is set
      if (staff === undefined || staff === null) {
        throw new Error("Missing the required parameter 'staff' when calling waitinglinesigninuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'waitingline': waitingline,
        'itemid': itemid,
        'staff': staff,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/waitinglinesigninuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
