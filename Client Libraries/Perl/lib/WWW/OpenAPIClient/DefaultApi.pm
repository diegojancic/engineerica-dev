=begin comment

AccuCampus OpenAPI 3 Documentation

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::DefaultApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# actionassignmentdelete
#
# Remove an action item from an action plan
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the action assignment to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the action assignment to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignmentdelete' } = { 
        summary => 'Remove an action item from an action plan',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignmentdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actionassignmentdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling actionassignmentdelete");
    }

    # parse inputs
    my $_resource_path = '/actionassignmentdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionassignmentget
#
# Search and view details of an action item assigned to a user
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the action assignment to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the action assignment to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignmentget' } = { 
        summary => 'Search and view details of an action item assigned to a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignmentget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actionassignmentget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling actionassignmentget");
    }

    # parse inputs
    my $_resource_path = '/actionassignmentget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionassignmentlist
#
# View a list of action items in a user's plan
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param int $assignee The assignee&#39;s id to filter the assignments. (optional)
# @param int $status The status to filter the assignments. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'assignee' => {
        data_type => 'int',
        description => 'The assignee&#39;s id to filter the assignments.',
        required => '0',
    },
    'status' => {
        data_type => 'int',
        description => 'The status to filter the assignments.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignmentlist' } = { 
        summary => 'View a list of action items in a user&#39;s plan',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignmentlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actionassignmentlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling actionassignmentlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling actionassignmentlist");
    }

    # parse inputs
    my $_resource_path = '/actionassignmentlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'assignee'}) {
        $query_params->{'assignee'} = $self->{api_client}->to_query_value($args{'assignee'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionassignmentlisthistory
#
# View the history of an action item assigned to a user
# 
# @param string $token The authentication token. (required)
# @param string $actionassignment The action assignment&#39;s id whose history the user wants to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'actionassignment' => {
        data_type => 'string',
        description => 'The action assignment&#39;s id whose history the user wants to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignmentlisthistory' } = { 
        summary => 'View the history of an action item assigned to a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignmentlisthistory {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actionassignmentlisthistory");
    }

    # verify the required parameter 'actionassignment' is set
    unless (exists $args{'actionassignment'}) {
      croak("Missing the required parameter 'actionassignment' when calling actionassignmentlisthistory");
    }

    # parse inputs
    my $_resource_path = '/actionassignmentlisthistory';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'actionassignment'}) {
        $query_params->{'actionassignment'} = $self->{api_client}->to_query_value($args{'actionassignment'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionassignmentlistmine
#
# List public action assignments assigned to the logged user
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param int $status The status to filter the assignments. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'status' => {
        data_type => 'int',
        description => 'The status to filter the assignments.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignmentlistmine' } = { 
        summary => 'List public action assignments assigned to the logged user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignmentlistmine {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actionassignmentlistmine");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling actionassignmentlistmine");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling actionassignmentlistmine");
    }

    # parse inputs
    my $_resource_path = '/actionassignmentlistmine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionassignmentlistpublichistory
#
# List public action assignment history
# 
# @param string $token The authentication token. (required)
# @param string $actionassignment The action assignment&#39;s id whose history the user wants to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'actionassignment' => {
        data_type => 'string',
        description => 'The action assignment&#39;s id whose history the user wants to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignmentlistpublichistory' } = { 
        summary => 'List public action assignment history',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignmentlistpublichistory {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actionassignmentlistpublichistory");
    }

    # verify the required parameter 'actionassignment' is set
    unless (exists $args{'actionassignment'}) {
      croak("Missing the required parameter 'actionassignment' when calling actionassignmentlistpublichistory");
    }

    # parse inputs
    my $_resource_path = '/actionassignmentlistpublichistory';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'actionassignment'}) {
        $query_params->{'actionassignment'} = $self->{api_client}->to_query_value($args{'actionassignment'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionassignmentmarkcomplete
#
# Bulk complete action items
# 
# @param string $token The authentication token. (required)
# @param string $item The action item to assign. (required)
# @param string $assignee The assignee of the item. (optional)
# @param string $group The group to assing the item. (optional)
# @param string $notes The assignment&#39;s notes. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'item' => {
        data_type => 'string',
        description => 'The action item to assign.',
        required => '1',
    },
    'assignee' => {
        data_type => 'string',
        description => 'The assignee of the item.',
        required => '0',
    },
    'group' => {
        data_type => 'string',
        description => 'The group to assing the item.',
        required => '0',
    },
    'notes' => {
        data_type => 'string',
        description => 'The assignment&#39;s notes.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignmentmarkcomplete' } = { 
        summary => 'Bulk complete action items',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignmentmarkcomplete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actionassignmentmarkcomplete");
    }

    # verify the required parameter 'item' is set
    unless (exists $args{'item'}) {
      croak("Missing the required parameter 'item' when calling actionassignmentmarkcomplete");
    }

    # parse inputs
    my $_resource_path = '/actionassignmentmarkcomplete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'assignee'}) {
        $query_params->{'assignee'} = $self->{api_client}->to_query_value($args{'assignee'});
    }

    # query params
    if ( exists $args{'group'}) {
        $query_params->{'group'} = $self->{api_client}->to_query_value($args{'group'});
    }

    # query params
    if ( exists $args{'item'}) {
        $query_params->{'item'} = $self->{api_client}->to_query_value($args{'item'});
    }

    # query params
    if ( exists $args{'notes'}) {
        $query_params->{'notes'} = $self->{api_client}->to_query_value($args{'notes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionassignmentsave
#
# Add an action item to a user's action plan
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignmentsave' } = { 
        summary => 'Add an action item to a user&#39;s action plan',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignmentsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/actionassignmentsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionassignmentsavehistory
#
# Update an action item assigned to a user
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignmentsavehistory' } = { 
        summary => 'Update an action item assigned to a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignmentsavehistory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/actionassignmentsavehistory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionitemdelete
#
# Delete an action item
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the action item to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the action item to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionitemdelete' } = { 
        summary => 'Delete an action item',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionitemdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actionitemdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling actionitemdelete");
    }

    # parse inputs
    my $_resource_path = '/actionitemdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionitemget
#
# Search and view details of an action item
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the action item to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the action item to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionitemget' } = { 
        summary => 'Search and view details of an action item',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionitemget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actionitemget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling actionitemget");
    }

    # parse inputs
    my $_resource_path = '/actionitemget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionitemlist
#
# View a list of action items
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionitemlist' } = { 
        summary => 'View a list of action items',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionitemlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actionitemlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling actionitemlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling actionitemlist");
    }

    # parse inputs
    my $_resource_path = '/actionitemlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionitemsave
#
# Create or edit an action item
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionitemsave' } = { 
        summary => 'Create or edit an action item',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionitemsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/actionitemsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionloglist
#
# View a list of users action logs
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $user The id of the user whose action logs have to be returned. (optional)
# @param DateTime $startdate The start date of the period to filter the logs. (optional)
# @param DateTime $enddate The end date of the period to filter the logs. (optional)
# @param string $resource The resource to filter the action logs. (optional)
# @param string $actionfilter The action to filter the action logs. (optional)
# @param string $argument The id of the entity that was the argument of the executed action. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The id of the user whose action logs have to be returned.',
        required => '0',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'The start date of the period to filter the logs.',
        required => '0',
    },
    'enddate' => {
        data_type => 'DateTime',
        description => 'The end date of the period to filter the logs.',
        required => '0',
    },
    'resource' => {
        data_type => 'string',
        description => 'The resource to filter the action logs.',
        required => '0',
    },
    'actionfilter' => {
        data_type => 'string',
        description => 'The action to filter the action logs.',
        required => '0',
    },
    'argument' => {
        data_type => 'string',
        description => 'The id of the entity that was the argument of the executed action.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionloglist' } = { 
        summary => 'View a list of users action logs',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionloglist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actionloglist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling actionloglist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling actionloglist");
    }

    # parse inputs
    my $_resource_path = '/actionloglist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'enddate'}) {
        $query_params->{'enddate'} = $self->{api_client}->to_query_value($args{'enddate'});
    }

    # query params
    if ( exists $args{'resource'}) {
        $query_params->{'resource'} = $self->{api_client}->to_query_value($args{'resource'});
    }

    # query params
    if ( exists $args{'actionfilter'}) {
        $query_params->{'actionfilter'} = $self->{api_client}->to_query_value($args{'actionfilter'});
    }

    # query params
    if ( exists $args{'argument'}) {
        $query_params->{'argument'} = $self->{api_client}->to_query_value($args{'argument'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionpackassign
#
# Assign an action item pack to a user
# 
# @param string $token The authentication token. (required)
# @param string $pack The id of the action pack to assign. (required)
# @param boolean $itemsdata A JSON array containing the action items&#39; data needed to assign them to the assignee (Id, Event, DateDue, DateExpired, NotifyAssigne). (required)
# @param string $assignee The assignee of the pack. (optional)
# @param string $group The group to assign the pack. (optional)
# @param string $notes The assignment&#39;s notes. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'pack' => {
        data_type => 'string',
        description => 'The id of the action pack to assign.',
        required => '1',
    },
    'itemsdata' => {
        data_type => 'boolean',
        description => 'A JSON array containing the action items&#39; data needed to assign them to the assignee (Id, Event, DateDue, DateExpired, NotifyAssigne).',
        required => '1',
    },
    'assignee' => {
        data_type => 'string',
        description => 'The assignee of the pack.',
        required => '0',
    },
    'group' => {
        data_type => 'string',
        description => 'The group to assign the pack.',
        required => '0',
    },
    'notes' => {
        data_type => 'string',
        description => 'The assignment&#39;s notes.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionpackassign' } = { 
        summary => 'Assign an action item pack to a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionpackassign {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actionpackassign");
    }

    # verify the required parameter 'pack' is set
    unless (exists $args{'pack'}) {
      croak("Missing the required parameter 'pack' when calling actionpackassign");
    }

    # verify the required parameter 'itemsdata' is set
    unless (exists $args{'itemsdata'}) {
      croak("Missing the required parameter 'itemsdata' when calling actionpackassign");
    }

    # parse inputs
    my $_resource_path = '/actionpackassign';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'pack'}) {
        $query_params->{'pack'} = $self->{api_client}->to_query_value($args{'pack'});
    }

    # query params
    if ( exists $args{'assignee'}) {
        $query_params->{'assignee'} = $self->{api_client}->to_query_value($args{'assignee'});
    }

    # query params
    if ( exists $args{'group'}) {
        $query_params->{'group'} = $self->{api_client}->to_query_value($args{'group'});
    }

    # query params
    if ( exists $args{'itemsdata'}) {
        $query_params->{'itemsdata'} = $self->{api_client}->to_query_value($args{'itemsdata'});
    }

    # query params
    if ( exists $args{'notes'}) {
        $query_params->{'notes'} = $self->{api_client}->to_query_value($args{'notes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionpackdelete
#
# Delete an action item pack
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the action pack to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the action pack to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionpackdelete' } = { 
        summary => 'Delete an action item pack',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionpackdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actionpackdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling actionpackdelete");
    }

    # parse inputs
    my $_resource_path = '/actionpackdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionpackget
#
# View details of an action item pack
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the action pack to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the action pack to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionpackget' } = { 
        summary => 'View details of an action item pack',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionpackget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actionpackget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling actionpackget");
    }

    # parse inputs
    my $_resource_path = '/actionpackget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionpacklist
#
# View a list of action item packs
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionpacklist' } = { 
        summary => 'View a list of action item packs',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionpacklist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actionpacklist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling actionpacklist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling actionpacklist");
    }

    # parse inputs
    my $_resource_path = '/actionpacklist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionpacksave
#
# Create or edit an action item pack
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionpacksave' } = { 
        summary => 'Create or edit an action item pack',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionpacksave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/actionpacksave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actiontypedelete
#
# Delete an action item type
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the action type to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the action type to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'actiontypedelete' } = { 
        summary => 'Delete an action item type',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actiontypedelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actiontypedelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling actiontypedelete");
    }

    # parse inputs
    my $_resource_path = '/actiontypedelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actiontypeget
#
# View details of an action item type
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the action type to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the action type to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'actiontypeget' } = { 
        summary => 'View details of an action item type',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actiontypeget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actiontypeget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling actiontypeget");
    }

    # parse inputs
    my $_resource_path = '/actiontypeget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actiontypelist
#
# View a list of action item types
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'actiontypelist' } = { 
        summary => 'View a list of action item types',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actiontypelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling actiontypelist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling actiontypelist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling actiontypelist");
    }

    # parse inputs
    my $_resource_path = '/actiontypelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actiontypesave
#
# Create or edit an action item type
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'actiontypesave' } = { 
        summary => 'Create or edit an action item type',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actiontypesave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/actiontypesave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# adhocquerycheckexecution
#
# Check the status of an ad hoc query execution
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the ad hoc query execution to be checked. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the ad hoc query execution to be checked.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'adhocquerycheckexecution' } = { 
        summary => 'Check the status of an ad hoc query execution',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub adhocquerycheckexecution {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling adhocquerycheckexecution");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling adhocquerycheckexecution");
    }

    # parse inputs
    my $_resource_path = '/adhocquerycheckexecution';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# adhocquerydelete
#
# Delete an ad hoc query
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the ad hoc query to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the ad hoc query to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'adhocquerydelete' } = { 
        summary => 'Delete an ad hoc query',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub adhocquerydelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling adhocquerydelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling adhocquerydelete");
    }

    # parse inputs
    my $_resource_path = '/adhocquerydelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# adhocqueryexecute
#
# Execute an ad hoc query
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the query to execute. (optional)
# @param string $query The query to execute. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the query to execute.',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'The query to execute.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'adhocqueryexecute' } = { 
        summary => 'Execute an ad hoc query',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub adhocqueryexecute {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling adhocqueryexecute");
    }

    # parse inputs
    my $_resource_path = '/adhocqueryexecute';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# adhocqueryget
#
# View details of an ad hoc query
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the query to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the query to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'adhocqueryget' } = { 
        summary => 'View details of an ad hoc query',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub adhocqueryget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling adhocqueryget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling adhocqueryget");
    }

    # parse inputs
    my $_resource_path = '/adhocqueryget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# adhocquerygetschema
#
# View the database schema for making ad hoc queries
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'adhocquerygetschema' } = { 
        summary => 'View the database schema for making ad hoc queries',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub adhocquerygetschema {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling adhocquerygetschema");
    }

    # parse inputs
    my $_resource_path = '/adhocquerygetschema';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# adhocquerylist
#
# View a list of saved ad hoc queries
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'adhocquerylist' } = { 
        summary => 'View a list of saved ad hoc queries',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub adhocquerylist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling adhocquerylist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling adhocquerylist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling adhocquerylist");
    }

    # parse inputs
    my $_resource_path = '/adhocquerylist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# adhocquerylistexecutions
#
# View a list of ad hoc queries executions
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $query The first record to return. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'query' => {
        data_type => 'string',
        description => 'The first record to return.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'adhocquerylistexecutions' } = { 
        summary => 'View a list of ad hoc queries executions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub adhocquerylistexecutions {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling adhocquerylistexecutions");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling adhocquerylistexecutions");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling adhocquerylistexecutions");
    }

    # parse inputs
    my $_resource_path = '/adhocquerylistexecutions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# adhocquerysave
#
# Create or edit an ad hoc query
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'adhocquerysave' } = { 
        summary => 'Create or edit an ad hoc query',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub adhocquerysave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/adhocquerysave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# adhocquerystopexecution
#
# Stops the execution of an ad hoc query
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the ad hoc query execution to be stopped. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the ad hoc query execution to be stopped.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'adhocquerystopexecution' } = { 
        summary => 'Stops the execution of an ad hoc query',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub adhocquerystopexecution {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling adhocquerystopexecution");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling adhocquerystopexecution");
    }

    # parse inputs
    my $_resource_path = '/adhocquerystopexecution';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# adhocreportsreqaccess
#
# Request access to the ad-hoc reports
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'adhocreportsreqaccess' } = { 
        summary => 'Request access to the ad-hoc reports',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub adhocreportsreqaccess {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling adhocreportsreqaccess");
    }

    # parse inputs
    my $_resource_path = '/adhocreportsreqaccess';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advancedstationcheckunknownuser
#
# Check whether the user is known by the system.
# 
# @param string $station The id of the sign-in station to get. (required)
# @param string $user The card of the user. (required)
# @param string $location The id of the location the user picked. (required)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The card of the user.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location the user picked.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advancedstationcheckunknownuser' } = { 
        summary => 'Check whether the user is known by the system.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advancedstationcheckunknownuser {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling advancedstationcheckunknownuser");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling advancedstationcheckunknownuser");
    }

    # verify the required parameter 'location' is set
    unless (exists $args{'location'}) {
      croak("Missing the required parameter 'location' when calling advancedstationcheckunknownuser");
    }

    # parse inputs
    my $_resource_path = '/advancedstationcheckunknownuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advancedstationcheckuserrole
#
# Check whether the user is a staff member, an attendee or both.
# 
# @param string $station The id of the sign-in station to get. (required)
# @param string $user The card of the user. (required)
# @param string $location The id of the location the user picked. (required)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The card of the user.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location the user picked.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advancedstationcheckuserrole' } = { 
        summary => 'Check whether the user is a staff member, an attendee or both.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advancedstationcheckuserrole {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling advancedstationcheckuserrole");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling advancedstationcheckuserrole");
    }

    # verify the required parameter 'location' is set
    unless (exists $args{'location'}) {
      croak("Missing the required parameter 'location' when calling advancedstationcheckuserrole");
    }

    # parse inputs
    my $_resource_path = '/advancedstationcheckuserrole';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advancedstationcreateuser
#
# Creates a user via a sign-in station.
# 
# @param string $station The id of the sign-in station to get. (required)
# @param string $user The card of the user to create. (required)
# @param string $location The id of the location the user picked. (required)
# @param string $firstname The first name of the user to create. (required)
# @param string $lastname The last name of the user to create. (required)
# @param string $email The email of the user to create. (required)
# @param string $middlename The middle name of the user to create. (optional)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The card of the user to create.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location the user picked.',
        required => '1',
    },
    'firstname' => {
        data_type => 'string',
        description => 'The first name of the user to create.',
        required => '1',
    },
    'lastname' => {
        data_type => 'string',
        description => 'The last name of the user to create.',
        required => '1',
    },
    'email' => {
        data_type => 'string',
        description => 'The email of the user to create.',
        required => '1',
    },
    'middlename' => {
        data_type => 'string',
        description => 'The middle name of the user to create.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'advancedstationcreateuser' } = { 
        summary => 'Creates a user via a sign-in station.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advancedstationcreateuser {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling advancedstationcreateuser");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling advancedstationcreateuser");
    }

    # verify the required parameter 'location' is set
    unless (exists $args{'location'}) {
      croak("Missing the required parameter 'location' when calling advancedstationcreateuser");
    }

    # verify the required parameter 'firstname' is set
    unless (exists $args{'firstname'}) {
      croak("Missing the required parameter 'firstname' when calling advancedstationcreateuser");
    }

    # verify the required parameter 'lastname' is set
    unless (exists $args{'lastname'}) {
      croak("Missing the required parameter 'lastname' when calling advancedstationcreateuser");
    }

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling advancedstationcreateuser");
    }

    # parse inputs
    my $_resource_path = '/advancedstationcreateuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'firstname'}) {
        $query_params->{'firstname'} = $self->{api_client}->to_query_value($args{'firstname'});
    }

    # query params
    if ( exists $args{'middlename'}) {
        $query_params->{'middlename'} = $self->{api_client}->to_query_value($args{'middlename'});
    }

    # query params
    if ( exists $args{'lastname'}) {
        $query_params->{'lastname'} = $self->{api_client}->to_query_value($args{'lastname'});
    }

    # query params
    if ( exists $args{'email'}) {
        $query_params->{'email'} = $self->{api_client}->to_query_value($args{'email'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advancedstationgetevents
#
# Gets the courses available for a specific location and a specific student.
# 
# @param string $station The id of the sign-in station to get. (required)
# @param string $location The id of the location the student picked. (required)
# @param string $user The card of the user. (required)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location the student picked.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The card of the user.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advancedstationgetevents' } = { 
        summary => 'Gets the courses available for a specific location and a specific student.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advancedstationgetevents {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling advancedstationgetevents");
    }

    # verify the required parameter 'location' is set
    unless (exists $args{'location'}) {
      croak("Missing the required parameter 'location' when calling advancedstationgetevents");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling advancedstationgetevents");
    }

    # parse inputs
    my $_resource_path = '/advancedstationgetevents';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advancedstationgetinfo
#
# Gets the info to display in the sign-in station by it's ID.
# 
# @param string $id The id of the sign-in station to get. (required)
# @param string $event The id of the event (or session), to override the scheduled one. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'event' => {
        data_type => 'string',
        description => 'The id of the event (or session), to override the scheduled one.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'advancedstationgetinfo' } = { 
        summary => 'Gets the info to display in the sign-in station by it&#39;s ID.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advancedstationgetinfo {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling advancedstationgetinfo");
    }

    # parse inputs
    my $_resource_path = '/advancedstationgetinfo';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'event'}) {
        $query_params->{'event'} = $self->{api_client}->to_query_value($args{'event'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advancedstationgetlocations
#
# Gets the locations available in a sign-in station.
# 
# @param string $station The id of the sign-in station whose locations have to be returned. (required)
# @param string $user The card of the user. (required)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station whose locations have to be returned.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The card of the user.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advancedstationgetlocations' } = { 
        summary => 'Gets the locations available in a sign-in station.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advancedstationgetlocations {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling advancedstationgetlocations");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling advancedstationgetlocations");
    }

    # parse inputs
    my $_resource_path = '/advancedstationgetlocations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advancedstationgetlogstaff
#
# Gets the staff/tutors available filtered by the location, course and services of the given attendance log.
# 
# @param string $station The id of the sign-in station to get. (required)
# @param string $attendancelog The id of the attendance log to filter the staff members. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'attendancelog' => {
        data_type => 'string',
        description => 'The id of the attendance log to filter the staff members.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'advancedstationgetlogstaff' } = { 
        summary => 'Gets the staff/tutors available filtered by the location, course and services of the given attendance log.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advancedstationgetlogstaff {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling advancedstationgetlogstaff");
    }

    # verify the required parameter 'attendancelog' is set
    unless (exists $args{'attendancelog'}) {
      croak("Missing the required parameter 'attendancelog' when calling advancedstationgetlogstaff");
    }

    # parse inputs
    my $_resource_path = '/advancedstationgetlogstaff';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'attendancelog'}) {
        $query_params->{'attendancelog'} = $self->{api_client}->to_query_value($args{'attendancelog'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advancedstationgetroles
#
# Gets the user roles of the user trying to sign-in.
# 
# @param string $station The id of the sign-in station to get. (required)
# @param string $signinrole Specifies how the user is signing-in. (required)
# @param string $user The card of the user. (required)
# @param string $location The id of the location the user picked. (required)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'signinrole' => {
        data_type => 'string',
        description => 'Specifies how the user is signing-in.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The card of the user.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location the user picked.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advancedstationgetroles' } = { 
        summary => 'Gets the user roles of the user trying to sign-in.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advancedstationgetroles {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling advancedstationgetroles");
    }

    # verify the required parameter 'signinrole' is set
    unless (exists $args{'signinrole'}) {
      croak("Missing the required parameter 'signinrole' when calling advancedstationgetroles");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling advancedstationgetroles");
    }

    # verify the required parameter 'location' is set
    unless (exists $args{'location'}) {
      croak("Missing the required parameter 'location' when calling advancedstationgetroles");
    }

    # parse inputs
    my $_resource_path = '/advancedstationgetroles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'signinrole'}) {
        $query_params->{'signinrole'} = $self->{api_client}->to_query_value($args{'signinrole'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advancedstationgetservices
#
# Gets the services available for a specific location.
# 
# @param string $station The id of the sign-in station to get. (required)
# @param string $location The id of the location the student picked. (required)
# @param string $user The card of the user. (required)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location the student picked.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The card of the user.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advancedstationgetservices' } = { 
        summary => 'Gets the services available for a specific location.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advancedstationgetservices {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling advancedstationgetservices");
    }

    # verify the required parameter 'location' is set
    unless (exists $args{'location'}) {
      croak("Missing the required parameter 'location' when calling advancedstationgetservices");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling advancedstationgetservices");
    }

    # parse inputs
    my $_resource_path = '/advancedstationgetservices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advancedstationgetstaff
#
# Gets the staff/tutors available for a specific location, course and service.
# 
# @param string $station The id of the sign-in station to get. (required)
# @param string $locationid The id of the location the student picked. (required)
# @param string $user The card of the user. (required)
# @param string $services The list of services selected by the user, in JSON format. (optional)
# @param string $eventid The ID of the event selected. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the location the student picked.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The card of the user.',
        required => '1',
    },
    'services' => {
        data_type => 'string',
        description => 'The list of services selected by the user, in JSON format.',
        required => '0',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The ID of the event selected.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'advancedstationgetstaff' } = { 
        summary => 'Gets the staff/tutors available for a specific location, course and service.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advancedstationgetstaff {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling advancedstationgetstaff");
    }

    # verify the required parameter 'locationid' is set
    unless (exists $args{'locationid'}) {
      croak("Missing the required parameter 'locationid' when calling advancedstationgetstaff");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling advancedstationgetstaff");
    }

    # parse inputs
    my $_resource_path = '/advancedstationgetstaff';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'services'}) {
        $query_params->{'services'} = $self->{api_client}->to_query_value($args{'services'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advancedstationissignedin
#
# Gets whether a user is signed-in or not.
# 
# @param string $station The id of the sign-in station to get. (required)
# @param DateTime $time The date and time of the swipe. (required)
# @param string $user The card of the user. (required)
# @param string $location The id of the location the user picked. (optional)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'time' => {
        data_type => 'DateTime',
        description => 'The date and time of the swipe.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The card of the user.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location the user picked.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'advancedstationissignedin' } = { 
        summary => 'Gets whether a user is signed-in or not.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advancedstationissignedin {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling advancedstationissignedin");
    }

    # verify the required parameter 'time' is set
    unless (exists $args{'time'}) {
      croak("Missing the required parameter 'time' when calling advancedstationissignedin");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling advancedstationissignedin");
    }

    # parse inputs
    my $_resource_path = '/advancedstationissignedin';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'time'}) {
        $query_params->{'time'} = $self->{api_client}->to_query_value($args{'time'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advroleaddmissing
#
# Adds the missing permissions to a role. Requires access to advrole.save
# 
# @param string $token The authentication token. (required)
# @param string $roles CSV list of the role ids to check (required)
# @param string $permissions CSV list of the permissions to check (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'roles' => {
        data_type => 'string',
        description => 'CSV list of the role ids to check',
        required => '1',
    },
    'permissions' => {
        data_type => 'string',
        description => 'CSV list of the permissions to check',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advroleaddmissing' } = { 
        summary => 'Adds the missing permissions to a role. Requires access to advrole.save',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advroleaddmissing {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advroleaddmissing");
    }

    # verify the required parameter 'roles' is set
    unless (exists $args{'roles'}) {
      croak("Missing the required parameter 'roles' when calling advroleaddmissing");
    }

    # verify the required parameter 'permissions' is set
    unless (exists $args{'permissions'}) {
      croak("Missing the required parameter 'permissions' when calling advroleaddmissing");
    }

    # parse inputs
    my $_resource_path = '/advroleaddmissing';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'roles'}) {
        $query_params->{'roles'} = $self->{api_client}->to_query_value($args{'roles'});
    }

    # query params
    if ( exists $args{'permissions'}) {
        $query_params->{'permissions'} = $self->{api_client}->to_query_value($args{'permissions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advrolecheckperm
#
# Checks the permissions are assigned for the given roles
# 
# @param string $token The authentication token. (required)
# @param string $roles CSV list of the role ids to check (required)
# @param string $permissions CSV list of the permissions to check (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'roles' => {
        data_type => 'string',
        description => 'CSV list of the role ids to check',
        required => '1',
    },
    'permissions' => {
        data_type => 'string',
        description => 'CSV list of the permissions to check',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advrolecheckperm' } = { 
        summary => 'Checks the permissions are assigned for the given roles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advrolecheckperm {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advrolecheckperm");
    }

    # verify the required parameter 'roles' is set
    unless (exists $args{'roles'}) {
      croak("Missing the required parameter 'roles' when calling advrolecheckperm");
    }

    # verify the required parameter 'permissions' is set
    unless (exists $args{'permissions'}) {
      croak("Missing the required parameter 'permissions' when calling advrolecheckperm");
    }

    # parse inputs
    my $_resource_path = '/advrolecheckperm';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'roles'}) {
        $query_params->{'roles'} = $self->{api_client}->to_query_value($args{'roles'});
    }

    # query params
    if ( exists $args{'permissions'}) {
        $query_params->{'permissions'} = $self->{api_client}->to_query_value($args{'permissions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advroledelete
#
# Delete a role
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the location to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the location to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advroledelete' } = { 
        summary => 'Delete a role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advroledelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advroledelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling advroledelete");
    }

    # parse inputs
    my $_resource_path = '/advroledelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advroledeletemapping
#
# Delete a role mapping
# 
# @param string $token The authentication token. (required)
# @param string $map The map name to save the role. (required)
# @param string $roleid The id of the role. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'map' => {
        data_type => 'string',
        description => 'The map name to save the role.',
        required => '1',
    },
    'roleid' => {
        data_type => 'string',
        description => 'The id of the role.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advroledeletemapping' } = { 
        summary => 'Delete a role mapping',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advroledeletemapping {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advroledeletemapping");
    }

    # verify the required parameter 'map' is set
    unless (exists $args{'map'}) {
      croak("Missing the required parameter 'map' when calling advroledeletemapping");
    }

    # verify the required parameter 'roleid' is set
    unless (exists $args{'roleid'}) {
      croak("Missing the required parameter 'roleid' when calling advroledeletemapping");
    }

    # parse inputs
    my $_resource_path = '/advroledeletemapping';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'map'}) {
        $query_params->{'map'} = $self->{api_client}->to_query_value($args{'map'});
    }

    # query params
    if ( exists $args{'roleid'}) {
        $query_params->{'roleid'} = $self->{api_client}->to_query_value($args{'roleid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advroleget
#
# View details of a role
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the location to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the location to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advroleget' } = { 
        summary => 'View details of a role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advroleget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advroleget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling advroleget");
    }

    # parse inputs
    my $_resource_path = '/advroleget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advrolelist
#
# Lists the roles for the current account
# 
# @param string $token The authentication token. (required)
# @param boolean $includepolicies True to include the policies, defaults to false. (optional)
# @param boolean $includeinternal True to include the internal roles too. (optional)
# @param string $name Filter by name of the role. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'includepolicies' => {
        data_type => 'boolean',
        description => 'True to include the policies, defaults to false.',
        required => '0',
    },
    'includeinternal' => {
        data_type => 'boolean',
        description => 'True to include the internal roles too.',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter by name of the role.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'advrolelist' } = { 
        summary => 'Lists the roles for the current account',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advrolelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advrolelist");
    }

    # parse inputs
    my $_resource_path = '/advrolelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'includepolicies'}) {
        $query_params->{'includepolicies'} = $self->{api_client}->to_query_value($args{'includepolicies'});
    }

    # query params
    if ( exists $args{'includeinternal'}) {
        $query_params->{'includeinternal'} = $self->{api_client}->to_query_value($args{'includeinternal'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advrolelistmaps
#
# Lists the maps a roles is mapped to
# 
# @param string $token The authentication token. (required)
# @param string $roleid The id of the role to list the maps. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'roleid' => {
        data_type => 'string',
        description => 'The id of the role to list the maps.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advrolelistmaps' } = { 
        summary => 'Lists the maps a roles is mapped to',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advrolelistmaps {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advrolelistmaps");
    }

    # verify the required parameter 'roleid' is set
    unless (exists $args{'roleid'}) {
      croak("Missing the required parameter 'roleid' when calling advrolelistmaps");
    }

    # parse inputs
    my $_resource_path = '/advrolelistmaps';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'roleid'}) {
        $query_params->{'roleid'} = $self->{api_client}->to_query_value($args{'roleid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advrolelistrolesmapped
#
# Lists the roles mappings
# 
# @param string $token The authentication token. (required)
# @param string $map List only the roles in the specified map. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'map' => {
        data_type => 'string',
        description => 'List only the roles in the specified map.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'advrolelistrolesmapped' } = { 
        summary => 'Lists the roles mappings',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advrolelistrolesmapped {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advrolelistrolesmapped");
    }

    # parse inputs
    my $_resource_path = '/advrolelistrolesmapped';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'map'}) {
        $query_params->{'map'} = $self->{api_client}->to_query_value($args{'map'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advrolelisttemplates
#
# View a list of role templates
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advrolelisttemplates' } = { 
        summary => 'View a list of role templates',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advrolelisttemplates {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advrolelisttemplates");
    }

    # parse inputs
    my $_resource_path = '/advrolelisttemplates';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advrolesave
#
# Create or edit a role
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'advrolesave' } = { 
        summary => 'Create or edit a role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advrolesave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/advrolesave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advrolesavemapping
#
# Saves a role mapping
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'advrolesavemapping' } = { 
        summary => 'Saves a role mapping',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advrolesavemapping {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/advrolesavemapping';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advrolesuserlist
#
# List users. Alias to user.list, use that one instead.
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $roleid The id of the role to filter users by, or empty to return all users. (optional)
# @param string $onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'roleid' => {
        data_type => 'string',
        description => 'The id of the role to filter users by, or empty to return all users.',
        required => '0',
    },
    'onlywithoutcard' => {
        data_type => 'string',
        description => 'If is 1 then only the users without a card are returned, otherwise all users are returned.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'advrolesuserlist' } = { 
        summary => 'List users. Alias to user.list, use that one instead.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advrolesuserlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advrolesuserlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling advrolesuserlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling advrolesuserlist");
    }

    # parse inputs
    my $_resource_path = '/advrolesuserlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'roleid'}) {
        $query_params->{'roleid'} = $self->{api_client}->to_query_value($args{'roleid'});
    }

    # query params
    if ( exists $args{'onlywithoutcard'}) {
        $query_params->{'onlywithoutcard'} = $self->{api_client}->to_query_value($args{'onlywithoutcard'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# advroleuserupgrade
#
# Upgrade a user to another role (requires permission to edit those roles)
# 
# @param string $token The authentication token. (required)
# @param string $userid Id of the user to upgrade (required)
# @param string $roleid Id of the role to add (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'Id of the user to upgrade',
        required => '1',
    },
    'roleid' => {
        data_type => 'string',
        description => 'Id of the role to add',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advroleuserupgrade' } = { 
        summary => 'Upgrade a user to another role (requires permission to edit those roles)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advroleuserupgrade {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling advroleuserupgrade");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling advroleuserupgrade");
    }

    # verify the required parameter 'roleid' is set
    unless (exists $args{'roleid'}) {
      croak("Missing the required parameter 'roleid' when calling advroleuserupgrade");
    }

    # parse inputs
    my $_resource_path = '/advroleuserupgrade';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'roleid'}) {
        $query_params->{'roleid'} = $self->{api_client}->to_query_value($args{'roleid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentcancel
#
# Cancel an appointment
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the appointment to cancel. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to cancel.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentcancel' } = { 
        summary => 'Cancel an appointment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentcancel {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmentcancel");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointmentcancel");
    }

    # parse inputs
    my $_resource_path = '/appointmentcancel';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentcheckisvalid
#
# Check if an appointment is valid or not
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the appointment to check. (required)
# @param boolean $editing Specifies whether the check is for a new appointment or an existing one. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to check.',
        required => '1',
    },
    'editing' => {
        data_type => 'boolean',
        description => 'Specifies whether the check is for a new appointment or an existing one.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentcheckisvalid' } = { 
        summary => 'Check if an appointment is valid or not',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentcheckisvalid {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmentcheckisvalid");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointmentcheckisvalid");
    }

    # parse inputs
    my $_resource_path = '/appointmentcheckisvalid';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'editing'}) {
        $query_params->{'editing'} = $self->{api_client}->to_query_value($args{'editing'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmenteditanyway
#
# Edit an appointment even if it breaks activated rules
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the appointment to edit. (required)
# @param string $attendee The id of the attendee involved in the appointment. (required)
# @param string $staff The id of the staff member involved in the appointment. (required)
# @param string $location The id of the location where the appointment will take place. (required)
# @param DateTime $start The appointment&#39;s start date &amp; time. (required)
# @param DateTime $end The appointment&#39;s end date &amp; time. (required)
# @param string $term The id of the term when the appointment takes place. (optional)
# @param string $event The id of the event of the appointment. (optional)
# @param string $services Comma-separated string containing the ids of the services of the appointment. (optional)
# @param string $notes The notes of the appointment. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to edit.',
        required => '1',
    },
    'attendee' => {
        data_type => 'string',
        description => 'The id of the attendee involved in the appointment.',
        required => '1',
    },
    'staff' => {
        data_type => 'string',
        description => 'The id of the staff member involved in the appointment.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location where the appointment will take place.',
        required => '1',
    },
    'start' => {
        data_type => 'DateTime',
        description => 'The appointment&#39;s start date &amp; time.',
        required => '1',
    },
    'end' => {
        data_type => 'DateTime',
        description => 'The appointment&#39;s end date &amp; time.',
        required => '1',
    },
    'term' => {
        data_type => 'string',
        description => 'The id of the term when the appointment takes place.',
        required => '0',
    },
    'event' => {
        data_type => 'string',
        description => 'The id of the event of the appointment.',
        required => '0',
    },
    'services' => {
        data_type => 'string',
        description => 'Comma-separated string containing the ids of the services of the appointment.',
        required => '0',
    },
    'notes' => {
        data_type => 'string',
        description => 'The notes of the appointment.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmenteditanyway' } = { 
        summary => 'Edit an appointment even if it breaks activated rules',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmenteditanyway {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmenteditanyway");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointmenteditanyway");
    }

    # verify the required parameter 'attendee' is set
    unless (exists $args{'attendee'}) {
      croak("Missing the required parameter 'attendee' when calling appointmenteditanyway");
    }

    # verify the required parameter 'staff' is set
    unless (exists $args{'staff'}) {
      croak("Missing the required parameter 'staff' when calling appointmenteditanyway");
    }

    # verify the required parameter 'location' is set
    unless (exists $args{'location'}) {
      croak("Missing the required parameter 'location' when calling appointmenteditanyway");
    }

    # verify the required parameter 'start' is set
    unless (exists $args{'start'}) {
      croak("Missing the required parameter 'start' when calling appointmenteditanyway");
    }

    # verify the required parameter 'end' is set
    unless (exists $args{'end'}) {
      croak("Missing the required parameter 'end' when calling appointmenteditanyway");
    }

    # parse inputs
    my $_resource_path = '/appointmenteditanyway';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'term'}) {
        $query_params->{'term'} = $self->{api_client}->to_query_value($args{'term'});
    }

    # query params
    if ( exists $args{'attendee'}) {
        $query_params->{'attendee'} = $self->{api_client}->to_query_value($args{'attendee'});
    }

    # query params
    if ( exists $args{'staff'}) {
        $query_params->{'staff'} = $self->{api_client}->to_query_value($args{'staff'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    # query params
    if ( exists $args{'event'}) {
        $query_params->{'event'} = $self->{api_client}->to_query_value($args{'event'});
    }

    # query params
    if ( exists $args{'services'}) {
        $query_params->{'services'} = $self->{api_client}->to_query_value($args{'services'});
    }

    # query params
    if ( exists $args{'notes'}) {
        $query_params->{'notes'} = $self->{api_client}->to_query_value($args{'notes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmenteditpresence
#
# Edit the no-show status of an appointment
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the appointment to edit its presence. (required)
# @param boolean $showedup Specifies whether the attendee was showed-up or not in the appointment. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to edit its presence.',
        required => '1',
    },
    'showedup' => {
        data_type => 'boolean',
        description => 'Specifies whether the attendee was showed-up or not in the appointment.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmenteditpresence' } = { 
        summary => 'Edit the no-show status of an appointment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmenteditpresence {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmenteditpresence");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointmenteditpresence");
    }

    # verify the required parameter 'showedup' is set
    unless (exists $args{'showedup'}) {
      croak("Missing the required parameter 'showedup' when calling appointmenteditpresence");
    }

    # parse inputs
    my $_resource_path = '/appointmenteditpresence';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'showedup'}) {
        $query_params->{'showedup'} = $self->{api_client}->to_query_value($args{'showedup'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentfindallstaffslots
#
# Finds all staff available slots filtered by service, date, etc
# 
# @param string $token The authentication token. (required)
# @param DateTime $starttime The start time of the range to look for slots. (required)
# @param DateTime $endtime The end time of the range to look for slots. (required)
# @param string $serviceids CSV list of the service Ids to filter by. (required)
# @param string $locationid The id of the service to filter by. (required)
# @param string $eventid The id of the event to filter by. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'starttime' => {
        data_type => 'DateTime',
        description => 'The start time of the range to look for slots.',
        required => '1',
    },
    'endtime' => {
        data_type => 'DateTime',
        description => 'The end time of the range to look for slots.',
        required => '1',
    },
    'serviceids' => {
        data_type => 'string',
        description => 'CSV list of the service Ids to filter by.',
        required => '1',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the service to filter by.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event to filter by.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentfindallstaffslots' } = { 
        summary => 'Finds all staff available slots filtered by service, date, etc',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentfindallstaffslots {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmentfindallstaffslots");
    }

    # verify the required parameter 'starttime' is set
    unless (exists $args{'starttime'}) {
      croak("Missing the required parameter 'starttime' when calling appointmentfindallstaffslots");
    }

    # verify the required parameter 'endtime' is set
    unless (exists $args{'endtime'}) {
      croak("Missing the required parameter 'endtime' when calling appointmentfindallstaffslots");
    }

    # verify the required parameter 'serviceids' is set
    unless (exists $args{'serviceids'}) {
      croak("Missing the required parameter 'serviceids' when calling appointmentfindallstaffslots");
    }

    # verify the required parameter 'locationid' is set
    unless (exists $args{'locationid'}) {
      croak("Missing the required parameter 'locationid' when calling appointmentfindallstaffslots");
    }

    # parse inputs
    my $_resource_path = '/appointmentfindallstaffslots';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'starttime'}) {
        $query_params->{'starttime'} = $self->{api_client}->to_query_value($args{'starttime'});
    }

    # query params
    if ( exists $args{'endtime'}) {
        $query_params->{'endtime'} = $self->{api_client}->to_query_value($args{'endtime'});
    }

    # query params
    if ( exists $args{'serviceids'}) {
        $query_params->{'serviceids'} = $self->{api_client}->to_query_value($args{'serviceids'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentfindslots
#
# Finds available slots filtered by service, date, staff, etc
# 
# @param string $token The authentication token. (required)
# @param string $staffid The id of the staff to filter by. (required)
# @param DateTime $starttime The start time of the range to look for slots. (required)
# @param DateTime $endtime The end time of the range to look for slots. (required)
# @param string $serviceids CSV list of the service Ids to filter by. (required)
# @param string $eventid The id of the event to filter by. (optional)
# @param string $locationid The id of the service to filter by. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'staffid' => {
        data_type => 'string',
        description => 'The id of the staff to filter by.',
        required => '1',
    },
    'starttime' => {
        data_type => 'DateTime',
        description => 'The start time of the range to look for slots.',
        required => '1',
    },
    'endtime' => {
        data_type => 'DateTime',
        description => 'The end time of the range to look for slots.',
        required => '1',
    },
    'serviceids' => {
        data_type => 'string',
        description => 'CSV list of the service Ids to filter by.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event to filter by.',
        required => '0',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the service to filter by.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentfindslots' } = { 
        summary => 'Finds available slots filtered by service, date, staff, etc',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentfindslots {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmentfindslots");
    }

    # verify the required parameter 'staffid' is set
    unless (exists $args{'staffid'}) {
      croak("Missing the required parameter 'staffid' when calling appointmentfindslots");
    }

    # verify the required parameter 'starttime' is set
    unless (exists $args{'starttime'}) {
      croak("Missing the required parameter 'starttime' when calling appointmentfindslots");
    }

    # verify the required parameter 'endtime' is set
    unless (exists $args{'endtime'}) {
      croak("Missing the required parameter 'endtime' when calling appointmentfindslots");
    }

    # verify the required parameter 'serviceids' is set
    unless (exists $args{'serviceids'}) {
      croak("Missing the required parameter 'serviceids' when calling appointmentfindslots");
    }

    # parse inputs
    my $_resource_path = '/appointmentfindslots';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'staffid'}) {
        $query_params->{'staffid'} = $self->{api_client}->to_query_value($args{'staffid'});
    }

    # query params
    if ( exists $args{'starttime'}) {
        $query_params->{'starttime'} = $self->{api_client}->to_query_value($args{'starttime'});
    }

    # query params
    if ( exists $args{'endtime'}) {
        $query_params->{'endtime'} = $self->{api_client}->to_query_value($args{'endtime'});
    }

    # query params
    if ( exists $args{'serviceids'}) {
        $query_params->{'serviceids'} = $self->{api_client}->to_query_value($args{'serviceids'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentfindstaff
#
# Finds staff available by service, date, event, etc
# 
# @param string $token The authentication token. (required)
# @param string $serviceids CSV list of the service ids to filter by. (required)
# @param DateTime $starttime The start time of the range to look for slots. (required)
# @param DateTime $endtime The end time of the range to look for slots. (required)
# @param string $eventid The id of the event to filter by. (optional)
# @param string $locationid The id of the service to filter by. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'serviceids' => {
        data_type => 'string',
        description => 'CSV list of the service ids to filter by.',
        required => '1',
    },
    'starttime' => {
        data_type => 'DateTime',
        description => 'The start time of the range to look for slots.',
        required => '1',
    },
    'endtime' => {
        data_type => 'DateTime',
        description => 'The end time of the range to look for slots.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event to filter by.',
        required => '0',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the service to filter by.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentfindstaff' } = { 
        summary => 'Finds staff available by service, date, event, etc',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentfindstaff {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmentfindstaff");
    }

    # verify the required parameter 'serviceids' is set
    unless (exists $args{'serviceids'}) {
      croak("Missing the required parameter 'serviceids' when calling appointmentfindstaff");
    }

    # verify the required parameter 'starttime' is set
    unless (exists $args{'starttime'}) {
      croak("Missing the required parameter 'starttime' when calling appointmentfindstaff");
    }

    # verify the required parameter 'endtime' is set
    unless (exists $args{'endtime'}) {
      croak("Missing the required parameter 'endtime' when calling appointmentfindstaff");
    }

    # parse inputs
    my $_resource_path = '/appointmentfindstaff';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'serviceids'}) {
        $query_params->{'serviceids'} = $self->{api_client}->to_query_value($args{'serviceids'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'starttime'}) {
        $query_params->{'starttime'} = $self->{api_client}->to_query_value($args{'starttime'});
    }

    # query params
    if ( exists $args{'endtime'}) {
        $query_params->{'endtime'} = $self->{api_client}->to_query_value($args{'endtime'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentget
#
# Search and view details of an appointment
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the appointment to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentget' } = { 
        summary => 'Search and view details of an appointment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmentget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointmentget");
    }

    # parse inputs
    my $_resource_path = '/appointmentget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentgetcurrent
#
# Get the current appointments for the user that is about to sign-in via the specified sign-in station.
# 
# @param string $station The id of the sign-in station to get. (required)
# @param string $user The card of the user. (required)
# @param string $location The id of the location where the user wants to sign-in. (required)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The card of the user.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location where the user wants to sign-in.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentgetcurrent' } = { 
        summary => 'Get the current appointments for the user that is about to sign-in via the specified sign-in station.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentgetcurrent {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling appointmentgetcurrent");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling appointmentgetcurrent");
    }

    # verify the required parameter 'location' is set
    unless (exists $args{'location'}) {
      croak("Missing the required parameter 'location' when calling appointmentgetcurrent");
    }

    # parse inputs
    my $_resource_path = '/appointmentgetcurrent';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentgetlocations
#
# Find locations where a service is available
# 
# @param string $token The authentication token. (required)
# @param string $serviceid The id of the service to get its locations. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'serviceid' => {
        data_type => 'string',
        description => 'The id of the service to get its locations.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentgetlocations' } = { 
        summary => 'Find locations where a service is available',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentgetlocations {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmentgetlocations");
    }

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling appointmentgetlocations");
    }

    # parse inputs
    my $_resource_path = '/appointmentgetlocations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentlist
#
# View a list of appointments
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param DateTime $startdate The start date of the period to filter the appointments. (optional)
# @param DateTime $enddate The end date of the period to filter the appointments. (optional)
# @param string $userid The attendee id to filter the appointments. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'The start date of the period to filter the appointments.',
        required => '0',
    },
    'enddate' => {
        data_type => 'DateTime',
        description => 'The end date of the period to filter the appointments.',
        required => '0',
    },
    'userid' => {
        data_type => 'string',
        description => 'The attendee id to filter the appointments.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentlist' } = { 
        summary => 'View a list of appointments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmentlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling appointmentlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling appointmentlist");
    }

    # parse inputs
    my $_resource_path = '/appointmentlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'enddate'}) {
        $query_params->{'enddate'} = $self->{api_client}->to_query_value($args{'enddate'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentlistmine
#
# View all my upcoming appointments
# 
# @param string $token The authentication token. (required)
# @param DateTime $start If specified, only appointments that start after the specified date will be returned. (optional)
# @param DateTime $modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'start' => {
        data_type => 'DateTime',
        description => 'If specified, only appointments that start after the specified date will be returned.',
        required => '0',
    },
    'modifiedafter' => {
        data_type => 'DateTime',
        description => 'If specified, only appointments modified after the specified date will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentlistmine' } = { 
        summary => 'View all my upcoming appointments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentlistmine {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmentlistmine");
    }

    # parse inputs
    my $_resource_path = '/appointmentlistmine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'modifiedafter'}) {
        $query_params->{'modifiedafter'} = $self->{api_client}->to_query_value($args{'modifiedafter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentlistupcoming
#
# Search and view details of all my upcoming appointments
# 
# @param string $token The authentication token. (required)
# @param DateTime $start If specified, only appointments that start after the specified date will be returned. (optional)
# @param DateTime $modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'start' => {
        data_type => 'DateTime',
        description => 'If specified, only appointments that start after the specified date will be returned.',
        required => '0',
    },
    'modifiedafter' => {
        data_type => 'DateTime',
        description => 'If specified, only appointments modified after the specified date will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentlistupcoming' } = { 
        summary => 'Search and view details of all my upcoming appointments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentlistupcoming {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmentlistupcoming");
    }

    # parse inputs
    my $_resource_path = '/appointmentlistupcoming';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'modifiedafter'}) {
        $query_params->{'modifiedafter'} = $self->{api_client}->to_query_value($args{'modifiedafter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentrescheduleoutlook
#
# Reschedule an appointment from MS Outlook.
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the appointment to edit. (required)
# @param DateTime $start The appointment&#39;s start date &amp; time. (required)
# @param DateTime $end The appointment&#39;s end date &amp; time. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to edit.',
        required => '1',
    },
    'start' => {
        data_type => 'DateTime',
        description => 'The appointment&#39;s start date &amp; time.',
        required => '1',
    },
    'end' => {
        data_type => 'DateTime',
        description => 'The appointment&#39;s end date &amp; time.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentrescheduleoutlook' } = { 
        summary => 'Reschedule an appointment from MS Outlook.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentrescheduleoutlook {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmentrescheduleoutlook");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointmentrescheduleoutlook");
    }

    # verify the required parameter 'start' is set
    unless (exists $args{'start'}) {
      croak("Missing the required parameter 'start' when calling appointmentrescheduleoutlook");
    }

    # verify the required parameter 'end' is set
    unless (exists $args{'end'}) {
      croak("Missing the required parameter 'end' when calling appointmentrescheduleoutlook");
    }

    # parse inputs
    my $_resource_path = '/appointmentrescheduleoutlook';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentrestore
#
# Restore an appointment
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the appointment to restore. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to restore.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentrestore' } = { 
        summary => 'Restore an appointment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentrestore {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmentrestore");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointmentrestore");
    }

    # parse inputs
    my $_resource_path = '/appointmentrestore';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentrestoreanyway
#
# Restore an appointment even if it breaks activated rules
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the appointment to restore. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to restore.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentrestoreanyway' } = { 
        summary => 'Restore an appointment even if it breaks activated rules',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentrestoreanyway {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmentrestoreanyway");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointmentrestoreanyway");
    }

    # parse inputs
    my $_resource_path = '/appointmentrestoreanyway';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentsave
#
# Schedule an appointment
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentsave' } = { 
        summary => 'Schedule an appointment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/appointmentsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentsetasvalid
#
# Schedule an appointment even if it breaks activated rules
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the appointment to set as valid. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to set as valid.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentsetasvalid' } = { 
        summary => 'Schedule an appointment even if it breaks activated rules',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentsetasvalid {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmentsetasvalid");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointmentsetasvalid");
    }

    # parse inputs
    my $_resource_path = '/appointmentsetasvalid';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentsuggestlocations
#
# View the locations with most appointments
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentsuggestlocations' } = { 
        summary => 'View the locations with most appointments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentsuggestlocations {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmentsuggestlocations");
    }

    # parse inputs
    my $_resource_path = '/appointmentsuggestlocations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentsuggestservices
#
# View the services with most appointments
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentsuggestservices' } = { 
        summary => 'View the services with most appointments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentsuggestservices {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmentsuggestservices");
    }

    # parse inputs
    my $_resource_path = '/appointmentsuggestservices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appointmentvoid
#
# Void an appointment
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the appointment to cancel. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the appointment to cancel.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appointmentvoid' } = { 
        summary => 'Void an appointment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appointmentvoid {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appointmentvoid");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling appointmentvoid");
    }

    # parse inputs
    my $_resource_path = '/appointmentvoid';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appsharegetphone
#
# Gets the phone number of the current user
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'appsharegetphone' } = { 
        summary => 'Gets the phone number of the current user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appsharegetphone {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appsharegetphone");
    }

    # parse inputs
    my $_resource_path = '/appsharegetphone';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# appsharesendtext
#
# Sends an SMS with the link to the app
# 
# @param string $token The authentication token. (required)
# @param string $phonenumber Phone number to where to send the link. Leave empty to the number on file. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'phonenumber' => {
        data_type => 'string',
        description => 'Phone number to where to send the link. Leave empty to the number on file.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'appsharesendtext' } = { 
        summary => 'Sends an SMS with the link to the app',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub appsharesendtext {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling appsharesendtext");
    }

    # parse inputs
    my $_resource_path = '/appsharesendtext';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'phonenumber'}) {
        $query_params->{'phonenumber'} = $self->{api_client}->to_query_value($args{'phonenumber'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogcommentdelete
#
# Delete a comment on an attendance log
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the attendance log comment to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log comment to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogcommentdelete' } = { 
        summary => 'Delete a comment on an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogcommentdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling attendancelogcommentdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attendancelogcommentdelete");
    }

    # parse inputs
    my $_resource_path = '/attendancelogcommentdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogcommentget
#
# View a comment on an attendance log
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the comment to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the comment to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogcommentget' } = { 
        summary => 'View a comment on an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogcommentget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling attendancelogcommentget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attendancelogcommentget");
    }

    # parse inputs
    my $_resource_path = '/attendancelogcommentget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogcommentlist
#
# View all the comments on a specific attendance log
# 
# @param string $attendancelog The id of the attendance log whose comments have to be retrieved. (required)
# @param string $token The authentication token. (optional)
{
    my $params = {
    'attendancelog' => {
        data_type => 'string',
        description => 'The id of the attendance log whose comments have to be retrieved.',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogcommentlist' } = { 
        summary => 'View all the comments on a specific attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogcommentlist {
    my ($self, %args) = @_;

    # verify the required parameter 'attendancelog' is set
    unless (exists $args{'attendancelog'}) {
      croak("Missing the required parameter 'attendancelog' when calling attendancelogcommentlist");
    }

    # parse inputs
    my $_resource_path = '/attendancelogcommentlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'attendancelog'}) {
        $query_params->{'attendancelog'} = $self->{api_client}->to_query_value($args{'attendancelog'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogcommentsave
#
# Save a comment on an attendance log
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogcommentsave' } = { 
        summary => 'Save a comment on an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogcommentsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/attendancelogcommentsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogdelete
#
# Delete an attendance log
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the attendance log to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogdelete' } = { 
        summary => 'Delete an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling attendancelogdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attendancelogdelete");
    }

    # parse inputs
    my $_resource_path = '/attendancelogdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogget
#
# Search and view details of an attendance log
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the attendance log to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogget' } = { 
        summary => 'Search and view details of an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling attendancelogget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attendancelogget");
    }

    # parse inputs
    my $_resource_path = '/attendancelogget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendanceloggetchangehistory
#
# Search and view details of an attendance log's swipe history
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the attendance log to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendanceloggetchangehistory' } = { 
        summary => 'Search and view details of an attendance log&#39;s swipe history',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendanceloggetchangehistory {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling attendanceloggetchangehistory");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attendanceloggetchangehistory");
    }

    # parse inputs
    my $_resource_path = '/attendanceloggetchangehistory';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendanceloglist
#
# View a list of attendance logs
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $token The authentication token. (optional)
# @param string $filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
# @param string $userid The user ID of the user to get the logs. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    'filter' => {
        data_type => 'string',
        description => 'Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.',
        required => '0',
    },
    'userid' => {
        data_type => 'string',
        description => 'The user ID of the user to get the logs.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendanceloglist' } = { 
        summary => 'View a list of attendance logs',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendanceloglist {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling attendanceloglist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling attendanceloglist");
    }

    # parse inputs
    my $_resource_path = '/attendanceloglist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendanceloglistmine
#
# Gets the attendance logs of the current user
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $token The authentication token. (optional)
# @param string $filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    'filter' => {
        data_type => 'string',
        description => 'Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendanceloglistmine' } = { 
        summary => 'Gets the attendance logs of the current user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendanceloglistmine {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling attendanceloglistmine");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling attendanceloglistmine");
    }

    # parse inputs
    my $_resource_path = '/attendanceloglistmine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogliststaff
#
# Gets the attendance logs that the current user is involved in as staff
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $token The authentication token. (optional)
# @param string $filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    'filter' => {
        data_type => 'string',
        description => 'Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogliststaff' } = { 
        summary => 'Gets the attendance logs that the current user is involved in as staff',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogliststaff {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling attendancelogliststaff");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling attendancelogliststaff");
    }

    # parse inputs
    my $_resource_path = '/attendancelogliststaff';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogsave
#
# Create or edit an attendance log
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogsave' } = { 
        summary => 'Create or edit an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/attendancelogsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogsignout
#
# Sign out an attendance log
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the attendance log to sign-out. (optional)
# @param string $location The id of the location to filter the users to sign out. (optional)
# @param string $event The id of the event to filter the users to sign out. (optional)
# @param DateTime $datetime Specifies the date and time when the specified logs have to be signed out. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log to sign-out.',
        required => '0',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location to filter the users to sign out.',
        required => '0',
    },
    'event' => {
        data_type => 'string',
        description => 'The id of the event to filter the users to sign out.',
        required => '0',
    },
    'datetime' => {
        data_type => 'DateTime',
        description => 'Specifies the date and time when the specified logs have to be signed out.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogsignout' } = { 
        summary => 'Sign out an attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogsignout {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling attendancelogsignout");
    }

    # parse inputs
    my $_resource_path = '/attendancelogsignout';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'event'}) {
        $query_params->{'event'} = $self->{api_client}->to_query_value($args{'event'});
    }

    # query params
    if ( exists $args{'datetime'}) {
        $query_params->{'datetime'} = $self->{api_client}->to_query_value($args{'datetime'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancelogwhosin
#
# View who's in a location
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $token The authentication token. (optional)
# @param string $location The id of the location to search for users that are in. (optional)
# @param string $event The id of the event to search for users that are in. (optional)
# @param string $sorting Field to sort by. Either first-name, last-name or sign-in-time. (optional)
# @param string $roles The comma-separated list of ids of the roles to search for users that are in. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
# @param string $extensions A JSON array containing the extension filters (i.e [{name: &#39;nametofilter&#39;, value: &#39;valuetofilter&#39;}]). (optional)
# @param boolean $export True to export the results as CSV (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location to search for users that are in.',
        required => '0',
    },
    'event' => {
        data_type => 'string',
        description => 'The id of the event to search for users that are in.',
        required => '0',
    },
    'sorting' => {
        data_type => 'string',
        description => 'Field to sort by. Either first-name, last-name or sign-in-time.',
        required => '0',
    },
    'roles' => {
        data_type => 'string',
        description => 'The comma-separated list of ids of the roles to search for users that are in.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    'extensions' => {
        data_type => 'string',
        description => 'A JSON array containing the extension filters (i.e [{name: &#39;nametofilter&#39;, value: &#39;valuetofilter&#39;}]).',
        required => '0',
    },
    'export' => {
        data_type => 'boolean',
        description => 'True to export the results as CSV',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancelogwhosin' } = { 
        summary => 'View who&#39;s in a location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancelogwhosin {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling attendancelogwhosin");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling attendancelogwhosin");
    }

    # parse inputs
    my $_resource_path = '/attendancelogwhosin';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'event'}) {
        $query_params->{'event'} = $self->{api_client}->to_query_value($args{'event'});
    }

    # query params
    if ( exists $args{'sorting'}) {
        $query_params->{'sorting'} = $self->{api_client}->to_query_value($args{'sorting'});
    }

    # query params
    if ( exists $args{'roles'}) {
        $query_params->{'roles'} = $self->{api_client}->to_query_value($args{'roles'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    # query params
    if ( exists $args{'extensions'}) {
        $query_params->{'extensions'} = $self->{api_client}->to_query_value($args{'extensions'});
    }

    # query params
    if ( exists $args{'export'}) {
        $query_params->{'export'} = $self->{api_client}->to_query_value($args{'export'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancerestrictiondelete
#
# Delete an attendance restriction
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the restriction to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the restriction to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancerestrictiondelete' } = { 
        summary => 'Delete an attendance restriction',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancerestrictiondelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling attendancerestrictiondelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attendancerestrictiondelete");
    }

    # parse inputs
    my $_resource_path = '/attendancerestrictiondelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancerestrictionget
#
# View details of an attendance restriction
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the restriction to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the restriction to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancerestrictionget' } = { 
        summary => 'View details of an attendance restriction',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancerestrictionget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling attendancerestrictionget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attendancerestrictionget");
    }

    # parse inputs
    my $_resource_path = '/attendancerestrictionget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancerestrictionlist
#
# View a list of attendance restrictions
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancerestrictionlist' } = { 
        summary => 'View a list of attendance restrictions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancerestrictionlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling attendancerestrictionlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling attendancerestrictionlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling attendancerestrictionlist");
    }

    # parse inputs
    my $_resource_path = '/attendancerestrictionlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# attendancerestrictionsave
#
# Create or edit an attendance restriction
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attendancerestrictionsave' } = { 
        summary => 'Create or edit an attendance restriction',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub attendancerestrictionsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/attendancerestrictionsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacondelete
#
# Delete a beacon profile
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the beacon to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the beacon to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beacondelete' } = { 
        summary => 'Delete a beacon profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacondelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling beacondelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling beacondelete");
    }

    # parse inputs
    my $_resource_path = '/beacondelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacondisable
#
# Disable beacon support account wide
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beacondisable' } = { 
        summary => 'Disable beacon support account wide',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacondisable {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling beacondisable");
    }

    # parse inputs
    my $_resource_path = '/beacondisable';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beaconget
#
# View details of a beacon profile
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the beacon to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the beacon to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beaconget' } = { 
        summary => 'View details of a beacon profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beaconget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling beaconget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling beaconget");
    }

    # parse inputs
    my $_resource_path = '/beaconget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacongetlocations
#
# Get the sign-in stations assigned to specific beacons.
# 
# @param string $token The authentication token. (required)
# @param string $beacons A JSON array containg the beacons data (region, minor and major) values. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'beacons' => {
        data_type => 'string',
        description => 'A JSON array containg the beacons data (region, minor and major) values.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beacongetlocations' } = { 
        summary => 'Get the sign-in stations assigned to specific beacons.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacongetlocations {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling beacongetlocations");
    }

    # verify the required parameter 'beacons' is set
    unless (exists $args{'beacons'}) {
      croak("Missing the required parameter 'beacons' when calling beacongetlocations");
    }

    # parse inputs
    my $_resource_path = '/beacongetlocations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'beacons'}) {
        $query_params->{'beacons'} = $self->{api_client}->to_query_value($args{'beacons'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacongetstationlocation
#
# Get the location settings in the specified sign-in station.
# 
# @param string $token The authentication token. (required)
# @param string $station The id of the sign-in station whose location information has to be retrieved. (required)
# @param string $location The id of the location whose information has to be retrieved. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station whose location information has to be retrieved.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location whose information has to be retrieved.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beacongetstationlocation' } = { 
        summary => 'Get the location settings in the specified sign-in station.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacongetstationlocation {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling beacongetstationlocation");
    }

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling beacongetstationlocation");
    }

    # verify the required parameter 'location' is set
    unless (exists $args{'location'}) {
      croak("Missing the required parameter 'location' when calling beacongetstationlocation");
    }

    # parse inputs
    my $_resource_path = '/beacongetstationlocation';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beacongetuuid
#
# View the identifier for the account's beacon region (for sign-in stations).
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beacongetuuid' } = { 
        summary => 'View the identifier for the account&#39;s beacon region (for sign-in stations).',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beacongetuuid {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling beacongetuuid");
    }

    # parse inputs
    my $_resource_path = '/beacongetuuid';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beaconlist
#
# View a list of beacon profiles
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beaconlist' } = { 
        summary => 'View a list of beacon profiles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beaconlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling beaconlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling beaconlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling beaconlist");
    }

    # parse inputs
    my $_resource_path = '/beaconlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beaconlistprofiles
#
# View a list of beacon profiles with their characteristics
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beaconlistprofiles' } = { 
        summary => 'View a list of beacon profiles with their characteristics',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beaconlistprofiles {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling beaconlistprofiles");
    }

    # parse inputs
    my $_resource_path = '/beaconlistprofiles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beaconresetuuid
#
# Generate or reset the identifier for the account's beacon region.
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beaconresetuuid' } = { 
        summary => 'Generate or reset the identifier for the account&#39;s beacon region.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beaconresetuuid {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling beaconresetuuid");
    }

    # parse inputs
    my $_resource_path = '/beaconresetuuid';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beaconsave
#
# Create or edit a beacon profile
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'beaconsave' } = { 
        summary => 'Create or edit a beacon profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beaconsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/beaconsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beaconscanlocations
#
# Check if there's location available to sign-in / out.
# 
# @param string $token The authentication token. (required)
# @param string $beacons A JSON array containg the beacons data (region, minor and major) values. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'beacons' => {
        data_type => 'string',
        description => 'A JSON array containg the beacons data (region, minor and major) values.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beaconscanlocations' } = { 
        summary => 'Check if there&#39;s location available to sign-in / out.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beaconscanlocations {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling beaconscanlocations");
    }

    # verify the required parameter 'beacons' is set
    unless (exists $args{'beacons'}) {
      croak("Missing the required parameter 'beacons' when calling beaconscanlocations");
    }

    # parse inputs
    my $_resource_path = '/beaconscanlocations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'beacons'}) {
        $query_params->{'beacons'} = $self->{api_client}->to_query_value($args{'beacons'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beaconsetuuid
#
# Set the identifier for the account's beacon region (for sign-in stations).
# 
# @param string $token The authentication token. (required)
# @param string $id The custom region UUID. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The custom region UUID.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beaconsetuuid' } = { 
        summary => 'Set the identifier for the account&#39;s beacon region (for sign-in stations).',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beaconsetuuid {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling beaconsetuuid");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling beaconsetuuid");
    }

    # parse inputs
    my $_resource_path = '/beaconsetuuid';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beaconsilentregions
#
# View all the beacon regions defined for silent tracking
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beaconsilentregions' } = { 
        summary => 'View all the beacon regions defined for silent tracking',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beaconsilentregions {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling beaconsilentregions");
    }

    # parse inputs
    my $_resource_path = '/beaconsilentregions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beaconsilentsignin
#
# Sign-in silently from the location specified by a beacon
# 
# @param string $token The authentication token. (required)
# @param string $uuid The id of the region the user is in. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'The id of the region the user is in.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beaconsilentsignin' } = { 
        summary => 'Sign-in silently from the location specified by a beacon',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beaconsilentsignin {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling beaconsilentsignin");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling beaconsilentsignin");
    }

    # parse inputs
    my $_resource_path = '/beaconsilentsignin';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'uuid'}) {
        $query_params->{'uuid'} = $self->{api_client}->to_query_value($args{'uuid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# beaconsilentsignout
#
# Sign-out silently from the location specified by a beacon
# 
# @param string $token The authentication token. (required)
# @param string $uuid The id of the region the user has left. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'The id of the region the user has left.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'beaconsilentsignout' } = { 
        summary => 'Sign-out silently from the location specified by a beacon',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub beaconsilentsignout {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling beaconsilentsignout");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling beaconsilentsignout");
    }

    # parse inputs
    my $_resource_path = '/beaconsilentsignout';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'uuid'}) {
        $query_params->{'uuid'} = $self->{api_client}->to_query_value($args{'uuid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# bgjobgetstatus
#
# Get background job status
# 
# @param string $token The authentication token. (required)
# @param string $jobid The ID of the job to get the status. 10 most recent will be returned if not specified. (optional)
# @param string $jobtype The job type to filter by. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'jobid' => {
        data_type => 'string',
        description => 'The ID of the job to get the status. 10 most recent will be returned if not specified.',
        required => '0',
    },
    'jobtype' => {
        data_type => 'string',
        description => 'The job type to filter by.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'bgjobgetstatus' } = { 
        summary => 'Get background job status',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub bgjobgetstatus {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling bgjobgetstatus");
    }

    # parse inputs
    my $_resource_path = '/bgjobgetstatus';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'jobid'}) {
        $query_params->{'jobid'} = $self->{api_client}->to_query_value($args{'jobid'});
    }

    # query params
    if ( exists $args{'jobtype'}) {
        $query_params->{'jobtype'} = $self->{api_client}->to_query_value($args{'jobtype'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# captchagetchallenge
#
# Gets a captcha challenge that the user must complete to do certain requests.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'captchagetchallenge' } = { 
        summary => 'Gets a captcha challenge that the user must complete to do certain requests.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub captchagetchallenge {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/captchagetchallenge';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# captchagetimage
#
# Gets a captcha image that the user must complete to do certain requests.
# 
# @param string $captchatoken The captcha token or ID returned by the captcha.getchallenge action (required)
{
    my $params = {
    'captchatoken' => {
        data_type => 'string',
        description => 'The captcha token or ID returned by the captcha.getchallenge action',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'captchagetimage' } = { 
        summary => 'Gets a captcha image that the user must complete to do certain requests.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub captchagetimage {
    my ($self, %args) = @_;

    # verify the required parameter 'captchatoken' is set
    unless (exists $args{'captchatoken'}) {
      croak("Missing the required parameter 'captchatoken' when calling captchagetimage");
    }

    # parse inputs
    my $_resource_path = '/captchagetimage';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'captchatoken'}) {
        $query_params->{'captchatoken'} = $self->{api_client}->to_query_value($args{'captchatoken'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# changelog
#
# Get the application change log
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'changelog' } = { 
        summary => 'Get the application change log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub changelog {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling changelog");
    }

    # parse inputs
    my $_resource_path = '/changelog';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# clientget
#
# Get client
# 
# @param string $token The authentication token. (required)
# @param string $client The unique id of the client. (required)
# @param string $clientname The custom name of the client. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'client' => {
        data_type => 'string',
        description => 'The unique id of the client.',
        required => '1',
    },
    'clientname' => {
        data_type => 'string',
        description => 'The custom name of the client.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'clientget' } = { 
        summary => 'Get client',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub clientget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling clientget");
    }

    # verify the required parameter 'client' is set
    unless (exists $args{'client'}) {
      croak("Missing the required parameter 'client' when calling clientget");
    }

    # parse inputs
    my $_resource_path = '/clientget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'client'}) {
        $query_params->{'client'} = $self->{api_client}->to_query_value($args{'client'});
    }

    # query params
    if ( exists $args{'clientname'}) {
        $query_params->{'clientname'} = $self->{api_client}->to_query_value($args{'clientname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# clientlist
#
# Gets the clients of the specified conference
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'clientlist' } = { 
        summary => 'Gets the clients of the specified conference',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub clientlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling clientlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling clientlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling clientlist");
    }

    # parse inputs
    my $_resource_path = '/clientlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# clientsave
#
# Saves a client
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'clientsave' } = { 
        summary => 'Saves a client',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub clientsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/clientsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# clientsendmessage
#
# Send a message to a client
# 
# @param string $token The authentication token. (required)
# @param string $uniqueclientid The unique id of the client. (required)
# @param string $message The body of the message to send. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'uniqueclientid' => {
        data_type => 'string',
        description => 'The unique id of the client.',
        required => '1',
    },
    'message' => {
        data_type => 'string',
        description => 'The body of the message to send.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'clientsendmessage' } = { 
        summary => 'Send a message to a client',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub clientsendmessage {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling clientsendmessage");
    }

    # verify the required parameter 'uniqueclientid' is set
    unless (exists $args{'uniqueclientid'}) {
      croak("Missing the required parameter 'uniqueclientid' when calling clientsendmessage");
    }

    # verify the required parameter 'message' is set
    unless (exists $args{'message'}) {
      croak("Missing the required parameter 'message' when calling clientsendmessage");
    }

    # parse inputs
    my $_resource_path = '/clientsendmessage';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'uniqueclientid'}) {
        $query_params->{'uniqueclientid'} = $self->{api_client}->to_query_value($args{'uniqueclientid'});
    }

    # query params
    if ( exists $args{'message'}) {
        $query_params->{'message'} = $self->{api_client}->to_query_value($args{'message'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# communityinvite
#
# Sends an invitation to everyone to AccuCampus Communities
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'communityinvite' } = { 
        summary => 'Sends an invitation to everyone to AccuCampus Communities',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub communityinvite {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling communityinvite");
    }

    # parse inputs
    my $_resource_path = '/communityinvite';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# communityjoin
#
# Sends an invitation for myself to AccuCampus Communities
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'communityjoin' } = { 
        summary => 'Sends an invitation for myself to AccuCampus Communities',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub communityjoin {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling communityjoin");
    }

    # parse inputs
    my $_resource_path = '/communityjoin';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# compasscategorydelete
#
# Delete a compass category
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the category to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the category to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'compasscategorydelete' } = { 
        summary => 'Delete a compass category',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub compasscategorydelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling compasscategorydelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling compasscategorydelete");
    }

    # parse inputs
    my $_resource_path = '/compasscategorydelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# compasscategoryget
#
# View details of a compass category
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the category to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the category to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'compasscategoryget' } = { 
        summary => 'View details of a compass category',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub compasscategoryget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling compasscategoryget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling compasscategoryget");
    }

    # parse inputs
    my $_resource_path = '/compasscategoryget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# compasscategorylist
#
# View a list of compass categories
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (optional)
# @param int $count The max number of records to return. (optional)
# @param boolean $onlywithservices Specified whether only categories with services are returned or all. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '0',
    },
    'onlywithservices' => {
        data_type => 'boolean',
        description => 'Specified whether only categories with services are returned or all.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'compasscategorylist' } = { 
        summary => 'View a list of compass categories',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub compasscategorylist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling compasscategorylist");
    }

    # parse inputs
    my $_resource_path = '/compasscategorylist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'onlywithservices'}) {
        $query_params->{'onlywithservices'} = $self->{api_client}->to_query_value($args{'onlywithservices'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# compasscategorysave
#
# Create or edit a compass category
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'compasscategorysave' } = { 
        summary => 'Create or edit a compass category',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub compasscategorysave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/compasscategorysave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# compassservicelist
#
# View all the services added to the compass
# 
# @param string $token The authentication token. (required)
# @param string $category The id of the category to filter the services. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'category' => {
        data_type => 'string',
        description => 'The id of the category to filter the services.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'compassservicelist' } = { 
        summary => 'View all the services added to the compass',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub compassservicelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling compassservicelist");
    }

    # parse inputs
    my $_resource_path = '/compassservicelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'category'}) {
        $query_params->{'category'} = $self->{api_client}->to_query_value($args{'category'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# compassservicelistlocations
#
# View all the locations where a service added to the compass is available
# 
# @param string $token The authentication token. (required)
# @param string $serviceid The id of the service to get its locations. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'serviceid' => {
        data_type => 'string',
        description => 'The id of the service to get its locations.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'compassservicelistlocations' } = { 
        summary => 'View all the locations where a service added to the compass is available',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub compassservicelistlocations {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling compassservicelistlocations");
    }

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling compassservicelistlocations");
    }

    # parse inputs
    my $_resource_path = '/compassservicelistlocations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# computerlabdeletecomputer
#
# Delete a computer
# 
# @param string $token The authentication token. (required)
# @param string $id The unique device id of the computer to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The unique device id of the computer to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'computerlabdeletecomputer' } = { 
        summary => 'Delete a computer',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub computerlabdeletecomputer {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling computerlabdeletecomputer");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling computerlabdeletecomputer");
    }

    # parse inputs
    my $_resource_path = '/computerlabdeletecomputer';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# computerlabgetcomputer
#
# Search and view details of a computer
# 
# @param string $token The authentication token. (required)
# @param string $id The unique device id of the computer to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The unique device id of the computer to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'computerlabgetcomputer' } = { 
        summary => 'Search and view details of a computer',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub computerlabgetcomputer {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling computerlabgetcomputer");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling computerlabgetcomputer");
    }

    # parse inputs
    my $_resource_path = '/computerlabgetcomputer';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# computerlabgetsettings
#
# Loads the settings for a computer lab
# 
# @param string $id The id of the computer lab/location. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the computer lab/location.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'computerlabgetsettings' } = { 
        summary => 'Loads the settings for a computer lab',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub computerlabgetsettings {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling computerlabgetsettings");
    }

    # parse inputs
    my $_resource_path = '/computerlabgetsettings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# computerlabissignedin
#
# Gets whether a user is signed-in or not.
# 
# @param string $station The id of the sign-in station to get. (required)
# @param string $user The card of the user. (required)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The card of the user.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'computerlabissignedin' } = { 
        summary => 'Gets whether a user is signed-in or not.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub computerlabissignedin {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling computerlabissignedin");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling computerlabissignedin");
    }

    # parse inputs
    my $_resource_path = '/computerlabissignedin';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# computerlablistcomputers
#
# View a list of computers
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $location The id of the location whose computers have to be returned. (optional)
# @param boolean $freeonly If true, only free computers will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location whose computers have to be returned.',
        required => '0',
    },
    'freeonly' => {
        data_type => 'boolean',
        description => 'If true, only free computers will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'computerlablistcomputers' } = { 
        summary => 'View a list of computers',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub computerlablistcomputers {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling computerlablistcomputers");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling computerlablistcomputers");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling computerlablistcomputers");
    }

    # parse inputs
    my $_resource_path = '/computerlablistcomputers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'freeonly'}) {
        $query_params->{'freeonly'} = $self->{api_client}->to_query_value($args{'freeonly'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# computerlablistlabs
#
# View a list of the locations that use the Computer Lab add-on
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'computerlablistlabs' } = { 
        summary => 'View a list of the locations that use the Computer Lab add-on',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub computerlablistlabs {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling computerlablistlabs");
    }

    # parse inputs
    my $_resource_path = '/computerlablistlabs';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# computerlabliststations
#
# View a list of sign-in stations available for computer labs.
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'computerlabliststations' } = { 
        summary => 'View a list of sign-in stations available for computer labs.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub computerlabliststations {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling computerlabliststations");
    }

    # parse inputs
    my $_resource_path = '/computerlabliststations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# computerlabsavecomputer
#
# Create or edit a computer
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'computerlabsavecomputer' } = { 
        summary => 'Create or edit a computer',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub computerlabsavecomputer {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/computerlabsavecomputer';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# computerlabsavesettings
#
# Saves the settings for a computer lab
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'computerlabsavesettings' } = { 
        summary => 'Saves the settings for a computer lab',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub computerlabsavesettings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/computerlabsavesettings';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# computerlabsaveswipe
#
# Save a new swipe from a computer in a computer lab.
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'computerlabsaveswipe' } = { 
        summary => 'Save a new swipe from a computer in a computer lab.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub computerlabsaveswipe {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/computerlabsaveswipe';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# deadendrecordingdelete
#
# Deletes a dead-end record group
# 
# @param string $token The authentication token. (required)
# @param string $hierarchykey The hierarchy key of the record to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'hierarchykey' => {
        data_type => 'string',
        description => 'The hierarchy key of the record to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'deadendrecordingdelete' } = { 
        summary => 'Deletes a dead-end record group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deadendrecordingdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling deadendrecordingdelete");
    }

    # verify the required parameter 'hierarchykey' is set
    unless (exists $args{'hierarchykey'}) {
      croak("Missing the required parameter 'hierarchykey' when calling deadendrecordingdelete");
    }

    # parse inputs
    my $_resource_path = '/deadendrecordingdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'hierarchykey'}) {
        $query_params->{'hierarchykey'} = $self->{api_client}->to_query_value($args{'hierarchykey'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# deadendrecordinglist
#
# Lists the recorded dead ends, if enabled
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'deadendrecordinglist' } = { 
        summary => 'Lists the recorded dead ends, if enabled',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deadendrecordinglist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling deadendrecordinglist");
    }

    # parse inputs
    my $_resource_path = '/deadendrecordinglist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# deadendrecordinglistcomments
#
# Lists the comments for a specific dead end
# 
# @param string $token The authentication token. (required)
# @param string $hierarchykey The hierarchy key of the record to get the feedback. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'hierarchykey' => {
        data_type => 'string',
        description => 'The hierarchy key of the record to get the feedback.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'deadendrecordinglistcomments' } = { 
        summary => 'Lists the comments for a specific dead end',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deadendrecordinglistcomments {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling deadendrecordinglistcomments");
    }

    # verify the required parameter 'hierarchykey' is set
    unless (exists $args{'hierarchykey'}) {
      croak("Missing the required parameter 'hierarchykey' when calling deadendrecordinglistcomments");
    }

    # parse inputs
    my $_resource_path = '/deadendrecordinglistcomments';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'hierarchykey'}) {
        $query_params->{'hierarchykey'} = $self->{api_client}->to_query_value($args{'hierarchykey'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# deadendrecordingsave
#
# Saves a dead-end record
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'deadendrecordingsave' } = { 
        summary => 'Saves a dead-end record',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deadendrecordingsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/deadendrecordingsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# departmentdelete
#
# Delete a college department
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the department to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the department to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'departmentdelete' } = { 
        summary => 'Delete a college department',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub departmentdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling departmentdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling departmentdelete");
    }

    # parse inputs
    my $_resource_path = '/departmentdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# departmentget
#
# Search and view details of a college department
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the department to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the department to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'departmentget' } = { 
        summary => 'Search and view details of a college department',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub departmentget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling departmentget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling departmentget");
    }

    # parse inputs
    my $_resource_path = '/departmentget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# departmentlist
#
# View a list of college departments
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'departmentlist' } = { 
        summary => 'View a list of college departments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub departmentlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling departmentlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling departmentlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling departmentlist");
    }

    # parse inputs
    my $_resource_path = '/departmentlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# departmentsave
#
# Create or edit a college department
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'departmentsave' } = { 
        summary => 'Create or edit a college department',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub departmentsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/departmentsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# doc
#
# Get the documentation
# 
# @param boolean $excludeanonymous If true it excludes the anonymous actions from the returned list. (optional)
{
    my $params = {
    'excludeanonymous' => {
        data_type => 'boolean',
        description => 'If true it excludes the anonymous actions from the returned list.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'doc' } = { 
        summary => 'Get the documentation',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub doc {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/doc';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'excludeanonymous'}) {
        $query_params->{'excludeanonymous'} = $self->{api_client}->to_query_value($args{'excludeanonymous'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# easyloginaddbgimage
#
# Adds background image for the login
# 
# @param string $token The authentication token. (required)
# @param string $upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
# @param string $filename The original filename, needed to process the file. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'upload' => {
        data_type => 'string',
        description => 'Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).',
        required => '1',
    },
    'filename' => {
        data_type => 'string',
        description => 'The original filename, needed to process the file.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'easyloginaddbgimage' } = { 
        summary => 'Adds background image for the login',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub easyloginaddbgimage {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling easyloginaddbgimage");
    }

    # verify the required parameter 'upload' is set
    unless (exists $args{'upload'}) {
      croak("Missing the required parameter 'upload' when calling easyloginaddbgimage");
    }

    # verify the required parameter 'filename' is set
    unless (exists $args{'filename'}) {
      croak("Missing the required parameter 'filename' when calling easyloginaddbgimage");
    }

    # parse inputs
    my $_resource_path = '/easyloginaddbgimage';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'upload'}) {
        $query_params->{'upload'} = $self->{api_client}->to_query_value($args{'upload'});
    }

    # query params
    if ( exists $args{'filename'}) {
        $query_params->{'filename'} = $self->{api_client}->to_query_value($args{'filename'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventchecksessions
#
# Edit an event's sessions according to their schedule
# 
# @param string $token The authentication token. (required)
# @param string $eventid The id of the event to check. (required)
# @param boolean $autorepair True to automatically fix the invalid sessions. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event to check.',
        required => '1',
    },
    'autorepair' => {
        data_type => 'boolean',
        description => 'True to automatically fix the invalid sessions.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventchecksessions' } = { 
        summary => 'Edit an event&#39;s sessions according to their schedule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventchecksessions {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventchecksessions");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling eventchecksessions");
    }

    # verify the required parameter 'autorepair' is set
    unless (exists $args{'autorepair'}) {
      croak("Missing the required parameter 'autorepair' when calling eventchecksessions");
    }

    # parse inputs
    my $_resource_path = '/eventchecksessions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'autorepair'}) {
        $query_params->{'autorepair'} = $self->{api_client}->to_query_value($args{'autorepair'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventdelete
#
# Delete a course
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the event to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the event to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventdelete' } = { 
        summary => 'Delete a course',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling eventdelete");
    }

    # parse inputs
    my $_resource_path = '/eventdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventget
#
# Search and view details of a course
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the event to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the event to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventget' } = { 
        summary => 'Search and view details of a course',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling eventget");
    }

    # parse inputs
    my $_resource_path = '/eventget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventgetsessionsbydate
#
# View a list of courses by date
# 
# @param string $token The authentication token. (required)
# @param string $location The location to filter the events. (optional)
# @param DateTime $date The date to filter the events. Today will be used if this parameter is omitted. (optional)
# @param string $type Type of event to list. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The location to filter the events.',
        required => '0',
    },
    'date' => {
        data_type => 'DateTime',
        description => 'The date to filter the events. Today will be used if this parameter is omitted.',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Type of event to list.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventgetsessionsbydate' } = { 
        summary => 'View a list of courses by date',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventgetsessionsbydate {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventgetsessionsbydate");
    }

    # parse inputs
    my $_resource_path = '/eventgetsessionsbydate';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventlist
#
# View a list of courses
# 
# @param string $token The authentication token. (required)
# @param string $from The first record to return. (required)
# @param string $count The max number of records to return. (required)
# @param boolean $summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false. (optional)
# @param string $termid Id of the term to list the events. Null to list all events. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'string',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'string',
        description => 'The max number of records to return.',
        required => '1',
    },
    'summaryonly' => {
        data_type => 'boolean',
        description => 'True to return only the event information and not the associated schedule, dept, etc. Defaults to false.',
        required => '0',
    },
    'termid' => {
        data_type => 'string',
        description => 'Id of the term to list the events. Null to list all events.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventlist' } = { 
        summary => 'View a list of courses',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling eventlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling eventlist");
    }

    # parse inputs
    my $_resource_path = '/eventlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'summaryonly'}) {
        $query_params->{'summaryonly'} = $self->{api_client}->to_query_value($args{'summaryonly'});
    }

    # query params
    if ( exists $args{'termid'}) {
        $query_params->{'termid'} = $self->{api_client}->to_query_value($args{'termid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventlistregistered
#
# View a list of courses I am registered to
# 
# @param string $token The authentication token. (required)
# @param string $from The first record to return. (required)
# @param string $count The max number of records to return. (required)
# @param boolean $summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false. (optional)
# @param string $termid Id of the term to list the events. Null to list all events. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'string',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'string',
        description => 'The max number of records to return.',
        required => '1',
    },
    'summaryonly' => {
        data_type => 'boolean',
        description => 'True to return only the event information and not the associated schedule, dept, etc. Defaults to false.',
        required => '0',
    },
    'termid' => {
        data_type => 'string',
        description => 'Id of the term to list the events. Null to list all events.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventlistregistered' } = { 
        summary => 'View a list of courses I am registered to',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventlistregistered {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventlistregistered");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling eventlistregistered");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling eventlistregistered");
    }

    # parse inputs
    my $_resource_path = '/eventlistregistered';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'summaryonly'}) {
        $query_params->{'summaryonly'} = $self->{api_client}->to_query_value($args{'summaryonly'});
    }

    # query params
    if ( exists $args{'termid'}) {
        $query_params->{'termid'} = $self->{api_client}->to_query_value($args{'termid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventregaddme
#
# Register current user to a course
# 
# @param string $token The authentication token. (required)
# @param string $eventid The id of the event. (required)
# @param string $listname The name of the list where the user has to be registered. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user has to be registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventregaddme' } = { 
        summary => 'Register current user to a course',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventregaddme {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventregaddme");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling eventregaddme");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventregaddme");
    }

    # parse inputs
    my $_resource_path = '/eventregaddme';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventregaddmetoall
#
# Register current user to all courses
# 
# @param string $token The authentication token. (required)
# @param string $listname The name of the list where the user has to be registered. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user has to be registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventregaddmetoall' } = { 
        summary => 'Register current user to all courses',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventregaddmetoall {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventregaddmetoall");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventregaddmetoall");
    }

    # parse inputs
    my $_resource_path = '/eventregaddmetoall';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventregaddmetogroup
#
# Register current user to a course group
# 
# @param string $token The authentication token. (required)
# @param string $codegroup The code used to group events. (required)
# @param string $listname The name of the list where the user has to be registered. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'codegroup' => {
        data_type => 'string',
        description => 'The code used to group events.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user has to be registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventregaddmetogroup' } = { 
        summary => 'Register current user to a course group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventregaddmetogroup {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventregaddmetogroup");
    }

    # verify the required parameter 'codegroup' is set
    unless (exists $args{'codegroup'}) {
      croak("Missing the required parameter 'codegroup' when calling eventregaddmetogroup");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventregaddmetogroup");
    }

    # parse inputs
    my $_resource_path = '/eventregaddmetogroup';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'codegroup'}) {
        $query_params->{'codegroup'} = $self->{api_client}->to_query_value($args{'codegroup'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventregadduser
#
# Register a user to a course for attendance
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to add. (required)
# @param string $eventid The id of the event. (required)
# @param string $listname The name of the list where the user has to be registered. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to add.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user has to be registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventregadduser' } = { 
        summary => 'Register a user to a course for attendance',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventregadduser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventregadduser");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling eventregadduser");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling eventregadduser");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventregadduser");
    }

    # parse inputs
    my $_resource_path = '/eventregadduser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventregaddusertoall
#
# Register a user to assist with all courses
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to add. (required)
# @param string $listname The name of the list where the user has to be registered. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to add.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user has to be registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventregaddusertoall' } = { 
        summary => 'Register a user to assist with all courses',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventregaddusertoall {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventregaddusertoall");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling eventregaddusertoall");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventregaddusertoall");
    }

    # parse inputs
    my $_resource_path = '/eventregaddusertoall';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventregaddusertogroup
#
# Register a user to an course group
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to add. (required)
# @param string $codegroup The code used to group events. (required)
# @param string $listname The name of the list where the user has to be registered. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to add.',
        required => '1',
    },
    'codegroup' => {
        data_type => 'string',
        description => 'The code used to group events.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user has to be registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventregaddusertogroup' } = { 
        summary => 'Register a user to an course group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventregaddusertogroup {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventregaddusertogroup");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling eventregaddusertogroup");
    }

    # verify the required parameter 'codegroup' is set
    unless (exists $args{'codegroup'}) {
      croak("Missing the required parameter 'codegroup' when calling eventregaddusertogroup");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventregaddusertogroup");
    }

    # parse inputs
    my $_resource_path = '/eventregaddusertogroup';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'codegroup'}) {
        $query_params->{'codegroup'} = $self->{api_client}->to_query_value($args{'codegroup'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreggetevents
#
# View course registration by user
# 
# @param string $token The authentication token. (required)
# @param string $userid The user id to list events. (required)
# @param string $listname The name of the list where the user is registered. (required)
# @param string $termid The term id to list events. (optional)
# @param string $namefilter The value used to filter the events by name. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The user id to list events.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    'termid' => {
        data_type => 'string',
        description => 'The term id to list events.',
        required => '0',
    },
    'namefilter' => {
        data_type => 'string',
        description => 'The value used to filter the events by name.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreggetevents' } = { 
        summary => 'View course registration by user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreggetevents {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventreggetevents");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling eventreggetevents");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreggetevents");
    }

    # parse inputs
    my $_resource_path = '/eventreggetevents';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    # query params
    if ( exists $args{'termid'}) {
        $query_params->{'termid'} = $self->{api_client}->to_query_value($args{'termid'});
    }

    # query params
    if ( exists $args{'namefilter'}) {
        $query_params->{'namefilter'} = $self->{api_client}->to_query_value($args{'namefilter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreggetgroups
#
# Lists the course group registrations of a user
# 
# @param string $token The authentication token. (required)
# @param string $userid The user id to list events. (required)
# @param string $listname The name of the list where the user is registered. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The user id to list events.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreggetgroups' } = { 
        summary => 'Lists the course group registrations of a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreggetgroups {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventreggetgroups");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling eventreggetgroups");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreggetgroups");
    }

    # parse inputs
    my $_resource_path = '/eventreggetgroups';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreggetmyevents
#
# View the event registrations of the current user
# 
# @param string $token The authentication token. (required)
# @param string $listname The name of the list where the user is registered. (required)
# @param string $termid The term id to list events. (optional)
# @param string $namefilter The value used to filter the events by name. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    'termid' => {
        data_type => 'string',
        description => 'The term id to list events.',
        required => '0',
    },
    'namefilter' => {
        data_type => 'string',
        description => 'The value used to filter the events by name.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreggetmyevents' } = { 
        summary => 'View the event registrations of the current user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreggetmyevents {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventreggetmyevents");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreggetmyevents");
    }

    # parse inputs
    my $_resource_path = '/eventreggetmyevents';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    # query params
    if ( exists $args{'termid'}) {
        $query_params->{'termid'} = $self->{api_client}->to_query_value($args{'termid'});
    }

    # query params
    if ( exists $args{'namefilter'}) {
        $query_params->{'namefilter'} = $self->{api_client}->to_query_value($args{'namefilter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreggetmygroups
#
# View all current user registrations to course groups
# 
# @param string $token The authentication token. (required)
# @param string $listname The name of the list where the user is registered. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreggetmygroups' } = { 
        summary => 'View all current user registrations to course groups',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreggetmygroups {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventreggetmygroups");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreggetmygroups");
    }

    # parse inputs
    my $_resource_path = '/eventreggetmygroups';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreggetusers
#
# View course registration
# 
# @param string $token The authentication token. (required)
# @param string $eventid The event id to list users. (required)
# @param string $listname The name of the list to get. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The event id to list users.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list to get.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreggetusers' } = { 
        summary => 'View course registration',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreggetusers {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventreggetusers");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling eventreggetusers");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreggetusers");
    }

    # parse inputs
    my $_resource_path = '/eventreggetusers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreggetusersfromgroup
#
# Lists the registrations for a course group
# 
# @param string $token The authentication token. (required)
# @param string $codegroup The code group to list users. (required)
# @param string $listname The name of the list to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'codegroup' => {
        data_type => 'string',
        description => 'The code group to list users.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreggetusersfromgroup' } = { 
        summary => 'Lists the registrations for a course group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreggetusersfromgroup {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventreggetusersfromgroup");
    }

    # verify the required parameter 'codegroup' is set
    unless (exists $args{'codegroup'}) {
      croak("Missing the required parameter 'codegroup' when calling eventreggetusersfromgroup");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreggetusersfromgroup");
    }

    # parse inputs
    my $_resource_path = '/eventreggetusersfromgroup';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'codegroup'}) {
        $query_params->{'codegroup'} = $self->{api_client}->to_query_value($args{'codegroup'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventreggetuserstoall
#
# View the users that are registered to all courses
# 
# @param string $token The authentication token. (required)
# @param string $listname The name of the list to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventreggetuserstoall' } = { 
        summary => 'View the users that are registered to all courses',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventreggetuserstoall {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventreggetuserstoall");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventreggetuserstoall");
    }

    # parse inputs
    my $_resource_path = '/eventreggetuserstoall';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventregremoveme
#
# Unregister current user from a course
# 
# @param string $token The authentication token. (required)
# @param string $eventid The id of the event. (required)
# @param string $listname The name of the list where the user is registered. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventregremoveme' } = { 
        summary => 'Unregister current user from a course',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventregremoveme {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventregremoveme");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling eventregremoveme");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventregremoveme");
    }

    # parse inputs
    my $_resource_path = '/eventregremoveme';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventregremovemefromall
#
# Remove current user from the registration to all courses
# 
# @param string $token The authentication token. (required)
# @param string $listname The name of the list where the user is registered. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventregremovemefromall' } = { 
        summary => 'Remove current user from the registration to all courses',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventregremovemefromall {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventregremovemefromall");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventregremovemefromall");
    }

    # parse inputs
    my $_resource_path = '/eventregremovemefromall';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventregremovemefromgroup
#
# Remove current user from a course group
# 
# @param string $token The authentication token. (required)
# @param string $codegroup The code group of the events/courses. (required)
# @param string $listname The name of the list where the user is registered. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'codegroup' => {
        data_type => 'string',
        description => 'The code group of the events/courses.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventregremovemefromgroup' } = { 
        summary => 'Remove current user from a course group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventregremovemefromgroup {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventregremovemefromgroup");
    }

    # verify the required parameter 'codegroup' is set
    unless (exists $args{'codegroup'}) {
      croak("Missing the required parameter 'codegroup' when calling eventregremovemefromgroup");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventregremovemefromgroup");
    }

    # parse inputs
    my $_resource_path = '/eventregremovemefromgroup';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'codegroup'}) {
        $query_params->{'codegroup'} = $self->{api_client}->to_query_value($args{'codegroup'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventregremoveuser
#
# Remove a user from a course
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to remove. (required)
# @param string $eventid The id of the event. (required)
# @param string $listname The name of the list where the user is registered. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to remove.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventregremoveuser' } = { 
        summary => 'Remove a user from a course',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventregremoveuser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventregremoveuser");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling eventregremoveuser");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling eventregremoveuser");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventregremoveuser");
    }

    # parse inputs
    my $_resource_path = '/eventregremoveuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventregremoveuserfromall
#
# Remove a user from the registration to all courses
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to remove. (required)
# @param string $listname The name of the list where the user is registered. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to remove.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventregremoveuserfromall' } = { 
        summary => 'Remove a user from the registration to all courses',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventregremoveuserfromall {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventregremoveuserfromall");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling eventregremoveuserfromall");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventregremoveuserfromall");
    }

    # parse inputs
    my $_resource_path = '/eventregremoveuserfromall';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventregremoveuserfromgroup
#
# Remove a user from a course group
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to remove. (required)
# @param string $codegroup The code group of the events/courses. (required)
# @param string $listname The name of the list where the user is registered. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to remove.',
        required => '1',
    },
    'codegroup' => {
        data_type => 'string',
        description => 'The code group of the events/courses.',
        required => '1',
    },
    'listname' => {
        data_type => 'string',
        description => 'The name of the list where the user is registered.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventregremoveuserfromgroup' } = { 
        summary => 'Remove a user from a course group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventregremoveuserfromgroup {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventregremoveuserfromgroup");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling eventregremoveuserfromgroup");
    }

    # verify the required parameter 'codegroup' is set
    unless (exists $args{'codegroup'}) {
      croak("Missing the required parameter 'codegroup' when calling eventregremoveuserfromgroup");
    }

    # verify the required parameter 'listname' is set
    unless (exists $args{'listname'}) {
      croak("Missing the required parameter 'listname' when calling eventregremoveuserfromgroup");
    }

    # parse inputs
    my $_resource_path = '/eventregremoveuserfromgroup';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'codegroup'}) {
        $query_params->{'codegroup'} = $self->{api_client}->to_query_value($args{'codegroup'});
    }

    # query params
    if ( exists $args{'listname'}) {
        $query_params->{'listname'} = $self->{api_client}->to_query_value($args{'listname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventsave
#
# Create or edit a course
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventsave' } = { 
        summary => 'Create or edit a course',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/eventsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# eventsearchgroup
#
# Searches for the available event groups
# 
# @param string $token The authentication token. (required)
# @param string $query Query to search event groups. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'query' => {
        data_type => 'string',
        description => 'Query to search event groups.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'eventsearchgroup' } = { 
        summary => 'Searches for the available event groups',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub eventsearchgroup {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling eventsearchgroup");
    }

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling eventsearchgroup");
    }

    # parse inputs
    my $_resource_path = '/eventsearchgroup';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# export
#
# Export AccuCampus data
# 
# @param string $token The authentication token. (required)
# @param string $exporttype What to export. (required)
# @param string $exportformat The format of the resulting file. Valid types are CSV, HTML, XLS. (required)
# @param string $filters Pipe separated filters for the export, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'exporttype' => {
        data_type => 'string',
        description => 'What to export.',
        required => '1',
    },
    'exportformat' => {
        data_type => 'string',
        description => 'The format of the resulting file. Valid types are CSV, HTML, XLS.',
        required => '1',
    },
    'filters' => {
        data_type => 'string',
        description => 'Pipe separated filters for the export, eg: aaa&#x3D;val|bbb&#x3D;val|...',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'export' } = { 
        summary => 'Export AccuCampus data',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub export {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling export");
    }

    # verify the required parameter 'exporttype' is set
    unless (exists $args{'exporttype'}) {
      croak("Missing the required parameter 'exporttype' when calling export");
    }

    # verify the required parameter 'exportformat' is set
    unless (exists $args{'exportformat'}) {
      croak("Missing the required parameter 'exportformat' when calling export");
    }

    # parse inputs
    my $_resource_path = '/export';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'exporttype'}) {
        $query_params->{'exporttype'} = $self->{api_client}->to_query_value($args{'exporttype'});
    }

    # query params
    if ( exists $args{'exportformat'}) {
        $query_params->{'exportformat'} = $self->{api_client}->to_query_value($args{'exportformat'});
    }

    # query params
    if ( exists $args{'filters'}) {
        $query_params->{'filters'} = $self->{api_client}->to_query_value($args{'filters'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# exportlisttypes
#
# Lists available export types
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'exportlisttypes' } = { 
        summary => 'Lists available export types',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub exportlisttypes {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling exportlisttypes");
    }

    # parse inputs
    my $_resource_path = '/exportlisttypes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# featurelist
#
# Lists the available features.
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'featurelist' } = { 
        summary => 'Lists the available features.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub featurelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling featurelist");
    }

    # parse inputs
    my $_resource_path = '/featurelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# holidaylist
#
# View a list of entered holidays
# 
# @param string $token The authentication token. (required)
# @param string $term The term to get holidays from. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'term' => {
        data_type => 'string',
        description => 'The term to get holidays from.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'holidaylist' } = { 
        summary => 'View a list of entered holidays',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub holidaylist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling holidaylist");
    }

    # verify the required parameter 'term' is set
    unless (exists $args{'term'}) {
      croak("Missing the required parameter 'term' when calling holidaylist");
    }

    # parse inputs
    my $_resource_path = '/holidaylist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'term'}) {
        $query_params->{'term'} = $self->{api_client}->to_query_value($args{'term'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# holidaysave
#
# Create or edit a list of holidays
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'holidaysave' } = { 
        summary => 'Create or edit a list of holidays',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub holidaysave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/holidaysave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# holidaysuggest
#
# View the holiday suggestions in the given term
# 
# @param string $token The authentication token. (required)
# @param string $term The term to get holidays from. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'term' => {
        data_type => 'string',
        description => 'The term to get holidays from.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'holidaysuggest' } = { 
        summary => 'View the holiday suggestions in the given term',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub holidaysuggest {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling holidaysuggest");
    }

    # verify the required parameter 'term' is set
    unless (exists $args{'term'}) {
      croak("Missing the required parameter 'term' when calling holidaysuggest");
    }

    # parse inputs
    my $_resource_path = '/holidaysuggest';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'term'}) {
        $query_params->{'term'} = $self->{api_client}->to_query_value($args{'term'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# import
#
# Import data into AccuCampus
# 
# @param string $token The authentication token. (required)
# @param string $importtype The kind of data that is being uploaded. (required)
# @param string $upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
# @param string $filename The local name of the uploaded file. For later reference. (optional)
# @param string $parameters Import parameters, in a key-value pair JSON-serialized object. Eg {&#39;parameter&#39;:&#39;value&#39;}. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'importtype' => {
        data_type => 'string',
        description => 'The kind of data that is being uploaded.',
        required => '1',
    },
    'upload' => {
        data_type => 'string',
        description => 'Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).',
        required => '1',
    },
    'filename' => {
        data_type => 'string',
        description => 'The local name of the uploaded file. For later reference.',
        required => '0',
    },
    'parameters' => {
        data_type => 'string',
        description => 'Import parameters, in a key-value pair JSON-serialized object. Eg {&#39;parameter&#39;:&#39;value&#39;}.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'import' } = { 
        summary => 'Import data into AccuCampus',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub import {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling import");
    }

    # verify the required parameter 'importtype' is set
    unless (exists $args{'importtype'}) {
      croak("Missing the required parameter 'importtype' when calling import");
    }

    # verify the required parameter 'upload' is set
    unless (exists $args{'upload'}) {
      croak("Missing the required parameter 'upload' when calling import");
    }

    # parse inputs
    my $_resource_path = '/import';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'importtype'}) {
        $query_params->{'importtype'} = $self->{api_client}->to_query_value($args{'importtype'});
    }

    # query params
    if ( exists $args{'upload'}) {
        $query_params->{'upload'} = $self->{api_client}->to_query_value($args{'upload'});
    }

    # query params
    if ( exists $args{'filename'}) {
        $query_params->{'filename'} = $self->{api_client}->to_query_value($args{'filename'});
    }

    # query params
    if ( exists $args{'parameters'}) {
        $query_params->{'parameters'} = $self->{api_client}->to_query_value($args{'parameters'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# importlisttypes
#
# Lists available import types
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'importlisttypes' } = { 
        summary => 'Lists available import types',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub importlisttypes {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling importlisttypes");
    }

    # parse inputs
    my $_resource_path = '/importlisttypes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# interactiondelete
#
# Delete an interaction
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the interaction to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the interaction to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'interactiondelete' } = { 
        summary => 'Delete an interaction',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub interactiondelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling interactiondelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling interactiondelete");
    }

    # parse inputs
    my $_resource_path = '/interactiondelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# interactionfeed
#
# Get the interactions feed
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param DateTime $startdate If set, only interactions that happened after this date are returned. (optional)
# @param boolean $public Specifies whether to return public or private interactions. (optional)
# @param string $contexttype The type of the context of the interactions to return. (optional)
# @param string $contextid The id of the context of the interactions to return. (optional)
# @param string $types The  comma separated types of the interactions to return. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
# @param boolean $showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned. (optional)
# @param boolean $orderdescending If true, last interactions will be shown first. Otherwise, interactions will be ordered ascendantly. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'If set, only interactions that happened after this date are returned.',
        required => '0',
    },
    'public' => {
        data_type => 'boolean',
        description => 'Specifies whether to return public or private interactions.',
        required => '0',
    },
    'contexttype' => {
        data_type => 'string',
        description => 'The type of the context of the interactions to return.',
        required => '0',
    },
    'contextid' => {
        data_type => 'string',
        description => 'The id of the context of the interactions to return.',
        required => '0',
    },
    'types' => {
        data_type => 'string',
        description => 'The  comma separated types of the interactions to return.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    'showdefaultphoto' => {
        data_type => 'boolean',
        description => 'If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.',
        required => '0',
    },
    'orderdescending' => {
        data_type => 'boolean',
        description => 'If true, last interactions will be shown first. Otherwise, interactions will be ordered ascendantly.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'interactionfeed' } = { 
        summary => 'Get the interactions feed',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub interactionfeed {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling interactionfeed");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling interactionfeed");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling interactionfeed");
    }

    # parse inputs
    my $_resource_path = '/interactionfeed';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'public'}) {
        $query_params->{'public'} = $self->{api_client}->to_query_value($args{'public'});
    }

    # query params
    if ( exists $args{'contexttype'}) {
        $query_params->{'contexttype'} = $self->{api_client}->to_query_value($args{'contexttype'});
    }

    # query params
    if ( exists $args{'contextid'}) {
        $query_params->{'contextid'} = $self->{api_client}->to_query_value($args{'contextid'});
    }

    # query params
    if ( exists $args{'types'}) {
        $query_params->{'types'} = $self->{api_client}->to_query_value($args{'types'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    # query params
    if ( exists $args{'showdefaultphoto'}) {
        $query_params->{'showdefaultphoto'} = $self->{api_client}->to_query_value($args{'showdefaultphoto'});
    }

    # query params
    if ( exists $args{'orderdescending'}) {
        $query_params->{'orderdescending'} = $self->{api_client}->to_query_value($args{'orderdescending'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# interactionget
#
# View an interaction
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the interaction. (required)
# @param int $thumbnailmediasize The size in pixels of the thumbnail media URLs returned. Defaults to 680. If the size specified is not available, a similar one will be returned. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the interaction.',
        required => '1',
    },
    'thumbnailmediasize' => {
        data_type => 'int',
        description => 'The size in pixels of the thumbnail media URLs returned. Defaults to 680. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'interactionget' } = { 
        summary => 'View an interaction',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub interactionget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling interactionget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling interactionget");
    }

    # parse inputs
    my $_resource_path = '/interactionget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'thumbnailmediasize'}) {
        $query_params->{'thumbnailmediasize'} = $self->{api_client}->to_query_value($args{'thumbnailmediasize'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# interactionlistprivatesummary
#
# Get current user's latest private interactions
# 
# @param string $token The authentication token. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
# @param boolean $showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    'showdefaultphoto' => {
        data_type => 'boolean',
        description => 'If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'interactionlistprivatesummary' } = { 
        summary => 'Get current user&#39;s latest private interactions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub interactionlistprivatesummary {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling interactionlistprivatesummary");
    }

    # parse inputs
    my $_resource_path = '/interactionlistprivatesummary';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    # query params
    if ( exists $args{'showdefaultphoto'}) {
        $query_params->{'showdefaultphoto'} = $self->{api_client}->to_query_value($args{'showdefaultphoto'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# interactionsave
#
# Save an interaction
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'interactionsave' } = { 
        summary => 'Save an interaction',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub interactionsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/interactionsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# licenseacceptagreement
#
# Accept the license agreement
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'licenseacceptagreement' } = { 
        summary => 'Accept the license agreement',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub licenseacceptagreement {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling licenseacceptagreement");
    }

    # parse inputs
    my $_resource_path = '/licenseacceptagreement';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# licensegetagreementstatus
#
# Check if license agreement has been accepted
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'licensegetagreementstatus' } = { 
        summary => 'Check if license agreement has been accepted',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub licensegetagreementstatus {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling licensegetagreementstatus");
    }

    # parse inputs
    my $_resource_path = '/licensegetagreementstatus';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# licensegetcurrent
#
# Gets the current license information
# 
# @param string $token The authentication token. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'licensegetcurrent' } = { 
        summary => 'Gets the current license information',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub licensegetcurrent {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/licensegetcurrent';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# licenserenew
#
# Contact Engineerica in order to renew the AccuCampus subscription
# 
# @param string $token The authentication token. (required)
# @param string $email The e-mail of the user sending the request. (required)
# @param string $phonenumber The phone number of the user sending the request. (required)
# @param string $jobtitle The job title of the user sending the request. (optional)
# @param string $institution The institution of the user sending the request. (optional)
# @param string $comments Comments entered by the user sending the request. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'email' => {
        data_type => 'string',
        description => 'The e-mail of the user sending the request.',
        required => '1',
    },
    'phonenumber' => {
        data_type => 'string',
        description => 'The phone number of the user sending the request.',
        required => '1',
    },
    'jobtitle' => {
        data_type => 'string',
        description => 'The job title of the user sending the request.',
        required => '0',
    },
    'institution' => {
        data_type => 'string',
        description => 'The institution of the user sending the request.',
        required => '0',
    },
    'comments' => {
        data_type => 'string',
        description => 'Comments entered by the user sending the request.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'licenserenew' } = { 
        summary => 'Contact Engineerica in order to renew the AccuCampus subscription',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub licenserenew {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling licenserenew");
    }

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling licenserenew");
    }

    # verify the required parameter 'phonenumber' is set
    unless (exists $args{'phonenumber'}) {
      croak("Missing the required parameter 'phonenumber' when calling licenserenew");
    }

    # parse inputs
    my $_resource_path = '/licenserenew';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'email'}) {
        $query_params->{'email'} = $self->{api_client}->to_query_value($args{'email'});
    }

    # query params
    if ( exists $args{'phonenumber'}) {
        $query_params->{'phonenumber'} = $self->{api_client}->to_query_value($args{'phonenumber'});
    }

    # query params
    if ( exists $args{'jobtitle'}) {
        $query_params->{'jobtitle'} = $self->{api_client}->to_query_value($args{'jobtitle'});
    }

    # query params
    if ( exists $args{'institution'}) {
        $query_params->{'institution'} = $self->{api_client}->to_query_value($args{'institution'});
    }

    # query params
    if ( exists $args{'comments'}) {
        $query_params->{'comments'} = $self->{api_client}->to_query_value($args{'comments'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# likedelete
#
# Delete a like
# 
# @param string $token The authentication token. (required)
# @param string $interactionid The id of the interaction to unlike. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'interactionid' => {
        data_type => 'string',
        description => 'The id of the interaction to unlike.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'likedelete' } = { 
        summary => 'Delete a like',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub likedelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling likedelete");
    }

    # verify the required parameter 'interactionid' is set
    unless (exists $args{'interactionid'}) {
      croak("Missing the required parameter 'interactionid' when calling likedelete");
    }

    # parse inputs
    my $_resource_path = '/likedelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'interactionid'}) {
        $query_params->{'interactionid'} = $self->{api_client}->to_query_value($args{'interactionid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# likelist
#
# View all the likes associated to a target
# 
# @param string $token The authentication token. (required)
# @param string $interactionid The id of the interaction to unlike. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'interactionid' => {
        data_type => 'string',
        description => 'The id of the interaction to unlike.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'likelist' } = { 
        summary => 'View all the likes associated to a target',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub likelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling likelist");
    }

    # verify the required parameter 'interactionid' is set
    unless (exists $args{'interactionid'}) {
      croak("Missing the required parameter 'interactionid' when calling likelist");
    }

    # parse inputs
    my $_resource_path = '/likelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'interactionid'}) {
        $query_params->{'interactionid'} = $self->{api_client}->to_query_value($args{'interactionid'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# likesave
#
# Save a like
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'likesave' } = { 
        summary => 'Save a like',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub likesave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/likesave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# listtimezones
#
# Lists the available timezones
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'listtimezones' } = { 
        summary => 'Lists the available timezones',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub listtimezones {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/listtimezones';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# locationdelete
#
# Delete a location
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the location to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the location to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'locationdelete' } = { 
        summary => 'Delete a location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub locationdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling locationdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling locationdelete");
    }

    # parse inputs
    my $_resource_path = '/locationdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# locationget
#
# Search and view details of a location
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the location to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the location to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'locationget' } = { 
        summary => 'Search and view details of a location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub locationget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling locationget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling locationget");
    }

    # parse inputs
    my $_resource_path = '/locationget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# locationlist
#
# View a list of locations
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $locations The comma-separated list containing the ids of the locations to list. (optional)
# @param boolean $sortbygroup True to list locations sorted by the &#39;Located In&#39; property. Defaults to false. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'locations' => {
        data_type => 'string',
        description => 'The comma-separated list containing the ids of the locations to list.',
        required => '0',
    },
    'sortbygroup' => {
        data_type => 'boolean',
        description => 'True to list locations sorted by the &#39;Located In&#39; property. Defaults to false.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'locationlist' } = { 
        summary => 'View a list of locations',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub locationlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling locationlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling locationlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling locationlist");
    }

    # parse inputs
    my $_resource_path = '/locationlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'locations'}) {
        $query_params->{'locations'} = $self->{api_client}->to_query_value($args{'locations'});
    }

    # query params
    if ( exists $args{'sortbygroup'}) {
        $query_params->{'sortbygroup'} = $self->{api_client}->to_query_value($args{'sortbygroup'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# locationsave
#
# Create or edit a location
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'locationsave' } = { 
        summary => 'Create or edit a location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub locationsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/locationsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# login
#
# Login
# 
# @param string $domain The account domain to login. (required)
# @param string $username The username (email) of the user to login as. (required)
# @param string $password The password of the user to login as. (required)
# @param string $method The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;. (required)
# @param boolean $rememberme If true then the session will not expire. (optional)
{
    my $params = {
    'domain' => {
        data_type => 'string',
        description => 'The account domain to login.',
        required => '1',
    },
    'username' => {
        data_type => 'string',
        description => 'The username (email) of the user to login as.',
        required => '1',
    },
    'password' => {
        data_type => 'string',
        description => 'The password of the user to login as.',
        required => '1',
    },
    'method' => {
        data_type => 'string',
        description => 'The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;.',
        required => '1',
    },
    'rememberme' => {
        data_type => 'boolean',
        description => 'If true then the session will not expire.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'login' } = { 
        summary => 'Login',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub login {
    my ($self, %args) = @_;

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling login");
    }

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling login");
    }

    # verify the required parameter 'password' is set
    unless (exists $args{'password'}) {
      croak("Missing the required parameter 'password' when calling login");
    }

    # verify the required parameter 'method' is set
    unless (exists $args{'method'}) {
      croak("Missing the required parameter 'method' when calling login");
    }

    # parse inputs
    my $_resource_path = '/login';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'domain'}) {
        $query_params->{'domain'} = $self->{api_client}->to_query_value($args{'domain'});
    }

    # query params
    if ( exists $args{'username'}) {
        $query_params->{'username'} = $self->{api_client}->to_query_value($args{'username'});
    }

    # query params
    if ( exists $args{'password'}) {
        $query_params->{'password'} = $self->{api_client}->to_query_value($args{'password'});
    }

    # query params
    if ( exists $args{'method'}) {
        $query_params->{'method'} = $self->{api_client}->to_query_value($args{'method'});
    }

    # query params
    if ( exists $args{'rememberme'}) {
        $query_params->{'rememberme'} = $self->{api_client}->to_query_value($args{'rememberme'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# logout
#
# Logout
# 
# @param string $token The authentication token used to login. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token used to login.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'logout' } = { 
        summary => 'Logout',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub logout {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/logout';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mediacheckin
#
# Check in media item
# 
# @param string $token The authentication token. (required)
# @param string $media The id of the media item to checkin. (required)
# @param DateTime $checkindate The checkout date. (required)
# @param string $notes The notes of the checkout. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'media' => {
        data_type => 'string',
        description => 'The id of the media item to checkin.',
        required => '1',
    },
    'checkindate' => {
        data_type => 'DateTime',
        description => 'The checkout date.',
        required => '1',
    },
    'notes' => {
        data_type => 'string',
        description => 'The notes of the checkout.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'mediacheckin' } = { 
        summary => 'Check in media item',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mediacheckin {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling mediacheckin");
    }

    # verify the required parameter 'media' is set
    unless (exists $args{'media'}) {
      croak("Missing the required parameter 'media' when calling mediacheckin");
    }

    # verify the required parameter 'checkindate' is set
    unless (exists $args{'checkindate'}) {
      croak("Missing the required parameter 'checkindate' when calling mediacheckin");
    }

    # parse inputs
    my $_resource_path = '/mediacheckin';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'media'}) {
        $query_params->{'media'} = $self->{api_client}->to_query_value($args{'media'});
    }

    # query params
    if ( exists $args{'checkindate'}) {
        $query_params->{'checkindate'} = $self->{api_client}->to_query_value($args{'checkindate'});
    }

    # query params
    if ( exists $args{'notes'}) {
        $query_params->{'notes'} = $self->{api_client}->to_query_value($args{'notes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mediacheckout
#
# Check out media item
# 
# @param string $token The authentication token. (required)
# @param string $media The id of the media item to checkout. (required)
# @param string $user The id of the user that is checking the item out. (required)
# @param DateTime $checkoutdate The checkout date. (required)
# @param DateTime $duedate The date when the checkout is due. (required)
# @param string $staff The id of the staff member related to the checkout. (optional)
# @param string $event The id of the event related to the checkout. (optional)
# @param string $notes The notes of the checkout. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'media' => {
        data_type => 'string',
        description => 'The id of the media item to checkout.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The id of the user that is checking the item out.',
        required => '1',
    },
    'checkoutdate' => {
        data_type => 'DateTime',
        description => 'The checkout date.',
        required => '1',
    },
    'duedate' => {
        data_type => 'DateTime',
        description => 'The date when the checkout is due.',
        required => '1',
    },
    'staff' => {
        data_type => 'string',
        description => 'The id of the staff member related to the checkout.',
        required => '0',
    },
    'event' => {
        data_type => 'string',
        description => 'The id of the event related to the checkout.',
        required => '0',
    },
    'notes' => {
        data_type => 'string',
        description => 'The notes of the checkout.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'mediacheckout' } = { 
        summary => 'Check out media item',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mediacheckout {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling mediacheckout");
    }

    # verify the required parameter 'media' is set
    unless (exists $args{'media'}) {
      croak("Missing the required parameter 'media' when calling mediacheckout");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling mediacheckout");
    }

    # verify the required parameter 'checkoutdate' is set
    unless (exists $args{'checkoutdate'}) {
      croak("Missing the required parameter 'checkoutdate' when calling mediacheckout");
    }

    # verify the required parameter 'duedate' is set
    unless (exists $args{'duedate'}) {
      croak("Missing the required parameter 'duedate' when calling mediacheckout");
    }

    # parse inputs
    my $_resource_path = '/mediacheckout';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'media'}) {
        $query_params->{'media'} = $self->{api_client}->to_query_value($args{'media'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'staff'}) {
        $query_params->{'staff'} = $self->{api_client}->to_query_value($args{'staff'});
    }

    # query params
    if ( exists $args{'event'}) {
        $query_params->{'event'} = $self->{api_client}->to_query_value($args{'event'});
    }

    # query params
    if ( exists $args{'checkoutdate'}) {
        $query_params->{'checkoutdate'} = $self->{api_client}->to_query_value($args{'checkoutdate'});
    }

    # query params
    if ( exists $args{'duedate'}) {
        $query_params->{'duedate'} = $self->{api_client}->to_query_value($args{'duedate'});
    }

    # query params
    if ( exists $args{'notes'}) {
        $query_params->{'notes'} = $self->{api_client}->to_query_value($args{'notes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mediacheckoutlist
#
# View a list of past media checkouts
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $media Used to filter the checkouts of a specific media item. (optional)
# @param string $user Used to filter the checkouts made by a specific user. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'media' => {
        data_type => 'string',
        description => 'Used to filter the checkouts of a specific media item.',
        required => '0',
    },
    'user' => {
        data_type => 'string',
        description => 'Used to filter the checkouts made by a specific user.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'mediacheckoutlist' } = { 
        summary => 'View a list of past media checkouts',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mediacheckoutlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling mediacheckoutlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling mediacheckoutlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling mediacheckoutlist");
    }

    # parse inputs
    my $_resource_path = '/mediacheckoutlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'media'}) {
        $query_params->{'media'} = $self->{api_client}->to_query_value($args{'media'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mediadelete
#
# Delete a media item
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the media item to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the media item to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mediadelete' } = { 
        summary => 'Delete a media item',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mediadelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling mediadelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling mediadelete");
    }

    # parse inputs
    my $_resource_path = '/mediadelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mediadeletecheckoutlog
#
# Delete a media checkout log
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the checkout log to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the checkout log to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mediadeletecheckoutlog' } = { 
        summary => 'Delete a media checkout log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mediadeletecheckoutlog {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling mediadeletecheckoutlog");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling mediadeletecheckoutlog");
    }

    # parse inputs
    my $_resource_path = '/mediadeletecheckoutlog';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mediaget
#
# Search and view details of a media item
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the media item to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the media item to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mediaget' } = { 
        summary => 'Search and view details of a media item',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mediaget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling mediaget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling mediaget");
    }

    # parse inputs
    my $_resource_path = '/mediaget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mediagetbycode
#
# Search media item by unique code
# 
# @param string $token The authentication token. (required)
# @param string $code The code of the media item to get. (required)
# @param string $location The location where to look for the media item. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'code' => {
        data_type => 'string',
        description => 'The code of the media item to get.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The location where to look for the media item.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'mediagetbycode' } = { 
        summary => 'Search media item by unique code',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mediagetbycode {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling mediagetbycode");
    }

    # verify the required parameter 'code' is set
    unless (exists $args{'code'}) {
      croak("Missing the required parameter 'code' when calling mediagetbycode");
    }

    # parse inputs
    my $_resource_path = '/mediagetbycode';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'code'}) {
        $query_params->{'code'} = $self->{api_client}->to_query_value($args{'code'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mediagetcheckout
#
# View details of a media item checkout information
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the media item whose checkout information has to be retrieved. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the media item whose checkout information has to be retrieved.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'mediagetcheckout' } = { 
        summary => 'View details of a media item checkout information',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mediagetcheckout {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling mediagetcheckout");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling mediagetcheckout");
    }

    # parse inputs
    my $_resource_path = '/mediagetcheckout';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mediagetcheckoutlog
#
# View details of a media checkout log
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the media item whose checkout information has to be retrieved. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the media item whose checkout information has to be retrieved.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'mediagetcheckoutlog' } = { 
        summary => 'View details of a media checkout log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mediagetcheckoutlog {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling mediagetcheckoutlog");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling mediagetcheckoutlog");
    }

    # parse inputs
    my $_resource_path = '/mediagetcheckoutlog';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# medialist
#
# View a list of media items
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param int $status Used to filter the media items by their checkout status (0 &#x3D; CheckedIn, 1 &#x3D; CheckedOut, Unspecified &#x3D; All). (optional)
# @param string $user Used to filter the media items that are checked-out by a specific user. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'status' => {
        data_type => 'int',
        description => 'Used to filter the media items by their checkout status (0 &#x3D; CheckedIn, 1 &#x3D; CheckedOut, Unspecified &#x3D; All).',
        required => '0',
    },
    'user' => {
        data_type => 'string',
        description => 'Used to filter the media items that are checked-out by a specific user.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'medialist' } = { 
        summary => 'View a list of media items',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub medialist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling medialist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling medialist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling medialist");
    }

    # parse inputs
    my $_resource_path = '/medialist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mediasave
#
# Create or edit a media item
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'mediasave' } = { 
        summary => 'Create or edit a media item',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mediasave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/mediasave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mediatypedelete
#
# Delete a media type
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the media type to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the media type to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mediatypedelete' } = { 
        summary => 'Delete a media type',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mediatypedelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling mediatypedelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling mediatypedelete");
    }

    # parse inputs
    my $_resource_path = '/mediatypedelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mediatypeget
#
# Search and view details of a media type
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the media type to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the media type to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mediatypeget' } = { 
        summary => 'Search and view details of a media type',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mediatypeget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling mediatypeget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling mediatypeget");
    }

    # parse inputs
    my $_resource_path = '/mediatypeget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mediatypelist
#
# View a list of media types
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mediatypelist' } = { 
        summary => 'View a list of media types',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mediatypelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling mediatypelist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling mediatypelist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling mediatypelist");
    }

    # parse inputs
    my $_resource_path = '/mediatypelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mediatypesave
#
# Create or edit a media type
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'mediatypesave' } = { 
        summary => 'Create or edit a media type',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mediatypesave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/mediatypesave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# memorizedreportdelete
#
# Delete memorized report
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the report settings to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the report settings to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'memorizedreportdelete' } = { 
        summary => 'Delete memorized report',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub memorizedreportdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling memorizedreportdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling memorizedreportdelete");
    }

    # parse inputs
    my $_resource_path = '/memorizedreportdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# memorizedreportget
#
# View details of a memorized report
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the report configuration to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the report configuration to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'memorizedreportget' } = { 
        summary => 'View details of a memorized report',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub memorizedreportget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling memorizedreportget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling memorizedreportget");
    }

    # parse inputs
    my $_resource_path = '/memorizedreportget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# memorizedreportlist
#
# View a list of all his memorized reports
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $customname If specified filters the memorized reports by custom name. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'customname' => {
        data_type => 'string',
        description => 'If specified filters the memorized reports by custom name.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'memorizedreportlist' } = { 
        summary => 'View a list of all his memorized reports',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub memorizedreportlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling memorizedreportlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling memorizedreportlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling memorizedreportlist");
    }

    # parse inputs
    my $_resource_path = '/memorizedreportlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'customname'}) {
        $query_params->{'customname'} = $self->{api_client}->to_query_value($args{'customname'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# memorizedreportsave
#
# Create or edit a memorized report
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'memorizedreportsave' } = { 
        summary => 'Create or edit a memorized report',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub memorizedreportsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/memorizedreportsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# menugetitems
#
# Gets the items on the menu
# 
# @param string $menuid The Id of the menu to get. (required)
{
    my $params = {
    'menuid' => {
        data_type => 'string',
        description => 'The Id of the menu to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'menugetitems' } = { 
        summary => 'Gets the items on the menu',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub menugetitems {
    my ($self, %args) = @_;

    # verify the required parameter 'menuid' is set
    unless (exists $args{'menuid'}) {
      croak("Missing the required parameter 'menuid' when calling menugetitems");
    }

    # parse inputs
    my $_resource_path = '/menugetitems';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'menuid'}) {
        $query_params->{'menuid'} = $self->{api_client}->to_query_value($args{'menuid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# myaccount
#
# Gets the logged in user account.
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'myaccount' } = { 
        summary => 'Gets the logged in user account.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub myaccount {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling myaccount");
    }

    # parse inputs
    my $_resource_path = '/myaccount';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# myianatimezone
#
# Gets the current time zone's iana name
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'myianatimezone' } = { 
        summary => 'Gets the current time zone&#39;s iana name',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub myianatimezone {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling myianatimezone");
    }

    # parse inputs
    my $_resource_path = '/myianatimezone';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# myprofile
#
# Gets the logged in user information.
# 
# @param string $token The authentication token. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'myprofile' } = { 
        summary => 'Gets the logged in user information.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub myprofile {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling myprofile");
    }

    # parse inputs
    my $_resource_path = '/myprofile';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# myrights
#
# Gets the list of actions the user can execute.
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'myrights' } = { 
        summary => 'Gets the list of actions the user can execute.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub myrights {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling myrights");
    }

    # parse inputs
    my $_resource_path = '/myrights';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mysaveprofile
#
# Updates logged user's profile information
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'mysaveprofile' } = { 
        summary => 'Updates logged user&#39;s profile information',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mysaveprofile {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/mysaveprofile';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationdelete
#
# Delete a notification
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the notification to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the notification to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationdelete' } = { 
        summary => 'Delete a notification',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling notificationdelete");
    }

    # parse inputs
    my $_resource_path = '/notificationdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationget
#
# View a notification
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the notification to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the notification to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationget' } = { 
        summary => 'View a notification',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling notificationget");
    }

    # parse inputs
    my $_resource_path = '/notificationget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationgetforstation
#
# Gets all public (in station) notifications for the specific user
# 
# @param string $station The id of the sign-in station to get. (required)
# @param string $user The card of the user. (required)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The card of the user.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationgetforstation' } = { 
        summary => 'Gets all public (in station) notifications for the specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationgetforstation {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling notificationgetforstation");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling notificationgetforstation");
    }

    # parse inputs
    my $_resource_path = '/notificationgetforstation';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationgetunreadcount
#
# Get the number of unread notifications
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationgetunreadcount' } = { 
        summary => 'Get the number of unread notifications',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationgetunreadcount {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationgetunreadcount");
    }

    # parse inputs
    my $_resource_path = '/notificationgetunreadcount';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationlist
#
# View a list of all sent notifications
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $recipient The recipient whose notifications have to be listed. (optional)
# @param int $status The status of the notifications to list. Read, Unread or All. (optional)
# @param DateTime $startdate The start date of the period to filter the notifications. (optional)
# @param DateTime $enddate The end date of the period to filter the notifications. (optional)
# @param boolean $sentonscreen Specifies whether to list the notifications that were sent on-screen or not. (optional)
# @param boolean $sentemail Specifies whether to list the notifications that were sent via e-mail or not. (optional)
# @param boolean $sentsms Specifies whether to list the notifications that were sent via sms or not. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'recipient' => {
        data_type => 'string',
        description => 'The recipient whose notifications have to be listed.',
        required => '0',
    },
    'status' => {
        data_type => 'int',
        description => 'The status of the notifications to list. Read, Unread or All.',
        required => '0',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'The start date of the period to filter the notifications.',
        required => '0',
    },
    'enddate' => {
        data_type => 'DateTime',
        description => 'The end date of the period to filter the notifications.',
        required => '0',
    },
    'sentonscreen' => {
        data_type => 'boolean',
        description => 'Specifies whether to list the notifications that were sent on-screen or not.',
        required => '0',
    },
    'sentemail' => {
        data_type => 'boolean',
        description => 'Specifies whether to list the notifications that were sent via e-mail or not.',
        required => '0',
    },
    'sentsms' => {
        data_type => 'boolean',
        description => 'Specifies whether to list the notifications that were sent via sms or not.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationlist' } = { 
        summary => 'View a list of all sent notifications',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling notificationlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling notificationlist");
    }

    # parse inputs
    my $_resource_path = '/notificationlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'recipient'}) {
        $query_params->{'recipient'} = $self->{api_client}->to_query_value($args{'recipient'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'enddate'}) {
        $query_params->{'enddate'} = $self->{api_client}->to_query_value($args{'enddate'});
    }

    # query params
    if ( exists $args{'sentonscreen'}) {
        $query_params->{'sentonscreen'} = $self->{api_client}->to_query_value($args{'sentonscreen'});
    }

    # query params
    if ( exists $args{'sentemail'}) {
        $query_params->{'sentemail'} = $self->{api_client}->to_query_value($args{'sentemail'});
    }

    # query params
    if ( exists $args{'sentsms'}) {
        $query_params->{'sentsms'} = $self->{api_client}->to_query_value($args{'sentsms'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationlistmine
#
# View all the notifications sent to the current user
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param int $status Specifies the status of the notifications to list. Read, Unread or All. (optional)
# @param DateTime $startdate The start date of the period to filter the notifications. (optional)
# @param DateTime $enddate The end date of the period to filter the notifications. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'status' => {
        data_type => 'int',
        description => 'Specifies the status of the notifications to list. Read, Unread or All.',
        required => '0',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'The start date of the period to filter the notifications.',
        required => '0',
    },
    'enddate' => {
        data_type => 'DateTime',
        description => 'The end date of the period to filter the notifications.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationlistmine' } = { 
        summary => 'View all the notifications sent to the current user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationlistmine {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationlistmine");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling notificationlistmine");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling notificationlistmine");
    }

    # parse inputs
    my $_resource_path = '/notificationlistmine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'enddate'}) {
        $query_params->{'enddate'} = $self->{api_client}->to_query_value($args{'enddate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationmarkasread
#
# Mark a notification as read
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read. (optional)
# @param int $status Specifies the status to filter the notifications. Read, Unread or All. (optional)
# @param DateTime $startdate The start date of the period to filter the notifications. (optional)
# @param DateTime $enddate The end date of the period to filter the notifications. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read.',
        required => '0',
    },
    'status' => {
        data_type => 'int',
        description => 'Specifies the status to filter the notifications. Read, Unread or All.',
        required => '0',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'The start date of the period to filter the notifications.',
        required => '0',
    },
    'enddate' => {
        data_type => 'DateTime',
        description => 'The end date of the period to filter the notifications.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationmarkasread' } = { 
        summary => 'Mark a notification as read',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationmarkasread {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationmarkasread");
    }

    # parse inputs
    my $_resource_path = '/notificationmarkasread';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'enddate'}) {
        $query_params->{'enddate'} = $self->{api_client}->to_query_value($args{'enddate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationmarkasunread
#
# Mark a notification as unread
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread. (optional)
# @param int $status Specifies the status to filter the notifications. Read, Unread or All. (optional)
# @param DateTime $startdate The start date of the period to filter the notifications. (optional)
# @param DateTime $enddate The end date of the period to filter the notifications. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread.',
        required => '0',
    },
    'status' => {
        data_type => 'int',
        description => 'Specifies the status to filter the notifications. Read, Unread or All.',
        required => '0',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'The start date of the period to filter the notifications.',
        required => '0',
    },
    'enddate' => {
        data_type => 'DateTime',
        description => 'The end date of the period to filter the notifications.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationmarkasunread' } = { 
        summary => 'Mark a notification as unread',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationmarkasunread {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationmarkasunread");
    }

    # parse inputs
    my $_resource_path = '/notificationmarkasunread';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'enddate'}) {
        $query_params->{'enddate'} = $self->{api_client}->to_query_value($args{'enddate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationsend
#
# Send notifications on screen, via email or text to users
# 
# @param string $token The authentication token. (required)
# @param boolean $emailenabled Whether send the notification via email. (required)
# @param boolean $onscreenenabled Whether to display the notification on screen. (required)
# @param boolean $smsenabled Whether to send the notification via text message. (required)
# @param string $title Notification title. (required)
# @param string $tousers Comma-separated Ids of users to send the notification. (optional)
# @param string $togroups Comma-separated Ids of user groups to send the notification. (optional)
# @param string $onscreenbody Body of the message for on-screen display. (optional)
# @param string $onscreenclick What to do when the notification is clicked. Valid values: hide, view, url. (optional)
# @param string $onscreenurl Url to redirect the user, if onscreenclick&#x3D;url. (optional)
# @param string $onscreenclass How to display the notification. Valid values: info, success, warning, error (optional)
# @param int $onscreenduration Time in seconds to display the notification. (optional)
# @param int $showonstation Whether to show the notification in the sign-in station. (optional)
# @param string $emailfromname Name of the email sender. (optional)
# @param string $emailfrom Reply-to email. (optional)
# @param string $emailsubject Subject of the email. (optional)
# @param string $emailbody Body of the email. (optional)
# @param string $textmessagebody Message for SMS. Max 160 characters. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'emailenabled' => {
        data_type => 'boolean',
        description => 'Whether send the notification via email.',
        required => '1',
    },
    'onscreenenabled' => {
        data_type => 'boolean',
        description => 'Whether to display the notification on screen.',
        required => '1',
    },
    'smsenabled' => {
        data_type => 'boolean',
        description => 'Whether to send the notification via text message.',
        required => '1',
    },
    'title' => {
        data_type => 'string',
        description => 'Notification title.',
        required => '1',
    },
    'tousers' => {
        data_type => 'string',
        description => 'Comma-separated Ids of users to send the notification.',
        required => '0',
    },
    'togroups' => {
        data_type => 'string',
        description => 'Comma-separated Ids of user groups to send the notification.',
        required => '0',
    },
    'onscreenbody' => {
        data_type => 'string',
        description => 'Body of the message for on-screen display.',
        required => '0',
    },
    'onscreenclick' => {
        data_type => 'string',
        description => 'What to do when the notification is clicked. Valid values: hide, view, url.',
        required => '0',
    },
    'onscreenurl' => {
        data_type => 'string',
        description => 'Url to redirect the user, if onscreenclick&#x3D;url.',
        required => '0',
    },
    'onscreenclass' => {
        data_type => 'string',
        description => 'How to display the notification. Valid values: info, success, warning, error',
        required => '0',
    },
    'onscreenduration' => {
        data_type => 'int',
        description => 'Time in seconds to display the notification.',
        required => '0',
    },
    'showonstation' => {
        data_type => 'int',
        description => 'Whether to show the notification in the sign-in station.',
        required => '0',
    },
    'emailfromname' => {
        data_type => 'string',
        description => 'Name of the email sender.',
        required => '0',
    },
    'emailfrom' => {
        data_type => 'string',
        description => 'Reply-to email.',
        required => '0',
    },
    'emailsubject' => {
        data_type => 'string',
        description => 'Subject of the email.',
        required => '0',
    },
    'emailbody' => {
        data_type => 'string',
        description => 'Body of the email.',
        required => '0',
    },
    'textmessagebody' => {
        data_type => 'string',
        description => 'Message for SMS. Max 160 characters.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationsend' } = { 
        summary => 'Send notifications on screen, via email or text to users',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationsend {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationsend");
    }

    # verify the required parameter 'emailenabled' is set
    unless (exists $args{'emailenabled'}) {
      croak("Missing the required parameter 'emailenabled' when calling notificationsend");
    }

    # verify the required parameter 'onscreenenabled' is set
    unless (exists $args{'onscreenenabled'}) {
      croak("Missing the required parameter 'onscreenenabled' when calling notificationsend");
    }

    # verify the required parameter 'smsenabled' is set
    unless (exists $args{'smsenabled'}) {
      croak("Missing the required parameter 'smsenabled' when calling notificationsend");
    }

    # verify the required parameter 'title' is set
    unless (exists $args{'title'}) {
      croak("Missing the required parameter 'title' when calling notificationsend");
    }

    # parse inputs
    my $_resource_path = '/notificationsend';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'tousers'}) {
        $query_params->{'tousers'} = $self->{api_client}->to_query_value($args{'tousers'});
    }

    # query params
    if ( exists $args{'togroups'}) {
        $query_params->{'togroups'} = $self->{api_client}->to_query_value($args{'togroups'});
    }

    # query params
    if ( exists $args{'emailenabled'}) {
        $query_params->{'emailenabled'} = $self->{api_client}->to_query_value($args{'emailenabled'});
    }

    # query params
    if ( exists $args{'onscreenenabled'}) {
        $query_params->{'onscreenenabled'} = $self->{api_client}->to_query_value($args{'onscreenenabled'});
    }

    # query params
    if ( exists $args{'smsenabled'}) {
        $query_params->{'smsenabled'} = $self->{api_client}->to_query_value($args{'smsenabled'});
    }

    # query params
    if ( exists $args{'title'}) {
        $query_params->{'title'} = $self->{api_client}->to_query_value($args{'title'});
    }

    # query params
    if ( exists $args{'onscreenbody'}) {
        $query_params->{'onscreenbody'} = $self->{api_client}->to_query_value($args{'onscreenbody'});
    }

    # query params
    if ( exists $args{'onscreenclick'}) {
        $query_params->{'onscreenclick'} = $self->{api_client}->to_query_value($args{'onscreenclick'});
    }

    # query params
    if ( exists $args{'onscreenurl'}) {
        $query_params->{'onscreenurl'} = $self->{api_client}->to_query_value($args{'onscreenurl'});
    }

    # query params
    if ( exists $args{'onscreenclass'}) {
        $query_params->{'onscreenclass'} = $self->{api_client}->to_query_value($args{'onscreenclass'});
    }

    # query params
    if ( exists $args{'onscreenduration'}) {
        $query_params->{'onscreenduration'} = $self->{api_client}->to_query_value($args{'onscreenduration'});
    }

    # query params
    if ( exists $args{'showonstation'}) {
        $query_params->{'showonstation'} = $self->{api_client}->to_query_value($args{'showonstation'});
    }

    # query params
    if ( exists $args{'emailfromname'}) {
        $query_params->{'emailfromname'} = $self->{api_client}->to_query_value($args{'emailfromname'});
    }

    # query params
    if ( exists $args{'emailfrom'}) {
        $query_params->{'emailfrom'} = $self->{api_client}->to_query_value($args{'emailfrom'});
    }

    # query params
    if ( exists $args{'emailsubject'}) {
        $query_params->{'emailsubject'} = $self->{api_client}->to_query_value($args{'emailsubject'});
    }

    # query params
    if ( exists $args{'emailbody'}) {
        $query_params->{'emailbody'} = $self->{api_client}->to_query_value($args{'emailbody'});
    }

    # query params
    if ( exists $args{'textmessagebody'}) {
        $query_params->{'textmessagebody'} = $self->{api_client}->to_query_value($args{'textmessagebody'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationsendonscreen
#
# Send on-screen notifications
# 
# @param string $token The authentication token. (required)
# @param string $notification The ID of the notification to send. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'notification' => {
        data_type => 'string',
        description => 'The ID of the notification to send.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationsendonscreen' } = { 
        summary => 'Send on-screen notifications',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationsendonscreen {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationsendonscreen");
    }

    # verify the required parameter 'notification' is set
    unless (exists $args{'notification'}) {
      croak("Missing the required parameter 'notification' when calling notificationsendonscreen");
    }

    # parse inputs
    my $_resource_path = '/notificationsendonscreen';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'notification'}) {
        $query_params->{'notification'} = $self->{api_client}->to_query_value($args{'notification'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationtopicdelete
#
# Delete a notification topic
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the notification topic to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the notification topic to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationtopicdelete' } = { 
        summary => 'Delete a notification topic',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationtopicdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationtopicdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling notificationtopicdelete");
    }

    # parse inputs
    my $_resource_path = '/notificationtopicdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationtopicget
#
# Search and view details of a notification topic
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the notification topic to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the notification topic to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationtopicget' } = { 
        summary => 'Search and view details of a notification topic',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationtopicget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationtopicget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling notificationtopicget");
    }

    # parse inputs
    my $_resource_path = '/notificationtopicget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationtopiclist
#
# List all the notification topics
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationtopiclist' } = { 
        summary => 'List all the notification topics',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationtopiclist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationtopiclist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling notificationtopiclist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling notificationtopiclist");
    }

    # parse inputs
    my $_resource_path = '/notificationtopiclist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationtopiclistsubscribe
#
# List all the notification topics available to subscribe
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationtopiclistsubscribe' } = { 
        summary => 'List all the notification topics available to subscribe',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationtopiclistsubscribe {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling notificationtopiclistsubscribe");
    }

    # parse inputs
    my $_resource_path = '/notificationtopiclistsubscribe';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notificationtopicsave
#
# Create or edit a notification topic
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notificationtopicsave' } = { 
        summary => 'Create or edit a notification topic',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notificationtopicsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/notificationtopicsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# pushderegister
#
# Deregisters the current device to receive push notifications
# 
# @param string $devicetoken The device token where to send the notification. (required)
# @param string $platform Either ios or android (required)
{
    my $params = {
    'devicetoken' => {
        data_type => 'string',
        description => 'The device token where to send the notification.',
        required => '1',
    },
    'platform' => {
        data_type => 'string',
        description => 'Either ios or android',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'pushderegister' } = { 
        summary => 'Deregisters the current device to receive push notifications',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub pushderegister {
    my ($self, %args) = @_;

    # verify the required parameter 'devicetoken' is set
    unless (exists $args{'devicetoken'}) {
      croak("Missing the required parameter 'devicetoken' when calling pushderegister");
    }

    # verify the required parameter 'platform' is set
    unless (exists $args{'platform'}) {
      croak("Missing the required parameter 'platform' when calling pushderegister");
    }

    # parse inputs
    my $_resource_path = '/pushderegister';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'devicetoken'}) {
        $query_params->{'devicetoken'} = $self->{api_client}->to_query_value($args{'devicetoken'});
    }

    # query params
    if ( exists $args{'platform'}) {
        $query_params->{'platform'} = $self->{api_client}->to_query_value($args{'platform'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# pushregister
#
# Registers the current device to receive push notifications
# 
# @param string $devicetoken The device token where to send the notification. (required)
# @param string $platform Either ios or android (required)
{
    my $params = {
    'devicetoken' => {
        data_type => 'string',
        description => 'The device token where to send the notification.',
        required => '1',
    },
    'platform' => {
        data_type => 'string',
        description => 'Either ios or android',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'pushregister' } = { 
        summary => 'Registers the current device to receive push notifications',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub pushregister {
    my ($self, %args) = @_;

    # verify the required parameter 'devicetoken' is set
    unless (exists $args{'devicetoken'}) {
      croak("Missing the required parameter 'devicetoken' when calling pushregister");
    }

    # verify the required parameter 'platform' is set
    unless (exists $args{'platform'}) {
      croak("Missing the required parameter 'platform' when calling pushregister");
    }

    # parse inputs
    my $_resource_path = '/pushregister';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'devicetoken'}) {
        $query_params->{'devicetoken'} = $self->{api_client}->to_query_value($args{'devicetoken'});
    }

    # query params
    if ( exists $args{'platform'}) {
        $query_params->{'platform'} = $self->{api_client}->to_query_value($args{'platform'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# qrlabelsprint
#
# Print and email QR labels
# 
# @param string $token The authentication token. (required)
# @param string $user The id of the user whose label needs to be printed. (optional)
# @param string $group The id of the group whose members&#39; labels need to be printed. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The id of the user whose label needs to be printed.',
        required => '0',
    },
    'group' => {
        data_type => 'string',
        description => 'The id of the group whose members&#39; labels need to be printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'qrlabelsprint' } = { 
        summary => 'Print and email QR labels',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub qrlabelsprint {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling qrlabelsprint");
    }

    # parse inputs
    my $_resource_path = '/qrlabelsprint';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'group'}) {
        $query_params->{'group'} = $self->{api_client}->to_query_value($args{'group'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# qrloginget
#
# Gets an image of a QR token
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'qrloginget' } = { 
        summary => 'Gets an image of a QR token',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub qrloginget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling qrloginget");
    }

    # parse inputs
    my $_resource_path = '/qrloginget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# qrloginlogin
#
# Login
# 
# @param string $onetimetoken The token read from the QR code. (required)
{
    my $params = {
    'onetimetoken' => {
        data_type => 'string',
        description => 'The token read from the QR code.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'qrloginlogin' } = { 
        summary => 'Login',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub qrloginlogin {
    my ($self, %args) = @_;

    # verify the required parameter 'onetimetoken' is set
    unless (exists $args{'onetimetoken'}) {
      croak("Missing the required parameter 'onetimetoken' when calling qrloginlogin");
    }

    # parse inputs
    my $_resource_path = '/qrloginlogin';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'onetimetoken'}) {
        $query_params->{'onetimetoken'} = $self->{api_client}->to_query_value($args{'onetimetoken'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpaneldeletewidget
#
# Deletes a widget from the Quick Panel
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the widget. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the widget.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpaneldeletewidget' } = { 
        summary => 'Deletes a widget from the Quick Panel',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpaneldeletewidget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling quickpaneldeletewidget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling quickpaneldeletewidget");
    }

    # parse inputs
    my $_resource_path = '/quickpaneldeletewidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanelfetchwidget
#
# Fetches the information for a specific widget.
# 
# @param string $token The authentication token. (required)
# @param string $widgetid The ID of the data to fetch it&#39;s data. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'widgetid' => {
        data_type => 'string',
        description => 'The ID of the data to fetch it&#39;s data.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanelfetchwidget' } = { 
        summary => 'Fetches the information for a specific widget.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanelfetchwidget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling quickpanelfetchwidget");
    }

    # verify the required parameter 'widgetid' is set
    unless (exists $args{'widgetid'}) {
      croak("Missing the required parameter 'widgetid' when calling quickpanelfetchwidget");
    }

    # parse inputs
    my $_resource_path = '/quickpanelfetchwidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'widgetid'}) {
        $query_params->{'widgetid'} = $self->{api_client}->to_query_value($args{'widgetid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanelgetwidget
#
# View details of a widget included in the Quick Panel
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the widget to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the widget to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanelgetwidget' } = { 
        summary => 'View details of a widget included in the Quick Panel',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanelgetwidget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling quickpanelgetwidget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling quickpanelgetwidget");
    }

    # parse inputs
    my $_resource_path = '/quickpanelgetwidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanelinit
#
# Returns the initial information required to show the quick panels
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanelinit' } = { 
        summary => 'Returns the initial information required to show the quick panels',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanelinit {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling quickpanelinit");
    }

    # parse inputs
    my $_resource_path = '/quickpanelinit';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanellistwidgets
#
# Lists all the widgets that are added in the Quick Panel
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanellistwidgets' } = { 
        summary => 'Lists all the widgets that are added in the Quick Panel',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanellistwidgets {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling quickpanellistwidgets");
    }

    # parse inputs
    my $_resource_path = '/quickpanellistwidgets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanellistwidgettypes
#
# Lists all the widget types available in the system
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanellistwidgettypes' } = { 
        summary => 'Lists all the widget types available in the system',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanellistwidgettypes {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling quickpanellistwidgettypes");
    }

    # parse inputs
    my $_resource_path = '/quickpanellistwidgettypes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanelreorderwidgets
#
# Reorders the widgets and moves them to a specific column
# 
# @param string $token The authentication token. (required)
# @param string $sectionname The section name where to sort the widgets. (required)
# @param string $orderids CSV list of the widgets to reorder. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'sectionname' => {
        data_type => 'string',
        description => 'The section name where to sort the widgets.',
        required => '1',
    },
    'orderids' => {
        data_type => 'string',
        description => 'CSV list of the widgets to reorder.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanelreorderwidgets' } = { 
        summary => 'Reorders the widgets and moves them to a specific column',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanelreorderwidgets {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling quickpanelreorderwidgets");
    }

    # verify the required parameter 'sectionname' is set
    unless (exists $args{'sectionname'}) {
      croak("Missing the required parameter 'sectionname' when calling quickpanelreorderwidgets");
    }

    # verify the required parameter 'orderids' is set
    unless (exists $args{'orderids'}) {
      croak("Missing the required parameter 'orderids' when calling quickpanelreorderwidgets");
    }

    # parse inputs
    my $_resource_path = '/quickpanelreorderwidgets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'sectionname'}) {
        $query_params->{'sectionname'} = $self->{api_client}->to_query_value($args{'sectionname'});
    }

    # query params
    if ( exists $args{'orderids'}) {
        $query_params->{'orderids'} = $self->{api_client}->to_query_value($args{'orderids'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# quickpanelsavewidget
#
# Saves a widget for the Quick Panel
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'quickpanelsavewidget' } = { 
        summary => 'Saves a widget for the Quick Panel',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub quickpanelsavewidget {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/quickpanelsavewidget';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ratingflag
#
# Flags one rating for moderation
# 
# @param string $token The authentication token. (required)
# @param string $id The rating to flag. (required)
# @param string $comment Comment why should this should be removed. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The rating to flag.',
        required => '1',
    },
    'comment' => {
        data_type => 'string',
        description => 'Comment why should this should be removed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'ratingflag' } = { 
        summary => 'Flags one rating for moderation',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ratingflag {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ratingflag");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling ratingflag");
    }

    # parse inputs
    my $_resource_path = '/ratingflag';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'comment'}) {
        $query_params->{'comment'} = $self->{api_client}->to_query_value($args{'comment'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ratingflagcomment
#
# Flags one comment for moderation
# 
# @param string $token The authentication token. (required)
# @param string $id The comment to flag. (required)
# @param string $comment Comment why should this should be removed. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The comment to flag.',
        required => '1',
    },
    'comment' => {
        data_type => 'string',
        description => 'Comment why should this should be removed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'ratingflagcomment' } = { 
        summary => 'Flags one comment for moderation',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ratingflagcomment {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ratingflagcomment");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling ratingflagcomment");
    }

    # parse inputs
    my $_resource_path = '/ratingflagcomment';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'comment'}) {
        $query_params->{'comment'} = $self->{api_client}->to_query_value($args{'comment'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ratingget
#
# Get rating for one or more entities
# 
# @param string $token The authentication token. (required)
# @param string $type The entity type to get the rating. (required)
# @param string $entityids List of ids to get the ratings. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'type' => {
        data_type => 'string',
        description => 'The entity type to get the rating.',
        required => '1',
    },
    'entityids' => {
        data_type => 'string',
        description => 'List of ids to get the ratings.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ratingget' } = { 
        summary => 'Get rating for one or more entities',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ratingget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ratingget");
    }

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling ratingget");
    }

    # verify the required parameter 'entityids' is set
    unless (exists $args{'entityids'}) {
      croak("Missing the required parameter 'entityids' when calling ratingget");
    }

    # parse inputs
    my $_resource_path = '/ratingget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'entityids'}) {
        $query_params->{'entityids'} = $self->{api_client}->to_query_value($args{'entityids'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ratinggetall
#
# Gets the full ratings and comments for a specific entity
# 
# @param string $token The authentication token. (required)
# @param string $type The entity type to get the rating. (required)
# @param string $entityid Id of the entity to get the ratings. (required)
# @param boolean $mostrecentfirst True to show most recent first, otherwise most helpful first. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'type' => {
        data_type => 'string',
        description => 'The entity type to get the rating.',
        required => '1',
    },
    'entityid' => {
        data_type => 'string',
        description => 'Id of the entity to get the ratings.',
        required => '1',
    },
    'mostrecentfirst' => {
        data_type => 'boolean',
        description => 'True to show most recent first, otherwise most helpful first.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'ratinggetall' } = { 
        summary => 'Gets the full ratings and comments for a specific entity',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ratinggetall {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ratinggetall");
    }

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling ratinggetall");
    }

    # verify the required parameter 'entityid' is set
    unless (exists $args{'entityid'}) {
      croak("Missing the required parameter 'entityid' when calling ratinggetall");
    }

    # parse inputs
    my $_resource_path = '/ratinggetall';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'entityid'}) {
        $query_params->{'entityid'} = $self->{api_client}->to_query_value($args{'entityid'});
    }

    # query params
    if ( exists $args{'mostrecentfirst'}) {
        $query_params->{'mostrecentfirst'} = $self->{api_client}->to_query_value($args{'mostrecentfirst'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ratinggetcomments
#
# Gets all the comments for a rating
# 
# @param string $token The authentication token. (required)
# @param string $ratingid The ID of the rating to get all comments. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'ratingid' => {
        data_type => 'string',
        description => 'The ID of the rating to get all comments.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ratinggetcomments' } = { 
        summary => 'Gets all the comments for a rating',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ratinggetcomments {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ratinggetcomments");
    }

    # verify the required parameter 'ratingid' is set
    unless (exists $args{'ratingid'}) {
      croak("Missing the required parameter 'ratingid' when calling ratinggetcomments");
    }

    # parse inputs
    my $_resource_path = '/ratinggetcomments';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'ratingid'}) {
        $query_params->{'ratingid'} = $self->{api_client}->to_query_value($args{'ratingid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ratinggetpending
#
# Gets info of pre-saved and pre-approved ratings
# 
# @param string $getgroup The ID of the group of pending ratings to get. (required)
# @param string $rateid Rate this before returning. (optional)
# @param int $rateval The value used to rate the item specified in rateid. (optional)
{
    my $params = {
    'getgroup' => {
        data_type => 'string',
        description => 'The ID of the group of pending ratings to get.',
        required => '1',
    },
    'rateid' => {
        data_type => 'string',
        description => 'Rate this before returning.',
        required => '0',
    },
    'rateval' => {
        data_type => 'int',
        description => 'The value used to rate the item specified in rateid.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'ratinggetpending' } = { 
        summary => 'Gets info of pre-saved and pre-approved ratings',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ratinggetpending {
    my ($self, %args) = @_;

    # verify the required parameter 'getgroup' is set
    unless (exists $args{'getgroup'}) {
      croak("Missing the required parameter 'getgroup' when calling ratinggetpending");
    }

    # parse inputs
    my $_resource_path = '/ratinggetpending';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'getgroup'}) {
        $query_params->{'getgroup'} = $self->{api_client}->to_query_value($args{'getgroup'});
    }

    # query params
    if ( exists $args{'rateid'}) {
        $query_params->{'rateid'} = $self->{api_client}->to_query_value($args{'rateid'});
    }

    # query params
    if ( exists $args{'rateval'}) {
        $query_params->{'rateval'} = $self->{api_client}->to_query_value($args{'rateval'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ratinggetpendingmoderation
#
# Shows a list of the ratings and comments that are pending for moderation
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ratinggetpendingmoderation' } = { 
        summary => 'Shows a list of the ratings and comments that are pending for moderation',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ratinggetpendingmoderation {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ratinggetpendingmoderation");
    }

    # parse inputs
    my $_resource_path = '/ratinggetpendingmoderation';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ratingmoderate
#
# Allows the user to accept or reject a comment
# 
# @param string $token The authentication token. (required)
# @param string $type Either &#39;rating&#39; or &#39;comment&#39; depending on what you want to moderate. (required)
# @param string $id Id of the rating or comment, as specified in type. (required)
# @param boolean $approve True to approve, false to reject. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'type' => {
        data_type => 'string',
        description => 'Either &#39;rating&#39; or &#39;comment&#39; depending on what you want to moderate.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'Id of the rating or comment, as specified in type.',
        required => '1',
    },
    'approve' => {
        data_type => 'boolean',
        description => 'True to approve, false to reject.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ratingmoderate' } = { 
        summary => 'Allows the user to accept or reject a comment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ratingmoderate {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ratingmoderate");
    }

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling ratingmoderate");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling ratingmoderate");
    }

    # verify the required parameter 'approve' is set
    unless (exists $args{'approve'}) {
      croak("Missing the required parameter 'approve' when calling ratingmoderate");
    }

    # parse inputs
    my $_resource_path = '/ratingmoderate';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'approve'}) {
        $query_params->{'approve'} = $self->{api_client}->to_query_value($args{'approve'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ratingpostcomment
#
# Posts a comments for in a rating
# 
# @param string $token The authentication token. (required)
# @param string $ratingid The ID of the rating to post the comment. (required)
# @param string $comment Text of the comment to post. (required)
# @param boolean $annonymous True to post the comment annonymously. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'ratingid' => {
        data_type => 'string',
        description => 'The ID of the rating to post the comment.',
        required => '1',
    },
    'comment' => {
        data_type => 'string',
        description => 'Text of the comment to post.',
        required => '1',
    },
    'annonymous' => {
        data_type => 'boolean',
        description => 'True to post the comment annonymously.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ratingpostcomment' } = { 
        summary => 'Posts a comments for in a rating',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ratingpostcomment {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ratingpostcomment");
    }

    # verify the required parameter 'ratingid' is set
    unless (exists $args{'ratingid'}) {
      croak("Missing the required parameter 'ratingid' when calling ratingpostcomment");
    }

    # verify the required parameter 'comment' is set
    unless (exists $args{'comment'}) {
      croak("Missing the required parameter 'comment' when calling ratingpostcomment");
    }

    # verify the required parameter 'annonymous' is set
    unless (exists $args{'annonymous'}) {
      croak("Missing the required parameter 'annonymous' when calling ratingpostcomment");
    }

    # parse inputs
    my $_resource_path = '/ratingpostcomment';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'ratingid'}) {
        $query_params->{'ratingid'} = $self->{api_client}->to_query_value($args{'ratingid'});
    }

    # query params
    if ( exists $args{'comment'}) {
        $query_params->{'comment'} = $self->{api_client}->to_query_value($args{'comment'});
    }

    # query params
    if ( exists $args{'annonymous'}) {
        $query_params->{'annonymous'} = $self->{api_client}->to_query_value($args{'annonymous'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ratingrate
#
# Rates one entity
# 
# @param string $token The authentication token. (required)
# @param string $type The entity type to rate. (required)
# @param string $entityid Id of the entity to rate. (required)
# @param boolean $annonymous Whether to post as annonymous. (required)
# @param int $value Value from 0 to 100 with the rating. (optional)
# @param string $comment Comment associated with this review. Comment can be updated later on another request too. (optional)
# @param boolean $updatecomment Whether to update the comments. Defaults to true. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'type' => {
        data_type => 'string',
        description => 'The entity type to rate.',
        required => '1',
    },
    'entityid' => {
        data_type => 'string',
        description => 'Id of the entity to rate.',
        required => '1',
    },
    'annonymous' => {
        data_type => 'boolean',
        description => 'Whether to post as annonymous.',
        required => '1',
    },
    'value' => {
        data_type => 'int',
        description => 'Value from 0 to 100 with the rating.',
        required => '0',
    },
    'comment' => {
        data_type => 'string',
        description => 'Comment associated with this review. Comment can be updated later on another request too.',
        required => '0',
    },
    'updatecomment' => {
        data_type => 'boolean',
        description => 'Whether to update the comments. Defaults to true.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'ratingrate' } = { 
        summary => 'Rates one entity',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ratingrate {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ratingrate");
    }

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling ratingrate");
    }

    # verify the required parameter 'entityid' is set
    unless (exists $args{'entityid'}) {
      croak("Missing the required parameter 'entityid' when calling ratingrate");
    }

    # verify the required parameter 'annonymous' is set
    unless (exists $args{'annonymous'}) {
      croak("Missing the required parameter 'annonymous' when calling ratingrate");
    }

    # parse inputs
    my $_resource_path = '/ratingrate';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'entityid'}) {
        $query_params->{'entityid'} = $self->{api_client}->to_query_value($args{'entityid'});
    }

    # query params
    if ( exists $args{'value'}) {
        $query_params->{'value'} = $self->{api_client}->to_query_value($args{'value'});
    }

    # query params
    if ( exists $args{'annonymous'}) {
        $query_params->{'annonymous'} = $self->{api_client}->to_query_value($args{'annonymous'});
    }

    # query params
    if ( exists $args{'comment'}) {
        $query_params->{'comment'} = $self->{api_client}->to_query_value($args{'comment'});
    }

    # query params
    if ( exists $args{'updatecomment'}) {
        $query_params->{'updatecomment'} = $self->{api_client}->to_query_value($args{'updatecomment'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ratingratepending
#
# Rates a pre-saved and pre-approved entity
# 
# @param string $group The ID of the group of with pre-approved ratings. (required)
# @param boolean $annonymous Whether to post as annonymous. (required)
# @param string $rateid Rate this before returning. (optional)
# @param int $value Value from 0 to 100 with the rating. (optional)
# @param string $comment Comment associated with this review. Comment can be updated later on another request too. (optional)
# @param boolean $updatecomment Whether to update the comments. Defaults to true. (optional)
{
    my $params = {
    'group' => {
        data_type => 'string',
        description => 'The ID of the group of with pre-approved ratings.',
        required => '1',
    },
    'annonymous' => {
        data_type => 'boolean',
        description => 'Whether to post as annonymous.',
        required => '1',
    },
    'rateid' => {
        data_type => 'string',
        description => 'Rate this before returning.',
        required => '0',
    },
    'value' => {
        data_type => 'int',
        description => 'Value from 0 to 100 with the rating.',
        required => '0',
    },
    'comment' => {
        data_type => 'string',
        description => 'Comment associated with this review. Comment can be updated later on another request too.',
        required => '0',
    },
    'updatecomment' => {
        data_type => 'boolean',
        description => 'Whether to update the comments. Defaults to true.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'ratingratepending' } = { 
        summary => 'Rates a pre-saved and pre-approved entity',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ratingratepending {
    my ($self, %args) = @_;

    # verify the required parameter 'group' is set
    unless (exists $args{'group'}) {
      croak("Missing the required parameter 'group' when calling ratingratepending");
    }

    # verify the required parameter 'annonymous' is set
    unless (exists $args{'annonymous'}) {
      croak("Missing the required parameter 'annonymous' when calling ratingratepending");
    }

    # parse inputs
    my $_resource_path = '/ratingratepending';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'group'}) {
        $query_params->{'group'} = $self->{api_client}->to_query_value($args{'group'});
    }

    # query params
    if ( exists $args{'rateid'}) {
        $query_params->{'rateid'} = $self->{api_client}->to_query_value($args{'rateid'});
    }

    # query params
    if ( exists $args{'value'}) {
        $query_params->{'value'} = $self->{api_client}->to_query_value($args{'value'});
    }

    # query params
    if ( exists $args{'annonymous'}) {
        $query_params->{'annonymous'} = $self->{api_client}->to_query_value($args{'annonymous'});
    }

    # query params
    if ( exists $args{'comment'}) {
        $query_params->{'comment'} = $self->{api_client}->to_query_value($args{'comment'});
    }

    # query params
    if ( exists $args{'updatecomment'}) {
        $query_params->{'updatecomment'} = $self->{api_client}->to_query_value($args{'updatecomment'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ratingvote
#
# Votes up or down a rating
# 
# @param string $token The authentication token. (required)
# @param string $ratingid The ID of the rating to vote on. (required)
# @param int $vote 1 to vote up, -1 to vote down. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'ratingid' => {
        data_type => 'string',
        description => 'The ID of the rating to vote on.',
        required => '1',
    },
    'vote' => {
        data_type => 'int',
        description => '1 to vote up, -1 to vote down.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ratingvote' } = { 
        summary => 'Votes up or down a rating',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ratingvote {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ratingvote");
    }

    # verify the required parameter 'ratingid' is set
    unless (exists $args{'ratingid'}) {
      croak("Missing the required parameter 'ratingid' when calling ratingvote");
    }

    # verify the required parameter 'vote' is set
    unless (exists $args{'vote'}) {
      croak("Missing the required parameter 'vote' when calling ratingvote");
    }

    # parse inputs
    my $_resource_path = '/ratingvote';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'ratingid'}) {
        $query_params->{'ratingid'} = $self->{api_client}->to_query_value($args{'ratingid'});
    }

    # query params
    if ( exists $args{'vote'}) {
        $query_params->{'vote'} = $self->{api_client}->to_query_value($args{'vote'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# reportattanalyticsprepare
#
# Query and load an attendance analytics report
# 
# @param string $token The authentication token. (required)
# @param string $reportname The name of the report to execute (required)
# @param string $params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
# @param string $refreshgroup The ID of the group to check (and refresh) before processing the report. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'reportname' => {
        data_type => 'string',
        description => 'The name of the report to execute',
        required => '1',
    },
    'params' => {
        data_type => 'string',
        description => 'A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3',
        required => '0',
    },
    'refreshgroup' => {
        data_type => 'string',
        description => 'The ID of the group to check (and refresh) before processing the report.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'reportattanalyticsprepare' } = { 
        summary => 'Query and load an attendance analytics report',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reportattanalyticsprepare {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling reportattanalyticsprepare");
    }

    # verify the required parameter 'reportname' is set
    unless (exists $args{'reportname'}) {
      croak("Missing the required parameter 'reportname' when calling reportattanalyticsprepare");
    }

    # parse inputs
    my $_resource_path = '/reportattanalyticsprepare';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'reportname'}) {
        $query_params->{'reportname'} = $self->{api_client}->to_query_value($args{'reportname'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'refreshgroup'}) {
        $query_params->{'refreshgroup'} = $self->{api_client}->to_query_value($args{'refreshgroup'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# reportlist
#
# View a list of available reports
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'reportlist' } = { 
        summary => 'View a list of available reports',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reportlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling reportlist");
    }

    # parse inputs
    my $_resource_path = '/reportlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# reportpermissionsbyuser
#
# Permissions by user report
# 
# @param string $token The authentication token. (required)
# @param string $params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'params' => {
        data_type => 'string',
        description => 'A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'reportpermissionsbyuser' } = { 
        summary => 'Permissions by user report',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reportpermissionsbyuser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling reportpermissionsbyuser");
    }

    # parse inputs
    my $_resource_path = '/reportpermissionsbyuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# reportprepare
#
# Queries and loads the specified report, in background.
# 
# @param string $token The authentication token. (required)
# @param string $reportname The name of the report to execute (required)
# @param string $params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
# @param string $repformat The format of the resulting report. Json, pdf, csv, ... (optional)
# @param string $fillgroupid If specified, the result is used to fill the group with the given ID (optional)
# @param string $groupby How to group the records. In the format &#39;col1+col2|col3+col4 (optional)
# @param string $refreshgroup The ID of the group to check (and refresh) before processing the report. (optional)
# @param string $filtertext The user friendly text of the applied filters. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'reportname' => {
        data_type => 'string',
        description => 'The name of the report to execute',
        required => '1',
    },
    'params' => {
        data_type => 'string',
        description => 'A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3',
        required => '0',
    },
    'repformat' => {
        data_type => 'string',
        description => 'The format of the resulting report. Json, pdf, csv, ...',
        required => '0',
    },
    'fillgroupid' => {
        data_type => 'string',
        description => 'If specified, the result is used to fill the group with the given ID',
        required => '0',
    },
    'groupby' => {
        data_type => 'string',
        description => 'How to group the records. In the format &#39;col1+col2|col3+col4',
        required => '0',
    },
    'refreshgroup' => {
        data_type => 'string',
        description => 'The ID of the group to check (and refresh) before processing the report.',
        required => '0',
    },
    'filtertext' => {
        data_type => 'string',
        description => 'The user friendly text of the applied filters.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'reportprepare' } = { 
        summary => 'Queries and loads the specified report, in background.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reportprepare {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling reportprepare");
    }

    # verify the required parameter 'reportname' is set
    unless (exists $args{'reportname'}) {
      croak("Missing the required parameter 'reportname' when calling reportprepare");
    }

    # parse inputs
    my $_resource_path = '/reportprepare';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'reportname'}) {
        $query_params->{'reportname'} = $self->{api_client}->to_query_value($args{'reportname'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'repformat'}) {
        $query_params->{'repformat'} = $self->{api_client}->to_query_value($args{'repformat'});
    }

    # query params
    if ( exists $args{'fillgroupid'}) {
        $query_params->{'fillgroupid'} = $self->{api_client}->to_query_value($args{'fillgroupid'});
    }

    # query params
    if ( exists $args{'groupby'}) {
        $query_params->{'groupby'} = $self->{api_client}->to_query_value($args{'groupby'});
    }

    # query params
    if ( exists $args{'refreshgroup'}) {
        $query_params->{'refreshgroup'} = $self->{api_client}->to_query_value($args{'refreshgroup'});
    }

    # query params
    if ( exists $args{'filtertext'}) {
        $query_params->{'filtertext'} = $self->{api_client}->to_query_value($args{'filtertext'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# reportquery
#
# Query and load a specified report
# 
# @param string $token The authentication token. (required)
# @param string $reportname The name of the report to execute (required)
# @param string $params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'reportname' => {
        data_type => 'string',
        description => 'The name of the report to execute',
        required => '1',
    },
    'params' => {
        data_type => 'string',
        description => 'A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'reportquery' } = { 
        summary => 'Query and load a specified report',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reportquery {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling reportquery");
    }

    # verify the required parameter 'reportname' is set
    unless (exists $args{'reportname'}) {
      croak("Missing the required parameter 'reportname' when calling reportquery");
    }

    # parse inputs
    my $_resource_path = '/reportquery';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'reportname'}) {
        $query_params->{'reportname'} = $self->{api_client}->to_query_value($args{'reportname'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# reportscheduledelete
#
# Delete a report schedule
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the report schedule to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the report schedule to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'reportscheduledelete' } = { 
        summary => 'Delete a report schedule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reportscheduledelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling reportscheduledelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling reportscheduledelete");
    }

    # parse inputs
    my $_resource_path = '/reportscheduledelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# reportscheduleget
#
# Get a report schedule
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the schedule to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the schedule to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'reportscheduleget' } = { 
        summary => 'Get a report schedule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reportscheduleget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling reportscheduleget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling reportscheduleget");
    }

    # parse inputs
    my $_resource_path = '/reportscheduleget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# reportschedulelist
#
# View a list of the scheduled reports
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'reportschedulelist' } = { 
        summary => 'View a list of the scheduled reports',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reportschedulelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling reportschedulelist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling reportschedulelist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling reportschedulelist");
    }

    # parse inputs
    my $_resource_path = '/reportschedulelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# reportschedulesave
#
# Create or edit a report schedule
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'reportschedulesave' } = { 
        summary => 'Create or edit a report schedule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reportschedulesave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/reportschedulesave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# reporttagresults
#
# Queries and loads a report in background and assigns (or unassigns) the specified tags to (from) the resulting users.
# 
# @param string $token The authentication token. (required)
# @param string $reportname The name of the report to execute (required)
# @param boolean $assign Specify whether the specified tags have to be assigned or unassigned. (required)
# @param string $tags The tags to assign (or unassign) to the resulting users in the report, in JSON format. (required)
# @param string $params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'reportname' => {
        data_type => 'string',
        description => 'The name of the report to execute',
        required => '1',
    },
    'assign' => {
        data_type => 'boolean',
        description => 'Specify whether the specified tags have to be assigned or unassigned.',
        required => '1',
    },
    'tags' => {
        data_type => 'string',
        description => 'The tags to assign (or unassign) to the resulting users in the report, in JSON format.',
        required => '1',
    },
    'params' => {
        data_type => 'string',
        description => 'A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'reporttagresults' } = { 
        summary => 'Queries and loads a report in background and assigns (or unassigns) the specified tags to (from) the resulting users.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reporttagresults {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling reporttagresults");
    }

    # verify the required parameter 'reportname' is set
    unless (exists $args{'reportname'}) {
      croak("Missing the required parameter 'reportname' when calling reporttagresults");
    }

    # verify the required parameter 'assign' is set
    unless (exists $args{'assign'}) {
      croak("Missing the required parameter 'assign' when calling reporttagresults");
    }

    # verify the required parameter 'tags' is set
    unless (exists $args{'tags'}) {
      croak("Missing the required parameter 'tags' when calling reporttagresults");
    }

    # parse inputs
    my $_resource_path = '/reporttagresults';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'reportname'}) {
        $query_params->{'reportname'} = $self->{api_client}->to_query_value($args{'reportname'});
    }

    # query params
    if ( exists $args{'assign'}) {
        $query_params->{'assign'} = $self->{api_client}->to_query_value($args{'assign'});
    }

    # query params
    if ( exists $args{'tags'}) {
        $query_params->{'tags'} = $self->{api_client}->to_query_value($args{'tags'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# riskmodelcheckanalysis
#
# Check the status of the analysis of a specified risk assessment model
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the risk assessment model whose analysis status has to be returned. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the risk assessment model whose analysis status has to be returned.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'riskmodelcheckanalysis' } = { 
        summary => 'Check the status of the analysis of a specified risk assessment model',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub riskmodelcheckanalysis {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling riskmodelcheckanalysis");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling riskmodelcheckanalysis");
    }

    # parse inputs
    my $_resource_path = '/riskmodelcheckanalysis';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# riskmodeldelete
#
# Delete a risk assessment model
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the risk assessment model to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the risk assessment model to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'riskmodeldelete' } = { 
        summary => 'Delete a risk assessment model',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub riskmodeldelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling riskmodeldelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling riskmodeldelete");
    }

    # parse inputs
    my $_resource_path = '/riskmodeldelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# riskmodelget
#
# View details of a risk assessment model
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the risk assessment model to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the risk assessment model to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'riskmodelget' } = { 
        summary => 'View details of a risk assessment model',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub riskmodelget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling riskmodelget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling riskmodelget");
    }

    # parse inputs
    my $_resource_path = '/riskmodelget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# riskmodelgetscore
#
# View the risk score for a specific user
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to get the risk score. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to get the risk score.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'riskmodelgetscore' } = { 
        summary => 'View the risk score for a specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub riskmodelgetscore {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling riskmodelgetscore");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling riskmodelgetscore");
    }

    # parse inputs
    my $_resource_path = '/riskmodelgetscore';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# riskmodellist
#
# View a list of risk assessment models
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'riskmodellist' } = { 
        summary => 'View a list of risk assessment models',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub riskmodellist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling riskmodellist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling riskmodellist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling riskmodellist");
    }

    # parse inputs
    my $_resource_path = '/riskmodellist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# riskmodelpredict
#
# Predict risk based on an assessment model
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the assessment model to use in order to predict risk. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the assessment model to use in order to predict risk.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'riskmodelpredict' } = { 
        summary => 'Predict risk based on an assessment model',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub riskmodelpredict {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling riskmodelpredict");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling riskmodelpredict");
    }

    # parse inputs
    my $_resource_path = '/riskmodelpredict';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# riskmodelprocess
#
# Process a risk assessment model
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the risk assessment model to process. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the risk assessment model to process.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'riskmodelprocess' } = { 
        summary => 'Process a risk assessment model',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub riskmodelprocess {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling riskmodelprocess");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling riskmodelprocess");
    }

    # parse inputs
    my $_resource_path = '/riskmodelprocess';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# riskmodelrefresh
#
# Refresh the information used in a risk assessment model
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the risk assessment model whose information has to be refreshed. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the risk assessment model whose information has to be refreshed.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'riskmodelrefresh' } = { 
        summary => 'Refresh the information used in a risk assessment model',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub riskmodelrefresh {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling riskmodelrefresh");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling riskmodelrefresh");
    }

    # parse inputs
    my $_resource_path = '/riskmodelrefresh';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# riskmodelsave
#
# Create or edit a risk assessment model
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'riskmodelsave' } = { 
        summary => 'Create or edit a risk assessment model',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub riskmodelsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/riskmodelsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# riskmodeltermprecedences
#
# View all default term precedences
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'riskmodeltermprecedences' } = { 
        summary => 'View all default term precedences',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub riskmodeltermprecedences {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling riskmodeltermprecedences");
    }

    # parse inputs
    my $_resource_path = '/riskmodeltermprecedences';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# rolelist
#
# Show a list of roles
# 
# @param string $token The authentication token. (required)
# @param string $name Filter by name of the role. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter by name of the role.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'rolelist' } = { 
        summary => 'Show a list of roles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub rolelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling rolelist");
    }

    # parse inputs
    my $_resource_path = '/rolelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ruledelete
#
# Delete a rule
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the rule to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the rule to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ruledelete' } = { 
        summary => 'Delete a rule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ruledelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ruledelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling ruledelete");
    }

    # parse inputs
    my $_resource_path = '/ruledelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ruleget
#
# View details of a rule
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the rule to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the rule to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ruleget' } = { 
        summary => 'View details of a rule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ruleget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ruleget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling ruleget");
    }

    # parse inputs
    my $_resource_path = '/ruleget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# rulegeteventtype
#
# View details of a rule event type
# 
# @param string $token The authentication token. (required)
# @param string $event The name of the event to refresh. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'event' => {
        data_type => 'string',
        description => 'The name of the event to refresh.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'rulegeteventtype' } = { 
        summary => 'View details of a rule event type',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub rulegeteventtype {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling rulegeteventtype");
    }

    # verify the required parameter 'event' is set
    unless (exists $args{'event'}) {
      croak("Missing the required parameter 'event' when calling rulegeteventtype");
    }

    # parse inputs
    my $_resource_path = '/rulegeteventtype';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'event'}) {
        $query_params->{'event'} = $self->{api_client}->to_query_value($args{'event'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# rulelist
#
# View a list of user rules
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'rulelist' } = { 
        summary => 'View a list of user rules',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub rulelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling rulelist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling rulelist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling rulelist");
    }

    # parse inputs
    my $_resource_path = '/rulelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# rulelistactions
#
# View a list of rule actions available
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'rulelistactions' } = { 
        summary => 'View a list of rule actions available',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub rulelistactions {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling rulelistactions");
    }

    # parse inputs
    my $_resource_path = '/rulelistactions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# rulelisteventtypes
#
# View a list of rule event types
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'rulelisteventtypes' } = { 
        summary => 'View a list of rule event types',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub rulelisteventtypes {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling rulelisteventtypes");
    }

    # parse inputs
    my $_resource_path = '/rulelisteventtypes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# rulelisthttprequests
#
# View all the http requests sent as a result of a rule
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param boolean $failed If true only failed requests will be returned (optional)
# @param int $status The http status to filter the requests (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'failed' => {
        data_type => 'boolean',
        description => 'If true only failed requests will be returned',
        required => '0',
    },
    'status' => {
        data_type => 'int',
        description => 'The http status to filter the requests',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'rulelisthttprequests' } = { 
        summary => 'View all the http requests sent as a result of a rule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub rulelisthttprequests {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling rulelisthttprequests");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling rulelisthttprequests");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling rulelisthttprequests");
    }

    # parse inputs
    my $_resource_path = '/rulelisthttprequests';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'failed'}) {
        $query_params->{'failed'} = $self->{api_client}->to_query_value($args{'failed'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# rulesave
#
# Create or edit a rule
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'rulesave' } = { 
        summary => 'Create or edit a rule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub rulesave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/rulesave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scheduledelete
#
# Delete a schedule slot
# 
# @param string $token The authentication token. (required)
# @param string $scheduleid The id of the schedule. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'scheduleid' => {
        data_type => 'string',
        description => 'The id of the schedule.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'scheduledelete' } = { 
        summary => 'Delete a schedule slot',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scheduledelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling scheduledelete");
    }

    # verify the required parameter 'scheduleid' is set
    unless (exists $args{'scheduleid'}) {
      croak("Missing the required parameter 'scheduleid' when calling scheduledelete");
    }

    # parse inputs
    my $_resource_path = '/scheduledelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'scheduleid'}) {
        $query_params->{'scheduleid'} = $self->{api_client}->to_query_value($args{'scheduleid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scheduledeletemine
#
# Delete a specific block from a user's own schedule
# 
# @param string $token The authentication token. (required)
# @param string $scheduleid The id of the schedule. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'scheduleid' => {
        data_type => 'string',
        description => 'The id of the schedule.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'scheduledeletemine' } = { 
        summary => 'Delete a specific block from a user&#39;s own schedule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scheduledeletemine {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling scheduledeletemine");
    }

    # verify the required parameter 'scheduleid' is set
    unless (exists $args{'scheduleid'}) {
      croak("Missing the required parameter 'scheduleid' when calling scheduledeletemine");
    }

    # parse inputs
    my $_resource_path = '/scheduledeletemine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'scheduleid'}) {
        $query_params->{'scheduleid'} = $self->{api_client}->to_query_value($args{'scheduleid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scheduleenable
#
# Enable or disable the schedule for a specific person
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to enable or disable the schedule. (required)
# @param boolean $enable True to enable schedules, false to disable. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to enable or disable the schedule.',
        required => '1',
    },
    'enable' => {
        data_type => 'boolean',
        description => 'True to enable schedules, false to disable.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'scheduleenable' } = { 
        summary => 'Enable or disable the schedule for a specific person',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scheduleenable {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling scheduleenable");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling scheduleenable");
    }

    # verify the required parameter 'enable' is set
    unless (exists $args{'enable'}) {
      croak("Missing the required parameter 'enable' when calling scheduleenable");
    }

    # parse inputs
    my $_resource_path = '/scheduleenable';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'enable'}) {
        $query_params->{'enable'} = $self->{api_client}->to_query_value($args{'enable'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scheduleenablemine
#
# Enable or disable current user's schedule
# 
# @param string $token The authentication token. (required)
# @param boolean $enable True to enable schedules, false to disable. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'enable' => {
        data_type => 'boolean',
        description => 'True to enable schedules, false to disable.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'scheduleenablemine' } = { 
        summary => 'Enable or disable current user&#39;s schedule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scheduleenablemine {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling scheduleenablemine");
    }

    # verify the required parameter 'enable' is set
    unless (exists $args{'enable'}) {
      croak("Missing the required parameter 'enable' when calling scheduleenablemine");
    }

    # parse inputs
    my $_resource_path = '/scheduleenablemine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'enable'}) {
        $query_params->{'enable'} = $self->{api_client}->to_query_value($args{'enable'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedulefindallstaffslots
#
# Search available schedule slots by service, event, date
# 
# @param string $token The authentication token. (required)
# @param DateTime $starttime The start time of the range to look for slots. (required)
# @param DateTime $endtime The end time of the range to look for slots. (required)
# @param string $staffid The id of the staff to filter by. (optional)
# @param string $serviceids CSV list of the service Ids to filter by. (optional)
# @param string $eventid The id of the event to filter by. (optional)
# @param string $locationid The id of the location to filter by. (optional)
# @param string $staffroleids CSV list of the staff member role ids to filter by. (optional)
# @param string $availablefor The specific availability type to filter by. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'starttime' => {
        data_type => 'DateTime',
        description => 'The start time of the range to look for slots.',
        required => '1',
    },
    'endtime' => {
        data_type => 'DateTime',
        description => 'The end time of the range to look for slots.',
        required => '1',
    },
    'staffid' => {
        data_type => 'string',
        description => 'The id of the staff to filter by.',
        required => '0',
    },
    'serviceids' => {
        data_type => 'string',
        description => 'CSV list of the service Ids to filter by.',
        required => '0',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event to filter by.',
        required => '0',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the location to filter by.',
        required => '0',
    },
    'staffroleids' => {
        data_type => 'string',
        description => 'CSV list of the staff member role ids to filter by.',
        required => '0',
    },
    'availablefor' => {
        data_type => 'string',
        description => 'The specific availability type to filter by.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedulefindallstaffslots' } = { 
        summary => 'Search available schedule slots by service, event, date',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedulefindallstaffslots {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling schedulefindallstaffslots");
    }

    # verify the required parameter 'starttime' is set
    unless (exists $args{'starttime'}) {
      croak("Missing the required parameter 'starttime' when calling schedulefindallstaffslots");
    }

    # verify the required parameter 'endtime' is set
    unless (exists $args{'endtime'}) {
      croak("Missing the required parameter 'endtime' when calling schedulefindallstaffslots");
    }

    # parse inputs
    my $_resource_path = '/schedulefindallstaffslots';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'starttime'}) {
        $query_params->{'starttime'} = $self->{api_client}->to_query_value($args{'starttime'});
    }

    # query params
    if ( exists $args{'endtime'}) {
        $query_params->{'endtime'} = $self->{api_client}->to_query_value($args{'endtime'});
    }

    # query params
    if ( exists $args{'staffid'}) {
        $query_params->{'staffid'} = $self->{api_client}->to_query_value($args{'staffid'});
    }

    # query params
    if ( exists $args{'serviceids'}) {
        $query_params->{'serviceids'} = $self->{api_client}->to_query_value($args{'serviceids'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    # query params
    if ( exists $args{'staffroleids'}) {
        $query_params->{'staffroleids'} = $self->{api_client}->to_query_value($args{'staffroleids'});
    }

    # query params
    if ( exists $args{'availablefor'}) {
        $query_params->{'availablefor'} = $self->{api_client}->to_query_value($args{'availablefor'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedulefindslots
#
# Search available schedule slots by service, event, date and/or staff
# 
# @param string $token The authentication token. (required)
# @param string $staffid The id of the staff to filter by. (required)
# @param DateTime $starttime The start time of the range to look for slots. (required)
# @param DateTime $endtime The end time of the range to look for slots. (required)
# @param string $serviceids CSV list of the service Ids to filter by. (optional)
# @param string $eventid The id of the event to filter by. (optional)
# @param string $locationid The id of the service to filter by. (optional)
# @param string $availablefor The specific availability type to filter by. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'staffid' => {
        data_type => 'string',
        description => 'The id of the staff to filter by.',
        required => '1',
    },
    'starttime' => {
        data_type => 'DateTime',
        description => 'The start time of the range to look for slots.',
        required => '1',
    },
    'endtime' => {
        data_type => 'DateTime',
        description => 'The end time of the range to look for slots.',
        required => '1',
    },
    'serviceids' => {
        data_type => 'string',
        description => 'CSV list of the service Ids to filter by.',
        required => '0',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event to filter by.',
        required => '0',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the service to filter by.',
        required => '0',
    },
    'availablefor' => {
        data_type => 'string',
        description => 'The specific availability type to filter by.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedulefindslots' } = { 
        summary => 'Search available schedule slots by service, event, date and/or staff',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedulefindslots {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling schedulefindslots");
    }

    # verify the required parameter 'staffid' is set
    unless (exists $args{'staffid'}) {
      croak("Missing the required parameter 'staffid' when calling schedulefindslots");
    }

    # verify the required parameter 'starttime' is set
    unless (exists $args{'starttime'}) {
      croak("Missing the required parameter 'starttime' when calling schedulefindslots");
    }

    # verify the required parameter 'endtime' is set
    unless (exists $args{'endtime'}) {
      croak("Missing the required parameter 'endtime' when calling schedulefindslots");
    }

    # parse inputs
    my $_resource_path = '/schedulefindslots';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'staffid'}) {
        $query_params->{'staffid'} = $self->{api_client}->to_query_value($args{'staffid'});
    }

    # query params
    if ( exists $args{'starttime'}) {
        $query_params->{'starttime'} = $self->{api_client}->to_query_value($args{'starttime'});
    }

    # query params
    if ( exists $args{'endtime'}) {
        $query_params->{'endtime'} = $self->{api_client}->to_query_value($args{'endtime'});
    }

    # query params
    if ( exists $args{'serviceids'}) {
        $query_params->{'serviceids'} = $self->{api_client}->to_query_value($args{'serviceids'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    # query params
    if ( exists $args{'availablefor'}) {
        $query_params->{'availablefor'} = $self->{api_client}->to_query_value($args{'availablefor'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedulefindstaffavail
#
# Search available staff members slots by service, event, and/or date
# 
# @param string $token The authentication token. (required)
# @param DateTime $starttime The start time of the range to look for slots. (required)
# @param DateTime $endtime The end time of the range to look for slots. (required)
# @param string $serviceids CSV list of the service ids to filter by. (optional)
# @param string $eventid The id of the event to filter by. (optional)
# @param string $locationid The id of the service to filter by. (optional)
# @param string $staffroleids CSV list of the staff member role ids to filter by. (optional)
# @param string $availablefor Filter slots by a specific availability type. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'starttime' => {
        data_type => 'DateTime',
        description => 'The start time of the range to look for slots.',
        required => '1',
    },
    'endtime' => {
        data_type => 'DateTime',
        description => 'The end time of the range to look for slots.',
        required => '1',
    },
    'serviceids' => {
        data_type => 'string',
        description => 'CSV list of the service ids to filter by.',
        required => '0',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event to filter by.',
        required => '0',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the service to filter by.',
        required => '0',
    },
    'staffroleids' => {
        data_type => 'string',
        description => 'CSV list of the staff member role ids to filter by.',
        required => '0',
    },
    'availablefor' => {
        data_type => 'string',
        description => 'Filter slots by a specific availability type.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedulefindstaffavail' } = { 
        summary => 'Search available staff members slots by service, event, and/or date',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedulefindstaffavail {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling schedulefindstaffavail");
    }

    # verify the required parameter 'starttime' is set
    unless (exists $args{'starttime'}) {
      croak("Missing the required parameter 'starttime' when calling schedulefindstaffavail");
    }

    # verify the required parameter 'endtime' is set
    unless (exists $args{'endtime'}) {
      croak("Missing the required parameter 'endtime' when calling schedulefindstaffavail");
    }

    # parse inputs
    my $_resource_path = '/schedulefindstaffavail';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'serviceids'}) {
        $query_params->{'serviceids'} = $self->{api_client}->to_query_value($args{'serviceids'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'starttime'}) {
        $query_params->{'starttime'} = $self->{api_client}->to_query_value($args{'starttime'});
    }

    # query params
    if ( exists $args{'endtime'}) {
        $query_params->{'endtime'} = $self->{api_client}->to_query_value($args{'endtime'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    # query params
    if ( exists $args{'staffroleids'}) {
        $query_params->{'staffroleids'} = $self->{api_client}->to_query_value($args{'staffroleids'});
    }

    # query params
    if ( exists $args{'availablefor'}) {
        $query_params->{'availablefor'} = $self->{api_client}->to_query_value($args{'availablefor'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scheduleget
#
# Search and view details of a specific schedule slot
# 
# @param string $token The authentication token. (required)
# @param string $scheduleid The id of the schedule. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'scheduleid' => {
        data_type => 'string',
        description => 'The id of the schedule.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'scheduleget' } = { 
        summary => 'Search and view details of a specific schedule slot',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scheduleget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling scheduleget");
    }

    # verify the required parameter 'scheduleid' is set
    unless (exists $args{'scheduleid'}) {
      croak("Missing the required parameter 'scheduleid' when calling scheduleget");
    }

    # parse inputs
    my $_resource_path = '/scheduleget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'scheduleid'}) {
        $query_params->{'scheduleid'} = $self->{api_client}->to_query_value($args{'scheduleid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedulegetmine
#
# View details of a specific schedule block, for current user
# 
# @param string $token The authentication token. (required)
# @param string $scheduleid The id of the schedule. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'scheduleid' => {
        data_type => 'string',
        description => 'The id of the schedule.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedulegetmine' } = { 
        summary => 'View details of a specific schedule block, for current user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedulegetmine {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling schedulegetmine");
    }

    # verify the required parameter 'scheduleid' is set
    unless (exists $args{'scheduleid'}) {
      croak("Missing the required parameter 'scheduleid' when calling schedulegetmine");
    }

    # parse inputs
    my $_resource_path = '/schedulegetmine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'scheduleid'}) {
        $query_params->{'scheduleid'} = $self->{api_client}->to_query_value($args{'scheduleid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedulegetstaff
#
# View a list of schedule information of a specified person
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to get info. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to get info.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedulegetstaff' } = { 
        summary => 'View a list of schedule information of a specified person',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedulegetstaff {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling schedulegetstaff");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling schedulegetstaff");
    }

    # parse inputs
    my $_resource_path = '/schedulegetstaff';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedulegetstaffmine
#
# View current user's schedule information
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedulegetstaffmine' } = { 
        summary => 'View current user&#39;s schedule information',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedulegetstaffmine {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling schedulegetstaffmine");
    }

    # parse inputs
    my $_resource_path = '/schedulegetstaffmine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scheduleintegrationdeleteitem
#
# Delete a schedule item looking up by a third party ID
# 
# @param string $token The authentication token. (required)
# @param string $thirdpartyid The third party id to search the schedule block / appointment. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'thirdpartyid' => {
        data_type => 'string',
        description => 'The third party id to search the schedule block / appointment.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'scheduleintegrationdeleteitem' } = { 
        summary => 'Delete a schedule item looking up by a third party ID',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scheduleintegrationdeleteitem {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling scheduleintegrationdeleteitem");
    }

    # verify the required parameter 'thirdpartyid' is set
    unless (exists $args{'thirdpartyid'}) {
      croak("Missing the required parameter 'thirdpartyid' when calling scheduleintegrationdeleteitem");
    }

    # parse inputs
    my $_resource_path = '/scheduleintegrationdeleteitem';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'thirdpartyid'}) {
        $query_params->{'thirdpartyid'} = $self->{api_client}->to_query_value($args{'thirdpartyid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scheduleintegrationdeleteitemsbymasterid
#
# Delete multiple schedule items looking up by a third party master ID
# 
# @param string $token The authentication token. (required)
# @param string $thirdpartymasterid The third party master id to search the schedule items. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'thirdpartymasterid' => {
        data_type => 'string',
        description => 'The third party master id to search the schedule items.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'scheduleintegrationdeleteitemsbymasterid' } = { 
        summary => 'Delete multiple schedule items looking up by a third party master ID',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scheduleintegrationdeleteitemsbymasterid {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling scheduleintegrationdeleteitemsbymasterid");
    }

    # verify the required parameter 'thirdpartymasterid' is set
    unless (exists $args{'thirdpartymasterid'}) {
      croak("Missing the required parameter 'thirdpartymasterid' when calling scheduleintegrationdeleteitemsbymasterid");
    }

    # parse inputs
    my $_resource_path = '/scheduleintegrationdeleteitemsbymasterid';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'thirdpartymasterid'}) {
        $query_params->{'thirdpartymasterid'} = $self->{api_client}->to_query_value($args{'thirdpartymasterid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scheduleintegrationgetitem
#
# Get a schedule item looking up by a third party ID
# 
# @param string $token The authentication token. (required)
# @param string $thirdpartyid The third party id to search for the schedule item. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'thirdpartyid' => {
        data_type => 'string',
        description => 'The third party id to search for the schedule item.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'scheduleintegrationgetitem' } = { 
        summary => 'Get a schedule item looking up by a third party ID',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scheduleintegrationgetitem {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling scheduleintegrationgetitem");
    }

    # verify the required parameter 'thirdpartyid' is set
    unless (exists $args{'thirdpartyid'}) {
      croak("Missing the required parameter 'thirdpartyid' when calling scheduleintegrationgetitem");
    }

    # parse inputs
    my $_resource_path = '/scheduleintegrationgetitem';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'thirdpartyid'}) {
        $query_params->{'thirdpartyid'} = $self->{api_client}->to_query_value($args{'thirdpartyid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scheduleintegrationsaveitem
#
# Save a schedule item looking up by a third party ID
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scheduleintegrationsaveitem' } = { 
        summary => 'Save a schedule item looking up by a third party ID',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scheduleintegrationsaveitem {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/scheduleintegrationsaveitem';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scheduleintegrationsetid
#
# Set a 3rd party ID on a specific schedule item
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the schedule block / appointment. (required)
# @param string $thirdpartyid The 3rd party ID to set. (required)
# @param string $thirdpartymasterid The 3rd party master ID to set (useful to handle recurring items). (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the schedule block / appointment.',
        required => '1',
    },
    'thirdpartyid' => {
        data_type => 'string',
        description => 'The 3rd party ID to set.',
        required => '1',
    },
    'thirdpartymasterid' => {
        data_type => 'string',
        description => 'The 3rd party master ID to set (useful to handle recurring items).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scheduleintegrationsetid' } = { 
        summary => 'Set a 3rd party ID on a specific schedule item',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scheduleintegrationsetid {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling scheduleintegrationsetid");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling scheduleintegrationsetid");
    }

    # verify the required parameter 'thirdpartyid' is set
    unless (exists $args{'thirdpartyid'}) {
      croak("Missing the required parameter 'thirdpartyid' when calling scheduleintegrationsetid");
    }

    # parse inputs
    my $_resource_path = '/scheduleintegrationsetid';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'thirdpartyid'}) {
        $query_params->{'thirdpartyid'} = $self->{api_client}->to_query_value($args{'thirdpartyid'});
    }

    # query params
    if ( exists $args{'thirdpartymasterid'}) {
        $query_params->{'thirdpartymasterid'} = $self->{api_client}->to_query_value($args{'thirdpartymasterid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedulemyofftimes
#
# View current user's schedule exceptions
# 
# @param string $token The authentication token. (required)
# @param boolean $includedeleted If true the deleted offtimes are also returned. (optional)
# @param boolean $onlyupcoming If true then only upcoming offtimes are returned. (optional)
# @param DateTime $modifiedafter If specified, only offtimes modified after the specified date will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'includedeleted' => {
        data_type => 'boolean',
        description => 'If true the deleted offtimes are also returned.',
        required => '0',
    },
    'onlyupcoming' => {
        data_type => 'boolean',
        description => 'If true then only upcoming offtimes are returned.',
        required => '0',
    },
    'modifiedafter' => {
        data_type => 'DateTime',
        description => 'If specified, only offtimes modified after the specified date will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedulemyofftimes' } = { 
        summary => 'View current user&#39;s schedule exceptions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedulemyofftimes {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling schedulemyofftimes");
    }

    # parse inputs
    my $_resource_path = '/schedulemyofftimes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'includedeleted'}) {
        $query_params->{'includedeleted'} = $self->{api_client}->to_query_value($args{'includedeleted'});
    }

    # query params
    if ( exists $args{'onlyupcoming'}) {
        $query_params->{'onlyupcoming'} = $self->{api_client}->to_query_value($args{'onlyupcoming'});
    }

    # query params
    if ( exists $args{'modifiedafter'}) {
        $query_params->{'modifiedafter'} = $self->{api_client}->to_query_value($args{'modifiedafter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedulesave
#
# Create or edit a schedule slot
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedulesave' } = { 
        summary => 'Create or edit a schedule slot',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedulesave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/schedulesave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# schedulesavemine
#
# Create or edit a block in current user's schedule
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedulesavemine' } = { 
        summary => 'Create or edit a block in current user&#39;s schedule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub schedulesavemine {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/schedulesavemine';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# search
#
# Search
# 
# @param string $token The authentication token. (required)
# @param string $query The query to search for. (required)
# @param int $page Current page to show, zero-based. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'query' => {
        data_type => 'string',
        description => 'The query to search for.',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Current page to show, zero-based.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search' } = { 
        summary => 'Search',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub search {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling search");
    }

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling search");
    }

    # parse inputs
    my $_resource_path = '/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# searchgetentities
#
# Get the information of the entities that can be searched
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'searchgetentities' } = { 
        summary => 'Get the information of the entities that can be searched',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub searchgetentities {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling searchgetentities");
    }

    # parse inputs
    my $_resource_path = '/searchgetentities';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# securityassesspermission
#
# Returns the list of users for a specific permission
# 
# @param string $token The authentication token. (required)
# @param string $commandname Name of the action or command to get the roles. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'commandname' => {
        data_type => 'string',
        description => 'Name of the action or command to get the roles.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'securityassesspermission' } = { 
        summary => 'Returns the list of users for a specific permission',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub securityassesspermission {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling securityassesspermission");
    }

    # verify the required parameter 'commandname' is set
    unless (exists $args{'commandname'}) {
      croak("Missing the required parameter 'commandname' when calling securityassesspermission");
    }

    # parse inputs
    my $_resource_path = '/securityassesspermission';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'commandname'}) {
        $query_params->{'commandname'} = $self->{api_client}->to_query_value($args{'commandname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# securityassessrole
#
# Returns the list of permissions for a specific role
# 
# @param string $token The authentication token. (required)
# @param string $roleid Role ID to list the effective permissions. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'roleid' => {
        data_type => 'string',
        description => 'Role ID to list the effective permissions.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'securityassessrole' } = { 
        summary => 'Returns the list of permissions for a specific role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub securityassessrole {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling securityassessrole");
    }

    # verify the required parameter 'roleid' is set
    unless (exists $args{'roleid'}) {
      croak("Missing the required parameter 'roleid' when calling securityassessrole");
    }

    # parse inputs
    my $_resource_path = '/securityassessrole';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'roleid'}) {
        $query_params->{'roleid'} = $self->{api_client}->to_query_value($args{'roleid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# securityassessscope
#
# Returns the list of users for a specific user
# 
# @param string $token The authentication token. (required)
# @param string $locationid Location ID to list the users with that scope. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'locationid' => {
        data_type => 'string',
        description => 'Location ID to list the users with that scope.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'securityassessscope' } = { 
        summary => 'Returns the list of users for a specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub securityassessscope {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling securityassessscope");
    }

    # parse inputs
    my $_resource_path = '/securityassessscope';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# securityassessuser
#
# Returns the list of permissions for a specific user
# 
# @param string $token The authentication token. (required)
# @param string $userid User ID to list the effective permissions. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'User ID to list the effective permissions.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'securityassessuser' } = { 
        summary => 'Returns the list of permissions for a specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub securityassessuser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling securityassessuser");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling securityassessuser");
    }

    # parse inputs
    my $_resource_path = '/securityassessuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# seminardelete
#
# Delete an event
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the seminar to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the seminar to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'seminardelete' } = { 
        summary => 'Delete an event',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub seminardelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling seminardelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling seminardelete");
    }

    # parse inputs
    my $_resource_path = '/seminardelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# seminarget
#
# Search and view details of a event
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the seminar to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the seminar to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'seminarget' } = { 
        summary => 'Search and view details of a event',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub seminarget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling seminarget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling seminarget");
    }

    # parse inputs
    my $_resource_path = '/seminarget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# seminarlist
#
# View a list of events
# 
# @param string $token The authentication token. (required)
# @param string $from The first record to return. (required)
# @param string $count The max number of records to return. (required)
# @param boolean $summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false. (optional)
# @param string $termid Id of the term to list the events. Null to list all events. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'string',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'string',
        description => 'The max number of records to return.',
        required => '1',
    },
    'summaryonly' => {
        data_type => 'boolean',
        description => 'True to return only the event information and not the associated schedule, dept, etc. Defaults to false.',
        required => '0',
    },
    'termid' => {
        data_type => 'string',
        description => 'Id of the term to list the events. Null to list all events.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'seminarlist' } = { 
        summary => 'View a list of events',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub seminarlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling seminarlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling seminarlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling seminarlist");
    }

    # parse inputs
    my $_resource_path = '/seminarlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'summaryonly'}) {
        $query_params->{'summaryonly'} = $self->{api_client}->to_query_value($args{'summaryonly'});
    }

    # query params
    if ( exists $args{'termid'}) {
        $query_params->{'termid'} = $self->{api_client}->to_query_value($args{'termid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# seminarsave
#
# Create or edit a event
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'seminarsave' } = { 
        summary => 'Create or edit a event',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub seminarsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/seminarsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# serviceassignmentaddservice
#
# Enable a service in a specific location
# 
# @param string $token The authentication token. (required)
# @param string $serviceid The id of the service to add. (required)
# @param string $locationid The id of the location. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'serviceid' => {
        data_type => 'string',
        description => 'The id of the service to add.',
        required => '1',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the location.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'serviceassignmentaddservice' } = { 
        summary => 'Enable a service in a specific location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub serviceassignmentaddservice {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling serviceassignmentaddservice");
    }

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling serviceassignmentaddservice");
    }

    # verify the required parameter 'locationid' is set
    unless (exists $args{'locationid'}) {
      croak("Missing the required parameter 'locationid' when calling serviceassignmentaddservice");
    }

    # parse inputs
    my $_resource_path = '/serviceassignmentaddservice';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# serviceassignmentgetlocation
#
# View a list of services enabled for a specific location
# 
# @param string $token The authentication token. (required)
# @param string $locationid The id of the location to get. (required)
# @param boolean $includegloballyavailable Specifies whether the services available globally must be returned or not. (optional)
# @param boolean $namefilter Filters the name of the services to return. (optional)
# @param int $count The max number of services to return. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the location to get.',
        required => '1',
    },
    'includegloballyavailable' => {
        data_type => 'boolean',
        description => 'Specifies whether the services available globally must be returned or not.',
        required => '0',
    },
    'namefilter' => {
        data_type => 'boolean',
        description => 'Filters the name of the services to return.',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of services to return.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'serviceassignmentgetlocation' } = { 
        summary => 'View a list of services enabled for a specific location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub serviceassignmentgetlocation {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling serviceassignmentgetlocation");
    }

    # verify the required parameter 'locationid' is set
    unless (exists $args{'locationid'}) {
      croak("Missing the required parameter 'locationid' when calling serviceassignmentgetlocation");
    }

    # parse inputs
    my $_resource_path = '/serviceassignmentgetlocation';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    # query params
    if ( exists $args{'includegloballyavailable'}) {
        $query_params->{'includegloballyavailable'} = $self->{api_client}->to_query_value($args{'includegloballyavailable'});
    }

    # query params
    if ( exists $args{'namefilter'}) {
        $query_params->{'namefilter'} = $self->{api_client}->to_query_value($args{'namefilter'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# serviceassignmentgetservice
#
# View a list of locations where a service is available
# 
# @param string $token The authentication token. (required)
# @param string $serviceid The id of the service to get its locations. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'serviceid' => {
        data_type => 'string',
        description => 'The id of the service to get its locations.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'serviceassignmentgetservice' } = { 
        summary => 'View a list of locations where a service is available',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub serviceassignmentgetservice {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling serviceassignmentgetservice");
    }

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling serviceassignmentgetservice");
    }

    # parse inputs
    my $_resource_path = '/serviceassignmentgetservice';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# serviceassignmentremoveservice
#
# Remove a service from a location
# 
# @param string $token The authentication token. (required)
# @param string $serviceid The id of the service to remove. (required)
# @param string $locationid The id of the location to remove the service from. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'serviceid' => {
        data_type => 'string',
        description => 'The id of the service to remove.',
        required => '1',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the location to remove the service from.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'serviceassignmentremoveservice' } = { 
        summary => 'Remove a service from a location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub serviceassignmentremoveservice {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling serviceassignmentremoveservice");
    }

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling serviceassignmentremoveservice");
    }

    # verify the required parameter 'locationid' is set
    unless (exists $args{'locationid'}) {
      croak("Missing the required parameter 'locationid' when calling serviceassignmentremoveservice");
    }

    # parse inputs
    my $_resource_path = '/serviceassignmentremoveservice';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# servicedelete
#
# Delete a service
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the service to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the service to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'servicedelete' } = { 
        summary => 'Delete a service',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub servicedelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling servicedelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling servicedelete");
    }

    # parse inputs
    my $_resource_path = '/servicedelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# serviceget
#
# Search and view details of a service
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the service to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the service to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'serviceget' } = { 
        summary => 'Search and view details of a service',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub serviceget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling serviceget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling serviceget");
    }

    # parse inputs
    my $_resource_path = '/serviceget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# servicelist
#
# View a list of services
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'servicelist' } = { 
        summary => 'View a list of services',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub servicelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling servicelist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling servicelist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling servicelist");
    }

    # parse inputs
    my $_resource_path = '/servicelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# servicesave
#
# Create or edit a service
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'servicesave' } = { 
        summary => 'Create or edit a service',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub servicesave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/servicesave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionattendancelogaddnote
#
# Add a note to a class attendance log
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the attendance log. (required)
# @param string $text The text of the note to add. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log.',
        required => '1',
    },
    'text' => {
        data_type => 'string',
        description => 'The text of the note to add.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendancelogaddnote' } = { 
        summary => 'Add a note to a class attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendancelogaddnote {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionattendancelogaddnote");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling sessionattendancelogaddnote");
    }

    # verify the required parameter 'text' is set
    unless (exists $args{'text'}) {
      croak("Missing the required parameter 'text' when calling sessionattendancelogaddnote");
    }

    # parse inputs
    my $_resource_path = '/sessionattendancelogaddnote';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionattendancelogget
#
# View details of a class attendance log
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the attendance log to get. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the attendance log to get.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendancelogget' } = { 
        summary => 'View details of a class attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendancelogget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionattendancelogget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling sessionattendancelogget");
    }

    # parse inputs
    my $_resource_path = '/sessionattendancelogget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionattendanceloggetuser
#
# View the class session attendance information for a specific user
# 
# @param string $attendee The id of the attendee to get statistic for. (required)
# @param string $eventid The id of the event whose attendee statistics have to be returned. (required)
# @param string $token The authentication token. (optional)
{
    my $params = {
    'attendee' => {
        data_type => 'string',
        description => 'The id of the attendee to get statistic for.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event whose attendee statistics have to be returned.',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendanceloggetuser' } = { 
        summary => 'View the class session attendance information for a specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendanceloggetuser {
    my ($self, %args) = @_;

    # verify the required parameter 'attendee' is set
    unless (exists $args{'attendee'}) {
      croak("Missing the required parameter 'attendee' when calling sessionattendanceloggetuser");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling sessionattendanceloggetuser");
    }

    # parse inputs
    my $_resource_path = '/sessionattendanceloggetuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'attendee'}) {
        $query_params->{'attendee'} = $self->{api_client}->to_query_value($args{'attendee'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionattendanceloglist
#
# View attendance logs of the specified session
# 
# @param string $token The authentication token. (required)
# @param string $session The id of the session whose attendees logs have to be returned. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'session' => {
        data_type => 'string',
        description => 'The id of the session whose attendees logs have to be returned.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendanceloglist' } = { 
        summary => 'View attendance logs of the specified session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendanceloglist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionattendanceloglist");
    }

    # verify the required parameter 'session' is set
    unless (exists $args{'session'}) {
      croak("Missing the required parameter 'session' when calling sessionattendanceloglist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling sessionattendanceloglist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling sessionattendanceloglist");
    }

    # parse inputs
    my $_resource_path = '/sessionattendanceloglist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'session'}) {
        $query_params->{'session'} = $self->{api_client}->to_query_value($args{'session'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionattendanceloglistevent
#
# View the attendance information of an entire class
# 
# @param string $eventid The id of the event whose attendance has to be returned. (required)
# @param string $token The authentication token. (optional)
{
    my $params = {
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event whose attendance has to be returned.',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendanceloglistevent' } = { 
        summary => 'View the attendance information of an entire class',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendanceloglistevent {
    my ($self, %args) = @_;

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling sessionattendanceloglistevent");
    }

    # parse inputs
    my $_resource_path = '/sessionattendanceloglistevent';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionattendanceloglistsummary
#
# View the attendance summary for a class and/or a attendee
# 
# @param string $token The authentication token. (optional)
# @param string $eventid The id of the event whose attendance has to be returned. (optional)
# @param string $attendeeid The id of the attendee whose attendance has to be returned. (optional)
# @param string $groupid The id of the group whose attendance has to be returned. (optional)
# @param string $start The start date to filter (beginning of time by default). (optional)
# @param string $end The end date to filter (today by default). (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event whose attendance has to be returned.',
        required => '0',
    },
    'attendeeid' => {
        data_type => 'string',
        description => 'The id of the attendee whose attendance has to be returned.',
        required => '0',
    },
    'groupid' => {
        data_type => 'string',
        description => 'The id of the group whose attendance has to be returned.',
        required => '0',
    },
    'start' => {
        data_type => 'string',
        description => 'The start date to filter (beginning of time by default).',
        required => '0',
    },
    'end' => {
        data_type => 'string',
        description => 'The end date to filter (today by default).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendanceloglistsummary' } = { 
        summary => 'View the attendance summary for a class and/or a attendee',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendanceloglistsummary {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/sessionattendanceloglistsummary';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'attendeeid'}) {
        $query_params->{'attendeeid'} = $self->{api_client}->to_query_value($args{'attendeeid'});
    }

    # query params
    if ( exists $args{'groupid'}) {
        $query_params->{'groupid'} = $self->{api_client}->to_query_value($args{'groupid'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionattendancelogmylistsummary
#
# View my attendance summary
# 
# @param string $token The authentication token. (optional)
# @param string $eventid The id of the event whose attendance has to be returned. (optional)
# @param string $start The start date to filter (beginning of time by default). (optional)
# @param string $end The end date to filter (today by default). (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event whose attendance has to be returned.',
        required => '0',
    },
    'start' => {
        data_type => 'string',
        description => 'The start date to filter (beginning of time by default).',
        required => '0',
    },
    'end' => {
        data_type => 'string',
        description => 'The end date to filter (today by default).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendancelogmylistsummary' } = { 
        summary => 'View my attendance summary',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendancelogmylistsummary {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/sessionattendancelogmylistsummary';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionattendancelogsave
#
# Create or edit a class attendance log
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendancelogsave' } = { 
        summary => 'Create or edit a class attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendancelogsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/sessionattendancelogsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionattendancelogsaveswipe
#
# Create or edit a class attendance log swipe
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionattendancelogsaveswipe' } = { 
        summary => 'Create or edit a class attendance log swipe',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionattendancelogsaveswipe {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/sessionattendancelogsaveswipe';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionbulkupdate
#
# Bulk update event sessions
# 
# @param string $token The authentication token. (required)
# @param string $eventid The id of the event to bulk update. (required)
# @param string $sessions A JSON-formatted array, with all the sessions to update, create or delete. Each item must contain an action (set/remove) and the session properties. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event to bulk update.',
        required => '1',
    },
    'sessions' => {
        data_type => 'string',
        description => 'A JSON-formatted array, with all the sessions to update, create or delete. Each item must contain an action (set/remove) and the session properties.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionbulkupdate' } = { 
        summary => 'Bulk update event sessions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionbulkupdate {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionbulkupdate");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling sessionbulkupdate");
    }

    # verify the required parameter 'sessions' is set
    unless (exists $args{'sessions'}) {
      croak("Missing the required parameter 'sessions' when calling sessionbulkupdate");
    }

    # parse inputs
    my $_resource_path = '/sessionbulkupdate';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'sessions'}) {
        $query_params->{'sessions'} = $self->{api_client}->to_query_value($args{'sessions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionget
#
# View details of a session
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the session to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the session to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionget' } = { 
        summary => 'View details of a session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling sessionget");
    }

    # parse inputs
    my $_resource_path = '/sessionget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessiongetschedule
#
# Gets the schedule for a location, instructor or attendees
# 
# @param string $token The authentication token. (optional)
# @param DateTime $day The day to return. It will also return the whole week for that day. (optional)
# @param string $attendee The id of the attendee to get the schedule. (optional)
# @param string $location The id of the location to get the schedule. (optional)
# @param string $instructor The id of the instructor to get the schedule. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    'day' => {
        data_type => 'DateTime',
        description => 'The day to return. It will also return the whole week for that day.',
        required => '0',
    },
    'attendee' => {
        data_type => 'string',
        description => 'The id of the attendee to get the schedule.',
        required => '0',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location to get the schedule.',
        required => '0',
    },
    'instructor' => {
        data_type => 'string',
        description => 'The id of the instructor to get the schedule.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessiongetschedule' } = { 
        summary => 'Gets the schedule for a location, instructor or attendees',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessiongetschedule {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/sessiongetschedule';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'day'}) {
        $query_params->{'day'} = $self->{api_client}->to_query_value($args{'day'});
    }

    # query params
    if ( exists $args{'attendee'}) {
        $query_params->{'attendee'} = $self->{api_client}->to_query_value($args{'attendee'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'instructor'}) {
        $query_params->{'instructor'} = $self->{api_client}->to_query_value($args{'instructor'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionlist
#
# Gets all future sessions of the current semester
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $token The authentication token. (optional)
# @param DateTime $startdate The start date to filter the sessions (optional)
# @param DateTime $enddate The end date to filter the sessions. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'The start date to filter the sessions',
        required => '0',
    },
    'enddate' => {
        data_type => 'DateTime',
        description => 'The end date to filter the sessions.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionlist' } = { 
        summary => 'Gets all future sessions of the current semester',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionlist {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling sessionlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling sessionlist");
    }

    # parse inputs
    my $_resource_path = '/sessionlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'enddate'}) {
        $query_params->{'enddate'} = $self->{api_client}->to_query_value($args{'enddate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionregaddcurrentuser
#
# Register current user to an event session
# 
# @param string $token The authentication token. (required)
# @param string $eventid The id of the event. (required)
# @param DateTime $sessiondate The date and time when the session starts. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event.',
        required => '1',
    },
    'sessiondate' => {
        data_type => 'DateTime',
        description => 'The date and time when the session starts.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionregaddcurrentuser' } = { 
        summary => 'Register current user to an event session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionregaddcurrentuser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionregaddcurrentuser");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling sessionregaddcurrentuser");
    }

    # verify the required parameter 'sessiondate' is set
    unless (exists $args{'sessiondate'}) {
      croak("Missing the required parameter 'sessiondate' when calling sessionregaddcurrentuser");
    }

    # parse inputs
    my $_resource_path = '/sessionregaddcurrentuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'sessiondate'}) {
        $query_params->{'sessiondate'} = $self->{api_client}->to_query_value($args{'sessiondate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionregadduser
#
# Register users for events
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to add. (required)
# @param string $eventid The id of the event. (required)
# @param DateTime $sessiondate The date and time when the session starts. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to add.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event.',
        required => '1',
    },
    'sessiondate' => {
        data_type => 'DateTime',
        description => 'The date and time when the session starts.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionregadduser' } = { 
        summary => 'Register users for events',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionregadduser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionregadduser");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling sessionregadduser");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling sessionregadduser");
    }

    # verify the required parameter 'sessiondate' is set
    unless (exists $args{'sessiondate'}) {
      croak("Missing the required parameter 'sessiondate' when calling sessionregadduser");
    }

    # parse inputs
    my $_resource_path = '/sessionregadduser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'sessiondate'}) {
        $query_params->{'sessiondate'} = $self->{api_client}->to_query_value($args{'sessiondate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionreggetmysessions
#
# View all the sessions the logged user is registered to
# 
# @param string $token The authentication token. (required)
# @param DateTime $date Start date to filter the sessions. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'date' => {
        data_type => 'DateTime',
        description => 'Start date to filter the sessions.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionreggetmysessions' } = { 
        summary => 'View all the sessions the logged user is registered to',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionreggetmysessions {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionreggetmysessions");
    }

    # parse inputs
    my $_resource_path = '/sessionreggetmysessions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionreggetsessions
#
# Lists the registrations for a specific user
# 
# @param string $token The authentication token. (required)
# @param string $userid The user id to list sessions. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The user id to list sessions.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionreggetsessions' } = { 
        summary => 'Lists the registrations for a specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionreggetsessions {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionreggetsessions");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling sessionreggetsessions");
    }

    # parse inputs
    my $_resource_path = '/sessionreggetsessions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionreggetsettings
#
# Get the settings for session registration
# 
# @param string $token The authentication token. (required)
# @param string $locationid The id of the location to save settings. (optional)
# @param string $eventid The id of the event to save settings. (optional)
# @param DateTime $sessiondate The date and time when the session starts. (optional)
# @param boolean $noinherit True to get the location/event/session specific settings without looking for the more global settings. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The id of the location to save settings.',
        required => '0',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event to save settings.',
        required => '0',
    },
    'sessiondate' => {
        data_type => 'DateTime',
        description => 'The date and time when the session starts.',
        required => '0',
    },
    'noinherit' => {
        data_type => 'boolean',
        description => 'True to get the location/event/session specific settings without looking for the more global settings.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionreggetsettings' } = { 
        summary => 'Get the settings for session registration',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionreggetsettings {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionreggetsettings");
    }

    # parse inputs
    my $_resource_path = '/sessionreggetsettings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'sessiondate'}) {
        $query_params->{'sessiondate'} = $self->{api_client}->to_query_value($args{'sessiondate'});
    }

    # query params
    if ( exists $args{'noinherit'}) {
        $query_params->{'noinherit'} = $self->{api_client}->to_query_value($args{'noinherit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionreggetusers
#
# Lists the registrations for a specific session
# 
# @param string $token The authentication token. (required)
# @param string $eventid The event id to list sessions. (required)
# @param DateTime $sessiondate The date of the session to find. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The event id to list sessions.',
        required => '1',
    },
    'sessiondate' => {
        data_type => 'DateTime',
        description => 'The date of the session to find.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionreggetusers' } = { 
        summary => 'Lists the registrations for a specific session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionreggetusers {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionreggetusers");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling sessionreggetusers");
    }

    # verify the required parameter 'sessiondate' is set
    unless (exists $args{'sessiondate'}) {
      croak("Missing the required parameter 'sessiondate' when calling sessionreggetusers");
    }

    # parse inputs
    my $_resource_path = '/sessionreggetusers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'sessiondate'}) {
        $query_params->{'sessiondate'} = $self->{api_client}->to_query_value($args{'sessiondate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionreglistsessions
#
# List the sessions available for a specific event
# 
# @param string $token The authentication token. (required)
# @param string $eventid The event id to list sessions. (required)
# @param DateTime $sessiondate The date of the session to find. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The event id to list sessions.',
        required => '1',
    },
    'sessiondate' => {
        data_type => 'DateTime',
        description => 'The date of the session to find.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionreglistsessions' } = { 
        summary => 'List the sessions available for a specific event',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionreglistsessions {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionreglistsessions");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling sessionreglistsessions");
    }

    # parse inputs
    my $_resource_path = '/sessionreglistsessions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'sessiondate'}) {
        $query_params->{'sessiondate'} = $self->{api_client}->to_query_value($args{'sessiondate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionreglistupcoming
#
# View a list of upcoming event sessions
# 
# @param string $token The authentication token. (required)
# @param DateTime $date Only sessions in the week of the specified date will be returned. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'date' => {
        data_type => 'DateTime',
        description => 'Only sessions in the week of the specified date will be returned.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionreglistupcoming' } = { 
        summary => 'View a list of upcoming event sessions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionreglistupcoming {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionreglistupcoming");
    }

    # verify the required parameter 'date' is set
    unless (exists $args{'date'}) {
      croak("Missing the required parameter 'date' when calling sessionreglistupcoming");
    }

    # parse inputs
    my $_resource_path = '/sessionreglistupcoming';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionreglistupcomingevent
#
# View a list of upcoming sessions of a particular event
# 
# @param string $token The authentication token. (required)
# @param DateTime $date Start date to filter the returned sessions. (required)
# @param string $event The id of the event whose sessions will be returned (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'date' => {
        data_type => 'DateTime',
        description => 'Start date to filter the returned sessions.',
        required => '1',
    },
    'event' => {
        data_type => 'string',
        description => 'The id of the event whose sessions will be returned',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionreglistupcomingevent' } = { 
        summary => 'View a list of upcoming sessions of a particular event',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionreglistupcomingevent {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionreglistupcomingevent");
    }

    # verify the required parameter 'date' is set
    unless (exists $args{'date'}) {
      croak("Missing the required parameter 'date' when calling sessionreglistupcomingevent");
    }

    # verify the required parameter 'event' is set
    unless (exists $args{'event'}) {
      croak("Missing the required parameter 'event' when calling sessionreglistupcomingevent");
    }

    # parse inputs
    my $_resource_path = '/sessionreglistupcomingevent';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    # query params
    if ( exists $args{'event'}) {
        $query_params->{'event'} = $self->{api_client}->to_query_value($args{'event'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionregremovecurrentuser
#
# Unregister current user from an event session
# 
# @param string $token The authentication token. (required)
# @param string $eventid The id of the event. (required)
# @param DateTime $sessiondate The date and time when the session starts. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event.',
        required => '1',
    },
    'sessiondate' => {
        data_type => 'DateTime',
        description => 'The date and time when the session starts.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionregremovecurrentuser' } = { 
        summary => 'Unregister current user from an event session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionregremovecurrentuser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionregremovecurrentuser");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling sessionregremovecurrentuser");
    }

    # verify the required parameter 'sessiondate' is set
    unless (exists $args{'sessiondate'}) {
      croak("Missing the required parameter 'sessiondate' when calling sessionregremovecurrentuser");
    }

    # parse inputs
    my $_resource_path = '/sessionregremovecurrentuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'sessiondate'}) {
        $query_params->{'sessiondate'} = $self->{api_client}->to_query_value($args{'sessiondate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionregremoveuser
#
# Removes a user from an event session
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to remove. (required)
# @param string $eventid The id of the event. (required)
# @param DateTime $sessiondate The date and time when the session starts. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to remove.',
        required => '1',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event.',
        required => '1',
    },
    'sessiondate' => {
        data_type => 'DateTime',
        description => 'The date and time when the session starts.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionregremoveuser' } = { 
        summary => 'Removes a user from an event session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionregremoveuser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionregremoveuser");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling sessionregremoveuser");
    }

    # verify the required parameter 'eventid' is set
    unless (exists $args{'eventid'}) {
      croak("Missing the required parameter 'eventid' when calling sessionregremoveuser");
    }

    # verify the required parameter 'sessiondate' is set
    unless (exists $args{'sessiondate'}) {
      croak("Missing the required parameter 'sessiondate' when calling sessionregremoveuser");
    }

    # parse inputs
    my $_resource_path = '/sessionregremoveuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'sessiondate'}) {
        $query_params->{'sessiondate'} = $self->{api_client}->to_query_value($args{'sessiondate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionregsavesettings
#
# Save the settings for an event's session registration
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionregsavesettings' } = { 
        summary => 'Save the settings for an event&#39;s session registration',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionregsavesettings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/sessionregsavesettings';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionswipedelete
#
# Delete a session swipe
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the session swipe to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the session swipe to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionswipedelete' } = { 
        summary => 'Delete a session swipe',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionswipedelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionswipedelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling sessionswipedelete");
    }

    # parse inputs
    my $_resource_path = '/sessionswipedelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionswipeget
#
# View details of a class attendance swipe
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the swipe to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the swipe to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionswipeget' } = { 
        summary => 'View details of a class attendance swipe',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionswipeget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionswipeget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling sessionswipeget");
    }

    # parse inputs
    my $_resource_path = '/sessionswipeget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionswipelistunresolved
#
# View a list of unresolved swipes
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $token The authentication token. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionswipelistunresolved' } = { 
        summary => 'View a list of unresolved swipes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionswipelistunresolved {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling sessionswipelistunresolved");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling sessionswipelistunresolved");
    }

    # parse inputs
    my $_resource_path = '/sessionswipelistunresolved';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionswiperesolve
#
# Resolve a swipe and create the corresponding attendance log
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the swipe to resolve. (required)
# @param string $session The id of the session whose swipe has to be saved. (optional)
# @param string $user The id of the user who signed-in. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the swipe to resolve.',
        required => '1',
    },
    'session' => {
        data_type => 'string',
        description => 'The id of the session whose swipe has to be saved.',
        required => '0',
    },
    'user' => {
        data_type => 'string',
        description => 'The id of the user who signed-in.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionswiperesolve' } = { 
        summary => 'Resolve a swipe and create the corresponding attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionswiperesolve {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling sessionswiperesolve");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling sessionswiperesolve");
    }

    # parse inputs
    my $_resource_path = '/sessionswiperesolve';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'session'}) {
        $query_params->{'session'} = $self->{api_client}->to_query_value($args{'session'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionswipesave
#
# Creates a new swipe, and if possible, creates the attendance log
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionswipesave' } = { 
        summary => 'Creates a new swipe, and if possible, creates the attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionswipesave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/sessionswipesave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sessionswipesaveanonym
#
# Creates a new swipe from a sign-in station, and if possible, creates the attendance log
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sessionswipesaveanonym' } = { 
        summary => 'Creates a new swipe from a sign-in station, and if possible, creates the attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sessionswipesaveanonym {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/sessionswipesaveanonym';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# settingaddlogo
#
# Add a logo to the account
# 
# @param string $token The authentication token. (required)
# @param string $upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
# @param string $filename The original filename, needed to process the file. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'upload' => {
        data_type => 'string',
        description => 'Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).',
        required => '1',
    },
    'filename' => {
        data_type => 'string',
        description => 'The original filename, needed to process the file.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'settingaddlogo' } = { 
        summary => 'Add a logo to the account',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub settingaddlogo {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling settingaddlogo");
    }

    # verify the required parameter 'upload' is set
    unless (exists $args{'upload'}) {
      croak("Missing the required parameter 'upload' when calling settingaddlogo");
    }

    # verify the required parameter 'filename' is set
    unless (exists $args{'filename'}) {
      croak("Missing the required parameter 'filename' when calling settingaddlogo");
    }

    # parse inputs
    my $_resource_path = '/settingaddlogo';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'upload'}) {
        $query_params->{'upload'} = $self->{api_client}->to_query_value($args{'upload'});
    }

    # query params
    if ( exists $args{'filename'}) {
        $query_params->{'filename'} = $self->{api_client}->to_query_value($args{'filename'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# settingget
#
# Get settings for the account or the specified scope
# 
# @param string $keys The option keys to get values for. Enter multiple separated by comma. (required)
# @param string $token The authentication token. (optional)
# @param string $domain The account domain, in case of reading settings annonymously. (optional)
# @param string $scope The scope of the settings to get. (optional)
{
    my $params = {
    'keys' => {
        data_type => 'string',
        description => 'The option keys to get values for. Enter multiple separated by comma.',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    'domain' => {
        data_type => 'string',
        description => 'The account domain, in case of reading settings annonymously.',
        required => '0',
    },
    'scope' => {
        data_type => 'string',
        description => 'The scope of the settings to get.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'settingget' } = { 
        summary => 'Get settings for the account or the specified scope',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub settingget {
    my ($self, %args) = @_;

    # verify the required parameter 'keys' is set
    unless (exists $args{'keys'}) {
      croak("Missing the required parameter 'keys' when calling settingget");
    }

    # parse inputs
    my $_resource_path = '/settingget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'domain'}) {
        $query_params->{'domain'} = $self->{api_client}->to_query_value($args{'domain'});
    }

    # query params
    if ( exists $args{'keys'}) {
        $query_params->{'keys'} = $self->{api_client}->to_query_value($args{'keys'});
    }

    # query params
    if ( exists $args{'scope'}) {
        $query_params->{'scope'} = $self->{api_client}->to_query_value($args{'scope'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# settingsave
#
# Save settings for the account or the specified scope
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'settingsave' } = { 
        summary => 'Save settings for the account or the specified scope',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub settingsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/settingsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# settingviewgeneral
#
# View general settings for the account
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'settingviewgeneral' } = { 
        summary => 'View general settings for the account',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub settingviewgeneral {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling settingviewgeneral");
    }

    # parse inputs
    my $_resource_path = '/settingviewgeneral';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# socialcontacts
#
# Gets the list of contacts in the network
# 
# @param string $token The authentication token. (required)
# @param string $filter Text to filter results. (optional)
# @param boolean $showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'filter' => {
        data_type => 'string',
        description => 'Text to filter results.',
        required => '0',
    },
    'showdefaultphoto' => {
        data_type => 'boolean',
        description => 'If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'socialcontacts' } = { 
        summary => 'Gets the list of contacts in the network',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub socialcontacts {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling socialcontacts");
    }

    # parse inputs
    my $_resource_path = '/socialcontacts';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    # query params
    if ( exists $args{'showdefaultphoto'}) {
        $query_params->{'showdefaultphoto'} = $self->{api_client}->to_query_value($args{'showdefaultphoto'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# socialgroupaddmembers
#
# Adds new members to a group (which the user must own already)
# 
# @param string $token The authentication token. (required)
# @param string $id ID of the group to add members to. (required)
# @param string $userids Csv list of user Ids to add. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'ID of the group to add members to.',
        required => '1',
    },
    'userids' => {
        data_type => 'string',
        description => 'Csv list of user Ids to add.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'socialgroupaddmembers' } = { 
        summary => 'Adds new members to a group (which the user must own already)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub socialgroupaddmembers {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling socialgroupaddmembers");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling socialgroupaddmembers");
    }

    # verify the required parameter 'userids' is set
    unless (exists $args{'userids'}) {
      croak("Missing the required parameter 'userids' when calling socialgroupaddmembers");
    }

    # parse inputs
    my $_resource_path = '/socialgroupaddmembers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'userids'}) {
        $query_params->{'userids'} = $self->{api_client}->to_query_value($args{'userids'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# socialgroupdelete
#
# Deletes a group
# 
# @param string $token The authentication token. (required)
# @param string $id ID of the group to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'ID of the group to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'socialgroupdelete' } = { 
        summary => 'Deletes a group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub socialgroupdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling socialgroupdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling socialgroupdelete");
    }

    # parse inputs
    my $_resource_path = '/socialgroupdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# socialgrouplist
#
# View all the groups the current user is in
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'socialgrouplist' } = { 
        summary => 'View all the groups the current user is in',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub socialgrouplist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling socialgrouplist");
    }

    # parse inputs
    my $_resource_path = '/socialgrouplist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# socialgrouplistmembers
#
# Lists the members of a group
# 
# @param string $token The authentication token. (required)
# @param string $id ID of the group to list members. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'ID of the group to list members.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'socialgrouplistmembers' } = { 
        summary => 'Lists the members of a group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub socialgrouplistmembers {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling socialgrouplistmembers");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling socialgrouplistmembers");
    }

    # parse inputs
    my $_resource_path = '/socialgrouplistmembers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# socialgroupremovemembers
#
# Removes members from a group (which the user must own already)
# 
# @param string $token The authentication token. (required)
# @param string $id ID of the group to remove members from. (required)
# @param string $userids Csv list of user Ids to remove. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'ID of the group to remove members from.',
        required => '1',
    },
    'userids' => {
        data_type => 'string',
        description => 'Csv list of user Ids to remove.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'socialgroupremovemembers' } = { 
        summary => 'Removes members from a group (which the user must own already)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub socialgroupremovemembers {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling socialgroupremovemembers");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling socialgroupremovemembers");
    }

    # verify the required parameter 'userids' is set
    unless (exists $args{'userids'}) {
      croak("Missing the required parameter 'userids' when calling socialgroupremovemembers");
    }

    # parse inputs
    my $_resource_path = '/socialgroupremovemembers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'userids'}) {
        $query_params->{'userids'} = $self->{api_client}->to_query_value($args{'userids'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# socialgroupremovemyself
#
# Removes myself from an existent group
# 
# @param string $token The authentication token. (required)
# @param string $id ID of the group to remove me from. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'ID of the group to remove me from.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'socialgroupremovemyself' } = { 
        summary => 'Removes myself from an existent group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub socialgroupremovemyself {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling socialgroupremovemyself");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling socialgroupremovemyself");
    }

    # parse inputs
    my $_resource_path = '/socialgroupremovemyself';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# socialgroupsave
#
# Saves a new group
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'socialgroupsave' } = { 
        summary => 'Saves a new group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub socialgroupsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/socialgroupsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ssogeneratekey
#
# Generate/reset single sign on access key.
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ssogeneratekey' } = { 
        summary => 'Generate/reset single sign on access key.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ssogeneratekey {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ssogeneratekey");
    }

    # parse inputs
    my $_resource_path = '/ssogeneratekey';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ssogetsettings
#
# View single sign on settings.
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ssogetsettings' } = { 
        summary => 'View single sign on settings.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ssogetsettings {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling ssogetsettings");
    }

    # parse inputs
    my $_resource_path = '/ssogetsettings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ssoissuetoken
#
# Issue single sign-on token
# 
# @param string $key The single sign-on key of the account. (required)
# @param string $username The email of the user to sign-on. (required)
# @param boolean $expires Specifies whether the session should expire when inactive. (optional)
{
    my $params = {
    'key' => {
        data_type => 'string',
        description => 'The single sign-on key of the account.',
        required => '1',
    },
    'username' => {
        data_type => 'string',
        description => 'The email of the user to sign-on.',
        required => '1',
    },
    'expires' => {
        data_type => 'boolean',
        description => 'Specifies whether the session should expire when inactive.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'ssoissuetoken' } = { 
        summary => 'Issue single sign-on token',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ssoissuetoken {
    my ($self, %args) = @_;

    # verify the required parameter 'key' is set
    unless (exists $args{'key'}) {
      croak("Missing the required parameter 'key' when calling ssoissuetoken");
    }

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling ssoissuetoken");
    }

    # parse inputs
    my $_resource_path = '/ssoissuetoken';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'key'}) {
        $query_params->{'key'} = $self->{api_client}->to_query_value($args{'key'});
    }

    # query params
    if ( exists $args{'username'}) {
        $query_params->{'username'} = $self->{api_client}->to_query_value($args{'username'});
    }

    # query params
    if ( exists $args{'expires'}) {
        $query_params->{'expires'} = $self->{api_client}->to_query_value($args{'expires'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ssosavesettings
#
# Edit single sign-on settings.
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'ssosavesettings' } = { 
        summary => 'Edit single sign-on settings.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ssosavesettings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/ssosavesettings';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavailaddmetoallservices
#
# Associate current user to all services
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavailaddmetoallservices' } = { 
        summary => 'Associate current user to all services',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavailaddmetoallservices {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling staffavailaddmetoallservices");
    }

    # parse inputs
    my $_resource_path = '/staffavailaddmetoallservices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavailaddmetoservice
#
# Associate current user to a service
# 
# @param string $token The authentication token. (required)
# @param string $serviceid The id of the service. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'serviceid' => {
        data_type => 'string',
        description => 'The id of the service.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavailaddmetoservice' } = { 
        summary => 'Associate current user to a service',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavailaddmetoservice {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling staffavailaddmetoservice");
    }

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling staffavailaddmetoservice");
    }

    # parse inputs
    my $_resource_path = '/staffavailaddmetoservice';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavailaddusertoallservices
#
# Associate a staff member to all services
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to add. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to add.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavailaddusertoallservices' } = { 
        summary => 'Associate a staff member to all services',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavailaddusertoallservices {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling staffavailaddusertoallservices");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling staffavailaddusertoallservices");
    }

    # parse inputs
    my $_resource_path = '/staffavailaddusertoallservices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavailaddusertoservice
#
# Associate a staff member to a service
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to add. (required)
# @param string $serviceid The id of the service. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to add.',
        required => '1',
    },
    'serviceid' => {
        data_type => 'string',
        description => 'The id of the service.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavailaddusertoservice' } = { 
        summary => 'Associate a staff member to a service',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavailaddusertoservice {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling staffavailaddusertoservice");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling staffavailaddusertoservice");
    }

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling staffavailaddusertoservice");
    }

    # parse inputs
    my $_resource_path = '/staffavailaddusertoservice';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavailgetmyservices
#
# View the services the current user is available for
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavailgetmyservices' } = { 
        summary => 'View the services the current user is available for',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavailgetmyservices {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling staffavailgetmyservices");
    }

    # parse inputs
    my $_resource_path = '/staffavailgetmyservices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavailgetservices
#
# View a list of services that a staff member is available for
# 
# @param string $token The authentication token. (required)
# @param string $userid The user id to list services. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The user id to list services.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavailgetservices' } = { 
        summary => 'View a list of services that a staff member is available for',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavailgetservices {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling staffavailgetservices");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling staffavailgetservices");
    }

    # parse inputs
    my $_resource_path = '/staffavailgetservices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavailgetusersforservice
#
# View a list of staff members that are available for a specific service
# 
# @param string $token The authentication token. (required)
# @param string $serviceid The service id to list users. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'serviceid' => {
        data_type => 'string',
        description => 'The service id to list users.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavailgetusersforservice' } = { 
        summary => 'View a list of staff members that are available for a specific service',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavailgetusersforservice {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling staffavailgetusersforservice");
    }

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling staffavailgetusersforservice");
    }

    # parse inputs
    my $_resource_path = '/staffavailgetusersforservice';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavaillisttypes
#
# View all the availability types
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavaillisttypes' } = { 
        summary => 'View all the availability types',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavaillisttypes {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling staffavaillisttypes");
    }

    # parse inputs
    my $_resource_path = '/staffavaillisttypes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavailremovemefromallservices
#
# Remove current user from all services
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavailremovemefromallservices' } = { 
        summary => 'Remove current user from all services',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavailremovemefromallservices {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling staffavailremovemefromallservices");
    }

    # parse inputs
    my $_resource_path = '/staffavailremovemefromallservices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavailremovemefromservice
#
# Remove current user from a service
# 
# @param string $token The authentication token. (required)
# @param string $serviceid The id of the service. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'serviceid' => {
        data_type => 'string',
        description => 'The id of the service.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavailremovemefromservice' } = { 
        summary => 'Remove current user from a service',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavailremovemefromservice {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling staffavailremovemefromservice");
    }

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling staffavailremovemefromservice");
    }

    # parse inputs
    my $_resource_path = '/staffavailremovemefromservice';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavailremoveuserfromallservices
#
# Removes a staff member from the registration to all services
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to remove. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to remove.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavailremoveuserfromallservices' } = { 
        summary => 'Removes a staff member from the registration to all services',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavailremoveuserfromallservices {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling staffavailremoveuserfromallservices");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling staffavailremoveuserfromallservices");
    }

    # parse inputs
    my $_resource_path = '/staffavailremoveuserfromallservices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavailremoveuserfromservice
#
# Remove a staff member from a service
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to remove. (required)
# @param string $serviceid The id of the service. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to remove.',
        required => '1',
    },
    'serviceid' => {
        data_type => 'string',
        description => 'The id of the service.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavailremoveuserfromservice' } = { 
        summary => 'Remove a staff member from a service',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavailremoveuserfromservice {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling staffavailremoveuserfromservice");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling staffavailremoveuserfromservice");
    }

    # verify the required parameter 'serviceid' is set
    unless (exists $args{'serviceid'}) {
      croak("Missing the required parameter 'serviceid' when calling staffavailremoveuserfromservice");
    }

    # parse inputs
    my $_resource_path = '/staffavailremoveuserfromservice';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'serviceid'}) {
        $query_params->{'serviceid'} = $self->{api_client}->to_query_value($args{'serviceid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavailsetavailability
#
# Make a staff member available for a specific availability type
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user whose specific availability has to be set. (required)
# @param string $availablefor Specific availability to set. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user whose specific availability has to be set.',
        required => '1',
    },
    'availablefor' => {
        data_type => 'string',
        description => 'Specific availability to set.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavailsetavailability' } = { 
        summary => 'Make a staff member available for a specific availability type',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavailsetavailability {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling staffavailsetavailability");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling staffavailsetavailability");
    }

    # parse inputs
    my $_resource_path = '/staffavailsetavailability';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'availablefor'}) {
        $query_params->{'availablefor'} = $self->{api_client}->to_query_value($args{'availablefor'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# staffavailsetmyavailability
#
# Change current user's availability type
# 
# @param string $token The authentication token. (required)
# @param string $availablefor Specific availability to set. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'availablefor' => {
        data_type => 'string',
        description => 'Specific availability to set.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'staffavailsetmyavailability' } = { 
        summary => 'Change current user&#39;s availability type',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub staffavailsetmyavailability {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling staffavailsetmyavailability");
    }

    # parse inputs
    my $_resource_path = '/staffavailsetmyavailability';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'availablefor'}) {
        $query_params->{'availablefor'} = $self->{api_client}->to_query_value($args{'availablefor'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationdelete
#
# Delete a sign-in station
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the sign-in station to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the sign-in station to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationdelete' } = { 
        summary => 'Delete a sign-in station',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling stationdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling stationdelete");
    }

    # parse inputs
    my $_resource_path = '/stationdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationget
#
# View details of a sign-in station
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the sign-in station to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationget' } = { 
        summary => 'View details of a sign-in station',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling stationget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling stationget");
    }

    # parse inputs
    my $_resource_path = '/stationget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationgetcurrentterms
#
# Get all the current terms
# 
# @param string $station The id of the sign-in station whose account&#39;s current terms have to be retrieved. (required)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station whose account&#39;s current terms have to be retrieved.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationgetcurrentterms' } = { 
        summary => 'Get all the current terms',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationgetcurrentterms {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling stationgetcurrentterms");
    }

    # parse inputs
    my $_resource_path = '/stationgetcurrentterms';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationgetinfo
#
# Gets a the info to display in the sign-in station by it's ID.
# 
# @param string $id The id of the sign-in station to get. (required)
# @param string $event The id of the event, to override the one by schedule. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'event' => {
        data_type => 'string',
        description => 'The id of the event, to override the one by schedule.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationgetinfo' } = { 
        summary => 'Gets a the info to display in the sign-in station by it&#39;s ID.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationgetinfo {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling stationgetinfo");
    }

    # parse inputs
    my $_resource_path = '/stationgetinfo';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'event'}) {
        $query_params->{'event'} = $self->{api_client}->to_query_value($args{'event'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationgetlicense
#
# Gets the current license information
# 
# @param string $station The id of the sign-in station whose account&#39;s license has to be retrieved. (required)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station whose account&#39;s license has to be retrieved.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationgetlicense' } = { 
        summary => 'Gets the current license information',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationgetlicense {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling stationgetlicense");
    }

    # parse inputs
    my $_resource_path = '/stationgetlicense';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationgetlocationsettings
#
# View the sign-in station settings of a specified location
# 
# @param string $location The id of the location whose station settings have to be returned. (required)
{
    my $params = {
    'location' => {
        data_type => 'string',
        description => 'The id of the location whose station settings have to be returned.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationgetlocationsettings' } = { 
        summary => 'View the sign-in station settings of a specified location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationgetlocationsettings {
    my ($self, %args) = @_;

    # verify the required parameter 'location' is set
    unless (exists $args{'location'}) {
      croak("Missing the required parameter 'location' when calling stationgetlocationsettings");
    }

    # parse inputs
    my $_resource_path = '/stationgetlocationsettings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationlist
#
# View a list of sign-in stations
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationlist' } = { 
        summary => 'View a list of sign-in stations',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling stationlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling stationlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling stationlist");
    }

    # parse inputs
    my $_resource_path = '/stationlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationsave
#
# Create or edit a sign-in station
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationsave' } = { 
        summary => 'Create or edit a sign-in station',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/stationsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationsavemine
#
# Create or edit a class attendance sign-in station for myself
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationsavemine' } = { 
        summary => 'Create or edit a class attendance sign-in station for myself',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationsavemine {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/stationsavemine';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# stationunlock
#
# Unlocks the sign-in station.
# 
# @param string $id The id of the sign-in station to unlock. (required)
# @param string $passcode The passcode to unlock the station. (required)
# @param string $method The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the sign-in station to unlock.',
        required => '1',
    },
    'passcode' => {
        data_type => 'string',
        description => 'The passcode to unlock the station.',
        required => '1',
    },
    'method' => {
        data_type => 'string',
        description => 'The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'stationunlock' } = { 
        summary => 'Unlocks the sign-in station.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub stationunlock {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling stationunlock");
    }

    # verify the required parameter 'passcode' is set
    unless (exists $args{'passcode'}) {
      croak("Missing the required parameter 'passcode' when calling stationunlock");
    }

    # verify the required parameter 'method' is set
    unless (exists $args{'method'}) {
      croak("Missing the required parameter 'method' when calling stationunlock");
    }

    # parse inputs
    my $_resource_path = '/stationunlock';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'passcode'}) {
        $query_params->{'passcode'} = $self->{api_client}->to_query_value($args{'passcode'});
    }

    # query params
    if ( exists $args{'method'}) {
        $query_params->{'method'} = $self->{api_client}->to_query_value($args{'method'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# swipedelete
#
# Delete a swipe
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the swipe to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the swipe to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'swipedelete' } = { 
        summary => 'Delete a swipe',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub swipedelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling swipedelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling swipedelete");
    }

    # parse inputs
    my $_resource_path = '/swipedelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# swipeget
#
# Search and view details of a swipe
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the swipe to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the swipe to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'swipeget' } = { 
        summary => 'Search and view details of a swipe',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub swipeget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling swipeget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling swipeget");
    }

    # parse inputs
    my $_resource_path = '/swipeget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# swipelist
#
# View a list of swipes
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $token The authentication token. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'swipelist' } = { 
        summary => 'View a list of swipes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub swipelist {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling swipelist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling swipelist");
    }

    # parse inputs
    my $_resource_path = '/swipelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# swipesave
#
# Create or edit a swipe, and if possible, save the related attendance log
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'swipesave' } = { 
        summary => 'Create or edit a swipe, and if possible, save the related attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub swipesave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/swipesave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# swipesaveanonym
#
# Creates a new swipe from a sign-in station, and if possible, creates the attendance log
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'swipesaveanonym' } = { 
        summary => 'Creates a new swipe from a sign-in station, and if possible, creates the attendance log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub swipesaveanonym {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/swipesaveanonym';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# tagdelete
#
# Delete a tag
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the tag to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the tag to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'tagdelete' } = { 
        summary => 'Delete a tag',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub tagdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling tagdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling tagdelete");
    }

    # parse inputs
    my $_resource_path = '/tagdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# tagget
#
# View details of a specified tag
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the tag to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the tag to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'tagget' } = { 
        summary => 'View details of a specified tag',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub tagget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling tagget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling tagget");
    }

    # parse inputs
    my $_resource_path = '/tagget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# taglist
#
# View a list of tags
# 
# @param string $token The authentication token. (required)
# @param string $group The group of the tags to return. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'group' => {
        data_type => 'string',
        description => 'The group of the tags to return.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'taglist' } = { 
        summary => 'View a list of tags',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub taglist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling taglist");
    }

    # verify the required parameter 'group' is set
    unless (exists $args{'group'}) {
      croak("Missing the required parameter 'group' when calling taglist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling taglist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling taglist");
    }

    # parse inputs
    my $_resource_path = '/taglist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'group'}) {
        $query_params->{'group'} = $self->{api_client}->to_query_value($args{'group'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# taglistgroups
#
# View a list of entities that can be tagged
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'taglistgroups' } = { 
        summary => 'View a list of entities that can be tagged',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub taglistgroups {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling taglistgroups");
    }

    # parse inputs
    my $_resource_path = '/taglistgroups';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# tagsave
#
# Create or edit a tag
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'tagsave' } = { 
        summary => 'Create or edit a tag',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub tagsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/tagsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# tagsearch
#
# Search for tags in the account
# 
# @param string $token The authentication token. (required)
# @param string $query The query to search tags. Use group:&lt;group&gt; to search in a specific group (mandatory). (required)
# @param boolean $allowcreatingnew Specifies whether an option to create a new tag should be retrieved. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'query' => {
        data_type => 'string',
        description => 'The query to search tags. Use group:&lt;group&gt; to search in a specific group (mandatory).',
        required => '1',
    },
    'allowcreatingnew' => {
        data_type => 'boolean',
        description => 'Specifies whether an option to create a new tag should be retrieved.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'tagsearch' } = { 
        summary => 'Search for tags in the account',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub tagsearch {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling tagsearch");
    }

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling tagsearch");
    }

    # parse inputs
    my $_resource_path = '/tagsearch';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'allowcreatingnew'}) {
        $query_params->{'allowcreatingnew'} = $self->{api_client}->to_query_value($args{'allowcreatingnew'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templateaddimage
#
# Add an image to a template
# 
# @param string $token The authentication token. (required)
# @param string $template The id of the template where the image has to be added (required)
# @param string $upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
# @param string $filename The local name of the uploaded file. For later reference. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'template' => {
        data_type => 'string',
        description => 'The id of the template where the image has to be added',
        required => '1',
    },
    'upload' => {
        data_type => 'string',
        description => 'Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).',
        required => '1',
    },
    'filename' => {
        data_type => 'string',
        description => 'The local name of the uploaded file. For later reference.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'templateaddimage' } = { 
        summary => 'Add an image to a template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templateaddimage {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling templateaddimage");
    }

    # verify the required parameter 'template' is set
    unless (exists $args{'template'}) {
      croak("Missing the required parameter 'template' when calling templateaddimage");
    }

    # verify the required parameter 'upload' is set
    unless (exists $args{'upload'}) {
      croak("Missing the required parameter 'upload' when calling templateaddimage");
    }

    # parse inputs
    my $_resource_path = '/templateaddimage';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'template'}) {
        $query_params->{'template'} = $self->{api_client}->to_query_value($args{'template'});
    }

    # query params
    if ( exists $args{'upload'}) {
        $query_params->{'upload'} = $self->{api_client}->to_query_value($args{'upload'});
    }

    # query params
    if ( exists $args{'filename'}) {
        $query_params->{'filename'} = $self->{api_client}->to_query_value($args{'filename'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templatedelete
#
# Delete a template
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the template to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the template to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'templatedelete' } = { 
        summary => 'Delete a template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templatedelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling templatedelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling templatedelete");
    }

    # parse inputs
    my $_resource_path = '/templatedelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templateemail
#
# Send generated templates by email
# 
# @param string $token The authentication token. (required)
# @param string $jobid The id of the job that is creating the templates. (required)
# @param string $emailsubject Args depending on the send-to flag. (required)
# @param string $emailbody Args depending on the send-to flag. (required)
# @param string $templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate). (optional)
# @param string $emailfrom The name of the sender to be displayed in the receipients inbox (optional)
# @param string $emailreplyto The reply-to field for the emails. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'jobid' => {
        data_type => 'string',
        description => 'The id of the job that is creating the templates.',
        required => '1',
    },
    'emailsubject' => {
        data_type => 'string',
        description => 'Args depending on the send-to flag.',
        required => '1',
    },
    'emailbody' => {
        data_type => 'string',
        description => 'Args depending on the send-to flag.',
        required => '1',
    },
    'templatekind' => {
        data_type => 'string',
        description => 'The kind of the template you&#39;re sending. It must be included in (badge, certificate).',
        required => '0',
    },
    'emailfrom' => {
        data_type => 'string',
        description => 'The name of the sender to be displayed in the receipients inbox',
        required => '0',
    },
    'emailreplyto' => {
        data_type => 'string',
        description => 'The reply-to field for the emails.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'templateemail' } = { 
        summary => 'Send generated templates by email',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templateemail {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling templateemail");
    }

    # verify the required parameter 'jobid' is set
    unless (exists $args{'jobid'}) {
      croak("Missing the required parameter 'jobid' when calling templateemail");
    }

    # verify the required parameter 'emailsubject' is set
    unless (exists $args{'emailsubject'}) {
      croak("Missing the required parameter 'emailsubject' when calling templateemail");
    }

    # verify the required parameter 'emailbody' is set
    unless (exists $args{'emailbody'}) {
      croak("Missing the required parameter 'emailbody' when calling templateemail");
    }

    # parse inputs
    my $_resource_path = '/templateemail';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'jobid'}) {
        $query_params->{'jobid'} = $self->{api_client}->to_query_value($args{'jobid'});
    }

    # query params
    if ( exists $args{'templatekind'}) {
        $query_params->{'templatekind'} = $self->{api_client}->to_query_value($args{'templatekind'});
    }

    # query params
    if ( exists $args{'emailfrom'}) {
        $query_params->{'emailfrom'} = $self->{api_client}->to_query_value($args{'emailfrom'});
    }

    # query params
    if ( exists $args{'emailreplyto'}) {
        $query_params->{'emailreplyto'} = $self->{api_client}->to_query_value($args{'emailreplyto'});
    }

    # query params
    if ( exists $args{'emailsubject'}) {
        $query_params->{'emailsubject'} = $self->{api_client}->to_query_value($args{'emailsubject'});
    }

    # query params
    if ( exists $args{'emailbody'}) {
        $query_params->{'emailbody'} = $self->{api_client}->to_query_value($args{'emailbody'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templategenerate
#
# Generate specified templates
# 
# @param string $token The authentication token. (required)
# @param string $template The id of the template to generate. (required)
# @param string $source The source key of the selected template data source. (required)
# @param boolean $singlefile True if all the templates should be placed in the same file, false if each one shoud be in its own file. (required)
# @param string $userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas. (optional)
# @param boolean $forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading (optional)
# @param string $role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor (optional)
# @param string $filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'template' => {
        data_type => 'string',
        description => 'The id of the template to generate.',
        required => '1',
    },
    'source' => {
        data_type => 'string',
        description => 'The source key of the selected template data source.',
        required => '1',
    },
    'singlefile' => {
        data_type => 'boolean',
        description => 'True if all the templates should be placed in the same file, false if each one shoud be in its own file.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas.',
        required => '0',
    },
    'forsending' => {
        data_type => 'boolean',
        description => 'It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading',
        required => '0',
    },
    'role' => {
        data_type => 'string',
        description => 'When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor',
        required => '0',
    },
    'filters' => {
        data_type => 'string',
        description => 'Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|...',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'templategenerate' } = { 
        summary => 'Generate specified templates',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templategenerate {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling templategenerate");
    }

    # verify the required parameter 'template' is set
    unless (exists $args{'template'}) {
      croak("Missing the required parameter 'template' when calling templategenerate");
    }

    # verify the required parameter 'source' is set
    unless (exists $args{'source'}) {
      croak("Missing the required parameter 'source' when calling templategenerate");
    }

    # verify the required parameter 'singlefile' is set
    unless (exists $args{'singlefile'}) {
      croak("Missing the required parameter 'singlefile' when calling templategenerate");
    }

    # parse inputs
    my $_resource_path = '/templategenerate';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'template'}) {
        $query_params->{'template'} = $self->{api_client}->to_query_value($args{'template'});
    }

    # query params
    if ( exists $args{'source'}) {
        $query_params->{'source'} = $self->{api_client}->to_query_value($args{'source'});
    }

    # query params
    if ( exists $args{'singlefile'}) {
        $query_params->{'singlefile'} = $self->{api_client}->to_query_value($args{'singlefile'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'forsending'}) {
        $query_params->{'forsending'} = $self->{api_client}->to_query_value($args{'forsending'});
    }

    # query params
    if ( exists $args{'role'}) {
        $query_params->{'role'} = $self->{api_client}->to_query_value($args{'role'});
    }

    # query params
    if ( exists $args{'filters'}) {
        $query_params->{'filters'} = $self->{api_client}->to_query_value($args{'filters'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templateget
#
# View details of a template
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the template to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the template to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'templateget' } = { 
        summary => 'View details of a template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templateget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling templateget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling templateget");
    }

    # parse inputs
    my $_resource_path = '/templateget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templategetgenerated
#
# View generated templates
# 
# @param string $token The authentication token. (required)
# @param string $jobid The id of the job that is creating the templates. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'jobid' => {
        data_type => 'string',
        description => 'The id of the job that is creating the templates.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'templategetgenerated' } = { 
        summary => 'View generated templates',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templategetgenerated {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling templategetgenerated");
    }

    # verify the required parameter 'jobid' is set
    unless (exists $args{'jobid'}) {
      croak("Missing the required parameter 'jobid' when calling templategetgenerated");
    }

    # parse inputs
    my $_resource_path = '/templategetgenerated';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'jobid'}) {
        $query_params->{'jobid'} = $self->{api_client}->to_query_value($args{'jobid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templatelist
#
# View a list of defined templates
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $kind The kind of the templates to return. It must be included in (badge, certificate). (required)
# @param boolean $designedonly If true then it only returns the templates that were designed. Otherwise, it returns all. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'kind' => {
        data_type => 'string',
        description => 'The kind of the templates to return. It must be included in (badge, certificate).',
        required => '1',
    },
    'designedonly' => {
        data_type => 'boolean',
        description => 'If true then it only returns the templates that were designed. Otherwise, it returns all.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'templatelist' } = { 
        summary => 'View a list of defined templates',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templatelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling templatelist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling templatelist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling templatelist");
    }

    # verify the required parameter 'kind' is set
    unless (exists $args{'kind'}) {
      croak("Missing the required parameter 'kind' when calling templatelist");
    }

    # parse inputs
    my $_resource_path = '/templatelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'kind'}) {
        $query_params->{'kind'} = $self->{api_client}->to_query_value($args{'kind'});
    }

    # query params
    if ( exists $args{'designedonly'}) {
        $query_params->{'designedonly'} = $self->{api_client}->to_query_value($args{'designedonly'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templatelistsources
#
# View a list of templates' data sources
# 
# @param string $token The authentication token. (required)
# @param string $kind The kind of the templates to return. It must be included in (badge, certificate). (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'kind' => {
        data_type => 'string',
        description => 'The kind of the templates to return. It must be included in (badge, certificate).',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'templatelistsources' } = { 
        summary => 'View a list of templates&#39; data sources',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templatelistsources {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling templatelistsources");
    }

    # verify the required parameter 'kind' is set
    unless (exists $args{'kind'}) {
      croak("Missing the required parameter 'kind' when calling templatelistsources");
    }

    # parse inputs
    my $_resource_path = '/templatelistsources';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'kind'}) {
        $query_params->{'kind'} = $self->{api_client}->to_query_value($args{'kind'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templatesave
#
# Create or edit a template
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'templatesave' } = { 
        summary => 'Create or edit a template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templatesave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/templatesave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# templatesavelayout
#
# Save the layout of a template
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'templatesavelayout' } = { 
        summary => 'Save the layout of a template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub templatesavelayout {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/templatesavelayout';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# termdelete
#
# Delete a term
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the term to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the term to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'termdelete' } = { 
        summary => 'Delete a term',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub termdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling termdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling termdelete");
    }

    # parse inputs
    my $_resource_path = '/termdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# termget
#
# Search and view details of a term
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the term to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the term to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'termget' } = { 
        summary => 'Search and view details of a term',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub termget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling termget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling termget");
    }

    # parse inputs
    my $_resource_path = '/termget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# termlist
#
# Search and view details of all terms
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (optional)
# @param int $count The max number of records to return. (optional)
# @param boolean $notpast Specifies whether the terms in the past should be returned or not. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '0',
    },
    'notpast' => {
        data_type => 'boolean',
        description => 'Specifies whether the terms in the past should be returned or not.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'termlist' } = { 
        summary => 'Search and view details of all terms',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub termlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling termlist");
    }

    # parse inputs
    my $_resource_path = '/termlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'notpast'}) {
        $query_params->{'notpast'} = $self->{api_client}->to_query_value($args{'notpast'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# termsave
#
# Create and edit terms
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'termsave' } = { 
        summary => 'Create and edit terms',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub termsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/termsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# textcreditremaining
#
# Gets the remaining text credits for the account
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'textcreditremaining' } = { 
        summary => 'Gets the remaining text credits for the account',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub textcreditremaining {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling textcreditremaining");
    }

    # parse inputs
    my $_resource_path = '/textcreditremaining';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# texttoimage
#
# Generates a dynamic image from text
# 
# @param string $token The authentication token. (required)
# @param string $text The text to convert to an image, use double pipes (||) as a new line. (required)
# @param string $fontcolor The color of the text, in hex format, without the #. (optional)
# @param int $fontsize The size of the text, in points. (optional)
# @param string $direction Either vertical or horizontal, default horizontal. (optional)
# @param int $width The image width in pixels (or height if the direction is vertical). (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'text' => {
        data_type => 'string',
        description => 'The text to convert to an image, use double pipes (||) as a new line.',
        required => '1',
    },
    'fontcolor' => {
        data_type => 'string',
        description => 'The color of the text, in hex format, without the #.',
        required => '0',
    },
    'fontsize' => {
        data_type => 'int',
        description => 'The size of the text, in points.',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Either vertical or horizontal, default horizontal.',
        required => '0',
    },
    'width' => {
        data_type => 'int',
        description => 'The image width in pixels (or height if the direction is vertical).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'texttoimage' } = { 
        summary => 'Generates a dynamic image from text',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub texttoimage {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling texttoimage");
    }

    # verify the required parameter 'text' is set
    unless (exists $args{'text'}) {
      croak("Missing the required parameter 'text' when calling texttoimage");
    }

    # parse inputs
    my $_resource_path = '/texttoimage';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    # query params
    if ( exists $args{'fontcolor'}) {
        $query_params->{'fontcolor'} = $self->{api_client}->to_query_value($args{'fontcolor'});
    }

    # query params
    if ( exists $args{'fontsize'}) {
        $query_params->{'fontsize'} = $self->{api_client}->to_query_value($args{'fontsize'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    # query params
    if ( exists $args{'width'}) {
        $query_params->{'width'} = $self->{api_client}->to_query_value($args{'width'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# translationget
#
# Gets the translations of the specified values
# 
# @param string $token The authentication token. (required)
# @param string $universal Pipe separated list of universal text to be translated. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'universal' => {
        data_type => 'string',
        description => 'Pipe separated list of universal text to be translated.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'translationget' } = { 
        summary => 'Gets the translations of the specified values',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub translationget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling translationget");
    }

    # verify the required parameter 'universal' is set
    unless (exists $args{'universal'}) {
      croak("Missing the required parameter 'universal' when calling translationget");
    }

    # parse inputs
    my $_resource_path = '/translationget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'universal'}) {
        $query_params->{'universal'} = $self->{api_client}->to_query_value($args{'universal'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# translationgetcachefile
#
# Get the file containing the translations
# 
# @param string $token The authentication token. (optional)
# @param string $account The id of the account whose translations file has to be retrieved. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '0',
    },
    'account' => {
        data_type => 'string',
        description => 'The id of the account whose translations file has to be retrieved.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'translationgetcachefile' } = { 
        summary => 'Get the file containing the translations',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub translationgetcachefile {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/translationgetcachefile';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'account'}) {
        $query_params->{'account'} = $self->{api_client}->to_query_value($args{'account'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# translationlist
#
# Lists all the available translations in the system
# 
# @param string $token The authentication token. (required)
# @param string $filter Text to search/filter translations. (optional)
# @param boolean $nondefaultonly If true then it returns only the terms translated. Otherwise, it returns all. (optional)
# @param boolean $appdefaultasuniversal If true then it uses the app default translation as the universal term. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'filter' => {
        data_type => 'string',
        description => 'Text to search/filter translations.',
        required => '0',
    },
    'nondefaultonly' => {
        data_type => 'boolean',
        description => 'If true then it returns only the terms translated. Otherwise, it returns all.',
        required => '0',
    },
    'appdefaultasuniversal' => {
        data_type => 'boolean',
        description => 'If true then it uses the app default translation as the universal term.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'translationlist' } = { 
        summary => 'Lists all the available translations in the system',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub translationlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling translationlist");
    }

    # parse inputs
    my $_resource_path = '/translationlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    # query params
    if ( exists $args{'nondefaultonly'}) {
        $query_params->{'nondefaultonly'} = $self->{api_client}->to_query_value($args{'nondefaultonly'});
    }

    # query params
    if ( exists $args{'appdefaultasuniversal'}) {
        $query_params->{'appdefaultasuniversal'} = $self->{api_client}->to_query_value($args{'appdefaultasuniversal'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# translationsave
#
# Edit a translation
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'translationsave' } = { 
        summary => 'Edit a translation',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub translationsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/translationsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userchangepwd
#
# Change user's own password
# 
# @param string $token The authentication token. (required)
# @param string $oldpass The old password of the authenticated user. (required)
# @param string $newpass The new password of the authenticated user. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'oldpass' => {
        data_type => 'string',
        description => 'The old password of the authenticated user.',
        required => '1',
    },
    'newpass' => {
        data_type => 'string',
        description => 'The new password of the authenticated user.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'userchangepwd' } = { 
        summary => 'Change user&#39;s own password',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userchangepwd {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userchangepwd");
    }

    # verify the required parameter 'oldpass' is set
    unless (exists $args{'oldpass'}) {
      croak("Missing the required parameter 'oldpass' when calling userchangepwd");
    }

    # verify the required parameter 'newpass' is set
    unless (exists $args{'newpass'}) {
      croak("Missing the required parameter 'newpass' when calling userchangepwd");
    }

    # parse inputs
    my $_resource_path = '/userchangepwd';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'oldpass'}) {
        $query_params->{'oldpass'} = $self->{api_client}->to_query_value($args{'oldpass'});
    }

    # query params
    if ( exists $args{'newpass'}) {
        $query_params->{'newpass'} = $self->{api_client}->to_query_value($args{'newpass'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userchangepwdbyreq
#
# Changes the user password using a change password request id
# 
# @param string $changereq The change password request ID sent by email to the user. (required)
# @param string $newpass The new password of the user. (required)
{
    my $params = {
    'changereq' => {
        data_type => 'string',
        description => 'The change password request ID sent by email to the user.',
        required => '1',
    },
    'newpass' => {
        data_type => 'string',
        description => 'The new password of the user.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'userchangepwdbyreq' } = { 
        summary => 'Changes the user password using a change password request id',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userchangepwdbyreq {
    my ($self, %args) = @_;

    # verify the required parameter 'changereq' is set
    unless (exists $args{'changereq'}) {
      croak("Missing the required parameter 'changereq' when calling userchangepwdbyreq");
    }

    # verify the required parameter 'newpass' is set
    unless (exists $args{'newpass'}) {
      croak("Missing the required parameter 'newpass' when calling userchangepwdbyreq");
    }

    # parse inputs
    my $_resource_path = '/userchangepwdbyreq';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'changereq'}) {
        $query_params->{'changereq'} = $self->{api_client}->to_query_value($args{'changereq'});
    }

    # query params
    if ( exists $args{'newpass'}) {
        $query_params->{'newpass'} = $self->{api_client}->to_query_value($args{'newpass'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userdelete
#
# Delete a user
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the user to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the user to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'userdelete' } = { 
        summary => 'Delete a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling userdelete");
    }

    # parse inputs
    my $_resource_path = '/userdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userfindsimilar
#
# Finds similar users to prevent duplicates
# 
# @param string $token The authentication token. (required)
# @param string $currentid The id of the current user. (optional)
# @param string $phonenumber A phone number to search for similar users. (optional)
# @param string $cardnumber A card number to search for similar users. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'currentid' => {
        data_type => 'string',
        description => 'The id of the current user.',
        required => '0',
    },
    'phonenumber' => {
        data_type => 'string',
        description => 'A phone number to search for similar users.',
        required => '0',
    },
    'cardnumber' => {
        data_type => 'string',
        description => 'A card number to search for similar users.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'userfindsimilar' } = { 
        summary => 'Finds similar users to prevent duplicates',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userfindsimilar {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userfindsimilar");
    }

    # parse inputs
    my $_resource_path = '/userfindsimilar';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'currentid'}) {
        $query_params->{'currentid'} = $self->{api_client}->to_query_value($args{'currentid'});
    }

    # query params
    if ( exists $args{'phonenumber'}) {
        $query_params->{'phonenumber'} = $self->{api_client}->to_query_value($args{'phonenumber'});
    }

    # query params
    if ( exists $args{'cardnumber'}) {
        $query_params->{'cardnumber'} = $self->{api_client}->to_query_value($args{'cardnumber'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userget
#
# Search and view details of a user
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the user to get. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the user to get.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'userget' } = { 
        summary => 'Search and view details of a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling userget");
    }

    # parse inputs
    my $_resource_path = '/userget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergetbycard
#
# Search user by card number
# 
# @param string $token The authentication token. (required)
# @param string $card The card number of the user to get. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'card' => {
        data_type => 'string',
        description => 'The card number of the user to get.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergetbycard' } = { 
        summary => 'Search user by card number',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergetbycard {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergetbycard");
    }

    # verify the required parameter 'card' is set
    unless (exists $args{'card'}) {
      croak("Missing the required parameter 'card' when calling usergetbycard");
    }

    # parse inputs
    my $_resource_path = '/usergetbycard';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'card'}) {
        $query_params->{'card'} = $self->{api_client}->to_query_value($args{'card'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroupaddmember
#
# Add a user to a group
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to add. (required)
# @param string $groupid The id of the group. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to add.',
        required => '1',
    },
    'groupid' => {
        data_type => 'string',
        description => 'The id of the group.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroupaddmember' } = { 
        summary => 'Add a user to a group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroupaddmember {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergroupaddmember");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling usergroupaddmember");
    }

    # verify the required parameter 'groupid' is set
    unless (exists $args{'groupid'}) {
      croak("Missing the required parameter 'groupid' when calling usergroupaddmember");
    }

    # parse inputs
    my $_resource_path = '/usergroupaddmember';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'groupid'}) {
        $query_params->{'groupid'} = $self->{api_client}->to_query_value($args{'groupid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroupdelete
#
# Delete a group
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the group to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the group to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroupdelete' } = { 
        summary => 'Delete a group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroupdelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergroupdelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling usergroupdelete");
    }

    # parse inputs
    my $_resource_path = '/usergroupdelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroupget
#
# Search and view details of a user group
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the user group to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the user group to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroupget' } = { 
        summary => 'Search and view details of a user group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroupget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergroupget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling usergroupget");
    }

    # parse inputs
    my $_resource_path = '/usergroupget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroupgetmembers
#
# View the members of a user group
# 
# @param string $token The authentication token. (required)
# @param string $groupid The id of the user group to get. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'groupid' => {
        data_type => 'string',
        description => 'The id of the user group to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroupgetmembers' } = { 
        summary => 'View the members of a user group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroupgetmembers {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergroupgetmembers");
    }

    # verify the required parameter 'groupid' is set
    unless (exists $args{'groupid'}) {
      croak("Missing the required parameter 'groupid' when calling usergroupgetmembers");
    }

    # parse inputs
    my $_resource_path = '/usergroupgetmembers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'groupid'}) {
        $query_params->{'groupid'} = $self->{api_client}->to_query_value($args{'groupid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroupgetuser
#
# View the groups which a user is registered to
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to get his groups. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to get his groups.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroupgetuser' } = { 
        summary => 'View the groups which a user is registered to',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroupgetuser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergroupgetuser");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling usergroupgetuser");
    }

    # parse inputs
    my $_resource_path = '/usergroupgetuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergrouplist
#
# View a list of user groups
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (optional)
# @param int $count The max number of records to return. (optional)
# @param string $type The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergrouplist' } = { 
        summary => 'View a list of user groups',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergrouplist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergrouplist");
    }

    # parse inputs
    my $_resource_path = '/usergrouplist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergrouprefresh
#
# Refresh the dynamic group
# 
# @param string $token The authentication token. (required)
# @param string $group The ID of the group to refresh. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'group' => {
        data_type => 'string',
        description => 'The ID of the group to refresh.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergrouprefresh' } = { 
        summary => 'Refresh the dynamic group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergrouprefresh {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergrouprefresh");
    }

    # verify the required parameter 'group' is set
    unless (exists $args{'group'}) {
      croak("Missing the required parameter 'group' when calling usergrouprefresh");
    }

    # parse inputs
    my $_resource_path = '/usergrouprefresh';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'group'}) {
        $query_params->{'group'} = $self->{api_client}->to_query_value($args{'group'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroupremovemember
#
# Remove a user from a group
# 
# @param string $token The authentication token. (required)
# @param string $userid The id of the user to remove. (required)
# @param string $groupid The id of the group. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'The id of the user to remove.',
        required => '1',
    },
    'groupid' => {
        data_type => 'string',
        description => 'The id of the group.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroupremovemember' } = { 
        summary => 'Remove a user from a group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroupremovemember {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergroupremovemember");
    }

    # verify the required parameter 'userid' is set
    unless (exists $args{'userid'}) {
      croak("Missing the required parameter 'userid' when calling usergroupremovemember");
    }

    # verify the required parameter 'groupid' is set
    unless (exists $args{'groupid'}) {
      croak("Missing the required parameter 'groupid' when calling usergroupremovemember");
    }

    # parse inputs
    my $_resource_path = '/usergroupremovemember';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'groupid'}) {
        $query_params->{'groupid'} = $self->{api_client}->to_query_value($args{'groupid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroupsave
#
# Create or edit a group
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroupsave' } = { 
        summary => 'Create or edit a group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroupsave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/usergroupsave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergrouptagmembers
#
# Assign tags to the members of a specified group
# 
# @param string $token The authentication token. (required)
# @param string $group The id of the group to save whose members have to be tagged. (required)
# @param string $tags The tags to assign to the members of the specified group, in JSON format. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'group' => {
        data_type => 'string',
        description => 'The id of the group to save whose members have to be tagged.',
        required => '1',
    },
    'tags' => {
        data_type => 'string',
        description => 'The tags to assign to the members of the specified group, in JSON format.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergrouptagmembers' } = { 
        summary => 'Assign tags to the members of a specified group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergrouptagmembers {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergrouptagmembers");
    }

    # verify the required parameter 'group' is set
    unless (exists $args{'group'}) {
      croak("Missing the required parameter 'group' when calling usergrouptagmembers");
    }

    # parse inputs
    my $_resource_path = '/usergrouptagmembers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'group'}) {
        $query_params->{'group'} = $self->{api_client}->to_query_value($args{'group'});
    }

    # query params
    if ( exists $args{'tags'}) {
        $query_params->{'tags'} = $self->{api_client}->to_query_value($args{'tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usergroupuntagmembers
#
# Unassign tags from the members of a specified group
# 
# @param string $token The authentication token. (required)
# @param string $group The id of the group to save whose members have to be untagged. (required)
# @param string $tags The tags to unassign from the members of the specified group, in JSON format. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'group' => {
        data_type => 'string',
        description => 'The id of the group to save whose members have to be untagged.',
        required => '1',
    },
    'tags' => {
        data_type => 'string',
        description => 'The tags to unassign from the members of the specified group, in JSON format.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usergroupuntagmembers' } = { 
        summary => 'Unassign tags from the members of a specified group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usergroupuntagmembers {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usergroupuntagmembers");
    }

    # verify the required parameter 'group' is set
    unless (exists $args{'group'}) {
      croak("Missing the required parameter 'group' when calling usergroupuntagmembers");
    }

    # parse inputs
    my $_resource_path = '/usergroupuntagmembers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'group'}) {
        $query_params->{'group'} = $self->{api_client}->to_query_value($args{'group'});
    }

    # query params
    if ( exists $args{'tags'}) {
        $query_params->{'tags'} = $self->{api_client}->to_query_value($args{'tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userlist
#
# View a list of users
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $roleid The id of the role to filter users by, or empty to return all users. (optional)
# @param string $onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned. (optional)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'roleid' => {
        data_type => 'string',
        description => 'The id of the role to filter users by, or empty to return all users.',
        required => '0',
    },
    'onlywithoutcard' => {
        data_type => 'string',
        description => 'If is 1 then only the users without a card are returned, otherwise all users are returned.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'userlist' } = { 
        summary => 'View a list of users',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userlist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userlist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling userlist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling userlist");
    }

    # parse inputs
    my $_resource_path = '/userlist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'roleid'}) {
        $query_params->{'roleid'} = $self->{api_client}->to_query_value($args{'roleid'});
    }

    # query params
    if ( exists $args{'onlywithoutcard'}) {
        $query_params->{'onlywithoutcard'} = $self->{api_client}->to_query_value($args{'onlywithoutcard'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userloadphoto
#
# Upload a photo for a specific user
# 
# @param string $token The authentication token. (required)
# @param string $upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
# @param string $filename The local name of the uploaded file. For later reference. (optional)
# @param string $userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;. (optional)
# @param boolean $automatch Set this to true to find the specific user based on the file name.  (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'upload' => {
        data_type => 'string',
        description => 'Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).',
        required => '1',
    },
    'filename' => {
        data_type => 'string',
        description => 'The local name of the uploaded file. For later reference.',
        required => '0',
    },
    'userid' => {
        data_type => 'string',
        description => 'The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;.',
        required => '0',
    },
    'automatch' => {
        data_type => 'boolean',
        description => 'Set this to true to find the specific user based on the file name. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'userloadphoto' } = { 
        summary => 'Upload a photo for a specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userloadphoto {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userloadphoto");
    }

    # verify the required parameter 'upload' is set
    unless (exists $args{'upload'}) {
      croak("Missing the required parameter 'upload' when calling userloadphoto");
    }

    # parse inputs
    my $_resource_path = '/userloadphoto';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'upload'}) {
        $query_params->{'upload'} = $self->{api_client}->to_query_value($args{'upload'});
    }

    # query params
    if ( exists $args{'filename'}) {
        $query_params->{'filename'} = $self->{api_client}->to_query_value($args{'filename'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'automatch'}) {
        $query_params->{'automatch'} = $self->{api_client}->to_query_value($args{'automatch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usermovedata
#
# Move data between users
# 
# @param string $token The authentication token. (required)
# @param string $source The id of the user that is the source of the data. (required)
# @param string $destination The id of the user that is the destination of the data. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'source' => {
        data_type => 'string',
        description => 'The id of the user that is the source of the data.',
        required => '1',
    },
    'destination' => {
        data_type => 'string',
        description => 'The id of the user that is the destination of the data.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'usermovedata' } = { 
        summary => 'Move data between users',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usermovedata {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usermovedata");
    }

    # verify the required parameter 'source' is set
    unless (exists $args{'source'}) {
      croak("Missing the required parameter 'source' when calling usermovedata");
    }

    # verify the required parameter 'destination' is set
    unless (exists $args{'destination'}) {
      croak("Missing the required parameter 'destination' when calling usermovedata");
    }

    # parse inputs
    my $_resource_path = '/usermovedata';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'source'}) {
        $query_params->{'source'} = $self->{api_client}->to_query_value($args{'source'});
    }

    # query params
    if ( exists $args{'destination'}) {
        $query_params->{'destination'} = $self->{api_client}->to_query_value($args{'destination'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userprofiledelete
#
# Delete a user profile
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the user profile to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the user profile to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'userprofiledelete' } = { 
        summary => 'Delete a user profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userprofiledelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userprofiledelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling userprofiledelete");
    }

    # parse inputs
    my $_resource_path = '/userprofiledelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userprofileget
#
# View a specific user profile
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the profile question set. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the profile question set.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'userprofileget' } = { 
        summary => 'View a specific user profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userprofileget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userprofileget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling userprofileget");
    }

    # parse inputs
    my $_resource_path = '/userprofileget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userprofilegetallview
#
# Shows the profile for a specific (or current) user, based on each profile questionnaire questions.
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the user to view, or empty for current user. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the user to view, or empty for current user.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'userprofilegetallview' } = { 
        summary => 'Shows the profile for a specific (or current) user, based on each profile questionnaire questions.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userprofilegetallview {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userprofilegetallview");
    }

    # parse inputs
    my $_resource_path = '/userprofilegetallview';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userprofilelist
#
# View the list of user profiles
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (optional)
# @param int $count The max number of records to return. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'userprofilelist' } = { 
        summary => 'View the list of user profiles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userprofilelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userprofilelist");
    }

    # parse inputs
    my $_resource_path = '/userprofilelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userprofilelistquestions
#
# Gets the list of all the available user questions
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'userprofilelistquestions' } = { 
        summary => 'Gets the list of all the available user questions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userprofilelistquestions {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userprofilelistquestions");
    }

    # parse inputs
    my $_resource_path = '/userprofilelistquestions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userprofilepreparestats
#
# Gets the statistics of a user group
# 
# @param string $token The authentication token. (required)
# @param string $params The ID of the group, specified as &#39;group&#x3D;...&#39; (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'params' => {
        data_type => 'string',
        description => 'The ID of the group, specified as &#39;group&#x3D;...&#39;',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'userprofilepreparestats' } = { 
        summary => 'Gets the statistics of a user group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userprofilepreparestats {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling userprofilepreparestats");
    }

    # parse inputs
    my $_resource_path = '/userprofilepreparestats';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userprofilesave
#
# Create or edit user profile questions
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'userprofilesave' } = { 
        summary => 'Create or edit user profile questions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userprofilesave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/userprofilesave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userprofilesaveanswers
#
# Saves the profile for a specific (or current) user. Additional security applies on a per profile basis.
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'userprofilesaveanswers' } = { 
        summary => 'Saves the profile for a specific (or current) user. Additional security applies on a per profile basis.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userprofilesaveanswers {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/userprofilesaveanswers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# userrequestpwdchange
#
# Requests a password change
# 
# @param string $domain The domain of the account where the user exists. (required)
# @param string $email The email of the user. (required)
{
    my $params = {
    'domain' => {
        data_type => 'string',
        description => 'The domain of the account where the user exists.',
        required => '1',
    },
    'email' => {
        data_type => 'string',
        description => 'The email of the user.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'userrequestpwdchange' } = { 
        summary => 'Requests a password change',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub userrequestpwdchange {
    my ($self, %args) = @_;

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling userrequestpwdchange");
    }

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling userrequestpwdchange");
    }

    # parse inputs
    my $_resource_path = '/userrequestpwdchange';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'domain'}) {
        $query_params->{'domain'} = $self->{api_client}->to_query_value($args{'domain'});
    }

    # query params
    if ( exists $args{'email'}) {
        $query_params->{'email'} = $self->{api_client}->to_query_value($args{'email'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usersave
#
# Create or edit a user
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usersave' } = { 
        summary => 'Create or edit a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usersave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/usersave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usersavepwdchange
#
# Send email to the specified user(s) to set/change their passwords
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usersavepwdchange' } = { 
        summary => 'Send email to the specified user(s) to set/change their passwords',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usersavepwdchange {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/usersavepwdchange';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usersettingsget
#
# Lists available user settings
# 
# @param string $token The authentication token. (required)
# @param string $keys Setting key to get. Can be multiple separated by commas. (required)
# @param string $user The user id whose settings have to be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'keys' => {
        data_type => 'string',
        description => 'Setting key to get. Can be multiple separated by commas.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The user id whose settings have to be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usersettingsget' } = { 
        summary => 'Lists available user settings',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usersettingsget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usersettingsget");
    }

    # verify the required parameter 'keys' is set
    unless (exists $args{'keys'}) {
      croak("Missing the required parameter 'keys' when calling usersettingsget");
    }

    # parse inputs
    my $_resource_path = '/usersettingsget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'keys'}) {
        $query_params->{'keys'} = $self->{api_client}->to_query_value($args{'keys'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usersettingsgetmultiple
#
# Get multiple user settings
# 
# @param string $token The authentication token. (required)
# @param string $keys Setting key to get. Can be multiple separated by commas. (required)
# @param string $user The user id whose settings have to be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'keys' => {
        data_type => 'string',
        description => 'Setting key to get. Can be multiple separated by commas.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The user id whose settings have to be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usersettingsgetmultiple' } = { 
        summary => 'Get multiple user settings',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usersettingsgetmultiple {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling usersettingsgetmultiple");
    }

    # verify the required parameter 'keys' is set
    unless (exists $args{'keys'}) {
      croak("Missing the required parameter 'keys' when calling usersettingsgetmultiple");
    }

    # parse inputs
    my $_resource_path = '/usersettingsgetmultiple';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'keys'}) {
        $query_params->{'keys'} = $self->{api_client}->to_query_value($args{'keys'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usersettingssave
#
# Saves a user setting
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usersettingssave' } = { 
        summary => 'Saves a user setting',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usersettingssave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/usersettingssave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# usersettingssavemultiple
#
# Save multiple user settings at once
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'usersettingssavemultiple' } = { 
        summary => 'Save multiple user settings at once',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub usersettingssavemultiple {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/usersettingssavemultiple';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# version
#
# Get current version information
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'version' } = { 
        summary => 'Get current version information',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub version {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling version");
    }

    # parse inputs
    my $_resource_path = '/version';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# virtuallineaddmyself
#
# Add myself to a waiting line
# 
# @param string $token The authentication token. (required)
# @param string $waitinglineid ID of the waiting line to join. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'waitinglineid' => {
        data_type => 'string',
        description => 'ID of the waiting line to join.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'virtuallineaddmyself' } = { 
        summary => 'Add myself to a waiting line',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub virtuallineaddmyself {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling virtuallineaddmyself");
    }

    # verify the required parameter 'waitinglineid' is set
    unless (exists $args{'waitinglineid'}) {
      croak("Missing the required parameter 'waitinglineid' when calling virtuallineaddmyself");
    }

    # parse inputs
    my $_resource_path = '/virtuallineaddmyself';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'waitinglineid'}) {
        $query_params->{'waitinglineid'} = $self->{api_client}->to_query_value($args{'waitinglineid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# virtuallinelist
#
# Lists waiting lines that have remote access enabled
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'virtuallinelist' } = { 
        summary => 'Lists waiting lines that have remote access enabled',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub virtuallinelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling virtuallinelist");
    }

    # parse inputs
    my $_resource_path = '/virtuallinelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# virtuallineremovemyself
#
# Remove myself from a waiting line
# 
# @param string $token The authentication token. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'virtuallineremovemyself' } = { 
        summary => 'Remove myself from a waiting line',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub virtuallineremovemyself {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling virtuallineremovemyself");
    }

    # parse inputs
    my $_resource_path = '/virtuallineremovemyself';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# waitinglineadduser
#
# Put user in a waiting line
# 
# @param string $station The id of the sign-in station. (required)
# @param string $user The user&#39;s card number. (required)
# @param string $locationid The location&#39;s id where the swipe must be saved. (optional)
# @param DateTime $time The date and time of the swipe. (optional)
# @param string $signinrole Specifies if the sign-in is for an attendee or a staff member (optional)
# @param string $roleid Specifies the role the user has selected in order to sign-in (optional)
# @param string $services The services ids the user has selected. (optional)
# @param string $eventid The id of the event the user selected. (optional)
# @param string $staff The id of the staff member the user selected. (optional)
# @param int $photosize The swiping user&#39;s photo size. (optional)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The user&#39;s card number.',
        required => '1',
    },
    'locationid' => {
        data_type => 'string',
        description => 'The location&#39;s id where the swipe must be saved.',
        required => '0',
    },
    'time' => {
        data_type => 'DateTime',
        description => 'The date and time of the swipe.',
        required => '0',
    },
    'signinrole' => {
        data_type => 'string',
        description => 'Specifies if the sign-in is for an attendee or a staff member',
        required => '0',
    },
    'roleid' => {
        data_type => 'string',
        description => 'Specifies the role the user has selected in order to sign-in',
        required => '0',
    },
    'services' => {
        data_type => 'string',
        description => 'The services ids the user has selected.',
        required => '0',
    },
    'eventid' => {
        data_type => 'string',
        description => 'The id of the event the user selected.',
        required => '0',
    },
    'staff' => {
        data_type => 'string',
        description => 'The id of the staff member the user selected.',
        required => '0',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The swiping user&#39;s photo size.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'waitinglineadduser' } = { 
        summary => 'Put user in a waiting line',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub waitinglineadduser {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling waitinglineadduser");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling waitinglineadduser");
    }

    # parse inputs
    my $_resource_path = '/waitinglineadduser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'locationid'}) {
        $query_params->{'locationid'} = $self->{api_client}->to_query_value($args{'locationid'});
    }

    # query params
    if ( exists $args{'time'}) {
        $query_params->{'time'} = $self->{api_client}->to_query_value($args{'time'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'signinrole'}) {
        $query_params->{'signinrole'} = $self->{api_client}->to_query_value($args{'signinrole'});
    }

    # query params
    if ( exists $args{'roleid'}) {
        $query_params->{'roleid'} = $self->{api_client}->to_query_value($args{'roleid'});
    }

    # query params
    if ( exists $args{'services'}) {
        $query_params->{'services'} = $self->{api_client}->to_query_value($args{'services'});
    }

    # query params
    if ( exists $args{'eventid'}) {
        $query_params->{'eventid'} = $self->{api_client}->to_query_value($args{'eventid'});
    }

    # query params
    if ( exists $args{'staff'}) {
        $query_params->{'staff'} = $self->{api_client}->to_query_value($args{'staff'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# waitinglinedelete
#
# Delete a waiting line
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the line to delete. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the line to delete.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'waitinglinedelete' } = { 
        summary => 'Delete a waiting line',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub waitinglinedelete {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling waitinglinedelete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling waitinglinedelete");
    }

    # parse inputs
    my $_resource_path = '/waitinglinedelete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# waitinglineget
#
# View details of a waiting line
# 
# @param string $token The authentication token. (required)
# @param string $id The id of the waiting line to get. (required)
# @param int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the waiting line to get.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'waitinglineget' } = { 
        summary => 'View details of a waiting line',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub waitinglineget {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling waitinglineget");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling waitinglineget");
    }

    # parse inputs
    my $_resource_path = '/waitinglineget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# waitinglineisuserin
#
# Check whether a user is in a waiting line, signed-in or is not in the area
# 
# @param string $station The id of the sign-in station. (required)
# @param DateTime $time The date and time of the swipe. (required)
# @param string $user The card number of the user. (required)
# @param string $location The id of the location the user picked. (optional)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station.',
        required => '1',
    },
    'time' => {
        data_type => 'DateTime',
        description => 'The date and time of the swipe.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The card number of the user.',
        required => '1',
    },
    'location' => {
        data_type => 'string',
        description => 'The id of the location the user picked.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'waitinglineisuserin' } = { 
        summary => 'Check whether a user is in a waiting line, signed-in or is not in the area',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub waitinglineisuserin {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling waitinglineisuserin");
    }

    # verify the required parameter 'time' is set
    unless (exists $args{'time'}) {
      croak("Missing the required parameter 'time' when calling waitinglineisuserin");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling waitinglineisuserin");
    }

    # parse inputs
    my $_resource_path = '/waitinglineisuserin';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'time'}) {
        $query_params->{'time'} = $self->{api_client}->to_query_value($args{'time'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# waitinglinelist
#
# View a list of waiting lines
# 
# @param string $token The authentication token. (required)
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'waitinglinelist' } = { 
        summary => 'View a list of waiting lines',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub waitinglinelist {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling waitinglinelist");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling waitinglinelist");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling waitinglinelist");
    }

    # parse inputs
    my $_resource_path = '/waitinglinelist';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# waitinglineremoveuser
#
# Remove a user from a waiting line
# 
# @param string $token The authentication token. (required)
# @param string $waitingline The id of the waiting line whose item has to be removed. (required)
# @param string $itemid The ID of the item that has to be removed. (required)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'waitingline' => {
        data_type => 'string',
        description => 'The id of the waiting line whose item has to be removed.',
        required => '1',
    },
    'itemid' => {
        data_type => 'string',
        description => 'The ID of the item that has to be removed.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'waitinglineremoveuser' } = { 
        summary => 'Remove a user from a waiting line',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub waitinglineremoveuser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling waitinglineremoveuser");
    }

    # verify the required parameter 'waitingline' is set
    unless (exists $args{'waitingline'}) {
      croak("Missing the required parameter 'waitingline' when calling waitinglineremoveuser");
    }

    # verify the required parameter 'itemid' is set
    unless (exists $args{'itemid'}) {
      croak("Missing the required parameter 'itemid' when calling waitinglineremoveuser");
    }

    # parse inputs
    my $_resource_path = '/waitinglineremoveuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'waitingline'}) {
        $query_params->{'waitingline'} = $self->{api_client}->to_query_value($args{'waitingline'});
    }

    # query params
    if ( exists $args{'itemid'}) {
        $query_params->{'itemid'} = $self->{api_client}->to_query_value($args{'itemid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# waitinglinesave
#
# Create or edit a waiting line
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'waitinglinesave' } = { 
        summary => 'Create or edit a waiting line',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub waitinglinesave {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/waitinglinesave';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# waitinglinesigninuser
#
# Sign a user in from a waiting line
# 
# @param string $token The authentication token. (required)
# @param string $waitingline The id of the waiting line whose item needs to be signed-in. (required)
# @param string $itemid The ID of the item that has to be signed-in. (required)
# @param string $staff The id of the staff member selected to sign-in. (required)
# @param int $photosize The swiping user&#39;s photo size. (optional)
{
    my $params = {
    'token' => {
        data_type => 'string',
        description => 'The authentication token.',
        required => '1',
    },
    'waitingline' => {
        data_type => 'string',
        description => 'The id of the waiting line whose item needs to be signed-in.',
        required => '1',
    },
    'itemid' => {
        data_type => 'string',
        description => 'The ID of the item that has to be signed-in.',
        required => '1',
    },
    'staff' => {
        data_type => 'string',
        description => 'The id of the staff member selected to sign-in.',
        required => '1',
    },
    'photosize' => {
        data_type => 'int',
        description => 'The swiping user&#39;s photo size.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'waitinglinesigninuser' } = { 
        summary => 'Sign a user in from a waiting line',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub waitinglinesigninuser {
    my ($self, %args) = @_;

    # verify the required parameter 'token' is set
    unless (exists $args{'token'}) {
      croak("Missing the required parameter 'token' when calling waitinglinesigninuser");
    }

    # verify the required parameter 'waitingline' is set
    unless (exists $args{'waitingline'}) {
      croak("Missing the required parameter 'waitingline' when calling waitinglinesigninuser");
    }

    # verify the required parameter 'itemid' is set
    unless (exists $args{'itemid'}) {
      croak("Missing the required parameter 'itemid' when calling waitinglinesigninuser");
    }

    # verify the required parameter 'staff' is set
    unless (exists $args{'staff'}) {
      croak("Missing the required parameter 'staff' when calling waitinglinesigninuser");
    }

    # parse inputs
    my $_resource_path = '/waitinglinesigninuser';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'waitingline'}) {
        $query_params->{'waitingline'} = $self->{api_client}->to_query_value($args{'waitingline'});
    }

    # query params
    if ( exists $args{'itemid'}) {
        $query_params->{'itemid'} = $self->{api_client}->to_query_value($args{'itemid'});
    }

    # query params
    if ( exists $args{'staff'}) {
        $query_params->{'staff'} = $self->{api_client}->to_query_value($args{'staff'});
    }

    # query params
    if ( exists $args{'photosize'}) {
        $query_params->{'photosize'} = $self->{api_client}->to_query_value($args{'photosize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
