/*
 * AccuCampus OpenAPI 3 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for actionassignmentdelete
     * @param token The authentication token. (required)
     * @param id The id of the action assignment to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentdeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionassignmentdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionassignmentdeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actionassignmentdelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling actionassignmentdelete(Async)");
        }
        

        okhttp3.Call localVarCall = actionassignmentdeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Remove an action item from an action plan
     * Allows a user to remove an action item from a user&#39;s action plan.
     * @param token The authentication token. (required)
     * @param id The id of the action assignment to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionassignmentdelete(String token, UUID id) throws ApiException {
        actionassignmentdeleteWithHttpInfo(token, id);
    }

    /**
     * Remove an action item from an action plan
     * Allows a user to remove an action item from a user&#39;s action plan.
     * @param token The authentication token. (required)
     * @param id The id of the action assignment to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionassignmentdeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = actionassignmentdeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove an action item from an action plan (asynchronously)
     * Allows a user to remove an action item from a user&#39;s action plan.
     * @param token The authentication token. (required)
     * @param id The id of the action assignment to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentdeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionassignmentdeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionassignmentget
     * @param token The authentication token. (required)
     * @param id The id of the action assignment to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentgetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionassignmentget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionassignmentgetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actionassignmentget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling actionassignmentget(Async)");
        }
        

        okhttp3.Call localVarCall = actionassignmentgetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of an action item assigned to a user
     * Allows the user to view an individual action item and its details, minus all the action item&#39;s updates.
     * @param token The authentication token. (required)
     * @param id The id of the action assignment to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionassignmentget(String token, UUID id) throws ApiException {
        actionassignmentgetWithHttpInfo(token, id);
    }

    /**
     * Search and view details of an action item assigned to a user
     * Allows the user to view an individual action item and its details, minus all the action item&#39;s updates.
     * @param token The authentication token. (required)
     * @param id The id of the action assignment to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionassignmentgetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = actionassignmentgetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of an action item assigned to a user (asynchronously)
     * Allows the user to view an individual action item and its details, minus all the action item&#39;s updates.
     * @param token The authentication token. (required)
     * @param id The id of the action assignment to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentgetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionassignmentgetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionassignmentlist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param assignee The assignee&#39;s id to filter the assignments. (optional)
     * @param status The status to filter the assignments. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentlistCall(String token, Integer from, Integer count, Integer assignee, Integer status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionassignmentlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (assignee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignee", assignee));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionassignmentlistValidateBeforeCall(String token, Integer from, Integer count, Integer assignee, Integer status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actionassignmentlist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling actionassignmentlist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling actionassignmentlist(Async)");
        }
        

        okhttp3.Call localVarCall = actionassignmentlistCall(token, from, count, assignee, status, _callback);
        return localVarCall;

    }

    /**
     * View a list of action items in a user&#39;s plan
     * Allows the user to view the list of all action items for a specified user.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param assignee The assignee&#39;s id to filter the assignments. (optional)
     * @param status The status to filter the assignments. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionassignmentlist(String token, Integer from, Integer count, Integer assignee, Integer status) throws ApiException {
        actionassignmentlistWithHttpInfo(token, from, count, assignee, status);
    }

    /**
     * View a list of action items in a user&#39;s plan
     * Allows the user to view the list of all action items for a specified user.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param assignee The assignee&#39;s id to filter the assignments. (optional)
     * @param status The status to filter the assignments. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionassignmentlistWithHttpInfo(String token, Integer from, Integer count, Integer assignee, Integer status) throws ApiException {
        okhttp3.Call localVarCall = actionassignmentlistValidateBeforeCall(token, from, count, assignee, status, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of action items in a user&#39;s plan (asynchronously)
     * Allows the user to view the list of all action items for a specified user.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param assignee The assignee&#39;s id to filter the assignments. (optional)
     * @param status The status to filter the assignments. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentlistAsync(String token, Integer from, Integer count, Integer assignee, Integer status, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionassignmentlistValidateBeforeCall(token, from, count, assignee, status, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionassignmentlisthistory
     * @param token The authentication token. (required)
     * @param actionassignment The action assignment&#39;s id whose history the user wants to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentlisthistoryCall(String token, UUID actionassignment, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionassignmentlisthistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (actionassignment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actionassignment", actionassignment));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionassignmentlisthistoryValidateBeforeCall(String token, UUID actionassignment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actionassignmentlisthistory(Async)");
        }
        
        // verify the required parameter 'actionassignment' is set
        if (actionassignment == null) {
            throw new ApiException("Missing the required parameter 'actionassignment' when calling actionassignmentlisthistory(Async)");
        }
        

        okhttp3.Call localVarCall = actionassignmentlisthistoryCall(token, actionassignment, _callback);
        return localVarCall;

    }

    /**
     * View the history of an action item assigned to a user
     * Allows the user to view an individual action plan and its details, including all the action plan&#39;s updates.
     * @param token The authentication token. (required)
     * @param actionassignment The action assignment&#39;s id whose history the user wants to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionassignmentlisthistory(String token, UUID actionassignment) throws ApiException {
        actionassignmentlisthistoryWithHttpInfo(token, actionassignment);
    }

    /**
     * View the history of an action item assigned to a user
     * Allows the user to view an individual action plan and its details, including all the action plan&#39;s updates.
     * @param token The authentication token. (required)
     * @param actionassignment The action assignment&#39;s id whose history the user wants to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionassignmentlisthistoryWithHttpInfo(String token, UUID actionassignment) throws ApiException {
        okhttp3.Call localVarCall = actionassignmentlisthistoryValidateBeforeCall(token, actionassignment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the history of an action item assigned to a user (asynchronously)
     * Allows the user to view an individual action plan and its details, including all the action plan&#39;s updates.
     * @param token The authentication token. (required)
     * @param actionassignment The action assignment&#39;s id whose history the user wants to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentlisthistoryAsync(String token, UUID actionassignment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionassignmentlisthistoryValidateBeforeCall(token, actionassignment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionassignmentlistmine
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param status The status to filter the assignments. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentlistmineCall(String token, Integer from, Integer count, Integer status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionassignmentlistmine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionassignmentlistmineValidateBeforeCall(String token, Integer from, Integer count, Integer status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actionassignmentlistmine(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling actionassignmentlistmine(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling actionassignmentlistmine(Async)");
        }
        

        okhttp3.Call localVarCall = actionassignmentlistmineCall(token, from, count, status, _callback);
        return localVarCall;

    }

    /**
     * List public action assignments assigned to the logged user
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param status The status to filter the assignments. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionassignmentlistmine(String token, Integer from, Integer count, Integer status) throws ApiException {
        actionassignmentlistmineWithHttpInfo(token, from, count, status);
    }

    /**
     * List public action assignments assigned to the logged user
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param status The status to filter the assignments. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionassignmentlistmineWithHttpInfo(String token, Integer from, Integer count, Integer status) throws ApiException {
        okhttp3.Call localVarCall = actionassignmentlistmineValidateBeforeCall(token, from, count, status, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List public action assignments assigned to the logged user (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param status The status to filter the assignments. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentlistmineAsync(String token, Integer from, Integer count, Integer status, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionassignmentlistmineValidateBeforeCall(token, from, count, status, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionassignmentlistpublichistory
     * @param token The authentication token. (required)
     * @param actionassignment The action assignment&#39;s id whose history the user wants to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentlistpublichistoryCall(String token, UUID actionassignment, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionassignmentlistpublichistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (actionassignment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actionassignment", actionassignment));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionassignmentlistpublichistoryValidateBeforeCall(String token, UUID actionassignment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actionassignmentlistpublichistory(Async)");
        }
        
        // verify the required parameter 'actionassignment' is set
        if (actionassignment == null) {
            throw new ApiException("Missing the required parameter 'actionassignment' when calling actionassignmentlistpublichistory(Async)");
        }
        

        okhttp3.Call localVarCall = actionassignmentlistpublichistoryCall(token, actionassignment, _callback);
        return localVarCall;

    }

    /**
     * List public action assignment history
     * 
     * @param token The authentication token. (required)
     * @param actionassignment The action assignment&#39;s id whose history the user wants to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionassignmentlistpublichistory(String token, UUID actionassignment) throws ApiException {
        actionassignmentlistpublichistoryWithHttpInfo(token, actionassignment);
    }

    /**
     * List public action assignment history
     * 
     * @param token The authentication token. (required)
     * @param actionassignment The action assignment&#39;s id whose history the user wants to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionassignmentlistpublichistoryWithHttpInfo(String token, UUID actionassignment) throws ApiException {
        okhttp3.Call localVarCall = actionassignmentlistpublichistoryValidateBeforeCall(token, actionassignment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List public action assignment history (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param actionassignment The action assignment&#39;s id whose history the user wants to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentlistpublichistoryAsync(String token, UUID actionassignment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionassignmentlistpublichistoryValidateBeforeCall(token, actionassignment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionassignmentmarkcomplete
     * @param token The authentication token. (required)
     * @param item The action item to assign. (required)
     * @param assignee The assignee of the item. (optional)
     * @param group The group to assing the item. (optional)
     * @param notes The assignment&#39;s notes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentmarkcompleteCall(String token, String item, UUID assignee, UUID group, String notes, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionassignmentmarkcomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (assignee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignee", assignee));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (item != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item", item));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionassignmentmarkcompleteValidateBeforeCall(String token, String item, UUID assignee, UUID group, String notes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actionassignmentmarkcomplete(Async)");
        }
        
        // verify the required parameter 'item' is set
        if (item == null) {
            throw new ApiException("Missing the required parameter 'item' when calling actionassignmentmarkcomplete(Async)");
        }
        

        okhttp3.Call localVarCall = actionassignmentmarkcompleteCall(token, item, assignee, group, notes, _callback);
        return localVarCall;

    }

    /**
     * Bulk complete action items
     * Allows the user to bulk complete action items.
     * @param token The authentication token. (required)
     * @param item The action item to assign. (required)
     * @param assignee The assignee of the item. (optional)
     * @param group The group to assing the item. (optional)
     * @param notes The assignment&#39;s notes. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionassignmentmarkcomplete(String token, String item, UUID assignee, UUID group, String notes) throws ApiException {
        actionassignmentmarkcompleteWithHttpInfo(token, item, assignee, group, notes);
    }

    /**
     * Bulk complete action items
     * Allows the user to bulk complete action items.
     * @param token The authentication token. (required)
     * @param item The action item to assign. (required)
     * @param assignee The assignee of the item. (optional)
     * @param group The group to assing the item. (optional)
     * @param notes The assignment&#39;s notes. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionassignmentmarkcompleteWithHttpInfo(String token, String item, UUID assignee, UUID group, String notes) throws ApiException {
        okhttp3.Call localVarCall = actionassignmentmarkcompleteValidateBeforeCall(token, item, assignee, group, notes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Bulk complete action items (asynchronously)
     * Allows the user to bulk complete action items.
     * @param token The authentication token. (required)
     * @param item The action item to assign. (required)
     * @param assignee The assignee of the item. (optional)
     * @param group The group to assing the item. (optional)
     * @param notes The assignment&#39;s notes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentmarkcompleteAsync(String token, String item, UUID assignee, UUID group, String notes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionassignmentmarkcompleteValidateBeforeCall(token, item, assignee, group, notes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionassignmentsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/actionassignmentsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionassignmentsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = actionassignmentsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Add an action item to a user&#39;s action plan
     * Allows the user to edit or assign an action item to a user
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionassignmentsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        actionassignmentsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Add an action item to a user&#39;s action plan
     * Allows the user to edit or assign an action item to a user
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionassignmentsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = actionassignmentsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add an action item to a user&#39;s action plan (asynchronously)
     * Allows the user to edit or assign an action item to a user
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionassignmentsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionassignmentsavehistory
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentsavehistoryCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/actionassignmentsavehistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionassignmentsavehistoryValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = actionassignmentsavehistoryCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Update an action item assigned to a user
     * Allows the user to update or mark an action item as complete.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionassignmentsavehistory(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        actionassignmentsavehistoryWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Update an action item assigned to a user
     * Allows the user to update or mark an action item as complete.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionassignmentsavehistoryWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = actionassignmentsavehistoryValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an action item assigned to a user (asynchronously)
     * Allows the user to update or mark an action item as complete.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionassignmentsavehistoryAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionassignmentsavehistoryValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionitemdelete
     * @param token The authentication token. (required)
     * @param id The id of the action item to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionitemdeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionitemdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionitemdeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actionitemdelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling actionitemdelete(Async)");
        }
        

        okhttp3.Call localVarCall = actionitemdeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete an action item
     * Allows the user to delete an action item.
     * @param token The authentication token. (required)
     * @param id The id of the action item to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionitemdelete(String token, UUID id) throws ApiException {
        actionitemdeleteWithHttpInfo(token, id);
    }

    /**
     * Delete an action item
     * Allows the user to delete an action item.
     * @param token The authentication token. (required)
     * @param id The id of the action item to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionitemdeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = actionitemdeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an action item (asynchronously)
     * Allows the user to delete an action item.
     * @param token The authentication token. (required)
     * @param id The id of the action item to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionitemdeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionitemdeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionitemget
     * @param token The authentication token. (required)
     * @param id The id of the action item to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionitemgetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionitemget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionitemgetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actionitemget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling actionitemget(Async)");
        }
        

        okhttp3.Call localVarCall = actionitemgetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of an action item
     * Allows the user to view an individual action item and its details.
     * @param token The authentication token. (required)
     * @param id The id of the action item to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionitemget(String token, UUID id) throws ApiException {
        actionitemgetWithHttpInfo(token, id);
    }

    /**
     * Search and view details of an action item
     * Allows the user to view an individual action item and its details.
     * @param token The authentication token. (required)
     * @param id The id of the action item to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionitemgetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = actionitemgetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of an action item (asynchronously)
     * Allows the user to view an individual action item and its details.
     * @param token The authentication token. (required)
     * @param id The id of the action item to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionitemgetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionitemgetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionitemlist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionitemlistCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionitemlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionitemlistValidateBeforeCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actionitemlist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling actionitemlist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling actionitemlist(Async)");
        }
        

        okhttp3.Call localVarCall = actionitemlistCall(token, from, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of action items
     * Allows the user to view a list of action items
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionitemlist(String token, Integer from, Integer count) throws ApiException {
        actionitemlistWithHttpInfo(token, from, count);
    }

    /**
     * View a list of action items
     * Allows the user to view a list of action items
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionitemlistWithHttpInfo(String token, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = actionitemlistValidateBeforeCall(token, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of action items (asynchronously)
     * Allows the user to view a list of action items
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionitemlistAsync(String token, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionitemlistValidateBeforeCall(token, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionitemsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionitemsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/actionitemsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionitemsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = actionitemsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit an action item
     * Allows the user to edit an action item.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionitemsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        actionitemsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit an action item
     * Allows the user to edit an action item.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionitemsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = actionitemsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit an action item (asynchronously)
     * Allows the user to edit an action item.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionitemsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionitemsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionloglist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param user The id of the user whose action logs have to be returned. (optional)
     * @param startdate The start date of the period to filter the logs. (optional)
     * @param enddate The end date of the period to filter the logs. (optional)
     * @param resource The resource to filter the action logs. (optional)
     * @param actionfilter The action to filter the action logs. (optional)
     * @param argument The id of the entity that was the argument of the executed action. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionloglistCall(String token, Integer from, Integer count, UUID user, OffsetDateTime startdate, OffsetDateTime enddate, String resource, String actionfilter, String argument, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionloglist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (startdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startdate", startdate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource", resource));
        }

        if (actionfilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actionfilter", actionfilter));
        }

        if (argument != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("argument", argument));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionloglistValidateBeforeCall(String token, Integer from, Integer count, UUID user, OffsetDateTime startdate, OffsetDateTime enddate, String resource, String actionfilter, String argument, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actionloglist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling actionloglist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling actionloglist(Async)");
        }
        

        okhttp3.Call localVarCall = actionloglistCall(token, from, count, user, startdate, enddate, resource, actionfilter, argument, _callback);
        return localVarCall;

    }

    /**
     * View a list of users action logs
     * Allows the user to view the audit logs for the account.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param user The id of the user whose action logs have to be returned. (optional)
     * @param startdate The start date of the period to filter the logs. (optional)
     * @param enddate The end date of the period to filter the logs. (optional)
     * @param resource The resource to filter the action logs. (optional)
     * @param actionfilter The action to filter the action logs. (optional)
     * @param argument The id of the entity that was the argument of the executed action. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionloglist(String token, Integer from, Integer count, UUID user, OffsetDateTime startdate, OffsetDateTime enddate, String resource, String actionfilter, String argument) throws ApiException {
        actionloglistWithHttpInfo(token, from, count, user, startdate, enddate, resource, actionfilter, argument);
    }

    /**
     * View a list of users action logs
     * Allows the user to view the audit logs for the account.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param user The id of the user whose action logs have to be returned. (optional)
     * @param startdate The start date of the period to filter the logs. (optional)
     * @param enddate The end date of the period to filter the logs. (optional)
     * @param resource The resource to filter the action logs. (optional)
     * @param actionfilter The action to filter the action logs. (optional)
     * @param argument The id of the entity that was the argument of the executed action. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionloglistWithHttpInfo(String token, Integer from, Integer count, UUID user, OffsetDateTime startdate, OffsetDateTime enddate, String resource, String actionfilter, String argument) throws ApiException {
        okhttp3.Call localVarCall = actionloglistValidateBeforeCall(token, from, count, user, startdate, enddate, resource, actionfilter, argument, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of users action logs (asynchronously)
     * Allows the user to view the audit logs for the account.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param user The id of the user whose action logs have to be returned. (optional)
     * @param startdate The start date of the period to filter the logs. (optional)
     * @param enddate The end date of the period to filter the logs. (optional)
     * @param resource The resource to filter the action logs. (optional)
     * @param actionfilter The action to filter the action logs. (optional)
     * @param argument The id of the entity that was the argument of the executed action. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionloglistAsync(String token, Integer from, Integer count, UUID user, OffsetDateTime startdate, OffsetDateTime enddate, String resource, String actionfilter, String argument, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionloglistValidateBeforeCall(token, from, count, user, startdate, enddate, resource, actionfilter, argument, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionpackassign
     * @param token The authentication token. (required)
     * @param pack The id of the action pack to assign. (required)
     * @param itemsdata A JSON array containing the action items&#39; data needed to assign them to the assignee (Id, Event, DateDue, DateExpired, NotifyAssigne). (required)
     * @param assignee The assignee of the pack. (optional)
     * @param group The group to assign the pack. (optional)
     * @param notes The assignment&#39;s notes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionpackassignCall(String token, UUID pack, Boolean itemsdata, UUID assignee, UUID group, String notes, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionpackassign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (pack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pack", pack));
        }

        if (assignee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignee", assignee));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (itemsdata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemsdata", itemsdata));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionpackassignValidateBeforeCall(String token, UUID pack, Boolean itemsdata, UUID assignee, UUID group, String notes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actionpackassign(Async)");
        }
        
        // verify the required parameter 'pack' is set
        if (pack == null) {
            throw new ApiException("Missing the required parameter 'pack' when calling actionpackassign(Async)");
        }
        
        // verify the required parameter 'itemsdata' is set
        if (itemsdata == null) {
            throw new ApiException("Missing the required parameter 'itemsdata' when calling actionpackassign(Async)");
        }
        

        okhttp3.Call localVarCall = actionpackassignCall(token, pack, itemsdata, assignee, group, notes, _callback);
        return localVarCall;

    }

    /**
     * Assign an action item pack to a user
     * Allows the user to assign an action pack to a user or group of users.
     * @param token The authentication token. (required)
     * @param pack The id of the action pack to assign. (required)
     * @param itemsdata A JSON array containing the action items&#39; data needed to assign them to the assignee (Id, Event, DateDue, DateExpired, NotifyAssigne). (required)
     * @param assignee The assignee of the pack. (optional)
     * @param group The group to assign the pack. (optional)
     * @param notes The assignment&#39;s notes. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionpackassign(String token, UUID pack, Boolean itemsdata, UUID assignee, UUID group, String notes) throws ApiException {
        actionpackassignWithHttpInfo(token, pack, itemsdata, assignee, group, notes);
    }

    /**
     * Assign an action item pack to a user
     * Allows the user to assign an action pack to a user or group of users.
     * @param token The authentication token. (required)
     * @param pack The id of the action pack to assign. (required)
     * @param itemsdata A JSON array containing the action items&#39; data needed to assign them to the assignee (Id, Event, DateDue, DateExpired, NotifyAssigne). (required)
     * @param assignee The assignee of the pack. (optional)
     * @param group The group to assign the pack. (optional)
     * @param notes The assignment&#39;s notes. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionpackassignWithHttpInfo(String token, UUID pack, Boolean itemsdata, UUID assignee, UUID group, String notes) throws ApiException {
        okhttp3.Call localVarCall = actionpackassignValidateBeforeCall(token, pack, itemsdata, assignee, group, notes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Assign an action item pack to a user (asynchronously)
     * Allows the user to assign an action pack to a user or group of users.
     * @param token The authentication token. (required)
     * @param pack The id of the action pack to assign. (required)
     * @param itemsdata A JSON array containing the action items&#39; data needed to assign them to the assignee (Id, Event, DateDue, DateExpired, NotifyAssigne). (required)
     * @param assignee The assignee of the pack. (optional)
     * @param group The group to assign the pack. (optional)
     * @param notes The assignment&#39;s notes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionpackassignAsync(String token, UUID pack, Boolean itemsdata, UUID assignee, UUID group, String notes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionpackassignValidateBeforeCall(token, pack, itemsdata, assignee, group, notes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionpackdelete
     * @param token The authentication token. (required)
     * @param id The id of the action pack to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionpackdeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionpackdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionpackdeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actionpackdelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling actionpackdelete(Async)");
        }
        

        okhttp3.Call localVarCall = actionpackdeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete an action item pack
     * Allows the user to delete an action item pack.
     * @param token The authentication token. (required)
     * @param id The id of the action pack to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionpackdelete(String token, UUID id) throws ApiException {
        actionpackdeleteWithHttpInfo(token, id);
    }

    /**
     * Delete an action item pack
     * Allows the user to delete an action item pack.
     * @param token The authentication token. (required)
     * @param id The id of the action pack to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionpackdeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = actionpackdeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an action item pack (asynchronously)
     * Allows the user to delete an action item pack.
     * @param token The authentication token. (required)
     * @param id The id of the action pack to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionpackdeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionpackdeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionpackget
     * @param token The authentication token. (required)
     * @param id The id of the action pack to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionpackgetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionpackget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionpackgetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actionpackget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling actionpackget(Async)");
        }
        

        okhttp3.Call localVarCall = actionpackgetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View details of an action item pack
     * Allows the user to view an individual action pack and its details.
     * @param token The authentication token. (required)
     * @param id The id of the action pack to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionpackget(String token, UUID id) throws ApiException {
        actionpackgetWithHttpInfo(token, id);
    }

    /**
     * View details of an action item pack
     * Allows the user to view an individual action pack and its details.
     * @param token The authentication token. (required)
     * @param id The id of the action pack to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionpackgetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = actionpackgetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of an action item pack (asynchronously)
     * Allows the user to view an individual action pack and its details.
     * @param token The authentication token. (required)
     * @param id The id of the action pack to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionpackgetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionpackgetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionpacklist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionpacklistCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionpacklist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionpacklistValidateBeforeCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actionpacklist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling actionpacklist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling actionpacklist(Async)");
        }
        

        okhttp3.Call localVarCall = actionpacklistCall(token, from, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of action item packs
     * Allows the user to view the full list of action item packs.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionpacklist(String token, Integer from, Integer count) throws ApiException {
        actionpacklistWithHttpInfo(token, from, count);
    }

    /**
     * View a list of action item packs
     * Allows the user to view the full list of action item packs.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionpacklistWithHttpInfo(String token, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = actionpacklistValidateBeforeCall(token, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of action item packs (asynchronously)
     * Allows the user to view the full list of action item packs.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionpacklistAsync(String token, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionpacklistValidateBeforeCall(token, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionpacksave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionpacksaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/actionpacksave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionpacksaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = actionpacksaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit an action item pack
     * Allows the user to edit an action item pack.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionpacksave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        actionpacksaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit an action item pack
     * Allows the user to edit an action item pack.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionpacksaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = actionpacksaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit an action item pack (asynchronously)
     * Allows the user to edit an action item pack.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionpacksaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionpacksaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actiontypedelete
     * @param token The authentication token. (required)
     * @param id The id of the action type to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actiontypedeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actiontypedelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actiontypedeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actiontypedelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling actiontypedelete(Async)");
        }
        

        okhttp3.Call localVarCall = actiontypedeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete an action item type
     * Allows the user to delete an action item type.
     * @param token The authentication token. (required)
     * @param id The id of the action type to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actiontypedelete(String token, UUID id) throws ApiException {
        actiontypedeleteWithHttpInfo(token, id);
    }

    /**
     * Delete an action item type
     * Allows the user to delete an action item type.
     * @param token The authentication token. (required)
     * @param id The id of the action type to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actiontypedeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = actiontypedeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an action item type (asynchronously)
     * Allows the user to delete an action item type.
     * @param token The authentication token. (required)
     * @param id The id of the action type to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actiontypedeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actiontypedeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actiontypeget
     * @param token The authentication token. (required)
     * @param id The id of the action type to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actiontypegetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actiontypeget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actiontypegetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actiontypeget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling actiontypeget(Async)");
        }
        

        okhttp3.Call localVarCall = actiontypegetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View details of an action item type
     * Allows the user to view an individual action item type and its details.
     * @param token The authentication token. (required)
     * @param id The id of the action type to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actiontypeget(String token, UUID id) throws ApiException {
        actiontypegetWithHttpInfo(token, id);
    }

    /**
     * View details of an action item type
     * Allows the user to view an individual action item type and its details.
     * @param token The authentication token. (required)
     * @param id The id of the action type to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actiontypegetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = actiontypegetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of an action item type (asynchronously)
     * Allows the user to view an individual action item type and its details.
     * @param token The authentication token. (required)
     * @param id The id of the action type to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actiontypegetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actiontypegetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actiontypelist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actiontypelistCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actiontypelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actiontypelistValidateBeforeCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling actiontypelist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling actiontypelist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling actiontypelist(Async)");
        }
        

        okhttp3.Call localVarCall = actiontypelistCall(token, from, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of action item types
     * Allows the user to view the full list of action item types.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actiontypelist(String token, Integer from, Integer count) throws ApiException {
        actiontypelistWithHttpInfo(token, from, count);
    }

    /**
     * View a list of action item types
     * Allows the user to view the full list of action item types.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actiontypelistWithHttpInfo(String token, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = actiontypelistValidateBeforeCall(token, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of action item types (asynchronously)
     * Allows the user to view the full list of action item types.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actiontypelistAsync(String token, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actiontypelistValidateBeforeCall(token, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actiontypesave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actiontypesaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/actiontypesave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actiontypesaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = actiontypesaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit an action item type
     * Allows the user to dit an action item type.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actiontypesave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        actiontypesaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit an action item type
     * Allows the user to dit an action item type.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actiontypesaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = actiontypesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit an action item type (asynchronously)
     * Allows the user to dit an action item type.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actiontypesaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actiontypesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adhocquerycheckexecution
     * @param token The authentication token. (required)
     * @param id The id of the ad hoc query execution to be checked. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocquerycheckexecutionCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adhocquerycheckexecution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adhocquerycheckexecutionValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adhocquerycheckexecution(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adhocquerycheckexecution(Async)");
        }
        

        okhttp3.Call localVarCall = adhocquerycheckexecutionCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Check the status of an ad hoc query execution
     * Allows the user to check whether a query has executed, viewable on the query&#39;s execution page.
     * @param token The authentication token. (required)
     * @param id The id of the ad hoc query execution to be checked. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void adhocquerycheckexecution(String token, UUID id) throws ApiException {
        adhocquerycheckexecutionWithHttpInfo(token, id);
    }

    /**
     * Check the status of an ad hoc query execution
     * Allows the user to check whether a query has executed, viewable on the query&#39;s execution page.
     * @param token The authentication token. (required)
     * @param id The id of the ad hoc query execution to be checked. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adhocquerycheckexecutionWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = adhocquerycheckexecutionValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check the status of an ad hoc query execution (asynchronously)
     * Allows the user to check whether a query has executed, viewable on the query&#39;s execution page.
     * @param token The authentication token. (required)
     * @param id The id of the ad hoc query execution to be checked. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocquerycheckexecutionAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adhocquerycheckexecutionValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adhocquerydelete
     * @param token The authentication token. (required)
     * @param id The id of the ad hoc query to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocquerydeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adhocquerydelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adhocquerydeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adhocquerydelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adhocquerydelete(Async)");
        }
        

        okhttp3.Call localVarCall = adhocquerydeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete an ad hoc query
     * Allows the user to delete a previously created ad hoc query.
     * @param token The authentication token. (required)
     * @param id The id of the ad hoc query to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void adhocquerydelete(String token, UUID id) throws ApiException {
        adhocquerydeleteWithHttpInfo(token, id);
    }

    /**
     * Delete an ad hoc query
     * Allows the user to delete a previously created ad hoc query.
     * @param token The authentication token. (required)
     * @param id The id of the ad hoc query to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adhocquerydeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = adhocquerydeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an ad hoc query (asynchronously)
     * Allows the user to delete a previously created ad hoc query.
     * @param token The authentication token. (required)
     * @param id The id of the ad hoc query to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocquerydeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adhocquerydeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adhocqueryexecute
     * @param token The authentication token. (required)
     * @param id The id of the query to execute. (optional)
     * @param query The query to execute. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocqueryexecuteCall(String token, UUID id, String query, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adhocqueryexecute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adhocqueryexecuteValidateBeforeCall(String token, UUID id, String query, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adhocqueryexecute(Async)");
        }
        

        okhttp3.Call localVarCall = adhocqueryexecuteCall(token, id, query, _callback);
        return localVarCall;

    }

    /**
     * Execute an ad hoc query
     * Allows the user to execute an ad hoc query.
     * @param token The authentication token. (required)
     * @param id The id of the query to execute. (optional)
     * @param query The query to execute. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void adhocqueryexecute(String token, UUID id, String query) throws ApiException {
        adhocqueryexecuteWithHttpInfo(token, id, query);
    }

    /**
     * Execute an ad hoc query
     * Allows the user to execute an ad hoc query.
     * @param token The authentication token. (required)
     * @param id The id of the query to execute. (optional)
     * @param query The query to execute. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adhocqueryexecuteWithHttpInfo(String token, UUID id, String query) throws ApiException {
        okhttp3.Call localVarCall = adhocqueryexecuteValidateBeforeCall(token, id, query, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Execute an ad hoc query (asynchronously)
     * Allows the user to execute an ad hoc query.
     * @param token The authentication token. (required)
     * @param id The id of the query to execute. (optional)
     * @param query The query to execute. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocqueryexecuteAsync(String token, UUID id, String query, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adhocqueryexecuteValidateBeforeCall(token, id, query, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adhocqueryget
     * @param token The authentication token. (required)
     * @param id The id of the query to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocquerygetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adhocqueryget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adhocquerygetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adhocqueryget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adhocqueryget(Async)");
        }
        

        okhttp3.Call localVarCall = adhocquerygetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View details of an ad hoc query
     * Allows the user to view an individual ad hoc query with its settings.
     * @param token The authentication token. (required)
     * @param id The id of the query to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void adhocqueryget(String token, UUID id) throws ApiException {
        adhocquerygetWithHttpInfo(token, id);
    }

    /**
     * View details of an ad hoc query
     * Allows the user to view an individual ad hoc query with its settings.
     * @param token The authentication token. (required)
     * @param id The id of the query to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adhocquerygetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = adhocquerygetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of an ad hoc query (asynchronously)
     * Allows the user to view an individual ad hoc query with its settings.
     * @param token The authentication token. (required)
     * @param id The id of the query to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocquerygetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adhocquerygetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adhocquerygetschema
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocquerygetschemaCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adhocquerygetschema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adhocquerygetschemaValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adhocquerygetschema(Async)");
        }
        

        okhttp3.Call localVarCall = adhocquerygetschemaCall(token, _callback);
        return localVarCall;

    }

    /**
     * View the database schema for making ad hoc queries
     * Allows the user to view the list of schema for ad hoc queries.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void adhocquerygetschema(String token) throws ApiException {
        adhocquerygetschemaWithHttpInfo(token);
    }

    /**
     * View the database schema for making ad hoc queries
     * Allows the user to view the list of schema for ad hoc queries.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adhocquerygetschemaWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = adhocquerygetschemaValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the database schema for making ad hoc queries (asynchronously)
     * Allows the user to view the list of schema for ad hoc queries.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocquerygetschemaAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adhocquerygetschemaValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adhocquerylist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocquerylistCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adhocquerylist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adhocquerylistValidateBeforeCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adhocquerylist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling adhocquerylist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling adhocquerylist(Async)");
        }
        

        okhttp3.Call localVarCall = adhocquerylistCall(token, from, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of saved ad hoc queries
     * Allows the user to view the full list of saved queries.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void adhocquerylist(String token, Integer from, Integer count) throws ApiException {
        adhocquerylistWithHttpInfo(token, from, count);
    }

    /**
     * View a list of saved ad hoc queries
     * Allows the user to view the full list of saved queries.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adhocquerylistWithHttpInfo(String token, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = adhocquerylistValidateBeforeCall(token, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of saved ad hoc queries (asynchronously)
     * Allows the user to view the full list of saved queries.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocquerylistAsync(String token, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adhocquerylistValidateBeforeCall(token, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adhocquerylistexecutions
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param query The first record to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocquerylistexecutionsCall(String token, Integer from, Integer count, UUID query, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adhocquerylistexecutions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adhocquerylistexecutionsValidateBeforeCall(String token, Integer from, Integer count, UUID query, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adhocquerylistexecutions(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling adhocquerylistexecutions(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling adhocquerylistexecutions(Async)");
        }
        

        okhttp3.Call localVarCall = adhocquerylistexecutionsCall(token, from, count, query, _callback);
        return localVarCall;

    }

    /**
     * View a list of ad hoc queries executions
     * Allows the user to view the full list of past query executions.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param query The first record to return. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void adhocquerylistexecutions(String token, Integer from, Integer count, UUID query) throws ApiException {
        adhocquerylistexecutionsWithHttpInfo(token, from, count, query);
    }

    /**
     * View a list of ad hoc queries executions
     * Allows the user to view the full list of past query executions.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param query The first record to return. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adhocquerylistexecutionsWithHttpInfo(String token, Integer from, Integer count, UUID query) throws ApiException {
        okhttp3.Call localVarCall = adhocquerylistexecutionsValidateBeforeCall(token, from, count, query, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of ad hoc queries executions (asynchronously)
     * Allows the user to view the full list of past query executions.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param query The first record to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocquerylistexecutionsAsync(String token, Integer from, Integer count, UUID query, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adhocquerylistexecutionsValidateBeforeCall(token, from, count, query, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adhocquerysave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocquerysaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/adhocquerysave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adhocquerysaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = adhocquerysaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit an ad hoc query
     * Allows the user to edit an ad hoc query.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void adhocquerysave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        adhocquerysaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit an ad hoc query
     * Allows the user to edit an ad hoc query.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adhocquerysaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = adhocquerysaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit an ad hoc query (asynchronously)
     * Allows the user to edit an ad hoc query.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocquerysaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adhocquerysaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adhocquerystopexecution
     * @param token The authentication token. (required)
     * @param id The id of the ad hoc query execution to be stopped. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocquerystopexecutionCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adhocquerystopexecution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adhocquerystopexecutionValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adhocquerystopexecution(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adhocquerystopexecution(Async)");
        }
        

        okhttp3.Call localVarCall = adhocquerystopexecutionCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Stops the execution of an ad hoc query
     * Allows the user to halt the execution of a query that is currently being executed.
     * @param token The authentication token. (required)
     * @param id The id of the ad hoc query execution to be stopped. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void adhocquerystopexecution(String token, UUID id) throws ApiException {
        adhocquerystopexecutionWithHttpInfo(token, id);
    }

    /**
     * Stops the execution of an ad hoc query
     * Allows the user to halt the execution of a query that is currently being executed.
     * @param token The authentication token. (required)
     * @param id The id of the ad hoc query execution to be stopped. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adhocquerystopexecutionWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = adhocquerystopexecutionValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stops the execution of an ad hoc query (asynchronously)
     * Allows the user to halt the execution of a query that is currently being executed.
     * @param token The authentication token. (required)
     * @param id The id of the ad hoc query execution to be stopped. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocquerystopexecutionAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adhocquerystopexecutionValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adhocreportsreqaccess
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocreportsreqaccessCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adhocreportsreqaccess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adhocreportsreqaccessValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adhocreportsreqaccess(Async)");
        }
        

        okhttp3.Call localVarCall = adhocreportsreqaccessCall(token, _callback);
        return localVarCall;

    }

    /**
     * Request access to the ad-hoc reports
     * Allows the user to request access to the ad-hoc reports by clicking, &#39;Request Access&#39; under Institutional Research -&gt; Ad-hoc Reports
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void adhocreportsreqaccess(String token) throws ApiException {
        adhocreportsreqaccessWithHttpInfo(token);
    }

    /**
     * Request access to the ad-hoc reports
     * Allows the user to request access to the ad-hoc reports by clicking, &#39;Request Access&#39; under Institutional Research -&gt; Ad-hoc Reports
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adhocreportsreqaccessWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = adhocreportsreqaccessValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Request access to the ad-hoc reports (asynchronously)
     * Allows the user to request access to the ad-hoc reports by clicking, &#39;Request Access&#39; under Institutional Research -&gt; Ad-hoc Reports
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adhocreportsreqaccessAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adhocreportsreqaccessValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationcheckunknownuser
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationcheckunknownuserCall(UUID station, String user, UUID location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstationcheckunknownuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationcheckunknownuserValidateBeforeCall(UUID station, String user, UUID location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationcheckunknownuser(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationcheckunknownuser(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling advancedstationcheckunknownuser(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationcheckunknownuserCall(station, user, location, _callback);
        return localVarCall;

    }

    /**
     * Check whether the user is known by the system.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationcheckunknownuser(UUID station, String user, UUID location) throws ApiException {
        advancedstationcheckunknownuserWithHttpInfo(station, user, location);
    }

    /**
     * Check whether the user is known by the system.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationcheckunknownuserWithHttpInfo(UUID station, String user, UUID location) throws ApiException {
        okhttp3.Call localVarCall = advancedstationcheckunknownuserValidateBeforeCall(station, user, location, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check whether the user is known by the system. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationcheckunknownuserAsync(UUID station, String user, UUID location, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationcheckunknownuserValidateBeforeCall(station, user, location, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationcheckuserrole
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationcheckuserroleCall(UUID station, String user, UUID location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstationcheckuserrole";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationcheckuserroleValidateBeforeCall(UUID station, String user, UUID location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationcheckuserrole(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationcheckuserrole(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling advancedstationcheckuserrole(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationcheckuserroleCall(station, user, location, _callback);
        return localVarCall;

    }

    /**
     * Check whether the user is a staff member, an attendee or both.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationcheckuserrole(UUID station, String user, UUID location) throws ApiException {
        advancedstationcheckuserroleWithHttpInfo(station, user, location);
    }

    /**
     * Check whether the user is a staff member, an attendee or both.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationcheckuserroleWithHttpInfo(UUID station, String user, UUID location) throws ApiException {
        okhttp3.Call localVarCall = advancedstationcheckuserroleValidateBeforeCall(station, user, location, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check whether the user is a staff member, an attendee or both. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationcheckuserroleAsync(UUID station, String user, UUID location, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationcheckuserroleValidateBeforeCall(station, user, location, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationcreateuser
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user to create. (required)
     * @param location The id of the location the user picked. (required)
     * @param firstname The first name of the user to create. (required)
     * @param lastname The last name of the user to create. (required)
     * @param email The email of the user to create. (required)
     * @param middlename The middle name of the user to create. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationcreateuserCall(UUID station, String user, UUID location, String firstname, String lastname, String email, String middlename, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstationcreateuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (firstname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstname", firstname));
        }

        if (middlename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("middlename", middlename));
        }

        if (lastname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastname", lastname));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationcreateuserValidateBeforeCall(UUID station, String user, UUID location, String firstname, String lastname, String email, String middlename, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationcreateuser(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationcreateuser(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling advancedstationcreateuser(Async)");
        }
        
        // verify the required parameter 'firstname' is set
        if (firstname == null) {
            throw new ApiException("Missing the required parameter 'firstname' when calling advancedstationcreateuser(Async)");
        }
        
        // verify the required parameter 'lastname' is set
        if (lastname == null) {
            throw new ApiException("Missing the required parameter 'lastname' when calling advancedstationcreateuser(Async)");
        }
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling advancedstationcreateuser(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationcreateuserCall(station, user, location, firstname, lastname, email, middlename, _callback);
        return localVarCall;

    }

    /**
     * Creates a user via a sign-in station.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user to create. (required)
     * @param location The id of the location the user picked. (required)
     * @param firstname The first name of the user to create. (required)
     * @param lastname The last name of the user to create. (required)
     * @param email The email of the user to create. (required)
     * @param middlename The middle name of the user to create. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationcreateuser(UUID station, String user, UUID location, String firstname, String lastname, String email, String middlename) throws ApiException {
        advancedstationcreateuserWithHttpInfo(station, user, location, firstname, lastname, email, middlename);
    }

    /**
     * Creates a user via a sign-in station.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user to create. (required)
     * @param location The id of the location the user picked. (required)
     * @param firstname The first name of the user to create. (required)
     * @param lastname The last name of the user to create. (required)
     * @param email The email of the user to create. (required)
     * @param middlename The middle name of the user to create. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationcreateuserWithHttpInfo(UUID station, String user, UUID location, String firstname, String lastname, String email, String middlename) throws ApiException {
        okhttp3.Call localVarCall = advancedstationcreateuserValidateBeforeCall(station, user, location, firstname, lastname, email, middlename, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a user via a sign-in station. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user to create. (required)
     * @param location The id of the location the user picked. (required)
     * @param firstname The first name of the user to create. (required)
     * @param lastname The last name of the user to create. (required)
     * @param email The email of the user to create. (required)
     * @param middlename The middle name of the user to create. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationcreateuserAsync(UUID station, String user, UUID location, String firstname, String lastname, String email, String middlename, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationcreateuserValidateBeforeCall(station, user, location, firstname, lastname, email, middlename, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationgetevents
     * @param station The id of the sign-in station to get. (required)
     * @param location The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationgeteventsCall(UUID station, UUID location, String user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstationgetevents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationgeteventsValidateBeforeCall(UUID station, UUID location, String user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationgetevents(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling advancedstationgetevents(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationgetevents(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationgeteventsCall(station, location, user, _callback);
        return localVarCall;

    }

    /**
     * Gets the courses available for a specific location and a specific student.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param location The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationgetevents(UUID station, UUID location, String user) throws ApiException {
        advancedstationgeteventsWithHttpInfo(station, location, user);
    }

    /**
     * Gets the courses available for a specific location and a specific student.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param location The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationgeteventsWithHttpInfo(UUID station, UUID location, String user) throws ApiException {
        okhttp3.Call localVarCall = advancedstationgeteventsValidateBeforeCall(station, location, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the courses available for a specific location and a specific student. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param location The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationgeteventsAsync(UUID station, UUID location, String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationgeteventsValidateBeforeCall(station, location, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationgetinfo
     * @param id The id of the sign-in station to get. (required)
     * @param event The id of the event (or session), to override the scheduled one. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationgetinfoCall(UUID id, UUID event, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstationgetinfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationgetinfoValidateBeforeCall(UUID id, UUID event, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling advancedstationgetinfo(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationgetinfoCall(id, event, _callback);
        return localVarCall;

    }

    /**
     * Gets the info to display in the sign-in station by it&#39;s ID.
     * 
     * @param id The id of the sign-in station to get. (required)
     * @param event The id of the event (or session), to override the scheduled one. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationgetinfo(UUID id, UUID event) throws ApiException {
        advancedstationgetinfoWithHttpInfo(id, event);
    }

    /**
     * Gets the info to display in the sign-in station by it&#39;s ID.
     * 
     * @param id The id of the sign-in station to get. (required)
     * @param event The id of the event (or session), to override the scheduled one. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationgetinfoWithHttpInfo(UUID id, UUID event) throws ApiException {
        okhttp3.Call localVarCall = advancedstationgetinfoValidateBeforeCall(id, event, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the info to display in the sign-in station by it&#39;s ID. (asynchronously)
     * 
     * @param id The id of the sign-in station to get. (required)
     * @param event The id of the event (or session), to override the scheduled one. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationgetinfoAsync(UUID id, UUID event, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationgetinfoValidateBeforeCall(id, event, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationgetlocations
     * @param station The id of the sign-in station whose locations have to be returned. (required)
     * @param user The card of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationgetlocationsCall(UUID station, String user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstationgetlocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationgetlocationsValidateBeforeCall(UUID station, String user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationgetlocations(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationgetlocations(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationgetlocationsCall(station, user, _callback);
        return localVarCall;

    }

    /**
     * Gets the locations available in a sign-in station.
     * 
     * @param station The id of the sign-in station whose locations have to be returned. (required)
     * @param user The card of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationgetlocations(UUID station, String user) throws ApiException {
        advancedstationgetlocationsWithHttpInfo(station, user);
    }

    /**
     * Gets the locations available in a sign-in station.
     * 
     * @param station The id of the sign-in station whose locations have to be returned. (required)
     * @param user The card of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationgetlocationsWithHttpInfo(UUID station, String user) throws ApiException {
        okhttp3.Call localVarCall = advancedstationgetlocationsValidateBeforeCall(station, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the locations available in a sign-in station. (asynchronously)
     * 
     * @param station The id of the sign-in station whose locations have to be returned. (required)
     * @param user The card of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationgetlocationsAsync(UUID station, String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationgetlocationsValidateBeforeCall(station, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationgetlogstaff
     * @param station The id of the sign-in station to get. (required)
     * @param attendancelog The id of the attendance log to filter the staff members. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationgetlogstaffCall(UUID station, UUID attendancelog, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstationgetlogstaff";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (attendancelog != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attendancelog", attendancelog));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationgetlogstaffValidateBeforeCall(UUID station, UUID attendancelog, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationgetlogstaff(Async)");
        }
        
        // verify the required parameter 'attendancelog' is set
        if (attendancelog == null) {
            throw new ApiException("Missing the required parameter 'attendancelog' when calling advancedstationgetlogstaff(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationgetlogstaffCall(station, attendancelog, photosize, _callback);
        return localVarCall;

    }

    /**
     * Gets the staff/tutors available filtered by the location, course and services of the given attendance log.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param attendancelog The id of the attendance log to filter the staff members. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationgetlogstaff(UUID station, UUID attendancelog, Integer photosize) throws ApiException {
        advancedstationgetlogstaffWithHttpInfo(station, attendancelog, photosize);
    }

    /**
     * Gets the staff/tutors available filtered by the location, course and services of the given attendance log.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param attendancelog The id of the attendance log to filter the staff members. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationgetlogstaffWithHttpInfo(UUID station, UUID attendancelog, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = advancedstationgetlogstaffValidateBeforeCall(station, attendancelog, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the staff/tutors available filtered by the location, course and services of the given attendance log. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param attendancelog The id of the attendance log to filter the staff members. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationgetlogstaffAsync(UUID station, UUID attendancelog, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationgetlogstaffValidateBeforeCall(station, attendancelog, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationgetroles
     * @param station The id of the sign-in station to get. (required)
     * @param signinrole Specifies how the user is signing-in. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationgetrolesCall(UUID station, String signinrole, String user, UUID location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstationgetroles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (signinrole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signinrole", signinrole));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationgetrolesValidateBeforeCall(UUID station, String signinrole, String user, UUID location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationgetroles(Async)");
        }
        
        // verify the required parameter 'signinrole' is set
        if (signinrole == null) {
            throw new ApiException("Missing the required parameter 'signinrole' when calling advancedstationgetroles(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationgetroles(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling advancedstationgetroles(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationgetrolesCall(station, signinrole, user, location, _callback);
        return localVarCall;

    }

    /**
     * Gets the user roles of the user trying to sign-in.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param signinrole Specifies how the user is signing-in. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationgetroles(UUID station, String signinrole, String user, UUID location) throws ApiException {
        advancedstationgetrolesWithHttpInfo(station, signinrole, user, location);
    }

    /**
     * Gets the user roles of the user trying to sign-in.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param signinrole Specifies how the user is signing-in. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationgetrolesWithHttpInfo(UUID station, String signinrole, String user, UUID location) throws ApiException {
        okhttp3.Call localVarCall = advancedstationgetrolesValidateBeforeCall(station, signinrole, user, location, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the user roles of the user trying to sign-in. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param signinrole Specifies how the user is signing-in. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationgetrolesAsync(UUID station, String signinrole, String user, UUID location, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationgetrolesValidateBeforeCall(station, signinrole, user, location, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationgetservices
     * @param station The id of the sign-in station to get. (required)
     * @param location The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationgetservicesCall(UUID station, UUID location, String user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstationgetservices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationgetservicesValidateBeforeCall(UUID station, UUID location, String user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationgetservices(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling advancedstationgetservices(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationgetservices(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationgetservicesCall(station, location, user, _callback);
        return localVarCall;

    }

    /**
     * Gets the services available for a specific location.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param location The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationgetservices(UUID station, UUID location, String user) throws ApiException {
        advancedstationgetservicesWithHttpInfo(station, location, user);
    }

    /**
     * Gets the services available for a specific location.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param location The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationgetservicesWithHttpInfo(UUID station, UUID location, String user) throws ApiException {
        okhttp3.Call localVarCall = advancedstationgetservicesValidateBeforeCall(station, location, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the services available for a specific location. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param location The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationgetservicesAsync(UUID station, UUID location, String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationgetservicesValidateBeforeCall(station, location, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationgetstaff
     * @param station The id of the sign-in station to get. (required)
     * @param locationid The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @param services The list of services selected by the user, in JSON format. (optional)
     * @param eventid The ID of the event selected. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationgetstaffCall(UUID station, UUID locationid, String user, String services, UUID eventid, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstationgetstaff";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (services != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("services", services));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationgetstaffValidateBeforeCall(UUID station, UUID locationid, String user, String services, UUID eventid, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationgetstaff(Async)");
        }
        
        // verify the required parameter 'locationid' is set
        if (locationid == null) {
            throw new ApiException("Missing the required parameter 'locationid' when calling advancedstationgetstaff(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationgetstaff(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationgetstaffCall(station, locationid, user, services, eventid, photosize, _callback);
        return localVarCall;

    }

    /**
     * Gets the staff/tutors available for a specific location, course and service.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param locationid The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @param services The list of services selected by the user, in JSON format. (optional)
     * @param eventid The ID of the event selected. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationgetstaff(UUID station, UUID locationid, String user, String services, UUID eventid, Integer photosize) throws ApiException {
        advancedstationgetstaffWithHttpInfo(station, locationid, user, services, eventid, photosize);
    }

    /**
     * Gets the staff/tutors available for a specific location, course and service.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param locationid The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @param services The list of services selected by the user, in JSON format. (optional)
     * @param eventid The ID of the event selected. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationgetstaffWithHttpInfo(UUID station, UUID locationid, String user, String services, UUID eventid, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = advancedstationgetstaffValidateBeforeCall(station, locationid, user, services, eventid, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the staff/tutors available for a specific location, course and service. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param locationid The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @param services The list of services selected by the user, in JSON format. (optional)
     * @param eventid The ID of the event selected. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationgetstaffAsync(UUID station, UUID locationid, String user, String services, UUID eventid, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationgetstaffValidateBeforeCall(station, locationid, user, services, eventid, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationissignedin
     * @param station The id of the sign-in station to get. (required)
     * @param time The date and time of the swipe. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationissignedinCall(UUID station, OffsetDateTime time, String user, UUID location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstationissignedin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationissignedinValidateBeforeCall(UUID station, OffsetDateTime time, String user, UUID location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationissignedin(Async)");
        }
        
        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling advancedstationissignedin(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationissignedin(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationissignedinCall(station, time, user, location, _callback);
        return localVarCall;

    }

    /**
     * Gets whether a user is signed-in or not.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param time The date and time of the swipe. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationissignedin(UUID station, OffsetDateTime time, String user, UUID location) throws ApiException {
        advancedstationissignedinWithHttpInfo(station, time, user, location);
    }

    /**
     * Gets whether a user is signed-in or not.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param time The date and time of the swipe. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationissignedinWithHttpInfo(UUID station, OffsetDateTime time, String user, UUID location) throws ApiException {
        okhttp3.Call localVarCall = advancedstationissignedinValidateBeforeCall(station, time, user, location, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets whether a user is signed-in or not. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param time The date and time of the swipe. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationissignedinAsync(UUID station, OffsetDateTime time, String user, UUID location, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationissignedinValidateBeforeCall(station, time, user, location, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advroleaddmissing
     * @param token The authentication token. (required)
     * @param roles CSV list of the role ids to check (required)
     * @param permissions CSV list of the permissions to check (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advroleaddmissingCall(String token, String roles, String permissions, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advroleaddmissing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (roles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roles", roles));
        }

        if (permissions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permissions", permissions));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advroleaddmissingValidateBeforeCall(String token, String roles, String permissions, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling advroleaddmissing(Async)");
        }
        
        // verify the required parameter 'roles' is set
        if (roles == null) {
            throw new ApiException("Missing the required parameter 'roles' when calling advroleaddmissing(Async)");
        }
        
        // verify the required parameter 'permissions' is set
        if (permissions == null) {
            throw new ApiException("Missing the required parameter 'permissions' when calling advroleaddmissing(Async)");
        }
        

        okhttp3.Call localVarCall = advroleaddmissingCall(token, roles, permissions, _callback);
        return localVarCall;

    }

    /**
     * Adds the missing permissions to a role. Requires access to advrole.save
     * 
     * @param token The authentication token. (required)
     * @param roles CSV list of the role ids to check (required)
     * @param permissions CSV list of the permissions to check (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advroleaddmissing(String token, String roles, String permissions) throws ApiException {
        advroleaddmissingWithHttpInfo(token, roles, permissions);
    }

    /**
     * Adds the missing permissions to a role. Requires access to advrole.save
     * 
     * @param token The authentication token. (required)
     * @param roles CSV list of the role ids to check (required)
     * @param permissions CSV list of the permissions to check (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advroleaddmissingWithHttpInfo(String token, String roles, String permissions) throws ApiException {
        okhttp3.Call localVarCall = advroleaddmissingValidateBeforeCall(token, roles, permissions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adds the missing permissions to a role. Requires access to advrole.save (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param roles CSV list of the role ids to check (required)
     * @param permissions CSV list of the permissions to check (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advroleaddmissingAsync(String token, String roles, String permissions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advroleaddmissingValidateBeforeCall(token, roles, permissions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advrolecheckperm
     * @param token The authentication token. (required)
     * @param roles CSV list of the role ids to check (required)
     * @param permissions CSV list of the permissions to check (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolecheckpermCall(String token, String roles, String permissions, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advrolecheckperm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (roles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roles", roles));
        }

        if (permissions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permissions", permissions));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advrolecheckpermValidateBeforeCall(String token, String roles, String permissions, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling advrolecheckperm(Async)");
        }
        
        // verify the required parameter 'roles' is set
        if (roles == null) {
            throw new ApiException("Missing the required parameter 'roles' when calling advrolecheckperm(Async)");
        }
        
        // verify the required parameter 'permissions' is set
        if (permissions == null) {
            throw new ApiException("Missing the required parameter 'permissions' when calling advrolecheckperm(Async)");
        }
        

        okhttp3.Call localVarCall = advrolecheckpermCall(token, roles, permissions, _callback);
        return localVarCall;

    }

    /**
     * Checks the permissions are assigned for the given roles
     * 
     * @param token The authentication token. (required)
     * @param roles CSV list of the role ids to check (required)
     * @param permissions CSV list of the permissions to check (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advrolecheckperm(String token, String roles, String permissions) throws ApiException {
        advrolecheckpermWithHttpInfo(token, roles, permissions);
    }

    /**
     * Checks the permissions are assigned for the given roles
     * 
     * @param token The authentication token. (required)
     * @param roles CSV list of the role ids to check (required)
     * @param permissions CSV list of the permissions to check (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advrolecheckpermWithHttpInfo(String token, String roles, String permissions) throws ApiException {
        okhttp3.Call localVarCall = advrolecheckpermValidateBeforeCall(token, roles, permissions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Checks the permissions are assigned for the given roles (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param roles CSV list of the role ids to check (required)
     * @param permissions CSV list of the permissions to check (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolecheckpermAsync(String token, String roles, String permissions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advrolecheckpermValidateBeforeCall(token, roles, permissions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advroledelete
     * @param token The authentication token. (required)
     * @param id The id of the location to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advroledeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advroledelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advroledeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling advroledelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling advroledelete(Async)");
        }
        

        okhttp3.Call localVarCall = advroledeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a role
     * Allows the user to delete a role from the list of available roles.
     * @param token The authentication token. (required)
     * @param id The id of the location to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advroledelete(String token, UUID id) throws ApiException {
        advroledeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a role
     * Allows the user to delete a role from the list of available roles.
     * @param token The authentication token. (required)
     * @param id The id of the location to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advroledeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = advroledeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a role (asynchronously)
     * Allows the user to delete a role from the list of available roles.
     * @param token The authentication token. (required)
     * @param id The id of the location to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advroledeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advroledeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advroledeletemapping
     * @param token The authentication token. (required)
     * @param map The map name to save the role. (required)
     * @param roleid The id of the role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advroledeletemappingCall(String token, String map, UUID roleid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advroledeletemapping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (map != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("map", map));
        }

        if (roleid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roleid", roleid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advroledeletemappingValidateBeforeCall(String token, String map, UUID roleid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling advroledeletemapping(Async)");
        }
        
        // verify the required parameter 'map' is set
        if (map == null) {
            throw new ApiException("Missing the required parameter 'map' when calling advroledeletemapping(Async)");
        }
        
        // verify the required parameter 'roleid' is set
        if (roleid == null) {
            throw new ApiException("Missing the required parameter 'roleid' when calling advroledeletemapping(Async)");
        }
        

        okhttp3.Call localVarCall = advroledeletemappingCall(token, map, roleid, _callback);
        return localVarCall;

    }

    /**
     * Delete a role mapping
     * Allows the user to delete a role from its mapped categories on the &#39;Role Mapping&#39; page.
     * @param token The authentication token. (required)
     * @param map The map name to save the role. (required)
     * @param roleid The id of the role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advroledeletemapping(String token, String map, UUID roleid) throws ApiException {
        advroledeletemappingWithHttpInfo(token, map, roleid);
    }

    /**
     * Delete a role mapping
     * Allows the user to delete a role from its mapped categories on the &#39;Role Mapping&#39; page.
     * @param token The authentication token. (required)
     * @param map The map name to save the role. (required)
     * @param roleid The id of the role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advroledeletemappingWithHttpInfo(String token, String map, UUID roleid) throws ApiException {
        okhttp3.Call localVarCall = advroledeletemappingValidateBeforeCall(token, map, roleid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a role mapping (asynchronously)
     * Allows the user to delete a role from its mapped categories on the &#39;Role Mapping&#39; page.
     * @param token The authentication token. (required)
     * @param map The map name to save the role. (required)
     * @param roleid The id of the role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advroledeletemappingAsync(String token, String map, UUID roleid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advroledeletemappingValidateBeforeCall(token, map, roleid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advroleget
     * @param token The authentication token. (required)
     * @param id The id of the location to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolegetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advroleget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advrolegetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling advroleget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling advroleget(Async)");
        }
        

        okhttp3.Call localVarCall = advrolegetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View details of a role
     * Allows the user to view a role and its details.
     * @param token The authentication token. (required)
     * @param id The id of the location to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advroleget(String token, UUID id) throws ApiException {
        advrolegetWithHttpInfo(token, id);
    }

    /**
     * View details of a role
     * Allows the user to view a role and its details.
     * @param token The authentication token. (required)
     * @param id The id of the location to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advrolegetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = advrolegetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a role (asynchronously)
     * Allows the user to view a role and its details.
     * @param token The authentication token. (required)
     * @param id The id of the location to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolegetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advrolegetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advrolelist
     * @param token The authentication token. (required)
     * @param includepolicies True to include the policies, defaults to false. (optional)
     * @param includeinternal True to include the internal roles too. (optional)
     * @param name Filter by name of the role. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolelistCall(String token, Boolean includepolicies, Boolean includeinternal, String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advrolelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (includepolicies != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includepolicies", includepolicies));
        }

        if (includeinternal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeinternal", includeinternal));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advrolelistValidateBeforeCall(String token, Boolean includepolicies, Boolean includeinternal, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling advrolelist(Async)");
        }
        

        okhttp3.Call localVarCall = advrolelistCall(token, includepolicies, includeinternal, name, _callback);
        return localVarCall;

    }

    /**
     * Lists the roles for the current account
     * 
     * @param token The authentication token. (required)
     * @param includepolicies True to include the policies, defaults to false. (optional)
     * @param includeinternal True to include the internal roles too. (optional)
     * @param name Filter by name of the role. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advrolelist(String token, Boolean includepolicies, Boolean includeinternal, String name) throws ApiException {
        advrolelistWithHttpInfo(token, includepolicies, includeinternal, name);
    }

    /**
     * Lists the roles for the current account
     * 
     * @param token The authentication token. (required)
     * @param includepolicies True to include the policies, defaults to false. (optional)
     * @param includeinternal True to include the internal roles too. (optional)
     * @param name Filter by name of the role. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advrolelistWithHttpInfo(String token, Boolean includepolicies, Boolean includeinternal, String name) throws ApiException {
        okhttp3.Call localVarCall = advrolelistValidateBeforeCall(token, includepolicies, includeinternal, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the roles for the current account (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param includepolicies True to include the policies, defaults to false. (optional)
     * @param includeinternal True to include the internal roles too. (optional)
     * @param name Filter by name of the role. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolelistAsync(String token, Boolean includepolicies, Boolean includeinternal, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advrolelistValidateBeforeCall(token, includepolicies, includeinternal, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advrolelistmaps
     * @param token The authentication token. (required)
     * @param roleid The id of the role to list the maps. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolelistmapsCall(String token, UUID roleid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advrolelistmaps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (roleid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roleid", roleid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advrolelistmapsValidateBeforeCall(String token, UUID roleid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling advrolelistmaps(Async)");
        }
        
        // verify the required parameter 'roleid' is set
        if (roleid == null) {
            throw new ApiException("Missing the required parameter 'roleid' when calling advrolelistmaps(Async)");
        }
        

        okhttp3.Call localVarCall = advrolelistmapsCall(token, roleid, _callback);
        return localVarCall;

    }

    /**
     * Lists the maps a roles is mapped to
     * 
     * @param token The authentication token. (required)
     * @param roleid The id of the role to list the maps. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advrolelistmaps(String token, UUID roleid) throws ApiException {
        advrolelistmapsWithHttpInfo(token, roleid);
    }

    /**
     * Lists the maps a roles is mapped to
     * 
     * @param token The authentication token. (required)
     * @param roleid The id of the role to list the maps. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advrolelistmapsWithHttpInfo(String token, UUID roleid) throws ApiException {
        okhttp3.Call localVarCall = advrolelistmapsValidateBeforeCall(token, roleid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the maps a roles is mapped to (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param roleid The id of the role to list the maps. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolelistmapsAsync(String token, UUID roleid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advrolelistmapsValidateBeforeCall(token, roleid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advrolelistrolesmapped
     * @param token The authentication token. (required)
     * @param map List only the roles in the specified map. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolelistrolesmappedCall(String token, String map, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advrolelistrolesmapped";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (map != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("map", map));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advrolelistrolesmappedValidateBeforeCall(String token, String map, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling advrolelistrolesmapped(Async)");
        }
        

        okhttp3.Call localVarCall = advrolelistrolesmappedCall(token, map, _callback);
        return localVarCall;

    }

    /**
     * Lists the roles mappings
     * 
     * @param token The authentication token. (required)
     * @param map List only the roles in the specified map. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advrolelistrolesmapped(String token, String map) throws ApiException {
        advrolelistrolesmappedWithHttpInfo(token, map);
    }

    /**
     * Lists the roles mappings
     * 
     * @param token The authentication token. (required)
     * @param map List only the roles in the specified map. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advrolelistrolesmappedWithHttpInfo(String token, String map) throws ApiException {
        okhttp3.Call localVarCall = advrolelistrolesmappedValidateBeforeCall(token, map, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the roles mappings (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param map List only the roles in the specified map. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolelistrolesmappedAsync(String token, String map, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advrolelistrolesmappedValidateBeforeCall(token, map, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advrolelisttemplates
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolelisttemplatesCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advrolelisttemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advrolelisttemplatesValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling advrolelisttemplates(Async)");
        }
        

        okhttp3.Call localVarCall = advrolelisttemplatesCall(token, _callback);
        return localVarCall;

    }

    /**
     * View a list of role templates
     * Allows the user to view the full list of available role templates.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advrolelisttemplates(String token) throws ApiException {
        advrolelisttemplatesWithHttpInfo(token);
    }

    /**
     * View a list of role templates
     * Allows the user to view the full list of available role templates.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advrolelisttemplatesWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = advrolelisttemplatesValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of role templates (asynchronously)
     * Allows the user to view the full list of available role templates.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolelisttemplatesAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advrolelisttemplatesValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advrolesave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolesaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/advrolesave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advrolesaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = advrolesaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a role
     * Allows the user to create or edit a role&#39;s permissions.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advrolesave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        advrolesaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a role
     * Allows the user to create or edit a role&#39;s permissions.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advrolesaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = advrolesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a role (asynchronously)
     * Allows the user to create or edit a role&#39;s permissions.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolesaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advrolesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advrolesavemapping
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolesavemappingCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/advrolesavemapping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advrolesavemappingValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = advrolesavemappingCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Saves a role mapping
     * Allows the user to add a role to a mapped category on the &#39;Role Mapping&#39; page.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advrolesavemapping(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        advrolesavemappingWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Saves a role mapping
     * Allows the user to add a role to a mapped category on the &#39;Role Mapping&#39; page.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advrolesavemappingWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = advrolesavemappingValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Saves a role mapping (asynchronously)
     * Allows the user to add a role to a mapped category on the &#39;Role Mapping&#39; page.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolesavemappingAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advrolesavemappingValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advrolesuserlist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param roleid The id of the role to filter users by, or empty to return all users. (optional)
     * @param onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolesuserlistCall(String token, Integer from, Integer count, UUID roleid, String onlywithoutcard, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advrolesuserlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (roleid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roleid", roleid));
        }

        if (onlywithoutcard != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlywithoutcard", onlywithoutcard));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advrolesuserlistValidateBeforeCall(String token, Integer from, Integer count, UUID roleid, String onlywithoutcard, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling advrolesuserlist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling advrolesuserlist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling advrolesuserlist(Async)");
        }
        

        okhttp3.Call localVarCall = advrolesuserlistCall(token, from, count, roleid, onlywithoutcard, photosize, _callback);
        return localVarCall;

    }

    /**
     * List users. Alias to user.list, use that one instead.
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param roleid The id of the role to filter users by, or empty to return all users. (optional)
     * @param onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advrolesuserlist(String token, Integer from, Integer count, UUID roleid, String onlywithoutcard, Integer photosize) throws ApiException {
        advrolesuserlistWithHttpInfo(token, from, count, roleid, onlywithoutcard, photosize);
    }

    /**
     * List users. Alias to user.list, use that one instead.
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param roleid The id of the role to filter users by, or empty to return all users. (optional)
     * @param onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advrolesuserlistWithHttpInfo(String token, Integer from, Integer count, UUID roleid, String onlywithoutcard, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = advrolesuserlistValidateBeforeCall(token, from, count, roleid, onlywithoutcard, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List users. Alias to user.list, use that one instead. (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param roleid The id of the role to filter users by, or empty to return all users. (optional)
     * @param onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advrolesuserlistAsync(String token, Integer from, Integer count, UUID roleid, String onlywithoutcard, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advrolesuserlistValidateBeforeCall(token, from, count, roleid, onlywithoutcard, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advroleuserupgrade
     * @param token The authentication token. (required)
     * @param userid Id of the user to upgrade (required)
     * @param roleid Id of the role to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advroleuserupgradeCall(String token, UUID userid, UUID roleid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advroleuserupgrade";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (roleid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roleid", roleid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advroleuserupgradeValidateBeforeCall(String token, UUID userid, UUID roleid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling advroleuserupgrade(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling advroleuserupgrade(Async)");
        }
        
        // verify the required parameter 'roleid' is set
        if (roleid == null) {
            throw new ApiException("Missing the required parameter 'roleid' when calling advroleuserupgrade(Async)");
        }
        

        okhttp3.Call localVarCall = advroleuserupgradeCall(token, userid, roleid, _callback);
        return localVarCall;

    }

    /**
     * Upgrade a user to another role (requires permission to edit those roles)
     * Allow the user to add a role to another user, given that he has access to view that other user and edit people with that new role.
     * @param token The authentication token. (required)
     * @param userid Id of the user to upgrade (required)
     * @param roleid Id of the role to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advroleuserupgrade(String token, UUID userid, UUID roleid) throws ApiException {
        advroleuserupgradeWithHttpInfo(token, userid, roleid);
    }

    /**
     * Upgrade a user to another role (requires permission to edit those roles)
     * Allow the user to add a role to another user, given that he has access to view that other user and edit people with that new role.
     * @param token The authentication token. (required)
     * @param userid Id of the user to upgrade (required)
     * @param roleid Id of the role to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advroleuserupgradeWithHttpInfo(String token, UUID userid, UUID roleid) throws ApiException {
        okhttp3.Call localVarCall = advroleuserupgradeValidateBeforeCall(token, userid, roleid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upgrade a user to another role (requires permission to edit those roles) (asynchronously)
     * Allow the user to add a role to another user, given that he has access to view that other user and edit people with that new role.
     * @param token The authentication token. (required)
     * @param userid Id of the user to upgrade (required)
     * @param roleid Id of the role to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advroleuserupgradeAsync(String token, UUID userid, UUID roleid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advroleuserupgradeValidateBeforeCall(token, userid, roleid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentcancel
     * @param token The authentication token. (required)
     * @param id The id of the appointment to cancel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentcancelCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentcancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentcancelValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmentcancel(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentcancel(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentcancelCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Cancel an appointment
     * Allows the user to cancel an appointment.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to cancel. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentcancel(String token, UUID id) throws ApiException {
        appointmentcancelWithHttpInfo(token, id);
    }

    /**
     * Cancel an appointment
     * Allows the user to cancel an appointment.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to cancel. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentcancelWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = appointmentcancelValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel an appointment (asynchronously)
     * Allows the user to cancel an appointment.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to cancel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentcancelAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentcancelValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentcheckisvalid
     * @param token The authentication token. (required)
     * @param id The id of the appointment to check. (required)
     * @param editing Specifies whether the check is for a new appointment or an existing one. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentcheckisvalidCall(String token, UUID id, Boolean editing, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentcheckisvalid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (editing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("editing", editing));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentcheckisvalidValidateBeforeCall(String token, UUID id, Boolean editing, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmentcheckisvalid(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentcheckisvalid(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentcheckisvalidCall(token, id, editing, _callback);
        return localVarCall;

    }

    /**
     * Check if an appointment is valid or not
     * 
     * @param token The authentication token. (required)
     * @param id The id of the appointment to check. (required)
     * @param editing Specifies whether the check is for a new appointment or an existing one. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentcheckisvalid(String token, UUID id, Boolean editing) throws ApiException {
        appointmentcheckisvalidWithHttpInfo(token, id, editing);
    }

    /**
     * Check if an appointment is valid or not
     * 
     * @param token The authentication token. (required)
     * @param id The id of the appointment to check. (required)
     * @param editing Specifies whether the check is for a new appointment or an existing one. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentcheckisvalidWithHttpInfo(String token, UUID id, Boolean editing) throws ApiException {
        okhttp3.Call localVarCall = appointmentcheckisvalidValidateBeforeCall(token, id, editing, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if an appointment is valid or not (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param id The id of the appointment to check. (required)
     * @param editing Specifies whether the check is for a new appointment or an existing one. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentcheckisvalidAsync(String token, UUID id, Boolean editing, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentcheckisvalidValidateBeforeCall(token, id, editing, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmenteditanyway
     * @param token The authentication token. (required)
     * @param id The id of the appointment to edit. (required)
     * @param attendee The id of the attendee involved in the appointment. (required)
     * @param staff The id of the staff member involved in the appointment. (required)
     * @param location The id of the location where the appointment will take place. (required)
     * @param start The appointment&#39;s start date &amp; time. (required)
     * @param end The appointment&#39;s end date &amp; time. (required)
     * @param term The id of the term when the appointment takes place. (optional)
     * @param event The id of the event of the appointment. (optional)
     * @param services Comma-separated string containing the ids of the services of the appointment. (optional)
     * @param notes The notes of the appointment. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmenteditanywayCall(String token, UUID id, UUID attendee, UUID staff, UUID location, OffsetDateTime start, OffsetDateTime end, UUID term, UUID event, String services, String notes, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmenteditanyway";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (term != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("term", term));
        }

        if (attendee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attendee", attendee));
        }

        if (staff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staff", staff));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (services != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("services", services));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmenteditanywayValidateBeforeCall(String token, UUID id, UUID attendee, UUID staff, UUID location, OffsetDateTime start, OffsetDateTime end, UUID term, UUID event, String services, String notes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmenteditanyway(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmenteditanyway(Async)");
        }
        
        // verify the required parameter 'attendee' is set
        if (attendee == null) {
            throw new ApiException("Missing the required parameter 'attendee' when calling appointmenteditanyway(Async)");
        }
        
        // verify the required parameter 'staff' is set
        if (staff == null) {
            throw new ApiException("Missing the required parameter 'staff' when calling appointmenteditanyway(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling appointmenteditanyway(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling appointmenteditanyway(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling appointmenteditanyway(Async)");
        }
        

        okhttp3.Call localVarCall = appointmenteditanywayCall(token, id, attendee, staff, location, start, end, term, event, services, notes, _callback);
        return localVarCall;

    }

    /**
     * Edit an appointment even if it breaks activated rules
     * Allows the user to edit an existing appointment even if it breaks the rules or settings of that location.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to edit. (required)
     * @param attendee The id of the attendee involved in the appointment. (required)
     * @param staff The id of the staff member involved in the appointment. (required)
     * @param location The id of the location where the appointment will take place. (required)
     * @param start The appointment&#39;s start date &amp; time. (required)
     * @param end The appointment&#39;s end date &amp; time. (required)
     * @param term The id of the term when the appointment takes place. (optional)
     * @param event The id of the event of the appointment. (optional)
     * @param services Comma-separated string containing the ids of the services of the appointment. (optional)
     * @param notes The notes of the appointment. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmenteditanyway(String token, UUID id, UUID attendee, UUID staff, UUID location, OffsetDateTime start, OffsetDateTime end, UUID term, UUID event, String services, String notes) throws ApiException {
        appointmenteditanywayWithHttpInfo(token, id, attendee, staff, location, start, end, term, event, services, notes);
    }

    /**
     * Edit an appointment even if it breaks activated rules
     * Allows the user to edit an existing appointment even if it breaks the rules or settings of that location.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to edit. (required)
     * @param attendee The id of the attendee involved in the appointment. (required)
     * @param staff The id of the staff member involved in the appointment. (required)
     * @param location The id of the location where the appointment will take place. (required)
     * @param start The appointment&#39;s start date &amp; time. (required)
     * @param end The appointment&#39;s end date &amp; time. (required)
     * @param term The id of the term when the appointment takes place. (optional)
     * @param event The id of the event of the appointment. (optional)
     * @param services Comma-separated string containing the ids of the services of the appointment. (optional)
     * @param notes The notes of the appointment. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmenteditanywayWithHttpInfo(String token, UUID id, UUID attendee, UUID staff, UUID location, OffsetDateTime start, OffsetDateTime end, UUID term, UUID event, String services, String notes) throws ApiException {
        okhttp3.Call localVarCall = appointmenteditanywayValidateBeforeCall(token, id, attendee, staff, location, start, end, term, event, services, notes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Edit an appointment even if it breaks activated rules (asynchronously)
     * Allows the user to edit an existing appointment even if it breaks the rules or settings of that location.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to edit. (required)
     * @param attendee The id of the attendee involved in the appointment. (required)
     * @param staff The id of the staff member involved in the appointment. (required)
     * @param location The id of the location where the appointment will take place. (required)
     * @param start The appointment&#39;s start date &amp; time. (required)
     * @param end The appointment&#39;s end date &amp; time. (required)
     * @param term The id of the term when the appointment takes place. (optional)
     * @param event The id of the event of the appointment. (optional)
     * @param services Comma-separated string containing the ids of the services of the appointment. (optional)
     * @param notes The notes of the appointment. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmenteditanywayAsync(String token, UUID id, UUID attendee, UUID staff, UUID location, OffsetDateTime start, OffsetDateTime end, UUID term, UUID event, String services, String notes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmenteditanywayValidateBeforeCall(token, id, attendee, staff, location, start, end, term, event, services, notes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmenteditpresence
     * @param token The authentication token. (required)
     * @param id The id of the appointment to edit its presence. (required)
     * @param showedup Specifies whether the attendee was showed-up or not in the appointment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmenteditpresenceCall(String token, UUID id, Boolean showedup, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmenteditpresence";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (showedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showedup", showedup));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmenteditpresenceValidateBeforeCall(String token, UUID id, Boolean showedup, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmenteditpresence(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmenteditpresence(Async)");
        }
        
        // verify the required parameter 'showedup' is set
        if (showedup == null) {
            throw new ApiException("Missing the required parameter 'showedup' when calling appointmenteditpresence(Async)");
        }
        

        okhttp3.Call localVarCall = appointmenteditpresenceCall(token, id, showedup, _callback);
        return localVarCall;

    }

    /**
     * Edit the no-show status of an appointment
     * Allows the user to edit the no-show status of an appointment by marking it as Voided, Restored, or as a Show.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to edit its presence. (required)
     * @param showedup Specifies whether the attendee was showed-up or not in the appointment. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmenteditpresence(String token, UUID id, Boolean showedup) throws ApiException {
        appointmenteditpresenceWithHttpInfo(token, id, showedup);
    }

    /**
     * Edit the no-show status of an appointment
     * Allows the user to edit the no-show status of an appointment by marking it as Voided, Restored, or as a Show.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to edit its presence. (required)
     * @param showedup Specifies whether the attendee was showed-up or not in the appointment. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmenteditpresenceWithHttpInfo(String token, UUID id, Boolean showedup) throws ApiException {
        okhttp3.Call localVarCall = appointmenteditpresenceValidateBeforeCall(token, id, showedup, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Edit the no-show status of an appointment (asynchronously)
     * Allows the user to edit the no-show status of an appointment by marking it as Voided, Restored, or as a Show.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to edit its presence. (required)
     * @param showedup Specifies whether the attendee was showed-up or not in the appointment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmenteditpresenceAsync(String token, UUID id, Boolean showedup, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmenteditpresenceValidateBeforeCall(token, id, showedup, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentfindallstaffslots
     * @param token The authentication token. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (required)
     * @param locationid The id of the service to filter by. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentfindallstaffslotsCall(String token, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID locationid, UUID eventid, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentfindallstaffslots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (starttime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starttime", starttime));
        }

        if (endtime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endtime", endtime));
        }

        if (serviceids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceids", serviceids));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentfindallstaffslotsValidateBeforeCall(String token, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID locationid, UUID eventid, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmentfindallstaffslots(Async)");
        }
        
        // verify the required parameter 'starttime' is set
        if (starttime == null) {
            throw new ApiException("Missing the required parameter 'starttime' when calling appointmentfindallstaffslots(Async)");
        }
        
        // verify the required parameter 'endtime' is set
        if (endtime == null) {
            throw new ApiException("Missing the required parameter 'endtime' when calling appointmentfindallstaffslots(Async)");
        }
        
        // verify the required parameter 'serviceids' is set
        if (serviceids == null) {
            throw new ApiException("Missing the required parameter 'serviceids' when calling appointmentfindallstaffslots(Async)");
        }
        
        // verify the required parameter 'locationid' is set
        if (locationid == null) {
            throw new ApiException("Missing the required parameter 'locationid' when calling appointmentfindallstaffslots(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentfindallstaffslotsCall(token, starttime, endtime, serviceids, locationid, eventid, photosize, _callback);
        return localVarCall;

    }

    /**
     * Finds all staff available slots filtered by service, date, etc
     * Allows the user to view available appointment slots when creating an appointment.
     * @param token The authentication token. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (required)
     * @param locationid The id of the service to filter by. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentfindallstaffslots(String token, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID locationid, UUID eventid, Integer photosize) throws ApiException {
        appointmentfindallstaffslotsWithHttpInfo(token, starttime, endtime, serviceids, locationid, eventid, photosize);
    }

    /**
     * Finds all staff available slots filtered by service, date, etc
     * Allows the user to view available appointment slots when creating an appointment.
     * @param token The authentication token. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (required)
     * @param locationid The id of the service to filter by. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentfindallstaffslotsWithHttpInfo(String token, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID locationid, UUID eventid, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = appointmentfindallstaffslotsValidateBeforeCall(token, starttime, endtime, serviceids, locationid, eventid, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Finds all staff available slots filtered by service, date, etc (asynchronously)
     * Allows the user to view available appointment slots when creating an appointment.
     * @param token The authentication token. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (required)
     * @param locationid The id of the service to filter by. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentfindallstaffslotsAsync(String token, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID locationid, UUID eventid, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentfindallstaffslotsValidateBeforeCall(token, starttime, endtime, serviceids, locationid, eventid, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentfindslots
     * @param token The authentication token. (required)
     * @param staffid The id of the staff to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentfindslotsCall(String token, UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentfindslots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (staffid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffid", staffid));
        }

        if (starttime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starttime", starttime));
        }

        if (endtime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endtime", endtime));
        }

        if (serviceids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceids", serviceids));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentfindslotsValidateBeforeCall(String token, UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmentfindslots(Async)");
        }
        
        // verify the required parameter 'staffid' is set
        if (staffid == null) {
            throw new ApiException("Missing the required parameter 'staffid' when calling appointmentfindslots(Async)");
        }
        
        // verify the required parameter 'starttime' is set
        if (starttime == null) {
            throw new ApiException("Missing the required parameter 'starttime' when calling appointmentfindslots(Async)");
        }
        
        // verify the required parameter 'endtime' is set
        if (endtime == null) {
            throw new ApiException("Missing the required parameter 'endtime' when calling appointmentfindslots(Async)");
        }
        
        // verify the required parameter 'serviceids' is set
        if (serviceids == null) {
            throw new ApiException("Missing the required parameter 'serviceids' when calling appointmentfindslots(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentfindslotsCall(token, staffid, starttime, endtime, serviceids, eventid, locationid, _callback);
        return localVarCall;

    }

    /**
     * Finds available slots filtered by service, date, staff, etc
     * Allows the user to view available appointment slots when creating an appointment.
     * @param token The authentication token. (required)
     * @param staffid The id of the staff to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentfindslots(String token, UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid) throws ApiException {
        appointmentfindslotsWithHttpInfo(token, staffid, starttime, endtime, serviceids, eventid, locationid);
    }

    /**
     * Finds available slots filtered by service, date, staff, etc
     * Allows the user to view available appointment slots when creating an appointment.
     * @param token The authentication token. (required)
     * @param staffid The id of the staff to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentfindslotsWithHttpInfo(String token, UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid) throws ApiException {
        okhttp3.Call localVarCall = appointmentfindslotsValidateBeforeCall(token, staffid, starttime, endtime, serviceids, eventid, locationid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Finds available slots filtered by service, date, staff, etc (asynchronously)
     * Allows the user to view available appointment slots when creating an appointment.
     * @param token The authentication token. (required)
     * @param staffid The id of the staff to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentfindslotsAsync(String token, UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentfindslotsValidateBeforeCall(token, staffid, starttime, endtime, serviceids, eventid, locationid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentfindstaff
     * @param token The authentication token. (required)
     * @param serviceids CSV list of the service ids to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentfindstaffCall(String token, String serviceids, OffsetDateTime starttime, OffsetDateTime endtime, UUID eventid, UUID locationid, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentfindstaff";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (serviceids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceids", serviceids));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (starttime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starttime", starttime));
        }

        if (endtime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endtime", endtime));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentfindstaffValidateBeforeCall(String token, String serviceids, OffsetDateTime starttime, OffsetDateTime endtime, UUID eventid, UUID locationid, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmentfindstaff(Async)");
        }
        
        // verify the required parameter 'serviceids' is set
        if (serviceids == null) {
            throw new ApiException("Missing the required parameter 'serviceids' when calling appointmentfindstaff(Async)");
        }
        
        // verify the required parameter 'starttime' is set
        if (starttime == null) {
            throw new ApiException("Missing the required parameter 'starttime' when calling appointmentfindstaff(Async)");
        }
        
        // verify the required parameter 'endtime' is set
        if (endtime == null) {
            throw new ApiException("Missing the required parameter 'endtime' when calling appointmentfindstaff(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentfindstaffCall(token, serviceids, starttime, endtime, eventid, locationid, photosize, _callback);
        return localVarCall;

    }

    /**
     * Finds staff available by service, date, event, etc
     * Allows the user to view staff availability when creating an appointment.
     * @param token The authentication token. (required)
     * @param serviceids CSV list of the service ids to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentfindstaff(String token, String serviceids, OffsetDateTime starttime, OffsetDateTime endtime, UUID eventid, UUID locationid, Integer photosize) throws ApiException {
        appointmentfindstaffWithHttpInfo(token, serviceids, starttime, endtime, eventid, locationid, photosize);
    }

    /**
     * Finds staff available by service, date, event, etc
     * Allows the user to view staff availability when creating an appointment.
     * @param token The authentication token. (required)
     * @param serviceids CSV list of the service ids to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentfindstaffWithHttpInfo(String token, String serviceids, OffsetDateTime starttime, OffsetDateTime endtime, UUID eventid, UUID locationid, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = appointmentfindstaffValidateBeforeCall(token, serviceids, starttime, endtime, eventid, locationid, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Finds staff available by service, date, event, etc (asynchronously)
     * Allows the user to view staff availability when creating an appointment.
     * @param token The authentication token. (required)
     * @param serviceids CSV list of the service ids to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentfindstaffAsync(String token, String serviceids, OffsetDateTime starttime, OffsetDateTime endtime, UUID eventid, UUID locationid, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentfindstaffValidateBeforeCall(token, serviceids, starttime, endtime, eventid, locationid, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentget
     * @param token The authentication token. (required)
     * @param id The id of the appointment to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentgetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentgetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmentget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentget(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentgetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of an appointment
     * Allows the user to view an individual appointment and its details.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentget(String token, UUID id) throws ApiException {
        appointmentgetWithHttpInfo(token, id);
    }

    /**
     * Search and view details of an appointment
     * Allows the user to view an individual appointment and its details.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentgetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = appointmentgetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of an appointment (asynchronously)
     * Allows the user to view an individual appointment and its details.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentgetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentgetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentgetcurrent
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location where the user wants to sign-in. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentgetcurrentCall(UUID station, String user, UUID location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentgetcurrent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentgetcurrentValidateBeforeCall(UUID station, String user, UUID location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling appointmentgetcurrent(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling appointmentgetcurrent(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling appointmentgetcurrent(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentgetcurrentCall(station, user, location, _callback);
        return localVarCall;

    }

    /**
     * Get the current appointments for the user that is about to sign-in via the specified sign-in station.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location where the user wants to sign-in. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentgetcurrent(UUID station, String user, UUID location) throws ApiException {
        appointmentgetcurrentWithHttpInfo(station, user, location);
    }

    /**
     * Get the current appointments for the user that is about to sign-in via the specified sign-in station.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location where the user wants to sign-in. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentgetcurrentWithHttpInfo(UUID station, String user, UUID location) throws ApiException {
        okhttp3.Call localVarCall = appointmentgetcurrentValidateBeforeCall(station, user, location, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the current appointments for the user that is about to sign-in via the specified sign-in station. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location where the user wants to sign-in. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentgetcurrentAsync(UUID station, String user, UUID location, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentgetcurrentValidateBeforeCall(station, user, location, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentgetlocations
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to get its locations. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentgetlocationsCall(String token, UUID serviceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentgetlocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (serviceid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceid", serviceid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentgetlocationsValidateBeforeCall(String token, UUID serviceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmentgetlocations(Async)");
        }
        
        // verify the required parameter 'serviceid' is set
        if (serviceid == null) {
            throw new ApiException("Missing the required parameter 'serviceid' when calling appointmentgetlocations(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentgetlocationsCall(token, serviceid, _callback);
        return localVarCall;

    }

    /**
     * Find locations where a service is available
     * Allows the user to search for appointment availability by location or service.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to get its locations. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentgetlocations(String token, UUID serviceid) throws ApiException {
        appointmentgetlocationsWithHttpInfo(token, serviceid);
    }

    /**
     * Find locations where a service is available
     * Allows the user to search for appointment availability by location or service.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to get its locations. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentgetlocationsWithHttpInfo(String token, UUID serviceid) throws ApiException {
        okhttp3.Call localVarCall = appointmentgetlocationsValidateBeforeCall(token, serviceid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Find locations where a service is available (asynchronously)
     * Allows the user to search for appointment availability by location or service.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to get its locations. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentgetlocationsAsync(String token, UUID serviceid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentgetlocationsValidateBeforeCall(token, serviceid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentlist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param startdate The start date of the period to filter the appointments. (optional)
     * @param enddate The end date of the period to filter the appointments. (optional)
     * @param userid The attendee id to filter the appointments. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentlistCall(String token, Integer from, Integer count, OffsetDateTime startdate, OffsetDateTime enddate, UUID userid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (startdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startdate", startdate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentlistValidateBeforeCall(String token, Integer from, Integer count, OffsetDateTime startdate, OffsetDateTime enddate, UUID userid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmentlist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling appointmentlist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling appointmentlist(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentlistCall(token, from, count, startdate, enddate, userid, _callback);
        return localVarCall;

    }

    /**
     * View a list of appointments
     * Allows the user to view all upcoming appointments for the location or locations they are scoped to.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param startdate The start date of the period to filter the appointments. (optional)
     * @param enddate The end date of the period to filter the appointments. (optional)
     * @param userid The attendee id to filter the appointments. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentlist(String token, Integer from, Integer count, OffsetDateTime startdate, OffsetDateTime enddate, UUID userid) throws ApiException {
        appointmentlistWithHttpInfo(token, from, count, startdate, enddate, userid);
    }

    /**
     * View a list of appointments
     * Allows the user to view all upcoming appointments for the location or locations they are scoped to.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param startdate The start date of the period to filter the appointments. (optional)
     * @param enddate The end date of the period to filter the appointments. (optional)
     * @param userid The attendee id to filter the appointments. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentlistWithHttpInfo(String token, Integer from, Integer count, OffsetDateTime startdate, OffsetDateTime enddate, UUID userid) throws ApiException {
        okhttp3.Call localVarCall = appointmentlistValidateBeforeCall(token, from, count, startdate, enddate, userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of appointments (asynchronously)
     * Allows the user to view all upcoming appointments for the location or locations they are scoped to.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param startdate The start date of the period to filter the appointments. (optional)
     * @param enddate The end date of the period to filter the appointments. (optional)
     * @param userid The attendee id to filter the appointments. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentlistAsync(String token, Integer from, Integer count, OffsetDateTime startdate, OffsetDateTime enddate, UUID userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentlistValidateBeforeCall(token, from, count, startdate, enddate, userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentlistmine
     * @param token The authentication token. (required)
     * @param start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentlistmineCall(String token, OffsetDateTime start, OffsetDateTime modifiedafter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentlistmine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (modifiedafter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedafter", modifiedafter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentlistmineValidateBeforeCall(String token, OffsetDateTime start, OffsetDateTime modifiedafter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmentlistmine(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentlistmineCall(token, start, modifiedafter, _callback);
        return localVarCall;

    }

    /**
     * View all my upcoming appointments
     * 
     * @param token The authentication token. (required)
     * @param start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentlistmine(String token, OffsetDateTime start, OffsetDateTime modifiedafter) throws ApiException {
        appointmentlistmineWithHttpInfo(token, start, modifiedafter);
    }

    /**
     * View all my upcoming appointments
     * 
     * @param token The authentication token. (required)
     * @param start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentlistmineWithHttpInfo(String token, OffsetDateTime start, OffsetDateTime modifiedafter) throws ApiException {
        okhttp3.Call localVarCall = appointmentlistmineValidateBeforeCall(token, start, modifiedafter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all my upcoming appointments (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentlistmineAsync(String token, OffsetDateTime start, OffsetDateTime modifiedafter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentlistmineValidateBeforeCall(token, start, modifiedafter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentlistupcoming
     * @param token The authentication token. (required)
     * @param start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentlistupcomingCall(String token, OffsetDateTime start, OffsetDateTime modifiedafter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentlistupcoming";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (modifiedafter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedafter", modifiedafter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentlistupcomingValidateBeforeCall(String token, OffsetDateTime start, OffsetDateTime modifiedafter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmentlistupcoming(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentlistupcomingCall(token, start, modifiedafter, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of all my upcoming appointments
     * Allows the user to view all of their own upcoming appointments.
     * @param token The authentication token. (required)
     * @param start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentlistupcoming(String token, OffsetDateTime start, OffsetDateTime modifiedafter) throws ApiException {
        appointmentlistupcomingWithHttpInfo(token, start, modifiedafter);
    }

    /**
     * Search and view details of all my upcoming appointments
     * Allows the user to view all of their own upcoming appointments.
     * @param token The authentication token. (required)
     * @param start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentlistupcomingWithHttpInfo(String token, OffsetDateTime start, OffsetDateTime modifiedafter) throws ApiException {
        okhttp3.Call localVarCall = appointmentlistupcomingValidateBeforeCall(token, start, modifiedafter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of all my upcoming appointments (asynchronously)
     * Allows the user to view all of their own upcoming appointments.
     * @param token The authentication token. (required)
     * @param start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentlistupcomingAsync(String token, OffsetDateTime start, OffsetDateTime modifiedafter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentlistupcomingValidateBeforeCall(token, start, modifiedafter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentrescheduleoutlook
     * @param token The authentication token. (required)
     * @param id The id of the appointment to edit. (required)
     * @param start The appointment&#39;s start date &amp; time. (required)
     * @param end The appointment&#39;s end date &amp; time. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentrescheduleoutlookCall(String token, UUID id, OffsetDateTime start, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentrescheduleoutlook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentrescheduleoutlookValidateBeforeCall(String token, UUID id, OffsetDateTime start, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmentrescheduleoutlook(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentrescheduleoutlook(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling appointmentrescheduleoutlook(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling appointmentrescheduleoutlook(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentrescheduleoutlookCall(token, id, start, end, _callback);
        return localVarCall;

    }

    /**
     * Reschedule an appointment from MS Outlook.
     * Allows the user to reschedule, edit, or cancel appointments via MS Outlook if the user has the AccuCampus add-on installed on their Outlook.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to edit. (required)
     * @param start The appointment&#39;s start date &amp; time. (required)
     * @param end The appointment&#39;s end date &amp; time. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentrescheduleoutlook(String token, UUID id, OffsetDateTime start, OffsetDateTime end) throws ApiException {
        appointmentrescheduleoutlookWithHttpInfo(token, id, start, end);
    }

    /**
     * Reschedule an appointment from MS Outlook.
     * Allows the user to reschedule, edit, or cancel appointments via MS Outlook if the user has the AccuCampus add-on installed on their Outlook.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to edit. (required)
     * @param start The appointment&#39;s start date &amp; time. (required)
     * @param end The appointment&#39;s end date &amp; time. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentrescheduleoutlookWithHttpInfo(String token, UUID id, OffsetDateTime start, OffsetDateTime end) throws ApiException {
        okhttp3.Call localVarCall = appointmentrescheduleoutlookValidateBeforeCall(token, id, start, end, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reschedule an appointment from MS Outlook. (asynchronously)
     * Allows the user to reschedule, edit, or cancel appointments via MS Outlook if the user has the AccuCampus add-on installed on their Outlook.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to edit. (required)
     * @param start The appointment&#39;s start date &amp; time. (required)
     * @param end The appointment&#39;s end date &amp; time. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentrescheduleoutlookAsync(String token, UUID id, OffsetDateTime start, OffsetDateTime end, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentrescheduleoutlookValidateBeforeCall(token, id, start, end, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentrestore
     * @param token The authentication token. (required)
     * @param id The id of the appointment to restore. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentrestoreCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentrestore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentrestoreValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmentrestore(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentrestore(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentrestoreCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Restore an appointment
     * Allows the user to restore a canceled appointment.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to restore. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentrestore(String token, UUID id) throws ApiException {
        appointmentrestoreWithHttpInfo(token, id);
    }

    /**
     * Restore an appointment
     * Allows the user to restore a canceled appointment.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to restore. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentrestoreWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = appointmentrestoreValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restore an appointment (asynchronously)
     * Allows the user to restore a canceled appointment.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to restore. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentrestoreAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentrestoreValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentrestoreanyway
     * @param token The authentication token. (required)
     * @param id The id of the appointment to restore. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentrestoreanywayCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentrestoreanyway";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentrestoreanywayValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmentrestoreanyway(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentrestoreanyway(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentrestoreanywayCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Restore an appointment even if it breaks activated rules
     * Allows the user to restore a canceled appointment even if that appointment breaks the rules or settings of that location.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to restore. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentrestoreanyway(String token, UUID id) throws ApiException {
        appointmentrestoreanywayWithHttpInfo(token, id);
    }

    /**
     * Restore an appointment even if it breaks activated rules
     * Allows the user to restore a canceled appointment even if that appointment breaks the rules or settings of that location.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to restore. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentrestoreanywayWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = appointmentrestoreanywayValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restore an appointment even if it breaks activated rules (asynchronously)
     * Allows the user to restore a canceled appointment even if that appointment breaks the rules or settings of that location.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to restore. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentrestoreanywayAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentrestoreanywayValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/appointmentsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = appointmentsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Schedule an appointment
     * Allows the user to schedule an appointment within the rules of the location and the availability of staff members.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        appointmentsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Schedule an appointment
     * Allows the user to schedule an appointment within the rules of the location and the availability of staff members.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = appointmentsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Schedule an appointment (asynchronously)
     * Allows the user to schedule an appointment within the rules of the location and the availability of staff members.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentsetasvalid
     * @param token The authentication token. (required)
     * @param id The id of the appointment to set as valid. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentsetasvalidCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentsetasvalid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentsetasvalidValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmentsetasvalid(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentsetasvalid(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentsetasvalidCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Schedule an appointment even if it breaks activated rules
     * Allows the user to schedule an appointment even if it breaks the rules or settings of that location or if it goes against the availability of the staff member.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to set as valid. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentsetasvalid(String token, UUID id) throws ApiException {
        appointmentsetasvalidWithHttpInfo(token, id);
    }

    /**
     * Schedule an appointment even if it breaks activated rules
     * Allows the user to schedule an appointment even if it breaks the rules or settings of that location or if it goes against the availability of the staff member.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to set as valid. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentsetasvalidWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = appointmentsetasvalidValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Schedule an appointment even if it breaks activated rules (asynchronously)
     * Allows the user to schedule an appointment even if it breaks the rules or settings of that location or if it goes against the availability of the staff member.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to set as valid. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentsetasvalidAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentsetasvalidValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentsuggestlocations
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentsuggestlocationsCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentsuggestlocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentsuggestlocationsValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmentsuggestlocations(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentsuggestlocationsCall(token, _callback);
        return localVarCall;

    }

    /**
     * View the locations with most appointments
     * Allows the user to view suggestions for the most popular locations in which to make appointments
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentsuggestlocations(String token) throws ApiException {
        appointmentsuggestlocationsWithHttpInfo(token);
    }

    /**
     * View the locations with most appointments
     * Allows the user to view suggestions for the most popular locations in which to make appointments
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentsuggestlocationsWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = appointmentsuggestlocationsValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the locations with most appointments (asynchronously)
     * Allows the user to view suggestions for the most popular locations in which to make appointments
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentsuggestlocationsAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentsuggestlocationsValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentsuggestservices
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentsuggestservicesCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentsuggestservices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentsuggestservicesValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmentsuggestservices(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentsuggestservicesCall(token, _callback);
        return localVarCall;

    }

    /**
     * View the services with most appointments
     * Allows the user to view suggestions for the most popular services for which to make appointments.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentsuggestservices(String token) throws ApiException {
        appointmentsuggestservicesWithHttpInfo(token);
    }

    /**
     * View the services with most appointments
     * Allows the user to view suggestions for the most popular services for which to make appointments.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentsuggestservicesWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = appointmentsuggestservicesValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the services with most appointments (asynchronously)
     * Allows the user to view suggestions for the most popular services for which to make appointments.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentsuggestservicesAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentsuggestservicesValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentvoid
     * @param token The authentication token. (required)
     * @param id The id of the appointment to cancel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentvoidCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointmentvoid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentvoidValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appointmentvoid(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentvoid(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentvoidCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Void an appointment
     * Allows the user to void an appointment that has been marked as a no-show so that it does not count against the student&#39;s restrictions.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to cancel. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentvoid(String token, UUID id) throws ApiException {
        appointmentvoidWithHttpInfo(token, id);
    }

    /**
     * Void an appointment
     * Allows the user to void an appointment that has been marked as a no-show so that it does not count against the student&#39;s restrictions.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to cancel. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentvoidWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = appointmentvoidValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Void an appointment (asynchronously)
     * Allows the user to void an appointment that has been marked as a no-show so that it does not count against the student&#39;s restrictions.
     * @param token The authentication token. (required)
     * @param id The id of the appointment to cancel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentvoidAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentvoidValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsharegetphone
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsharegetphoneCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appsharegetphone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsharegetphoneValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appsharegetphone(Async)");
        }
        

        okhttp3.Call localVarCall = appsharegetphoneCall(token, _callback);
        return localVarCall;

    }

    /**
     * Gets the phone number of the current user
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appsharegetphone(String token) throws ApiException {
        appsharegetphoneWithHttpInfo(token);
    }

    /**
     * Gets the phone number of the current user
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appsharegetphoneWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = appsharegetphoneValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the phone number of the current user (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsharegetphoneAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsharegetphoneValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsharesendtext
     * @param token The authentication token. (required)
     * @param phonenumber Phone number to where to send the link. Leave empty to the number on file. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsharesendtextCall(String token, String phonenumber, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appsharesendtext";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (phonenumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phonenumber", phonenumber));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsharesendtextValidateBeforeCall(String token, String phonenumber, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appsharesendtext(Async)");
        }
        

        okhttp3.Call localVarCall = appsharesendtextCall(token, phonenumber, _callback);
        return localVarCall;

    }

    /**
     * Sends an SMS with the link to the app
     * 
     * @param token The authentication token. (required)
     * @param phonenumber Phone number to where to send the link. Leave empty to the number on file. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appsharesendtext(String token, String phonenumber) throws ApiException {
        appsharesendtextWithHttpInfo(token, phonenumber);
    }

    /**
     * Sends an SMS with the link to the app
     * 
     * @param token The authentication token. (required)
     * @param phonenumber Phone number to where to send the link. Leave empty to the number on file. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appsharesendtextWithHttpInfo(String token, String phonenumber) throws ApiException {
        okhttp3.Call localVarCall = appsharesendtextValidateBeforeCall(token, phonenumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sends an SMS with the link to the app (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param phonenumber Phone number to where to send the link. Leave empty to the number on file. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsharesendtextAsync(String token, String phonenumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsharesendtextValidateBeforeCall(token, phonenumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attendancelogcommentdelete
     * @param token The authentication token. (required)
     * @param id The id of the attendance log comment to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogcommentdeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendancelogcommentdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attendancelogcommentdeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling attendancelogcommentdelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling attendancelogcommentdelete(Async)");
        }
        

        okhttp3.Call localVarCall = attendancelogcommentdeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a comment on an attendance log
     * 
     * @param token The authentication token. (required)
     * @param id The id of the attendance log comment to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void attendancelogcommentdelete(String token, UUID id) throws ApiException {
        attendancelogcommentdeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a comment on an attendance log
     * 
     * @param token The authentication token. (required)
     * @param id The id of the attendance log comment to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attendancelogcommentdeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = attendancelogcommentdeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a comment on an attendance log (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param id The id of the attendance log comment to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogcommentdeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attendancelogcommentdeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attendancelogcommentget
     * @param token The authentication token. (required)
     * @param id The id of the comment to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogcommentgetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendancelogcommentget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attendancelogcommentgetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling attendancelogcommentget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling attendancelogcommentget(Async)");
        }
        

        okhttp3.Call localVarCall = attendancelogcommentgetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View a comment on an attendance log
     * 
     * @param token The authentication token. (required)
     * @param id The id of the comment to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void attendancelogcommentget(String token, UUID id) throws ApiException {
        attendancelogcommentgetWithHttpInfo(token, id);
    }

    /**
     * View a comment on an attendance log
     * 
     * @param token The authentication token. (required)
     * @param id The id of the comment to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attendancelogcommentgetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = attendancelogcommentgetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a comment on an attendance log (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param id The id of the comment to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogcommentgetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attendancelogcommentgetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attendancelogcommentlist
     * @param attendancelog The id of the attendance log whose comments have to be retrieved. (required)
     * @param token The authentication token. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogcommentlistCall(UUID attendancelog, String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendancelogcommentlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (attendancelog != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attendancelog", attendancelog));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attendancelogcommentlistValidateBeforeCall(UUID attendancelog, String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'attendancelog' is set
        if (attendancelog == null) {
            throw new ApiException("Missing the required parameter 'attendancelog' when calling attendancelogcommentlist(Async)");
        }
        

        okhttp3.Call localVarCall = attendancelogcommentlistCall(attendancelog, token, _callback);
        return localVarCall;

    }

    /**
     * View all the comments on a specific attendance log
     * 
     * @param attendancelog The id of the attendance log whose comments have to be retrieved. (required)
     * @param token The authentication token. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void attendancelogcommentlist(UUID attendancelog, String token) throws ApiException {
        attendancelogcommentlistWithHttpInfo(attendancelog, token);
    }

    /**
     * View all the comments on a specific attendance log
     * 
     * @param attendancelog The id of the attendance log whose comments have to be retrieved. (required)
     * @param token The authentication token. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attendancelogcommentlistWithHttpInfo(UUID attendancelog, String token) throws ApiException {
        okhttp3.Call localVarCall = attendancelogcommentlistValidateBeforeCall(attendancelog, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all the comments on a specific attendance log (asynchronously)
     * 
     * @param attendancelog The id of the attendance log whose comments have to be retrieved. (required)
     * @param token The authentication token. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogcommentlistAsync(UUID attendancelog, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attendancelogcommentlistValidateBeforeCall(attendancelog, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attendancelogcommentsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogcommentsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/attendancelogcommentsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attendancelogcommentsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = attendancelogcommentsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Save a comment on an attendance log
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void attendancelogcommentsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        attendancelogcommentsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Save a comment on an attendance log
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attendancelogcommentsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = attendancelogcommentsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save a comment on an attendance log (asynchronously)
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogcommentsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attendancelogcommentsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attendancelogdelete
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogdeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendancelogdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attendancelogdeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling attendancelogdelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling attendancelogdelete(Async)");
        }
        

        okhttp3.Call localVarCall = attendancelogdeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete an attendance log
     * Allows the user to delete an existing attendance log.
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void attendancelogdelete(String token, UUID id) throws ApiException {
        attendancelogdeleteWithHttpInfo(token, id);
    }

    /**
     * Delete an attendance log
     * Allows the user to delete an existing attendance log.
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attendancelogdeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = attendancelogdeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an attendance log (asynchronously)
     * Allows the user to delete an existing attendance log.
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogdeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attendancelogdeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attendancelogget
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendanceloggetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendancelogget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attendanceloggetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling attendancelogget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling attendancelogget(Async)");
        }
        

        okhttp3.Call localVarCall = attendanceloggetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of an attendance log
     * Allows the user to view an individual attendance log and its details.
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void attendancelogget(String token, UUID id) throws ApiException {
        attendanceloggetWithHttpInfo(token, id);
    }

    /**
     * Search and view details of an attendance log
     * Allows the user to view an individual attendance log and its details.
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attendanceloggetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = attendanceloggetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of an attendance log (asynchronously)
     * Allows the user to view an individual attendance log and its details.
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendanceloggetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attendanceloggetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attendanceloggetchangehistory
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendanceloggetchangehistoryCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendanceloggetchangehistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attendanceloggetchangehistoryValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling attendanceloggetchangehistory(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling attendanceloggetchangehistory(Async)");
        }
        

        okhttp3.Call localVarCall = attendanceloggetchangehistoryCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of an attendance log&#39;s swipe history
     * Allows the user to view the swipes of an individual attendance logs (sign ins and sign outs).
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void attendanceloggetchangehistory(String token, UUID id) throws ApiException {
        attendanceloggetchangehistoryWithHttpInfo(token, id);
    }

    /**
     * Search and view details of an attendance log&#39;s swipe history
     * Allows the user to view the swipes of an individual attendance logs (sign ins and sign outs).
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attendanceloggetchangehistoryWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = attendanceloggetchangehistoryValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of an attendance log&#39;s swipe history (asynchronously)
     * Allows the user to view the swipes of an individual attendance logs (sign ins and sign outs).
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendanceloggetchangehistoryAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attendanceloggetchangehistoryValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attendanceloglist
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
     * @param userid The user ID of the user to get the logs. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendanceloglistCall(Integer from, Integer count, String token, String filter, UUID userid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendanceloglist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attendanceloglistValidateBeforeCall(Integer from, Integer count, String token, String filter, UUID userid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling attendanceloglist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling attendanceloglist(Async)");
        }
        

        okhttp3.Call localVarCall = attendanceloglistCall(from, count, token, filter, userid, _callback);
        return localVarCall;

    }

    /**
     * View a list of attendance logs
     * Allows the user to view the list of all attendance logs in the location or locations in which the user is scoped.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
     * @param userid The user ID of the user to get the logs. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void attendanceloglist(Integer from, Integer count, String token, String filter, UUID userid) throws ApiException {
        attendanceloglistWithHttpInfo(from, count, token, filter, userid);
    }

    /**
     * View a list of attendance logs
     * Allows the user to view the list of all attendance logs in the location or locations in which the user is scoped.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
     * @param userid The user ID of the user to get the logs. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attendanceloglistWithHttpInfo(Integer from, Integer count, String token, String filter, UUID userid) throws ApiException {
        okhttp3.Call localVarCall = attendanceloglistValidateBeforeCall(from, count, token, filter, userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of attendance logs (asynchronously)
     * Allows the user to view the list of all attendance logs in the location or locations in which the user is scoped.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
     * @param userid The user ID of the user to get the logs. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendanceloglistAsync(Integer from, Integer count, String token, String filter, UUID userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attendanceloglistValidateBeforeCall(from, count, token, filter, userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attendanceloglistmine
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendanceloglistmineCall(Integer from, Integer count, String token, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendanceloglistmine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attendanceloglistmineValidateBeforeCall(Integer from, Integer count, String token, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling attendanceloglistmine(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling attendanceloglistmine(Async)");
        }
        

        okhttp3.Call localVarCall = attendanceloglistmineCall(from, count, token, filter, _callback);
        return localVarCall;

    }

    /**
     * Gets the attendance logs of the current user
     * 
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void attendanceloglistmine(Integer from, Integer count, String token, String filter) throws ApiException {
        attendanceloglistmineWithHttpInfo(from, count, token, filter);
    }

    /**
     * Gets the attendance logs of the current user
     * 
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attendanceloglistmineWithHttpInfo(Integer from, Integer count, String token, String filter) throws ApiException {
        okhttp3.Call localVarCall = attendanceloglistmineValidateBeforeCall(from, count, token, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the attendance logs of the current user (asynchronously)
     * 
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendanceloglistmineAsync(Integer from, Integer count, String token, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attendanceloglistmineValidateBeforeCall(from, count, token, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attendancelogliststaff
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogliststaffCall(Integer from, Integer count, String token, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendancelogliststaff";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attendancelogliststaffValidateBeforeCall(Integer from, Integer count, String token, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling attendancelogliststaff(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling attendancelogliststaff(Async)");
        }
        

        okhttp3.Call localVarCall = attendancelogliststaffCall(from, count, token, filter, _callback);
        return localVarCall;

    }

    /**
     * Gets the attendance logs that the current user is involved in as staff
     * 
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void attendancelogliststaff(Integer from, Integer count, String token, String filter) throws ApiException {
        attendancelogliststaffWithHttpInfo(from, count, token, filter);
    }

    /**
     * Gets the attendance logs that the current user is involved in as staff
     * 
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attendancelogliststaffWithHttpInfo(Integer from, Integer count, String token, String filter) throws ApiException {
        okhttp3.Call localVarCall = attendancelogliststaffValidateBeforeCall(from, count, token, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the attendance logs that the current user is involved in as staff (asynchronously)
     * 
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogliststaffAsync(Integer from, Integer count, String token, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attendancelogliststaffValidateBeforeCall(from, count, token, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attendancelogsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/attendancelogsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attendancelogsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = attendancelogsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit an attendance log
     * Allows the user to create or edit an attendance log.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void attendancelogsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        attendancelogsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit an attendance log
     * Allows the user to create or edit an attendance log.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attendancelogsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = attendancelogsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit an attendance log (asynchronously)
     * Allows the user to create or edit an attendance log.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attendancelogsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attendancelogsignout
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to sign-out. (optional)
     * @param location The id of the location to filter the users to sign out. (optional)
     * @param event The id of the event to filter the users to sign out. (optional)
     * @param datetime Specifies the date and time when the specified logs have to be signed out. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogsignoutCall(String token, UUID id, UUID location, UUID event, OffsetDateTime datetime, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendancelogsignout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (datetime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datetime", datetime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attendancelogsignoutValidateBeforeCall(String token, UUID id, UUID location, UUID event, OffsetDateTime datetime, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling attendancelogsignout(Async)");
        }
        

        okhttp3.Call localVarCall = attendancelogsignoutCall(token, id, location, event, datetime, _callback);
        return localVarCall;

    }

    /**
     * Sign out an attendance log
     * Allows the user to sign out am attendance log from the Who&#39;s In page.
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to sign-out. (optional)
     * @param location The id of the location to filter the users to sign out. (optional)
     * @param event The id of the event to filter the users to sign out. (optional)
     * @param datetime Specifies the date and time when the specified logs have to be signed out. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void attendancelogsignout(String token, UUID id, UUID location, UUID event, OffsetDateTime datetime) throws ApiException {
        attendancelogsignoutWithHttpInfo(token, id, location, event, datetime);
    }

    /**
     * Sign out an attendance log
     * Allows the user to sign out am attendance log from the Who&#39;s In page.
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to sign-out. (optional)
     * @param location The id of the location to filter the users to sign out. (optional)
     * @param event The id of the event to filter the users to sign out. (optional)
     * @param datetime Specifies the date and time when the specified logs have to be signed out. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attendancelogsignoutWithHttpInfo(String token, UUID id, UUID location, UUID event, OffsetDateTime datetime) throws ApiException {
        okhttp3.Call localVarCall = attendancelogsignoutValidateBeforeCall(token, id, location, event, datetime, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sign out an attendance log (asynchronously)
     * Allows the user to sign out am attendance log from the Who&#39;s In page.
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to sign-out. (optional)
     * @param location The id of the location to filter the users to sign out. (optional)
     * @param event The id of the event to filter the users to sign out. (optional)
     * @param datetime Specifies the date and time when the specified logs have to be signed out. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogsignoutAsync(String token, UUID id, UUID location, UUID event, OffsetDateTime datetime, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attendancelogsignoutValidateBeforeCall(token, id, location, event, datetime, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attendancelogwhosin
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param location The id of the location to search for users that are in. (optional)
     * @param event The id of the event to search for users that are in. (optional)
     * @param sorting Field to sort by. Either first-name, last-name or sign-in-time. (optional)
     * @param roles The comma-separated list of ids of the roles to search for users that are in. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param extensions A JSON array containing the extension filters (i.e [{name: &#39;nametofilter&#39;, value: &#39;valuetofilter&#39;}]). (optional)
     * @param export True to export the results as CSV (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogwhosinCall(Integer from, Integer count, String token, UUID location, UUID event, String sorting, String roles, Integer photosize, String extensions, Boolean export, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendancelogwhosin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (sorting != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sorting", sorting));
        }

        if (roles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roles", roles));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        if (extensions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extensions", extensions));
        }

        if (export != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export", export));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attendancelogwhosinValidateBeforeCall(Integer from, Integer count, String token, UUID location, UUID event, String sorting, String roles, Integer photosize, String extensions, Boolean export, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling attendancelogwhosin(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling attendancelogwhosin(Async)");
        }
        

        okhttp3.Call localVarCall = attendancelogwhosinCall(from, count, token, location, event, sorting, roles, photosize, extensions, export, _callback);
        return localVarCall;

    }

    /**
     * View who&#39;s in a location
     * Allows the user to view the Who&#39;s In page and view all users who are logged into locations in which the user is scoped.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param location The id of the location to search for users that are in. (optional)
     * @param event The id of the event to search for users that are in. (optional)
     * @param sorting Field to sort by. Either first-name, last-name or sign-in-time. (optional)
     * @param roles The comma-separated list of ids of the roles to search for users that are in. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param extensions A JSON array containing the extension filters (i.e [{name: &#39;nametofilter&#39;, value: &#39;valuetofilter&#39;}]). (optional)
     * @param export True to export the results as CSV (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void attendancelogwhosin(Integer from, Integer count, String token, UUID location, UUID event, String sorting, String roles, Integer photosize, String extensions, Boolean export) throws ApiException {
        attendancelogwhosinWithHttpInfo(from, count, token, location, event, sorting, roles, photosize, extensions, export);
    }

    /**
     * View who&#39;s in a location
     * Allows the user to view the Who&#39;s In page and view all users who are logged into locations in which the user is scoped.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param location The id of the location to search for users that are in. (optional)
     * @param event The id of the event to search for users that are in. (optional)
     * @param sorting Field to sort by. Either first-name, last-name or sign-in-time. (optional)
     * @param roles The comma-separated list of ids of the roles to search for users that are in. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param extensions A JSON array containing the extension filters (i.e [{name: &#39;nametofilter&#39;, value: &#39;valuetofilter&#39;}]). (optional)
     * @param export True to export the results as CSV (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attendancelogwhosinWithHttpInfo(Integer from, Integer count, String token, UUID location, UUID event, String sorting, String roles, Integer photosize, String extensions, Boolean export) throws ApiException {
        okhttp3.Call localVarCall = attendancelogwhosinValidateBeforeCall(from, count, token, location, event, sorting, roles, photosize, extensions, export, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View who&#39;s in a location (asynchronously)
     * Allows the user to view the Who&#39;s In page and view all users who are logged into locations in which the user is scoped.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param location The id of the location to search for users that are in. (optional)
     * @param event The id of the event to search for users that are in. (optional)
     * @param sorting Field to sort by. Either first-name, last-name or sign-in-time. (optional)
     * @param roles The comma-separated list of ids of the roles to search for users that are in. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param extensions A JSON array containing the extension filters (i.e [{name: &#39;nametofilter&#39;, value: &#39;valuetofilter&#39;}]). (optional)
     * @param export True to export the results as CSV (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancelogwhosinAsync(Integer from, Integer count, String token, UUID location, UUID event, String sorting, String roles, Integer photosize, String extensions, Boolean export, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attendancelogwhosinValidateBeforeCall(from, count, token, location, event, sorting, roles, photosize, extensions, export, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attendancerestrictiondelete
     * @param token The authentication token. (required)
     * @param id The id of the restriction to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancerestrictiondeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendancerestrictiondelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attendancerestrictiondeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling attendancerestrictiondelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling attendancerestrictiondelete(Async)");
        }
        

        okhttp3.Call localVarCall = attendancerestrictiondeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete an attendance restriction
     * Allows the user to delete an existing attendance restriction.
     * @param token The authentication token. (required)
     * @param id The id of the restriction to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void attendancerestrictiondelete(String token, UUID id) throws ApiException {
        attendancerestrictiondeleteWithHttpInfo(token, id);
    }

    /**
     * Delete an attendance restriction
     * Allows the user to delete an existing attendance restriction.
     * @param token The authentication token. (required)
     * @param id The id of the restriction to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attendancerestrictiondeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = attendancerestrictiondeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an attendance restriction (asynchronously)
     * Allows the user to delete an existing attendance restriction.
     * @param token The authentication token. (required)
     * @param id The id of the restriction to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancerestrictiondeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attendancerestrictiondeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attendancerestrictionget
     * @param token The authentication token. (required)
     * @param id The id of the restriction to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancerestrictiongetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendancerestrictionget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attendancerestrictiongetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling attendancerestrictionget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling attendancerestrictionget(Async)");
        }
        

        okhttp3.Call localVarCall = attendancerestrictiongetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View details of an attendance restriction
     * Allows the user to view an individual attendance restriction and its details.
     * @param token The authentication token. (required)
     * @param id The id of the restriction to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void attendancerestrictionget(String token, UUID id) throws ApiException {
        attendancerestrictiongetWithHttpInfo(token, id);
    }

    /**
     * View details of an attendance restriction
     * Allows the user to view an individual attendance restriction and its details.
     * @param token The authentication token. (required)
     * @param id The id of the restriction to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attendancerestrictiongetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = attendancerestrictiongetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of an attendance restriction (asynchronously)
     * Allows the user to view an individual attendance restriction and its details.
     * @param token The authentication token. (required)
     * @param id The id of the restriction to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancerestrictiongetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attendancerestrictiongetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attendancerestrictionlist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancerestrictionlistCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attendancerestrictionlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attendancerestrictionlistValidateBeforeCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling attendancerestrictionlist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling attendancerestrictionlist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling attendancerestrictionlist(Async)");
        }
        

        okhttp3.Call localVarCall = attendancerestrictionlistCall(token, from, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of attendance restrictions
     * Allows the user to view the list of all attendance restrictions.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void attendancerestrictionlist(String token, Integer from, Integer count) throws ApiException {
        attendancerestrictionlistWithHttpInfo(token, from, count);
    }

    /**
     * View a list of attendance restrictions
     * Allows the user to view the list of all attendance restrictions.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attendancerestrictionlistWithHttpInfo(String token, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = attendancerestrictionlistValidateBeforeCall(token, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of attendance restrictions (asynchronously)
     * Allows the user to view the list of all attendance restrictions.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancerestrictionlistAsync(String token, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attendancerestrictionlistValidateBeforeCall(token, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attendancerestrictionsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancerestrictionsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/attendancerestrictionsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attendancerestrictionsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = attendancerestrictionsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit an attendance restriction
     * Allows the user to create or edit an attendance restriction.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void attendancerestrictionsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        attendancerestrictionsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit an attendance restriction
     * Allows the user to create or edit an attendance restriction.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attendancerestrictionsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = attendancerestrictionsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit an attendance restriction (asynchronously)
     * Allows the user to create or edit an attendance restriction.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attendancerestrictionsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attendancerestrictionsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for beacondelete
     * @param token The authentication token. (required)
     * @param id The id of the beacon to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beacondeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beacondelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call beacondeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling beacondelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling beacondelete(Async)");
        }
        

        okhttp3.Call localVarCall = beacondeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a beacon profile
     * Allows the user to delete an existing beacon profile.
     * @param token The authentication token. (required)
     * @param id The id of the beacon to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void beacondelete(String token, UUID id) throws ApiException {
        beacondeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a beacon profile
     * Allows the user to delete an existing beacon profile.
     * @param token The authentication token. (required)
     * @param id The id of the beacon to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> beacondeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = beacondeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a beacon profile (asynchronously)
     * Allows the user to delete an existing beacon profile.
     * @param token The authentication token. (required)
     * @param id The id of the beacon to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beacondeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = beacondeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for beacondisable
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beacondisableCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beacondisable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call beacondisableValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling beacondisable(Async)");
        }
        

        okhttp3.Call localVarCall = beacondisableCall(token, _callback);
        return localVarCall;

    }

    /**
     * Disable beacon support account wide
     * Allows the user to enable or disable beacon usage account wide.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void beacondisable(String token) throws ApiException {
        beacondisableWithHttpInfo(token);
    }

    /**
     * Disable beacon support account wide
     * Allows the user to enable or disable beacon usage account wide.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> beacondisableWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = beacondisableValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disable beacon support account wide (asynchronously)
     * Allows the user to enable or disable beacon usage account wide.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beacondisableAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = beacondisableValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for beaconget
     * @param token The authentication token. (required)
     * @param id The id of the beacon to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beacongetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beaconget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call beacongetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling beaconget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling beaconget(Async)");
        }
        

        okhttp3.Call localVarCall = beacongetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View details of a beacon profile
     * Allows the user to view an individual beacon profile and its details.
     * @param token The authentication token. (required)
     * @param id The id of the beacon to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void beaconget(String token, UUID id) throws ApiException {
        beacongetWithHttpInfo(token, id);
    }

    /**
     * View details of a beacon profile
     * Allows the user to view an individual beacon profile and its details.
     * @param token The authentication token. (required)
     * @param id The id of the beacon to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> beacongetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = beacongetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a beacon profile (asynchronously)
     * Allows the user to view an individual beacon profile and its details.
     * @param token The authentication token. (required)
     * @param id The id of the beacon to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beacongetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = beacongetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for beacongetlocations
     * @param token The authentication token. (required)
     * @param beacons A JSON array containg the beacons data (region, minor and major) values. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beacongetlocationsCall(String token, String beacons, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beacongetlocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (beacons != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beacons", beacons));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call beacongetlocationsValidateBeforeCall(String token, String beacons, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling beacongetlocations(Async)");
        }
        
        // verify the required parameter 'beacons' is set
        if (beacons == null) {
            throw new ApiException("Missing the required parameter 'beacons' when calling beacongetlocations(Async)");
        }
        

        okhttp3.Call localVarCall = beacongetlocationsCall(token, beacons, _callback);
        return localVarCall;

    }

    /**
     * Get the sign-in stations assigned to specific beacons.
     * 
     * @param token The authentication token. (required)
     * @param beacons A JSON array containg the beacons data (region, minor and major) values. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void beacongetlocations(String token, String beacons) throws ApiException {
        beacongetlocationsWithHttpInfo(token, beacons);
    }

    /**
     * Get the sign-in stations assigned to specific beacons.
     * 
     * @param token The authentication token. (required)
     * @param beacons A JSON array containg the beacons data (region, minor and major) values. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> beacongetlocationsWithHttpInfo(String token, String beacons) throws ApiException {
        okhttp3.Call localVarCall = beacongetlocationsValidateBeforeCall(token, beacons, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the sign-in stations assigned to specific beacons. (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param beacons A JSON array containg the beacons data (region, minor and major) values. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beacongetlocationsAsync(String token, String beacons, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = beacongetlocationsValidateBeforeCall(token, beacons, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for beacongetstationlocation
     * @param token The authentication token. (required)
     * @param station The id of the sign-in station whose location information has to be retrieved. (required)
     * @param location The id of the location whose information has to be retrieved. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beacongetstationlocationCall(String token, UUID station, UUID location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beacongetstationlocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call beacongetstationlocationValidateBeforeCall(String token, UUID station, UUID location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling beacongetstationlocation(Async)");
        }
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling beacongetstationlocation(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling beacongetstationlocation(Async)");
        }
        

        okhttp3.Call localVarCall = beacongetstationlocationCall(token, station, location, _callback);
        return localVarCall;

    }

    /**
     * Get the location settings in the specified sign-in station.
     * 
     * @param token The authentication token. (required)
     * @param station The id of the sign-in station whose location information has to be retrieved. (required)
     * @param location The id of the location whose information has to be retrieved. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void beacongetstationlocation(String token, UUID station, UUID location) throws ApiException {
        beacongetstationlocationWithHttpInfo(token, station, location);
    }

    /**
     * Get the location settings in the specified sign-in station.
     * 
     * @param token The authentication token. (required)
     * @param station The id of the sign-in station whose location information has to be retrieved. (required)
     * @param location The id of the location whose information has to be retrieved. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> beacongetstationlocationWithHttpInfo(String token, UUID station, UUID location) throws ApiException {
        okhttp3.Call localVarCall = beacongetstationlocationValidateBeforeCall(token, station, location, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the location settings in the specified sign-in station. (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param station The id of the sign-in station whose location information has to be retrieved. (required)
     * @param location The id of the location whose information has to be retrieved. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beacongetstationlocationAsync(String token, UUID station, UUID location, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = beacongetstationlocationValidateBeforeCall(token, station, location, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for beacongetuuid
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beacongetuuidCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beacongetuuid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call beacongetuuidValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling beacongetuuid(Async)");
        }
        

        okhttp3.Call localVarCall = beacongetuuidCall(token, _callback);
        return localVarCall;

    }

    /**
     * View the identifier for the account&#39;s beacon region (for sign-in stations).
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void beacongetuuid(String token) throws ApiException {
        beacongetuuidWithHttpInfo(token);
    }

    /**
     * View the identifier for the account&#39;s beacon region (for sign-in stations).
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> beacongetuuidWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = beacongetuuidValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the identifier for the account&#39;s beacon region (for sign-in stations). (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beacongetuuidAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = beacongetuuidValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for beaconlist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconlistCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beaconlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call beaconlistValidateBeforeCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling beaconlist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling beaconlist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling beaconlist(Async)");
        }
        

        okhttp3.Call localVarCall = beaconlistCall(token, from, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of beacon profiles
     * Allows the user to view the list of all beacon profiles without their basic details.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void beaconlist(String token, Integer from, Integer count) throws ApiException {
        beaconlistWithHttpInfo(token, from, count);
    }

    /**
     * View a list of beacon profiles
     * Allows the user to view the list of all beacon profiles without their basic details.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> beaconlistWithHttpInfo(String token, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = beaconlistValidateBeforeCall(token, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of beacon profiles (asynchronously)
     * Allows the user to view the list of all beacon profiles without their basic details.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconlistAsync(String token, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = beaconlistValidateBeforeCall(token, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for beaconlistprofiles
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconlistprofilesCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beaconlistprofiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call beaconlistprofilesValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling beaconlistprofiles(Async)");
        }
        

        okhttp3.Call localVarCall = beaconlistprofilesCall(token, _callback);
        return localVarCall;

    }

    /**
     * View a list of beacon profiles with their characteristics
     * Allows the user to view the list of all beacon profiles with their basic details.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void beaconlistprofiles(String token) throws ApiException {
        beaconlistprofilesWithHttpInfo(token);
    }

    /**
     * View a list of beacon profiles with their characteristics
     * Allows the user to view the list of all beacon profiles with their basic details.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> beaconlistprofilesWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = beaconlistprofilesValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of beacon profiles with their characteristics (asynchronously)
     * Allows the user to view the list of all beacon profiles with their basic details.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconlistprofilesAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = beaconlistprofilesValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for beaconresetuuid
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconresetuuidCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beaconresetuuid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call beaconresetuuidValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling beaconresetuuid(Async)");
        }
        

        okhttp3.Call localVarCall = beaconresetuuidCall(token, _callback);
        return localVarCall;

    }

    /**
     * Generate or reset the identifier for the account&#39;s beacon region.
     * Allows the user to reset the identifier for the beacon region, generally not necessary.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void beaconresetuuid(String token) throws ApiException {
        beaconresetuuidWithHttpInfo(token);
    }

    /**
     * Generate or reset the identifier for the account&#39;s beacon region.
     * Allows the user to reset the identifier for the beacon region, generally not necessary.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> beaconresetuuidWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = beaconresetuuidValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generate or reset the identifier for the account&#39;s beacon region. (asynchronously)
     * Allows the user to reset the identifier for the beacon region, generally not necessary.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconresetuuidAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = beaconresetuuidValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for beaconsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/beaconsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call beaconsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = beaconsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a beacon profile
     * Allows the user to create or edit a beacon profile.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void beaconsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        beaconsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a beacon profile
     * Allows the user to create or edit a beacon profile.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> beaconsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = beaconsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a beacon profile (asynchronously)
     * Allows the user to create or edit a beacon profile.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = beaconsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for beaconscanlocations
     * @param token The authentication token. (required)
     * @param beacons A JSON array containg the beacons data (region, minor and major) values. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconscanlocationsCall(String token, String beacons, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beaconscanlocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (beacons != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beacons", beacons));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call beaconscanlocationsValidateBeforeCall(String token, String beacons, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling beaconscanlocations(Async)");
        }
        
        // verify the required parameter 'beacons' is set
        if (beacons == null) {
            throw new ApiException("Missing the required parameter 'beacons' when calling beaconscanlocations(Async)");
        }
        

        okhttp3.Call localVarCall = beaconscanlocationsCall(token, beacons, _callback);
        return localVarCall;

    }

    /**
     * Check if there&#39;s location available to sign-in / out.
     * 
     * @param token The authentication token. (required)
     * @param beacons A JSON array containg the beacons data (region, minor and major) values. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void beaconscanlocations(String token, String beacons) throws ApiException {
        beaconscanlocationsWithHttpInfo(token, beacons);
    }

    /**
     * Check if there&#39;s location available to sign-in / out.
     * 
     * @param token The authentication token. (required)
     * @param beacons A JSON array containg the beacons data (region, minor and major) values. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> beaconscanlocationsWithHttpInfo(String token, String beacons) throws ApiException {
        okhttp3.Call localVarCall = beaconscanlocationsValidateBeforeCall(token, beacons, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if there&#39;s location available to sign-in / out. (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param beacons A JSON array containg the beacons data (region, minor and major) values. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconscanlocationsAsync(String token, String beacons, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = beaconscanlocationsValidateBeforeCall(token, beacons, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for beaconsetuuid
     * @param token The authentication token. (required)
     * @param id The custom region UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconsetuuidCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beaconsetuuid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call beaconsetuuidValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling beaconsetuuid(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling beaconsetuuid(Async)");
        }
        

        okhttp3.Call localVarCall = beaconsetuuidCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Set the identifier for the account&#39;s beacon region (for sign-in stations).
     * Allows the user to set the identifier for the account&#39;s beacon regions for sign-in stations, generally not necessary as each sign-in station profile generates its own region.
     * @param token The authentication token. (required)
     * @param id The custom region UUID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void beaconsetuuid(String token, UUID id) throws ApiException {
        beaconsetuuidWithHttpInfo(token, id);
    }

    /**
     * Set the identifier for the account&#39;s beacon region (for sign-in stations).
     * Allows the user to set the identifier for the account&#39;s beacon regions for sign-in stations, generally not necessary as each sign-in station profile generates its own region.
     * @param token The authentication token. (required)
     * @param id The custom region UUID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> beaconsetuuidWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = beaconsetuuidValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set the identifier for the account&#39;s beacon region (for sign-in stations). (asynchronously)
     * Allows the user to set the identifier for the account&#39;s beacon regions for sign-in stations, generally not necessary as each sign-in station profile generates its own region.
     * @param token The authentication token. (required)
     * @param id The custom region UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconsetuuidAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = beaconsetuuidValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for beaconsilentregions
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconsilentregionsCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beaconsilentregions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call beaconsilentregionsValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling beaconsilentregions(Async)");
        }
        

        okhttp3.Call localVarCall = beaconsilentregionsCall(token, _callback);
        return localVarCall;

    }

    /**
     * View all the beacon regions defined for silent tracking
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void beaconsilentregions(String token) throws ApiException {
        beaconsilentregionsWithHttpInfo(token);
    }

    /**
     * View all the beacon regions defined for silent tracking
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> beaconsilentregionsWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = beaconsilentregionsValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all the beacon regions defined for silent tracking (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconsilentregionsAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = beaconsilentregionsValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for beaconsilentsignin
     * @param token The authentication token. (required)
     * @param uuid The id of the region the user is in. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconsilentsigninCall(String token, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beaconsilentsignin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (uuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uuid", uuid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call beaconsilentsigninValidateBeforeCall(String token, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling beaconsilentsignin(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling beaconsilentsignin(Async)");
        }
        

        okhttp3.Call localVarCall = beaconsilentsigninCall(token, uuid, _callback);
        return localVarCall;

    }

    /**
     * Sign-in silently from the location specified by a beacon
     * 
     * @param token The authentication token. (required)
     * @param uuid The id of the region the user is in. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void beaconsilentsignin(String token, UUID uuid) throws ApiException {
        beaconsilentsigninWithHttpInfo(token, uuid);
    }

    /**
     * Sign-in silently from the location specified by a beacon
     * 
     * @param token The authentication token. (required)
     * @param uuid The id of the region the user is in. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> beaconsilentsigninWithHttpInfo(String token, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = beaconsilentsigninValidateBeforeCall(token, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sign-in silently from the location specified by a beacon (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param uuid The id of the region the user is in. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconsilentsigninAsync(String token, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = beaconsilentsigninValidateBeforeCall(token, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for beaconsilentsignout
     * @param token The authentication token. (required)
     * @param uuid The id of the region the user has left. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconsilentsignoutCall(String token, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beaconsilentsignout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (uuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uuid", uuid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call beaconsilentsignoutValidateBeforeCall(String token, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling beaconsilentsignout(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling beaconsilentsignout(Async)");
        }
        

        okhttp3.Call localVarCall = beaconsilentsignoutCall(token, uuid, _callback);
        return localVarCall;

    }

    /**
     * Sign-out silently from the location specified by a beacon
     * 
     * @param token The authentication token. (required)
     * @param uuid The id of the region the user has left. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void beaconsilentsignout(String token, UUID uuid) throws ApiException {
        beaconsilentsignoutWithHttpInfo(token, uuid);
    }

    /**
     * Sign-out silently from the location specified by a beacon
     * 
     * @param token The authentication token. (required)
     * @param uuid The id of the region the user has left. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> beaconsilentsignoutWithHttpInfo(String token, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = beaconsilentsignoutValidateBeforeCall(token, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sign-out silently from the location specified by a beacon (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param uuid The id of the region the user has left. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call beaconsilentsignoutAsync(String token, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = beaconsilentsignoutValidateBeforeCall(token, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bgjobgetstatus
     * @param token The authentication token. (required)
     * @param jobid The ID of the job to get the status. 10 most recent will be returned if not specified. (optional)
     * @param jobtype The job type to filter by. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bgjobgetstatusCall(String token, UUID jobid, String jobtype, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bgjobgetstatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (jobid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobid", jobid));
        }

        if (jobtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobtype", jobtype));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bgjobgetstatusValidateBeforeCall(String token, UUID jobid, String jobtype, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling bgjobgetstatus(Async)");
        }
        

        okhttp3.Call localVarCall = bgjobgetstatusCall(token, jobid, jobtype, _callback);
        return localVarCall;

    }

    /**
     * Get background job status
     * 
     * @param token The authentication token. (required)
     * @param jobid The ID of the job to get the status. 10 most recent will be returned if not specified. (optional)
     * @param jobtype The job type to filter by. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void bgjobgetstatus(String token, UUID jobid, String jobtype) throws ApiException {
        bgjobgetstatusWithHttpInfo(token, jobid, jobtype);
    }

    /**
     * Get background job status
     * 
     * @param token The authentication token. (required)
     * @param jobid The ID of the job to get the status. 10 most recent will be returned if not specified. (optional)
     * @param jobtype The job type to filter by. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bgjobgetstatusWithHttpInfo(String token, UUID jobid, String jobtype) throws ApiException {
        okhttp3.Call localVarCall = bgjobgetstatusValidateBeforeCall(token, jobid, jobtype, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get background job status (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param jobid The ID of the job to get the status. 10 most recent will be returned if not specified. (optional)
     * @param jobtype The job type to filter by. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bgjobgetstatusAsync(String token, UUID jobid, String jobtype, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bgjobgetstatusValidateBeforeCall(token, jobid, jobtype, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for callImport
     * @param token The authentication token. (required)
     * @param importtype The kind of data that is being uploaded. (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @param parameters Import parameters, in a key-value pair JSON-serialized object. Eg {&#39;parameter&#39;:&#39;value&#39;}. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callImportCall(String token, String importtype, String upload, String filename, String parameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (importtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("importtype", importtype));
        }

        if (upload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload", upload));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        if (parameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameters", parameters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callImportValidateBeforeCall(String token, String importtype, String upload, String filename, String parameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling callImport(Async)");
        }
        
        // verify the required parameter 'importtype' is set
        if (importtype == null) {
            throw new ApiException("Missing the required parameter 'importtype' when calling callImport(Async)");
        }
        
        // verify the required parameter 'upload' is set
        if (upload == null) {
            throw new ApiException("Missing the required parameter 'upload' when calling callImport(Async)");
        }
        

        okhttp3.Call localVarCall = callImportCall(token, importtype, upload, filename, parameters, _callback);
        return localVarCall;

    }

    /**
     * Import data into AccuCampus
     * Allows the user to import data into AccuCampus via CSV or flat files either manually or automatically using the import utility.
     * @param token The authentication token. (required)
     * @param importtype The kind of data that is being uploaded. (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @param parameters Import parameters, in a key-value pair JSON-serialized object. Eg {&#39;parameter&#39;:&#39;value&#39;}. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void callImport(String token, String importtype, String upload, String filename, String parameters) throws ApiException {
        callImportWithHttpInfo(token, importtype, upload, filename, parameters);
    }

    /**
     * Import data into AccuCampus
     * Allows the user to import data into AccuCampus via CSV or flat files either manually or automatically using the import utility.
     * @param token The authentication token. (required)
     * @param importtype The kind of data that is being uploaded. (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @param parameters Import parameters, in a key-value pair JSON-serialized object. Eg {&#39;parameter&#39;:&#39;value&#39;}. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> callImportWithHttpInfo(String token, String importtype, String upload, String filename, String parameters) throws ApiException {
        okhttp3.Call localVarCall = callImportValidateBeforeCall(token, importtype, upload, filename, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Import data into AccuCampus (asynchronously)
     * Allows the user to import data into AccuCampus via CSV or flat files either manually or automatically using the import utility.
     * @param token The authentication token. (required)
     * @param importtype The kind of data that is being uploaded. (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @param parameters Import parameters, in a key-value pair JSON-serialized object. Eg {&#39;parameter&#39;:&#39;value&#39;}. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callImportAsync(String token, String importtype, String upload, String filename, String parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = callImportValidateBeforeCall(token, importtype, upload, filename, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for captchagetchallenge
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call captchagetchallengeCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/captchagetchallenge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call captchagetchallengeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = captchagetchallengeCall(_callback);
        return localVarCall;

    }

    /**
     * Gets a captcha challenge that the user must complete to do certain requests.
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void captchagetchallenge() throws ApiException {
        captchagetchallengeWithHttpInfo();
    }

    /**
     * Gets a captcha challenge that the user must complete to do certain requests.
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> captchagetchallengeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = captchagetchallengeValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets a captcha challenge that the user must complete to do certain requests. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call captchagetchallengeAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = captchagetchallengeValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for captchagetimage
     * @param captchatoken The captcha token or ID returned by the captcha.getchallenge action (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call captchagetimageCall(String captchatoken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/captchagetimage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (captchatoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("captchatoken", captchatoken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call captchagetimageValidateBeforeCall(String captchatoken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'captchatoken' is set
        if (captchatoken == null) {
            throw new ApiException("Missing the required parameter 'captchatoken' when calling captchagetimage(Async)");
        }
        

        okhttp3.Call localVarCall = captchagetimageCall(captchatoken, _callback);
        return localVarCall;

    }

    /**
     * Gets a captcha image that the user must complete to do certain requests.
     * 
     * @param captchatoken The captcha token or ID returned by the captcha.getchallenge action (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void captchagetimage(String captchatoken) throws ApiException {
        captchagetimageWithHttpInfo(captchatoken);
    }

    /**
     * Gets a captcha image that the user must complete to do certain requests.
     * 
     * @param captchatoken The captcha token or ID returned by the captcha.getchallenge action (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> captchagetimageWithHttpInfo(String captchatoken) throws ApiException {
        okhttp3.Call localVarCall = captchagetimageValidateBeforeCall(captchatoken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets a captcha image that the user must complete to do certain requests. (asynchronously)
     * 
     * @param captchatoken The captcha token or ID returned by the captcha.getchallenge action (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call captchagetimageAsync(String captchatoken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = captchagetimageValidateBeforeCall(captchatoken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for changelog
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changelogCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/changelog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changelogValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling changelog(Async)");
        }
        

        okhttp3.Call localVarCall = changelogCall(token, _callback);
        return localVarCall;

    }

    /**
     * Get the application change log
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void changelog(String token) throws ApiException {
        changelogWithHttpInfo(token);
    }

    /**
     * Get the application change log
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> changelogWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = changelogValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the application change log (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changelogAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changelogValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientget
     * @param token The authentication token. (required)
     * @param client The unique id of the client. (required)
     * @param clientname The custom name of the client. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientgetCall(String token, String client, String clientname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clientget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (client != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client", client));
        }

        if (clientname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientname", clientname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientgetValidateBeforeCall(String token, String client, String clientname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling clientget(Async)");
        }
        
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling clientget(Async)");
        }
        

        okhttp3.Call localVarCall = clientgetCall(token, client, clientname, _callback);
        return localVarCall;

    }

    /**
     * Get client
     * 
     * @param token The authentication token. (required)
     * @param client The unique id of the client. (required)
     * @param clientname The custom name of the client. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void clientget(String token, String client, String clientname) throws ApiException {
        clientgetWithHttpInfo(token, client, clientname);
    }

    /**
     * Get client
     * 
     * @param token The authentication token. (required)
     * @param client The unique id of the client. (required)
     * @param clientname The custom name of the client. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientgetWithHttpInfo(String token, String client, String clientname) throws ApiException {
        okhttp3.Call localVarCall = clientgetValidateBeforeCall(token, client, clientname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get client (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param client The unique id of the client. (required)
     * @param clientname The custom name of the client. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientgetAsync(String token, String client, String clientname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientgetValidateBeforeCall(token, client, clientname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientlist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientlistCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clientlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientlistValidateBeforeCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling clientlist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling clientlist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling clientlist(Async)");
        }
        

        okhttp3.Call localVarCall = clientlistCall(token, from, count, _callback);
        return localVarCall;

    }

    /**
     * Gets the clients of the specified conference
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void clientlist(String token, Integer from, Integer count) throws ApiException {
        clientlistWithHttpInfo(token, from, count);
    }

    /**
     * Gets the clients of the specified conference
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientlistWithHttpInfo(String token, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = clientlistValidateBeforeCall(token, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the clients of the specified conference (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientlistAsync(String token, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientlistValidateBeforeCall(token, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/clientsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = clientsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Saves a client
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void clientsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        clientsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Saves a client
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = clientsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Saves a client (asynchronously)
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientsendmessage
     * @param token The authentication token. (required)
     * @param uniqueclientid The unique id of the client. (required)
     * @param message The body of the message to send. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsendmessageCall(String token, UUID uniqueclientid, String message, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clientsendmessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (uniqueclientid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniqueclientid", uniqueclientid));
        }

        if (message != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message", message));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientsendmessageValidateBeforeCall(String token, UUID uniqueclientid, String message, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling clientsendmessage(Async)");
        }
        
        // verify the required parameter 'uniqueclientid' is set
        if (uniqueclientid == null) {
            throw new ApiException("Missing the required parameter 'uniqueclientid' when calling clientsendmessage(Async)");
        }
        
        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling clientsendmessage(Async)");
        }
        

        okhttp3.Call localVarCall = clientsendmessageCall(token, uniqueclientid, message, _callback);
        return localVarCall;

    }

    /**
     * Send a message to a client
     * 
     * @param token The authentication token. (required)
     * @param uniqueclientid The unique id of the client. (required)
     * @param message The body of the message to send. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void clientsendmessage(String token, UUID uniqueclientid, String message) throws ApiException {
        clientsendmessageWithHttpInfo(token, uniqueclientid, message);
    }

    /**
     * Send a message to a client
     * 
     * @param token The authentication token. (required)
     * @param uniqueclientid The unique id of the client. (required)
     * @param message The body of the message to send. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientsendmessageWithHttpInfo(String token, UUID uniqueclientid, String message) throws ApiException {
        okhttp3.Call localVarCall = clientsendmessageValidateBeforeCall(token, uniqueclientid, message, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send a message to a client (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param uniqueclientid The unique id of the client. (required)
     * @param message The body of the message to send. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsendmessageAsync(String token, UUID uniqueclientid, String message, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientsendmessageValidateBeforeCall(token, uniqueclientid, message, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for communityinvite
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communityinviteCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/communityinvite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call communityinviteValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling communityinvite(Async)");
        }
        

        okhttp3.Call localVarCall = communityinviteCall(token, _callback);
        return localVarCall;

    }

    /**
     * Sends an invitation to everyone to AccuCampus Communities
     * Allows the user to invite all other users to the AccuCampus Communities.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void communityinvite(String token) throws ApiException {
        communityinviteWithHttpInfo(token);
    }

    /**
     * Sends an invitation to everyone to AccuCampus Communities
     * Allows the user to invite all other users to the AccuCampus Communities.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> communityinviteWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = communityinviteValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sends an invitation to everyone to AccuCampus Communities (asynchronously)
     * Allows the user to invite all other users to the AccuCampus Communities.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communityinviteAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = communityinviteValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for communityjoin
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communityjoinCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/communityjoin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call communityjoinValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling communityjoin(Async)");
        }
        

        okhttp3.Call localVarCall = communityjoinCall(token, _callback);
        return localVarCall;

    }

    /**
     * Sends an invitation for myself to AccuCampus Communities
     * Allows the user to access the AccuCampus Communities.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void communityjoin(String token) throws ApiException {
        communityjoinWithHttpInfo(token);
    }

    /**
     * Sends an invitation for myself to AccuCampus Communities
     * Allows the user to access the AccuCampus Communities.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> communityjoinWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = communityjoinValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sends an invitation for myself to AccuCampus Communities (asynchronously)
     * Allows the user to access the AccuCampus Communities.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communityjoinAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = communityjoinValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for compasscategorydelete
     * @param token The authentication token. (required)
     * @param id The id of the category to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compasscategorydeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/compasscategorydelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compasscategorydeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling compasscategorydelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling compasscategorydelete(Async)");
        }
        

        okhttp3.Call localVarCall = compasscategorydeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a compass category
     * Allows the user to delete an existing compass category.
     * @param token The authentication token. (required)
     * @param id The id of the category to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void compasscategorydelete(String token, UUID id) throws ApiException {
        compasscategorydeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a compass category
     * Allows the user to delete an existing compass category.
     * @param token The authentication token. (required)
     * @param id The id of the category to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> compasscategorydeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = compasscategorydeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a compass category (asynchronously)
     * Allows the user to delete an existing compass category.
     * @param token The authentication token. (required)
     * @param id The id of the category to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compasscategorydeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = compasscategorydeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for compasscategoryget
     * @param token The authentication token. (required)
     * @param id The id of the category to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compasscategorygetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/compasscategoryget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compasscategorygetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling compasscategoryget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling compasscategoryget(Async)");
        }
        

        okhttp3.Call localVarCall = compasscategorygetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View details of a compass category
     * Allows the user to view an indvidiaul compass category and its details.
     * @param token The authentication token. (required)
     * @param id The id of the category to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void compasscategoryget(String token, UUID id) throws ApiException {
        compasscategorygetWithHttpInfo(token, id);
    }

    /**
     * View details of a compass category
     * Allows the user to view an indvidiaul compass category and its details.
     * @param token The authentication token. (required)
     * @param id The id of the category to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> compasscategorygetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = compasscategorygetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a compass category (asynchronously)
     * Allows the user to view an indvidiaul compass category and its details.
     * @param token The authentication token. (required)
     * @param id The id of the category to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compasscategorygetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = compasscategorygetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for compasscategorylist
     * @param token The authentication token. (required)
     * @param from The first record to return. (optional)
     * @param count The max number of records to return. (optional)
     * @param onlywithservices Specified whether only categories with services are returned or all. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compasscategorylistCall(String token, Integer from, Integer count, Boolean onlywithservices, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/compasscategorylist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (onlywithservices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlywithservices", onlywithservices));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compasscategorylistValidateBeforeCall(String token, Integer from, Integer count, Boolean onlywithservices, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling compasscategorylist(Async)");
        }
        

        okhttp3.Call localVarCall = compasscategorylistCall(token, from, count, onlywithservices, _callback);
        return localVarCall;

    }

    /**
     * View a list of compass categories
     * Allows the user to view the full list of compass categories.
     * @param token The authentication token. (required)
     * @param from The first record to return. (optional)
     * @param count The max number of records to return. (optional)
     * @param onlywithservices Specified whether only categories with services are returned or all. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void compasscategorylist(String token, Integer from, Integer count, Boolean onlywithservices) throws ApiException {
        compasscategorylistWithHttpInfo(token, from, count, onlywithservices);
    }

    /**
     * View a list of compass categories
     * Allows the user to view the full list of compass categories.
     * @param token The authentication token. (required)
     * @param from The first record to return. (optional)
     * @param count The max number of records to return. (optional)
     * @param onlywithservices Specified whether only categories with services are returned or all. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> compasscategorylistWithHttpInfo(String token, Integer from, Integer count, Boolean onlywithservices) throws ApiException {
        okhttp3.Call localVarCall = compasscategorylistValidateBeforeCall(token, from, count, onlywithservices, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of compass categories (asynchronously)
     * Allows the user to view the full list of compass categories.
     * @param token The authentication token. (required)
     * @param from The first record to return. (optional)
     * @param count The max number of records to return. (optional)
     * @param onlywithservices Specified whether only categories with services are returned or all. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compasscategorylistAsync(String token, Integer from, Integer count, Boolean onlywithservices, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = compasscategorylistValidateBeforeCall(token, from, count, onlywithservices, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for compasscategorysave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compasscategorysaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/compasscategorysave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compasscategorysaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = compasscategorysaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a compass category
     * Allows the user to create or edit a compass category.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void compasscategorysave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        compasscategorysaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a compass category
     * Allows the user to create or edit a compass category.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> compasscategorysaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = compasscategorysaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a compass category (asynchronously)
     * Allows the user to create or edit a compass category.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compasscategorysaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = compasscategorysaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for compassservicelist
     * @param token The authentication token. (required)
     * @param category The id of the category to filter the services. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compassservicelistCall(String token, UUID category, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/compassservicelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compassservicelistValidateBeforeCall(String token, UUID category, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling compassservicelist(Async)");
        }
        

        okhttp3.Call localVarCall = compassservicelistCall(token, category, _callback);
        return localVarCall;

    }

    /**
     * View all the services added to the compass
     * 
     * @param token The authentication token. (required)
     * @param category The id of the category to filter the services. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void compassservicelist(String token, UUID category) throws ApiException {
        compassservicelistWithHttpInfo(token, category);
    }

    /**
     * View all the services added to the compass
     * 
     * @param token The authentication token. (required)
     * @param category The id of the category to filter the services. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> compassservicelistWithHttpInfo(String token, UUID category) throws ApiException {
        okhttp3.Call localVarCall = compassservicelistValidateBeforeCall(token, category, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all the services added to the compass (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param category The id of the category to filter the services. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compassservicelistAsync(String token, UUID category, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = compassservicelistValidateBeforeCall(token, category, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for compassservicelistlocations
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to get its locations. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compassservicelistlocationsCall(String token, UUID serviceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/compassservicelistlocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (serviceid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceid", serviceid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compassservicelistlocationsValidateBeforeCall(String token, UUID serviceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling compassservicelistlocations(Async)");
        }
        
        // verify the required parameter 'serviceid' is set
        if (serviceid == null) {
            throw new ApiException("Missing the required parameter 'serviceid' when calling compassservicelistlocations(Async)");
        }
        

        okhttp3.Call localVarCall = compassservicelistlocationsCall(token, serviceid, _callback);
        return localVarCall;

    }

    /**
     * View all the locations where a service added to the compass is available
     * 
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to get its locations. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void compassservicelistlocations(String token, UUID serviceid) throws ApiException {
        compassservicelistlocationsWithHttpInfo(token, serviceid);
    }

    /**
     * View all the locations where a service added to the compass is available
     * 
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to get its locations. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> compassservicelistlocationsWithHttpInfo(String token, UUID serviceid) throws ApiException {
        okhttp3.Call localVarCall = compassservicelistlocationsValidateBeforeCall(token, serviceid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all the locations where a service added to the compass is available (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to get its locations. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compassservicelistlocationsAsync(String token, UUID serviceid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = compassservicelistlocationsValidateBeforeCall(token, serviceid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for computerlabdeletecomputer
     * @param token The authentication token. (required)
     * @param id The unique device id of the computer to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlabdeletecomputerCall(String token, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/computerlabdeletecomputer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computerlabdeletecomputerValidateBeforeCall(String token, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling computerlabdeletecomputer(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling computerlabdeletecomputer(Async)");
        }
        

        okhttp3.Call localVarCall = computerlabdeletecomputerCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a computer
     * Allows the user to delete an existing computer.
     * @param token The authentication token. (required)
     * @param id The unique device id of the computer to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void computerlabdeletecomputer(String token, String id) throws ApiException {
        computerlabdeletecomputerWithHttpInfo(token, id);
    }

    /**
     * Delete a computer
     * Allows the user to delete an existing computer.
     * @param token The authentication token. (required)
     * @param id The unique device id of the computer to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> computerlabdeletecomputerWithHttpInfo(String token, String id) throws ApiException {
        okhttp3.Call localVarCall = computerlabdeletecomputerValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a computer (asynchronously)
     * Allows the user to delete an existing computer.
     * @param token The authentication token. (required)
     * @param id The unique device id of the computer to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlabdeletecomputerAsync(String token, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = computerlabdeletecomputerValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for computerlabgetcomputer
     * @param token The authentication token. (required)
     * @param id The unique device id of the computer to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlabgetcomputerCall(String token, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/computerlabgetcomputer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computerlabgetcomputerValidateBeforeCall(String token, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling computerlabgetcomputer(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling computerlabgetcomputer(Async)");
        }
        

        okhttp3.Call localVarCall = computerlabgetcomputerCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of a computer
     * Allows the user to search and view an individual computer and its details.
     * @param token The authentication token. (required)
     * @param id The unique device id of the computer to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void computerlabgetcomputer(String token, String id) throws ApiException {
        computerlabgetcomputerWithHttpInfo(token, id);
    }

    /**
     * Search and view details of a computer
     * Allows the user to search and view an individual computer and its details.
     * @param token The authentication token. (required)
     * @param id The unique device id of the computer to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> computerlabgetcomputerWithHttpInfo(String token, String id) throws ApiException {
        okhttp3.Call localVarCall = computerlabgetcomputerValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of a computer (asynchronously)
     * Allows the user to search and view an individual computer and its details.
     * @param token The authentication token. (required)
     * @param id The unique device id of the computer to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlabgetcomputerAsync(String token, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = computerlabgetcomputerValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for computerlabgetsettings
     * @param id The id of the computer lab/location. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlabgetsettingsCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/computerlabgetsettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computerlabgetsettingsValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling computerlabgetsettings(Async)");
        }
        

        okhttp3.Call localVarCall = computerlabgetsettingsCall(id, _callback);
        return localVarCall;

    }

    /**
     * Loads the settings for a computer lab
     * Loads the settings for a computer lab.
     * @param id The id of the computer lab/location. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void computerlabgetsettings(UUID id) throws ApiException {
        computerlabgetsettingsWithHttpInfo(id);
    }

    /**
     * Loads the settings for a computer lab
     * Loads the settings for a computer lab.
     * @param id The id of the computer lab/location. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> computerlabgetsettingsWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = computerlabgetsettingsValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Loads the settings for a computer lab (asynchronously)
     * Loads the settings for a computer lab.
     * @param id The id of the computer lab/location. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlabgetsettingsAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = computerlabgetsettingsValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for computerlabissignedin
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlabissignedinCall(UUID station, String user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/computerlabissignedin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computerlabissignedinValidateBeforeCall(UUID station, String user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling computerlabissignedin(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling computerlabissignedin(Async)");
        }
        

        okhttp3.Call localVarCall = computerlabissignedinCall(station, user, _callback);
        return localVarCall;

    }

    /**
     * Gets whether a user is signed-in or not.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void computerlabissignedin(UUID station, String user) throws ApiException {
        computerlabissignedinWithHttpInfo(station, user);
    }

    /**
     * Gets whether a user is signed-in or not.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> computerlabissignedinWithHttpInfo(UUID station, String user) throws ApiException {
        okhttp3.Call localVarCall = computerlabissignedinValidateBeforeCall(station, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets whether a user is signed-in or not. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlabissignedinAsync(UUID station, String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = computerlabissignedinValidateBeforeCall(station, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for computerlablistcomputers
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param location The id of the location whose computers have to be returned. (optional)
     * @param freeonly If true, only free computers will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlablistcomputersCall(String token, Integer from, Integer count, UUID location, Boolean freeonly, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/computerlablistcomputers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (freeonly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("freeonly", freeonly));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computerlablistcomputersValidateBeforeCall(String token, Integer from, Integer count, UUID location, Boolean freeonly, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling computerlablistcomputers(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling computerlablistcomputers(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling computerlablistcomputers(Async)");
        }
        

        okhttp3.Call localVarCall = computerlablistcomputersCall(token, from, count, location, freeonly, _callback);
        return localVarCall;

    }

    /**
     * View a list of computers
     * Allows the user to view the list of all computers.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param location The id of the location whose computers have to be returned. (optional)
     * @param freeonly If true, only free computers will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void computerlablistcomputers(String token, Integer from, Integer count, UUID location, Boolean freeonly) throws ApiException {
        computerlablistcomputersWithHttpInfo(token, from, count, location, freeonly);
    }

    /**
     * View a list of computers
     * Allows the user to view the list of all computers.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param location The id of the location whose computers have to be returned. (optional)
     * @param freeonly If true, only free computers will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> computerlablistcomputersWithHttpInfo(String token, Integer from, Integer count, UUID location, Boolean freeonly) throws ApiException {
        okhttp3.Call localVarCall = computerlablistcomputersValidateBeforeCall(token, from, count, location, freeonly, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of computers (asynchronously)
     * Allows the user to view the list of all computers.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param location The id of the location whose computers have to be returned. (optional)
     * @param freeonly If true, only free computers will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlablistcomputersAsync(String token, Integer from, Integer count, UUID location, Boolean freeonly, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = computerlablistcomputersValidateBeforeCall(token, from, count, location, freeonly, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for computerlablistlabs
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlablistlabsCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/computerlablistlabs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computerlablistlabsValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling computerlablistlabs(Async)");
        }
        

        okhttp3.Call localVarCall = computerlablistlabsCall(token, _callback);
        return localVarCall;

    }

    /**
     * View a list of the locations that use the Computer Lab add-on
     * Allows the user to view the list of all labs.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void computerlablistlabs(String token) throws ApiException {
        computerlablistlabsWithHttpInfo(token);
    }

    /**
     * View a list of the locations that use the Computer Lab add-on
     * Allows the user to view the list of all labs.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> computerlablistlabsWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = computerlablistlabsValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of the locations that use the Computer Lab add-on (asynchronously)
     * Allows the user to view the list of all labs.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlablistlabsAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = computerlablistlabsValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for computerlabliststations
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlabliststationsCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/computerlabliststations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computerlabliststationsValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling computerlabliststations(Async)");
        }
        

        okhttp3.Call localVarCall = computerlabliststationsCall(token, _callback);
        return localVarCall;

    }

    /**
     * View a list of sign-in stations available for computer labs.
     * Allows the user to view the list of sign-in stations that are available for computer labs.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void computerlabliststations(String token) throws ApiException {
        computerlabliststationsWithHttpInfo(token);
    }

    /**
     * View a list of sign-in stations available for computer labs.
     * Allows the user to view the list of sign-in stations that are available for computer labs.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> computerlabliststationsWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = computerlabliststationsValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of sign-in stations available for computer labs. (asynchronously)
     * Allows the user to view the list of sign-in stations that are available for computer labs.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlabliststationsAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = computerlabliststationsValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for computerlabsavecomputer
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlabsavecomputerCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/computerlabsavecomputer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computerlabsavecomputerValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = computerlabsavecomputerCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a computer
     * Allows the user to create or edit a computer.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void computerlabsavecomputer(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        computerlabsavecomputerWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a computer
     * Allows the user to create or edit a computer.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> computerlabsavecomputerWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = computerlabsavecomputerValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a computer (asynchronously)
     * Allows the user to create or edit a computer.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlabsavecomputerAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = computerlabsavecomputerValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for computerlabsavesettings
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlabsavesettingsCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/computerlabsavesettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computerlabsavesettingsValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = computerlabsavesettingsCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Saves the settings for a computer lab
     * Saves the settings for a computer lab.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void computerlabsavesettings(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        computerlabsavesettingsWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Saves the settings for a computer lab
     * Saves the settings for a computer lab.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> computerlabsavesettingsWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = computerlabsavesettingsValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Saves the settings for a computer lab (asynchronously)
     * Saves the settings for a computer lab.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlabsavesettingsAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = computerlabsavesettingsValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for computerlabsaveswipe
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlabsaveswipeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/computerlabsaveswipe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computerlabsaveswipeValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = computerlabsaveswipeCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Save a new swipe from a computer in a computer lab.
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void computerlabsaveswipe(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        computerlabsaveswipeWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Save a new swipe from a computer in a computer lab.
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> computerlabsaveswipeWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = computerlabsaveswipeValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save a new swipe from a computer in a computer lab. (asynchronously)
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computerlabsaveswipeAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = computerlabsaveswipeValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deadendrecordingdelete
     * @param token The authentication token. (required)
     * @param hierarchykey The hierarchy key of the record to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deadendrecordingdeleteCall(String token, String hierarchykey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deadendrecordingdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (hierarchykey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hierarchykey", hierarchykey));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deadendrecordingdeleteValidateBeforeCall(String token, String hierarchykey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deadendrecordingdelete(Async)");
        }
        
        // verify the required parameter 'hierarchykey' is set
        if (hierarchykey == null) {
            throw new ApiException("Missing the required parameter 'hierarchykey' when calling deadendrecordingdelete(Async)");
        }
        

        okhttp3.Call localVarCall = deadendrecordingdeleteCall(token, hierarchykey, _callback);
        return localVarCall;

    }

    /**
     * Deletes a dead-end record group
     * Allows the user to delete a dead end record group.
     * @param token The authentication token. (required)
     * @param hierarchykey The hierarchy key of the record to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deadendrecordingdelete(String token, String hierarchykey) throws ApiException {
        deadendrecordingdeleteWithHttpInfo(token, hierarchykey);
    }

    /**
     * Deletes a dead-end record group
     * Allows the user to delete a dead end record group.
     * @param token The authentication token. (required)
     * @param hierarchykey The hierarchy key of the record to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deadendrecordingdeleteWithHttpInfo(String token, String hierarchykey) throws ApiException {
        okhttp3.Call localVarCall = deadendrecordingdeleteValidateBeforeCall(token, hierarchykey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a dead-end record group (asynchronously)
     * Allows the user to delete a dead end record group.
     * @param token The authentication token. (required)
     * @param hierarchykey The hierarchy key of the record to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deadendrecordingdeleteAsync(String token, String hierarchykey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deadendrecordingdeleteValidateBeforeCall(token, hierarchykey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deadendrecordinglist
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deadendrecordinglistCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deadendrecordinglist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deadendrecordinglistValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deadendrecordinglist(Async)");
        }
        

        okhttp3.Call localVarCall = deadendrecordinglistCall(token, _callback);
        return localVarCall;

    }

    /**
     * Lists the recorded dead ends, if enabled
     * Allows the user to view the list of dead ends, provided dead end recording is enabled for the account.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deadendrecordinglist(String token) throws ApiException {
        deadendrecordinglistWithHttpInfo(token);
    }

    /**
     * Lists the recorded dead ends, if enabled
     * Allows the user to view the list of dead ends, provided dead end recording is enabled for the account.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deadendrecordinglistWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = deadendrecordinglistValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the recorded dead ends, if enabled (asynchronously)
     * Allows the user to view the list of dead ends, provided dead end recording is enabled for the account.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deadendrecordinglistAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deadendrecordinglistValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deadendrecordinglistcomments
     * @param token The authentication token. (required)
     * @param hierarchykey The hierarchy key of the record to get the feedback. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deadendrecordinglistcommentsCall(String token, String hierarchykey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deadendrecordinglistcomments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (hierarchykey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hierarchykey", hierarchykey));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deadendrecordinglistcommentsValidateBeforeCall(String token, String hierarchykey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deadendrecordinglistcomments(Async)");
        }
        
        // verify the required parameter 'hierarchykey' is set
        if (hierarchykey == null) {
            throw new ApiException("Missing the required parameter 'hierarchykey' when calling deadendrecordinglistcomments(Async)");
        }
        

        okhttp3.Call localVarCall = deadendrecordinglistcommentsCall(token, hierarchykey, _callback);
        return localVarCall;

    }

    /**
     * Lists the comments for a specific dead end
     * Allows the user to view the comments made on dead end sessions.
     * @param token The authentication token. (required)
     * @param hierarchykey The hierarchy key of the record to get the feedback. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deadendrecordinglistcomments(String token, String hierarchykey) throws ApiException {
        deadendrecordinglistcommentsWithHttpInfo(token, hierarchykey);
    }

    /**
     * Lists the comments for a specific dead end
     * Allows the user to view the comments made on dead end sessions.
     * @param token The authentication token. (required)
     * @param hierarchykey The hierarchy key of the record to get the feedback. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deadendrecordinglistcommentsWithHttpInfo(String token, String hierarchykey) throws ApiException {
        okhttp3.Call localVarCall = deadendrecordinglistcommentsValidateBeforeCall(token, hierarchykey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the comments for a specific dead end (asynchronously)
     * Allows the user to view the comments made on dead end sessions.
     * @param token The authentication token. (required)
     * @param hierarchykey The hierarchy key of the record to get the feedback. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deadendrecordinglistcommentsAsync(String token, String hierarchykey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deadendrecordinglistcommentsValidateBeforeCall(token, hierarchykey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deadendrecordingsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deadendrecordingsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/deadendrecordingsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deadendrecordingsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = deadendrecordingsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Saves a dead-end record
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deadendrecordingsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        deadendrecordingsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Saves a dead-end record
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deadendrecordingsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = deadendrecordingsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Saves a dead-end record (asynchronously)
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deadendrecordingsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deadendrecordingsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for departmentdelete
     * @param token The authentication token. (required)
     * @param id The id of the department to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentdeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/departmentdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call departmentdeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling departmentdelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling departmentdelete(Async)");
        }
        

        okhttp3.Call localVarCall = departmentdeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a college department
     * Allows the user to delete an existing college department.
     * @param token The authentication token. (required)
     * @param id The id of the department to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void departmentdelete(String token, UUID id) throws ApiException {
        departmentdeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a college department
     * Allows the user to delete an existing college department.
     * @param token The authentication token. (required)
     * @param id The id of the department to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> departmentdeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = departmentdeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a college department (asynchronously)
     * Allows the user to delete an existing college department.
     * @param token The authentication token. (required)
     * @param id The id of the department to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentdeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = departmentdeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for departmentget
     * @param token The authentication token. (required)
     * @param id The id of the department to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentgetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/departmentget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call departmentgetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling departmentget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling departmentget(Async)");
        }
        

        okhttp3.Call localVarCall = departmentgetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of a college department
     * Allows the user to view an individual college department and its details.
     * @param token The authentication token. (required)
     * @param id The id of the department to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void departmentget(String token, UUID id) throws ApiException {
        departmentgetWithHttpInfo(token, id);
    }

    /**
     * Search and view details of a college department
     * Allows the user to view an individual college department and its details.
     * @param token The authentication token. (required)
     * @param id The id of the department to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> departmentgetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = departmentgetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of a college department (asynchronously)
     * Allows the user to view an individual college department and its details.
     * @param token The authentication token. (required)
     * @param id The id of the department to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentgetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = departmentgetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for departmentlist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentlistCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/departmentlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call departmentlistValidateBeforeCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling departmentlist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling departmentlist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling departmentlist(Async)");
        }
        

        okhttp3.Call localVarCall = departmentlistCall(token, from, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of college departments
     * Allows the user to view the full list of college departments.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void departmentlist(String token, Integer from, Integer count) throws ApiException {
        departmentlistWithHttpInfo(token, from, count);
    }

    /**
     * View a list of college departments
     * Allows the user to view the full list of college departments.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> departmentlistWithHttpInfo(String token, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = departmentlistValidateBeforeCall(token, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of college departments (asynchronously)
     * Allows the user to view the full list of college departments.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentlistAsync(String token, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = departmentlistValidateBeforeCall(token, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for departmentsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/departmentsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call departmentsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = departmentsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a college department
     * Allows the user to create or edit a college department.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void departmentsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        departmentsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a college department
     * Allows the user to create or edit a college department.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> departmentsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = departmentsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a college department (asynchronously)
     * Allows the user to create or edit a college department.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call departmentsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = departmentsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for doc
     * @param excludeanonymous If true it excludes the anonymous actions from the returned list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call docCall(Boolean excludeanonymous, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/doc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (excludeanonymous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeanonymous", excludeanonymous));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call docValidateBeforeCall(Boolean excludeanonymous, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = docCall(excludeanonymous, _callback);
        return localVarCall;

    }

    /**
     * Get the documentation
     * Retrieves the list of actions available in the system.
     * @param excludeanonymous If true it excludes the anonymous actions from the returned list. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void doc(Boolean excludeanonymous) throws ApiException {
        docWithHttpInfo(excludeanonymous);
    }

    /**
     * Get the documentation
     * Retrieves the list of actions available in the system.
     * @param excludeanonymous If true it excludes the anonymous actions from the returned list. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> docWithHttpInfo(Boolean excludeanonymous) throws ApiException {
        okhttp3.Call localVarCall = docValidateBeforeCall(excludeanonymous, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the documentation (asynchronously)
     * Retrieves the list of actions available in the system.
     * @param excludeanonymous If true it excludes the anonymous actions from the returned list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call docAsync(Boolean excludeanonymous, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = docValidateBeforeCall(excludeanonymous, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for easyloginaddbgimage
     * @param token The authentication token. (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The original filename, needed to process the file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call easyloginaddbgimageCall(String token, String upload, String filename, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/easyloginaddbgimage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (upload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload", upload));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call easyloginaddbgimageValidateBeforeCall(String token, String upload, String filename, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling easyloginaddbgimage(Async)");
        }
        
        // verify the required parameter 'upload' is set
        if (upload == null) {
            throw new ApiException("Missing the required parameter 'upload' when calling easyloginaddbgimage(Async)");
        }
        
        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling easyloginaddbgimage(Async)");
        }
        

        okhttp3.Call localVarCall = easyloginaddbgimageCall(token, upload, filename, _callback);
        return localVarCall;

    }

    /**
     * Adds background image for the login
     * Allows the user to set the background image that all users will see when logging into an AccuCampus account not using SSO.
     * @param token The authentication token. (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The original filename, needed to process the file. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void easyloginaddbgimage(String token, String upload, String filename) throws ApiException {
        easyloginaddbgimageWithHttpInfo(token, upload, filename);
    }

    /**
     * Adds background image for the login
     * Allows the user to set the background image that all users will see when logging into an AccuCampus account not using SSO.
     * @param token The authentication token. (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The original filename, needed to process the file. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> easyloginaddbgimageWithHttpInfo(String token, String upload, String filename) throws ApiException {
        okhttp3.Call localVarCall = easyloginaddbgimageValidateBeforeCall(token, upload, filename, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adds background image for the login (asynchronously)
     * Allows the user to set the background image that all users will see when logging into an AccuCampus account not using SSO.
     * @param token The authentication token. (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The original filename, needed to process the file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call easyloginaddbgimageAsync(String token, String upload, String filename, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = easyloginaddbgimageValidateBeforeCall(token, upload, filename, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventchecksessions
     * @param token The authentication token. (required)
     * @param eventid The id of the event to check. (required)
     * @param autorepair True to automatically fix the invalid sessions. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventchecksessionsCall(String token, UUID eventid, Boolean autorepair, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventchecksessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (autorepair != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("autorepair", autorepair));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventchecksessionsValidateBeforeCall(String token, UUID eventid, Boolean autorepair, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventchecksessions(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling eventchecksessions(Async)");
        }
        
        // verify the required parameter 'autorepair' is set
        if (autorepair == null) {
            throw new ApiException("Missing the required parameter 'autorepair' when calling eventchecksessions(Async)");
        }
        

        okhttp3.Call localVarCall = eventchecksessionsCall(token, eventid, autorepair, _callback);
        return localVarCall;

    }

    /**
     * Edit an event&#39;s sessions according to their schedule
     * Allows the user to edit event sessions.
     * @param token The authentication token. (required)
     * @param eventid The id of the event to check. (required)
     * @param autorepair True to automatically fix the invalid sessions. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventchecksessions(String token, UUID eventid, Boolean autorepair) throws ApiException {
        eventchecksessionsWithHttpInfo(token, eventid, autorepair);
    }

    /**
     * Edit an event&#39;s sessions according to their schedule
     * Allows the user to edit event sessions.
     * @param token The authentication token. (required)
     * @param eventid The id of the event to check. (required)
     * @param autorepair True to automatically fix the invalid sessions. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventchecksessionsWithHttpInfo(String token, UUID eventid, Boolean autorepair) throws ApiException {
        okhttp3.Call localVarCall = eventchecksessionsValidateBeforeCall(token, eventid, autorepair, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Edit an event&#39;s sessions according to their schedule (asynchronously)
     * Allows the user to edit event sessions.
     * @param token The authentication token. (required)
     * @param eventid The id of the event to check. (required)
     * @param autorepair True to automatically fix the invalid sessions. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventchecksessionsAsync(String token, UUID eventid, Boolean autorepair, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventchecksessionsValidateBeforeCall(token, eventid, autorepair, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventdelete
     * @param token The authentication token. (required)
     * @param id The id of the event to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventdeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventdeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventdelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling eventdelete(Async)");
        }
        

        okhttp3.Call localVarCall = eventdeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a course
     * Allows the user to delete an existing course.
     * @param token The authentication token. (required)
     * @param id The id of the event to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventdelete(String token, UUID id) throws ApiException {
        eventdeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a course
     * Allows the user to delete an existing course.
     * @param token The authentication token. (required)
     * @param id The id of the event to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventdeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = eventdeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a course (asynchronously)
     * Allows the user to delete an existing course.
     * @param token The authentication token. (required)
     * @param id The id of the event to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventdeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventdeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventget
     * @param token The authentication token. (required)
     * @param id The id of the event to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventgetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventgetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling eventget(Async)");
        }
        

        okhttp3.Call localVarCall = eventgetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of a course
     * Allows the user to view an individual course and its details.
     * @param token The authentication token. (required)
     * @param id The id of the event to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventget(String token, UUID id) throws ApiException {
        eventgetWithHttpInfo(token, id);
    }

    /**
     * Search and view details of a course
     * Allows the user to view an individual course and its details.
     * @param token The authentication token. (required)
     * @param id The id of the event to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventgetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = eventgetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of a course (asynchronously)
     * Allows the user to view an individual course and its details.
     * @param token The authentication token. (required)
     * @param id The id of the event to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventgetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventgetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventgetsessionsbydate
     * @param token The authentication token. (required)
     * @param location The location to filter the events. (optional)
     * @param date The date to filter the events. Today will be used if this parameter is omitted. (optional)
     * @param type Type of event to list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventgetsessionsbydateCall(String token, UUID location, OffsetDateTime date, String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventgetsessionsbydate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventgetsessionsbydateValidateBeforeCall(String token, UUID location, OffsetDateTime date, String type, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventgetsessionsbydate(Async)");
        }
        

        okhttp3.Call localVarCall = eventgetsessionsbydateCall(token, location, date, type, _callback);
        return localVarCall;

    }

    /**
     * View a list of courses by date
     * Allows the user to view a list of courses by date.
     * @param token The authentication token. (required)
     * @param location The location to filter the events. (optional)
     * @param date The date to filter the events. Today will be used if this parameter is omitted. (optional)
     * @param type Type of event to list. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventgetsessionsbydate(String token, UUID location, OffsetDateTime date, String type) throws ApiException {
        eventgetsessionsbydateWithHttpInfo(token, location, date, type);
    }

    /**
     * View a list of courses by date
     * Allows the user to view a list of courses by date.
     * @param token The authentication token. (required)
     * @param location The location to filter the events. (optional)
     * @param date The date to filter the events. Today will be used if this parameter is omitted. (optional)
     * @param type Type of event to list. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventgetsessionsbydateWithHttpInfo(String token, UUID location, OffsetDateTime date, String type) throws ApiException {
        okhttp3.Call localVarCall = eventgetsessionsbydateValidateBeforeCall(token, location, date, type, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of courses by date (asynchronously)
     * Allows the user to view a list of courses by date.
     * @param token The authentication token. (required)
     * @param location The location to filter the events. (optional)
     * @param date The date to filter the events. Today will be used if this parameter is omitted. (optional)
     * @param type Type of event to list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventgetsessionsbydateAsync(String token, UUID location, OffsetDateTime date, String type, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventgetsessionsbydateValidateBeforeCall(token, location, date, type, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventlist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false. (optional)
     * @param termid Id of the term to list the events. Null to list all events. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventlistCall(String token, String from, String count, Boolean summaryonly, UUID termid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (summaryonly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summaryonly", summaryonly));
        }

        if (termid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termid", termid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventlistValidateBeforeCall(String token, String from, String count, Boolean summaryonly, UUID termid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventlist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling eventlist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling eventlist(Async)");
        }
        

        okhttp3.Call localVarCall = eventlistCall(token, from, count, summaryonly, termid, _callback);
        return localVarCall;

    }

    /**
     * View a list of courses
     * Allows the user to view the full list of courses.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false. (optional)
     * @param termid Id of the term to list the events. Null to list all events. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventlist(String token, String from, String count, Boolean summaryonly, UUID termid) throws ApiException {
        eventlistWithHttpInfo(token, from, count, summaryonly, termid);
    }

    /**
     * View a list of courses
     * Allows the user to view the full list of courses.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false. (optional)
     * @param termid Id of the term to list the events. Null to list all events. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventlistWithHttpInfo(String token, String from, String count, Boolean summaryonly, UUID termid) throws ApiException {
        okhttp3.Call localVarCall = eventlistValidateBeforeCall(token, from, count, summaryonly, termid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of courses (asynchronously)
     * Allows the user to view the full list of courses.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false. (optional)
     * @param termid Id of the term to list the events. Null to list all events. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventlistAsync(String token, String from, String count, Boolean summaryonly, UUID termid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventlistValidateBeforeCall(token, from, count, summaryonly, termid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventlistregistered
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false. (optional)
     * @param termid Id of the term to list the events. Null to list all events. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventlistregisteredCall(String token, String from, String count, Boolean summaryonly, UUID termid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventlistregistered";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (summaryonly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summaryonly", summaryonly));
        }

        if (termid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termid", termid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventlistregisteredValidateBeforeCall(String token, String from, String count, Boolean summaryonly, UUID termid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventlistregistered(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling eventlistregistered(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling eventlistregistered(Async)");
        }
        

        okhttp3.Call localVarCall = eventlistregisteredCall(token, from, count, summaryonly, termid, _callback);
        return localVarCall;

    }

    /**
     * View a list of courses I am registered to
     * Allows the user to view the courses they are registered to.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false. (optional)
     * @param termid Id of the term to list the events. Null to list all events. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventlistregistered(String token, String from, String count, Boolean summaryonly, UUID termid) throws ApiException {
        eventlistregisteredWithHttpInfo(token, from, count, summaryonly, termid);
    }

    /**
     * View a list of courses I am registered to
     * Allows the user to view the courses they are registered to.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false. (optional)
     * @param termid Id of the term to list the events. Null to list all events. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventlistregisteredWithHttpInfo(String token, String from, String count, Boolean summaryonly, UUID termid) throws ApiException {
        okhttp3.Call localVarCall = eventlistregisteredValidateBeforeCall(token, from, count, summaryonly, termid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of courses I am registered to (asynchronously)
     * Allows the user to view the courses they are registered to.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false. (optional)
     * @param termid Id of the term to list the events. Null to list all events. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventlistregisteredAsync(String token, String from, String count, Boolean summaryonly, UUID termid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventlistregisteredValidateBeforeCall(token, from, count, summaryonly, termid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregaddme
     * @param token The authentication token. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregaddmeCall(String token, UUID eventid, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventregaddme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregaddmeValidateBeforeCall(String token, UUID eventid, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventregaddme(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling eventregaddme(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregaddme(Async)");
        }
        

        okhttp3.Call localVarCall = eventregaddmeCall(token, eventid, listname, _callback);
        return localVarCall;

    }

    /**
     * Register current user to a course
     * Allows the user to make themselves available for individual courses.
     * @param token The authentication token. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregaddme(String token, UUID eventid, String listname) throws ApiException {
        eventregaddmeWithHttpInfo(token, eventid, listname);
    }

    /**
     * Register current user to a course
     * Allows the user to make themselves available for individual courses.
     * @param token The authentication token. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregaddmeWithHttpInfo(String token, UUID eventid, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregaddmeValidateBeforeCall(token, eventid, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register current user to a course (asynchronously)
     * Allows the user to make themselves available for individual courses.
     * @param token The authentication token. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregaddmeAsync(String token, UUID eventid, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregaddmeValidateBeforeCall(token, eventid, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregaddmetoall
     * @param token The authentication token. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregaddmetoallCall(String token, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventregaddmetoall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregaddmetoallValidateBeforeCall(String token, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventregaddmetoall(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregaddmetoall(Async)");
        }
        

        okhttp3.Call localVarCall = eventregaddmetoallCall(token, listname, _callback);
        return localVarCall;

    }

    /**
     * Register current user to all courses
     * Allows the user to make themselves available for all courses.
     * @param token The authentication token. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregaddmetoall(String token, String listname) throws ApiException {
        eventregaddmetoallWithHttpInfo(token, listname);
    }

    /**
     * Register current user to all courses
     * Allows the user to make themselves available for all courses.
     * @param token The authentication token. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregaddmetoallWithHttpInfo(String token, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregaddmetoallValidateBeforeCall(token, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register current user to all courses (asynchronously)
     * Allows the user to make themselves available for all courses.
     * @param token The authentication token. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregaddmetoallAsync(String token, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregaddmetoallValidateBeforeCall(token, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregaddmetogroup
     * @param token The authentication token. (required)
     * @param codegroup The code used to group events. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregaddmetogroupCall(String token, String codegroup, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventregaddmetogroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (codegroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codegroup", codegroup));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregaddmetogroupValidateBeforeCall(String token, String codegroup, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventregaddmetogroup(Async)");
        }
        
        // verify the required parameter 'codegroup' is set
        if (codegroup == null) {
            throw new ApiException("Missing the required parameter 'codegroup' when calling eventregaddmetogroup(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregaddmetogroup(Async)");
        }
        

        okhttp3.Call localVarCall = eventregaddmetogroupCall(token, codegroup, listname, _callback);
        return localVarCall;

    }

    /**
     * Register current user to a course group
     * Allows the user to make themselves available for a course group.
     * @param token The authentication token. (required)
     * @param codegroup The code used to group events. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregaddmetogroup(String token, String codegroup, String listname) throws ApiException {
        eventregaddmetogroupWithHttpInfo(token, codegroup, listname);
    }

    /**
     * Register current user to a course group
     * Allows the user to make themselves available for a course group.
     * @param token The authentication token. (required)
     * @param codegroup The code used to group events. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregaddmetogroupWithHttpInfo(String token, String codegroup, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregaddmetogroupValidateBeforeCall(token, codegroup, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register current user to a course group (asynchronously)
     * Allows the user to make themselves available for a course group.
     * @param token The authentication token. (required)
     * @param codegroup The code used to group events. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregaddmetogroupAsync(String token, String codegroup, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregaddmetogroupValidateBeforeCall(token, codegroup, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregadduser
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregadduserCall(String token, UUID userid, UUID eventid, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventregadduser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregadduserValidateBeforeCall(String token, UUID userid, UUID eventid, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventregadduser(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling eventregadduser(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling eventregadduser(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregadduser(Async)");
        }
        

        okhttp3.Call localVarCall = eventregadduserCall(token, userid, eventid, listname, _callback);
        return localVarCall;

    }

    /**
     * Register a user to a course for attendance
     * Allows the user to register a user to a course.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregadduser(String token, UUID userid, UUID eventid, String listname) throws ApiException {
        eventregadduserWithHttpInfo(token, userid, eventid, listname);
    }

    /**
     * Register a user to a course for attendance
     * Allows the user to register a user to a course.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregadduserWithHttpInfo(String token, UUID userid, UUID eventid, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregadduserValidateBeforeCall(token, userid, eventid, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register a user to a course for attendance (asynchronously)
     * Allows the user to register a user to a course.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregadduserAsync(String token, UUID userid, UUID eventid, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregadduserValidateBeforeCall(token, userid, eventid, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregaddusertoall
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregaddusertoallCall(String token, UUID userid, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventregaddusertoall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregaddusertoallValidateBeforeCall(String token, UUID userid, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventregaddusertoall(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling eventregaddusertoall(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregaddusertoall(Async)");
        }
        

        okhttp3.Call localVarCall = eventregaddusertoallCall(token, userid, listname, _callback);
        return localVarCall;

    }

    /**
     * Register a user to assist with all courses
     * Allows the user to make a staff member available to assist with all courses.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregaddusertoall(String token, UUID userid, String listname) throws ApiException {
        eventregaddusertoallWithHttpInfo(token, userid, listname);
    }

    /**
     * Register a user to assist with all courses
     * Allows the user to make a staff member available to assist with all courses.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregaddusertoallWithHttpInfo(String token, UUID userid, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregaddusertoallValidateBeforeCall(token, userid, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register a user to assist with all courses (asynchronously)
     * Allows the user to make a staff member available to assist with all courses.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregaddusertoallAsync(String token, UUID userid, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregaddusertoallValidateBeforeCall(token, userid, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregaddusertogroup
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param codegroup The code used to group events. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregaddusertogroupCall(String token, UUID userid, String codegroup, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventregaddusertogroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (codegroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codegroup", codegroup));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregaddusertogroupValidateBeforeCall(String token, UUID userid, String codegroup, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventregaddusertogroup(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling eventregaddusertogroup(Async)");
        }
        
        // verify the required parameter 'codegroup' is set
        if (codegroup == null) {
            throw new ApiException("Missing the required parameter 'codegroup' when calling eventregaddusertogroup(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregaddusertogroup(Async)");
        }
        

        okhttp3.Call localVarCall = eventregaddusertogroupCall(token, userid, codegroup, listname, _callback);
        return localVarCall;

    }

    /**
     * Register a user to an course group
     * Allows the user to make a staff member available for a course group.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param codegroup The code used to group events. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregaddusertogroup(String token, UUID userid, String codegroup, String listname) throws ApiException {
        eventregaddusertogroupWithHttpInfo(token, userid, codegroup, listname);
    }

    /**
     * Register a user to an course group
     * Allows the user to make a staff member available for a course group.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param codegroup The code used to group events. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregaddusertogroupWithHttpInfo(String token, UUID userid, String codegroup, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregaddusertogroupValidateBeforeCall(token, userid, codegroup, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register a user to an course group (asynchronously)
     * Allows the user to make a staff member available for a course group.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param codegroup The code used to group events. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregaddusertogroupAsync(String token, UUID userid, String codegroup, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregaddusertogroupValidateBeforeCall(token, userid, codegroup, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventreggetevents
     * @param token The authentication token. (required)
     * @param userid The user id to list events. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param termid The term id to list events. (optional)
     * @param namefilter The value used to filter the events by name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventreggeteventsCall(String token, UUID userid, String listname, UUID termid, String namefilter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreggetevents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        if (termid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termid", termid));
        }

        if (namefilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namefilter", namefilter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventreggeteventsValidateBeforeCall(String token, UUID userid, String listname, UUID termid, String namefilter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventreggetevents(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling eventreggetevents(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventreggetevents(Async)");
        }
        

        okhttp3.Call localVarCall = eventreggeteventsCall(token, userid, listname, termid, namefilter, _callback);
        return localVarCall;

    }

    /**
     * View course registration by user
     * Allows the user to view all courses a given user is registered to, provided they have permission to view that user.
     * @param token The authentication token. (required)
     * @param userid The user id to list events. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param termid The term id to list events. (optional)
     * @param namefilter The value used to filter the events by name. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventreggetevents(String token, UUID userid, String listname, UUID termid, String namefilter) throws ApiException {
        eventreggeteventsWithHttpInfo(token, userid, listname, termid, namefilter);
    }

    /**
     * View course registration by user
     * Allows the user to view all courses a given user is registered to, provided they have permission to view that user.
     * @param token The authentication token. (required)
     * @param userid The user id to list events. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param termid The term id to list events. (optional)
     * @param namefilter The value used to filter the events by name. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventreggeteventsWithHttpInfo(String token, UUID userid, String listname, UUID termid, String namefilter) throws ApiException {
        okhttp3.Call localVarCall = eventreggeteventsValidateBeforeCall(token, userid, listname, termid, namefilter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View course registration by user (asynchronously)
     * Allows the user to view all courses a given user is registered to, provided they have permission to view that user.
     * @param token The authentication token. (required)
     * @param userid The user id to list events. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param termid The term id to list events. (optional)
     * @param namefilter The value used to filter the events by name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventreggeteventsAsync(String token, UUID userid, String listname, UUID termid, String namefilter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventreggeteventsValidateBeforeCall(token, userid, listname, termid, namefilter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventreggetgroups
     * @param token The authentication token. (required)
     * @param userid The user id to list events. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventreggetgroupsCall(String token, UUID userid, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreggetgroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventreggetgroupsValidateBeforeCall(String token, UUID userid, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventreggetgroups(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling eventreggetgroups(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventreggetgroups(Async)");
        }
        

        okhttp3.Call localVarCall = eventreggetgroupsCall(token, userid, listname, _callback);
        return localVarCall;

    }

    /**
     * Lists the course group registrations of a user
     * Allows the user to view the course groups a staff member is available for.
     * @param token The authentication token. (required)
     * @param userid The user id to list events. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventreggetgroups(String token, UUID userid, String listname) throws ApiException {
        eventreggetgroupsWithHttpInfo(token, userid, listname);
    }

    /**
     * Lists the course group registrations of a user
     * Allows the user to view the course groups a staff member is available for.
     * @param token The authentication token. (required)
     * @param userid The user id to list events. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventreggetgroupsWithHttpInfo(String token, UUID userid, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventreggetgroupsValidateBeforeCall(token, userid, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the course group registrations of a user (asynchronously)
     * Allows the user to view the course groups a staff member is available for.
     * @param token The authentication token. (required)
     * @param userid The user id to list events. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventreggetgroupsAsync(String token, UUID userid, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventreggetgroupsValidateBeforeCall(token, userid, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventreggetmyevents
     * @param token The authentication token. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param termid The term id to list events. (optional)
     * @param namefilter The value used to filter the events by name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventreggetmyeventsCall(String token, String listname, UUID termid, String namefilter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreggetmyevents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        if (termid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termid", termid));
        }

        if (namefilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namefilter", namefilter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventreggetmyeventsValidateBeforeCall(String token, String listname, UUID termid, String namefilter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventreggetmyevents(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventreggetmyevents(Async)");
        }
        

        okhttp3.Call localVarCall = eventreggetmyeventsCall(token, listname, termid, namefilter, _callback);
        return localVarCall;

    }

    /**
     * View the event registrations of the current user
     * 
     * @param token The authentication token. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param termid The term id to list events. (optional)
     * @param namefilter The value used to filter the events by name. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventreggetmyevents(String token, String listname, UUID termid, String namefilter) throws ApiException {
        eventreggetmyeventsWithHttpInfo(token, listname, termid, namefilter);
    }

    /**
     * View the event registrations of the current user
     * 
     * @param token The authentication token. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param termid The term id to list events. (optional)
     * @param namefilter The value used to filter the events by name. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventreggetmyeventsWithHttpInfo(String token, String listname, UUID termid, String namefilter) throws ApiException {
        okhttp3.Call localVarCall = eventreggetmyeventsValidateBeforeCall(token, listname, termid, namefilter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the event registrations of the current user (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param termid The term id to list events. (optional)
     * @param namefilter The value used to filter the events by name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventreggetmyeventsAsync(String token, String listname, UUID termid, String namefilter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventreggetmyeventsValidateBeforeCall(token, listname, termid, namefilter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventreggetmygroups
     * @param token The authentication token. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventreggetmygroupsCall(String token, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreggetmygroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventreggetmygroupsValidateBeforeCall(String token, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventreggetmygroups(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventreggetmygroups(Async)");
        }
        

        okhttp3.Call localVarCall = eventreggetmygroupsCall(token, listname, _callback);
        return localVarCall;

    }

    /**
     * View all current user registrations to course groups
     * Allows the user to view all his registrations to course groups.
     * @param token The authentication token. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventreggetmygroups(String token, String listname) throws ApiException {
        eventreggetmygroupsWithHttpInfo(token, listname);
    }

    /**
     * View all current user registrations to course groups
     * Allows the user to view all his registrations to course groups.
     * @param token The authentication token. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventreggetmygroupsWithHttpInfo(String token, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventreggetmygroupsValidateBeforeCall(token, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all current user registrations to course groups (asynchronously)
     * Allows the user to view all his registrations to course groups.
     * @param token The authentication token. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventreggetmygroupsAsync(String token, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventreggetmygroupsValidateBeforeCall(token, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventreggetusers
     * @param token The authentication token. (required)
     * @param eventid The event id to list users. (required)
     * @param listname The name of the list to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventreggetusersCall(String token, UUID eventid, String listname, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreggetusers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventreggetusersValidateBeforeCall(String token, UUID eventid, String listname, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventreggetusers(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling eventreggetusers(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventreggetusers(Async)");
        }
        

        okhttp3.Call localVarCall = eventreggetusersCall(token, eventid, listname, photosize, _callback);
        return localVarCall;

    }

    /**
     * View course registration
     * Allows the user to view all users registered for an individual course.
     * @param token The authentication token. (required)
     * @param eventid The event id to list users. (required)
     * @param listname The name of the list to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventreggetusers(String token, UUID eventid, String listname, Integer photosize) throws ApiException {
        eventreggetusersWithHttpInfo(token, eventid, listname, photosize);
    }

    /**
     * View course registration
     * Allows the user to view all users registered for an individual course.
     * @param token The authentication token. (required)
     * @param eventid The event id to list users. (required)
     * @param listname The name of the list to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventreggetusersWithHttpInfo(String token, UUID eventid, String listname, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = eventreggetusersValidateBeforeCall(token, eventid, listname, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View course registration (asynchronously)
     * Allows the user to view all users registered for an individual course.
     * @param token The authentication token. (required)
     * @param eventid The event id to list users. (required)
     * @param listname The name of the list to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventreggetusersAsync(String token, UUID eventid, String listname, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventreggetusersValidateBeforeCall(token, eventid, listname, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventreggetusersfromgroup
     * @param token The authentication token. (required)
     * @param codegroup The code group to list users. (required)
     * @param listname The name of the list to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventreggetusersfromgroupCall(String token, UUID codegroup, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreggetusersfromgroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (codegroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codegroup", codegroup));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventreggetusersfromgroupValidateBeforeCall(String token, UUID codegroup, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventreggetusersfromgroup(Async)");
        }
        
        // verify the required parameter 'codegroup' is set
        if (codegroup == null) {
            throw new ApiException("Missing the required parameter 'codegroup' when calling eventreggetusersfromgroup(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventreggetusersfromgroup(Async)");
        }
        

        okhttp3.Call localVarCall = eventreggetusersfromgroupCall(token, codegroup, listname, _callback);
        return localVarCall;

    }

    /**
     * Lists the registrations for a course group
     * Allows the user the get the staff members registered to a specific course group
     * @param token The authentication token. (required)
     * @param codegroup The code group to list users. (required)
     * @param listname The name of the list to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventreggetusersfromgroup(String token, UUID codegroup, String listname) throws ApiException {
        eventreggetusersfromgroupWithHttpInfo(token, codegroup, listname);
    }

    /**
     * Lists the registrations for a course group
     * Allows the user the get the staff members registered to a specific course group
     * @param token The authentication token. (required)
     * @param codegroup The code group to list users. (required)
     * @param listname The name of the list to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventreggetusersfromgroupWithHttpInfo(String token, UUID codegroup, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventreggetusersfromgroupValidateBeforeCall(token, codegroup, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the registrations for a course group (asynchronously)
     * Allows the user the get the staff members registered to a specific course group
     * @param token The authentication token. (required)
     * @param codegroup The code group to list users. (required)
     * @param listname The name of the list to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventreggetusersfromgroupAsync(String token, UUID codegroup, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventreggetusersfromgroupValidateBeforeCall(token, codegroup, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventreggetuserstoall
     * @param token The authentication token. (required)
     * @param listname The name of the list to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventreggetuserstoallCall(String token, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreggetuserstoall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventreggetuserstoallValidateBeforeCall(String token, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventreggetuserstoall(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventreggetuserstoall(Async)");
        }
        

        okhttp3.Call localVarCall = eventreggetuserstoallCall(token, listname, _callback);
        return localVarCall;

    }

    /**
     * View the users that are registered to all courses
     * Allows the user to view all staff members available for all courses.
     * @param token The authentication token. (required)
     * @param listname The name of the list to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventreggetuserstoall(String token, String listname) throws ApiException {
        eventreggetuserstoallWithHttpInfo(token, listname);
    }

    /**
     * View the users that are registered to all courses
     * Allows the user to view all staff members available for all courses.
     * @param token The authentication token. (required)
     * @param listname The name of the list to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventreggetuserstoallWithHttpInfo(String token, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventreggetuserstoallValidateBeforeCall(token, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the users that are registered to all courses (asynchronously)
     * Allows the user to view all staff members available for all courses.
     * @param token The authentication token. (required)
     * @param listname The name of the list to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventreggetuserstoallAsync(String token, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventreggetuserstoallValidateBeforeCall(token, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregremoveme
     * @param token The authentication token. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregremovemeCall(String token, UUID eventid, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventregremoveme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregremovemeValidateBeforeCall(String token, UUID eventid, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventregremoveme(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling eventregremoveme(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregremoveme(Async)");
        }
        

        okhttp3.Call localVarCall = eventregremovemeCall(token, eventid, listname, _callback);
        return localVarCall;

    }

    /**
     * Unregister current user from a course
     * Allows the user to remove themselves from registration to a course.
     * @param token The authentication token. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregremoveme(String token, UUID eventid, String listname) throws ApiException {
        eventregremovemeWithHttpInfo(token, eventid, listname);
    }

    /**
     * Unregister current user from a course
     * Allows the user to remove themselves from registration to a course.
     * @param token The authentication token. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregremovemeWithHttpInfo(String token, UUID eventid, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregremovemeValidateBeforeCall(token, eventid, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unregister current user from a course (asynchronously)
     * Allows the user to remove themselves from registration to a course.
     * @param token The authentication token. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregremovemeAsync(String token, UUID eventid, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregremovemeValidateBeforeCall(token, eventid, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregremovemefromall
     * @param token The authentication token. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregremovemefromallCall(String token, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventregremovemefromall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregremovemefromallValidateBeforeCall(String token, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventregremovemefromall(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregremovemefromall(Async)");
        }
        

        okhttp3.Call localVarCall = eventregremovemefromallCall(token, listname, _callback);
        return localVarCall;

    }

    /**
     * Remove current user from the registration to all courses
     * Allows the user to remove themselves from availability to all courses.
     * @param token The authentication token. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregremovemefromall(String token, String listname) throws ApiException {
        eventregremovemefromallWithHttpInfo(token, listname);
    }

    /**
     * Remove current user from the registration to all courses
     * Allows the user to remove themselves from availability to all courses.
     * @param token The authentication token. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregremovemefromallWithHttpInfo(String token, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregremovemefromallValidateBeforeCall(token, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove current user from the registration to all courses (asynchronously)
     * Allows the user to remove themselves from availability to all courses.
     * @param token The authentication token. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregremovemefromallAsync(String token, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregremovemefromallValidateBeforeCall(token, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregremovemefromgroup
     * @param token The authentication token. (required)
     * @param codegroup The code group of the events/courses. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregremovemefromgroupCall(String token, UUID codegroup, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventregremovemefromgroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (codegroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codegroup", codegroup));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregremovemefromgroupValidateBeforeCall(String token, UUID codegroup, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventregremovemefromgroup(Async)");
        }
        
        // verify the required parameter 'codegroup' is set
        if (codegroup == null) {
            throw new ApiException("Missing the required parameter 'codegroup' when calling eventregremovemefromgroup(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregremovemefromgroup(Async)");
        }
        

        okhttp3.Call localVarCall = eventregremovemefromgroupCall(token, codegroup, listname, _callback);
        return localVarCall;

    }

    /**
     * Remove current user from a course group
     * Allows the user to remove themselves from availability to a course group.
     * @param token The authentication token. (required)
     * @param codegroup The code group of the events/courses. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregremovemefromgroup(String token, UUID codegroup, String listname) throws ApiException {
        eventregremovemefromgroupWithHttpInfo(token, codegroup, listname);
    }

    /**
     * Remove current user from a course group
     * Allows the user to remove themselves from availability to a course group.
     * @param token The authentication token. (required)
     * @param codegroup The code group of the events/courses. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregremovemefromgroupWithHttpInfo(String token, UUID codegroup, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregremovemefromgroupValidateBeforeCall(token, codegroup, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove current user from a course group (asynchronously)
     * Allows the user to remove themselves from availability to a course group.
     * @param token The authentication token. (required)
     * @param codegroup The code group of the events/courses. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregremovemefromgroupAsync(String token, UUID codegroup, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregremovemefromgroupValidateBeforeCall(token, codegroup, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregremoveuser
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregremoveuserCall(String token, UUID userid, UUID eventid, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventregremoveuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregremoveuserValidateBeforeCall(String token, UUID userid, UUID eventid, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventregremoveuser(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling eventregremoveuser(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling eventregremoveuser(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregremoveuser(Async)");
        }
        

        okhttp3.Call localVarCall = eventregremoveuserCall(token, userid, eventid, listname, _callback);
        return localVarCall;

    }

    /**
     * Remove a user from a course
     * Allows the user to remove a user from a course&#39;s registration.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregremoveuser(String token, UUID userid, UUID eventid, String listname) throws ApiException {
        eventregremoveuserWithHttpInfo(token, userid, eventid, listname);
    }

    /**
     * Remove a user from a course
     * Allows the user to remove a user from a course&#39;s registration.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregremoveuserWithHttpInfo(String token, UUID userid, UUID eventid, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregremoveuserValidateBeforeCall(token, userid, eventid, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a user from a course (asynchronously)
     * Allows the user to remove a user from a course&#39;s registration.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregremoveuserAsync(String token, UUID userid, UUID eventid, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregremoveuserValidateBeforeCall(token, userid, eventid, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregremoveuserfromall
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregremoveuserfromallCall(String token, UUID userid, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventregremoveuserfromall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregremoveuserfromallValidateBeforeCall(String token, UUID userid, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventregremoveuserfromall(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling eventregremoveuserfromall(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregremoveuserfromall(Async)");
        }
        

        okhttp3.Call localVarCall = eventregremoveuserfromallCall(token, userid, listname, _callback);
        return localVarCall;

    }

    /**
     * Remove a user from the registration to all courses
     * Allows the user to remove a staff member from availability to all courses.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregremoveuserfromall(String token, UUID userid, String listname) throws ApiException {
        eventregremoveuserfromallWithHttpInfo(token, userid, listname);
    }

    /**
     * Remove a user from the registration to all courses
     * Allows the user to remove a staff member from availability to all courses.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregremoveuserfromallWithHttpInfo(String token, UUID userid, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregremoveuserfromallValidateBeforeCall(token, userid, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a user from the registration to all courses (asynchronously)
     * Allows the user to remove a staff member from availability to all courses.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregremoveuserfromallAsync(String token, UUID userid, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregremoveuserfromallValidateBeforeCall(token, userid, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregremoveuserfromgroup
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param codegroup The code group of the events/courses. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregremoveuserfromgroupCall(String token, UUID userid, UUID codegroup, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventregremoveuserfromgroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (codegroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codegroup", codegroup));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregremoveuserfromgroupValidateBeforeCall(String token, UUID userid, UUID codegroup, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventregremoveuserfromgroup(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling eventregremoveuserfromgroup(Async)");
        }
        
        // verify the required parameter 'codegroup' is set
        if (codegroup == null) {
            throw new ApiException("Missing the required parameter 'codegroup' when calling eventregremoveuserfromgroup(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregremoveuserfromgroup(Async)");
        }
        

        okhttp3.Call localVarCall = eventregremoveuserfromgroupCall(token, userid, codegroup, listname, _callback);
        return localVarCall;

    }

    /**
     * Remove a user from a course group
     * Allows the user to remove a staff member from availability to a course group.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param codegroup The code group of the events/courses. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregremoveuserfromgroup(String token, UUID userid, UUID codegroup, String listname) throws ApiException {
        eventregremoveuserfromgroupWithHttpInfo(token, userid, codegroup, listname);
    }

    /**
     * Remove a user from a course group
     * Allows the user to remove a staff member from availability to a course group.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param codegroup The code group of the events/courses. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregremoveuserfromgroupWithHttpInfo(String token, UUID userid, UUID codegroup, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregremoveuserfromgroupValidateBeforeCall(token, userid, codegroup, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a user from a course group (asynchronously)
     * Allows the user to remove a staff member from availability to a course group.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param codegroup The code group of the events/courses. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregremoveuserfromgroupAsync(String token, UUID userid, UUID codegroup, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregremoveuserfromgroupValidateBeforeCall(token, userid, codegroup, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/eventsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = eventsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a course
     * Allows the user to create or edit a course.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        eventsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a course
     * Allows the user to create or edit a course.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = eventsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a course (asynchronously)
     * Allows the user to create or edit a course.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsearchgroup
     * @param token The authentication token. (required)
     * @param query Query to search event groups. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsearchgroupCall(String token, UUID query, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventsearchgroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsearchgroupValidateBeforeCall(String token, UUID query, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling eventsearchgroup(Async)");
        }
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling eventsearchgroup(Async)");
        }
        

        okhttp3.Call localVarCall = eventsearchgroupCall(token, query, _callback);
        return localVarCall;

    }

    /**
     * Searches for the available event groups
     * 
     * @param token The authentication token. (required)
     * @param query Query to search event groups. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventsearchgroup(String token, UUID query) throws ApiException {
        eventsearchgroupWithHttpInfo(token, query);
    }

    /**
     * Searches for the available event groups
     * 
     * @param token The authentication token. (required)
     * @param query Query to search event groups. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventsearchgroupWithHttpInfo(String token, UUID query) throws ApiException {
        okhttp3.Call localVarCall = eventsearchgroupValidateBeforeCall(token, query, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Searches for the available event groups (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param query Query to search event groups. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsearchgroupAsync(String token, UUID query, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsearchgroupValidateBeforeCall(token, query, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for export
     * @param token The authentication token. (required)
     * @param exporttype What to export. (required)
     * @param exportformat The format of the resulting file. Valid types are CSV, HTML, XLS. (required)
     * @param filters Pipe separated filters for the export, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportCall(String token, String exporttype, String exportformat, String filters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (exporttype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exporttype", exporttype));
        }

        if (exportformat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exportformat", exportformat));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportValidateBeforeCall(String token, String exporttype, String exportformat, String filters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling export(Async)");
        }
        
        // verify the required parameter 'exporttype' is set
        if (exporttype == null) {
            throw new ApiException("Missing the required parameter 'exporttype' when calling export(Async)");
        }
        
        // verify the required parameter 'exportformat' is set
        if (exportformat == null) {
            throw new ApiException("Missing the required parameter 'exportformat' when calling export(Async)");
        }
        

        okhttp3.Call localVarCall = exportCall(token, exporttype, exportformat, filters, _callback);
        return localVarCall;

    }

    /**
     * Export AccuCampus data
     * Allows the user to export data from AccuCampus into a CSV, HTML, or Excel format.
     * @param token The authentication token. (required)
     * @param exporttype What to export. (required)
     * @param exportformat The format of the resulting file. Valid types are CSV, HTML, XLS. (required)
     * @param filters Pipe separated filters for the export, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void export(String token, String exporttype, String exportformat, String filters) throws ApiException {
        exportWithHttpInfo(token, exporttype, exportformat, filters);
    }

    /**
     * Export AccuCampus data
     * Allows the user to export data from AccuCampus into a CSV, HTML, or Excel format.
     * @param token The authentication token. (required)
     * @param exporttype What to export. (required)
     * @param exportformat The format of the resulting file. Valid types are CSV, HTML, XLS. (required)
     * @param filters Pipe separated filters for the export, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> exportWithHttpInfo(String token, String exporttype, String exportformat, String filters) throws ApiException {
        okhttp3.Call localVarCall = exportValidateBeforeCall(token, exporttype, exportformat, filters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Export AccuCampus data (asynchronously)
     * Allows the user to export data from AccuCampus into a CSV, HTML, or Excel format.
     * @param token The authentication token. (required)
     * @param exporttype What to export. (required)
     * @param exportformat The format of the resulting file. Valid types are CSV, HTML, XLS. (required)
     * @param filters Pipe separated filters for the export, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportAsync(String token, String exporttype, String exportformat, String filters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportValidateBeforeCall(token, exporttype, exportformat, filters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportlisttypes
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportlisttypesCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/exportlisttypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportlisttypesValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling exportlisttypes(Async)");
        }
        

        okhttp3.Call localVarCall = exportlisttypesCall(token, _callback);
        return localVarCall;

    }

    /**
     * Lists available export types
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void exportlisttypes(String token) throws ApiException {
        exportlisttypesWithHttpInfo(token);
    }

    /**
     * Lists available export types
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> exportlisttypesWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = exportlisttypesValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists available export types (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportlisttypesAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportlisttypesValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for featurelist
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featurelistCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/featurelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featurelistValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling featurelist(Async)");
        }
        

        okhttp3.Call localVarCall = featurelistCall(token, _callback);
        return localVarCall;

    }

    /**
     * Lists the available features.
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void featurelist(String token) throws ApiException {
        featurelistWithHttpInfo(token);
    }

    /**
     * Lists the available features.
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> featurelistWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = featurelistValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the available features. (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featurelistAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = featurelistValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for holidaylist
     * @param token The authentication token. (required)
     * @param term The term to get holidays from. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call holidaylistCall(String token, UUID term, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/holidaylist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (term != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("term", term));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call holidaylistValidateBeforeCall(String token, UUID term, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling holidaylist(Async)");
        }
        
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling holidaylist(Async)");
        }
        

        okhttp3.Call localVarCall = holidaylistCall(token, term, _callback);
        return localVarCall;

    }

    /**
     * View a list of entered holidays
     * Allows the user to view all holidays entered.
     * @param token The authentication token. (required)
     * @param term The term to get holidays from. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void holidaylist(String token, UUID term) throws ApiException {
        holidaylistWithHttpInfo(token, term);
    }

    /**
     * View a list of entered holidays
     * Allows the user to view all holidays entered.
     * @param token The authentication token. (required)
     * @param term The term to get holidays from. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> holidaylistWithHttpInfo(String token, UUID term) throws ApiException {
        okhttp3.Call localVarCall = holidaylistValidateBeforeCall(token, term, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of entered holidays (asynchronously)
     * Allows the user to view all holidays entered.
     * @param token The authentication token. (required)
     * @param term The term to get holidays from. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call holidaylistAsync(String token, UUID term, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = holidaylistValidateBeforeCall(token, term, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for holidaysave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call holidaysaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/holidaysave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call holidaysaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = holidaysaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a list of holidays
     * Allows the user to create or edit holidays.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void holidaysave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        holidaysaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a list of holidays
     * Allows the user to create or edit holidays.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> holidaysaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = holidaysaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a list of holidays (asynchronously)
     * Allows the user to create or edit holidays.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call holidaysaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = holidaysaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for holidaysuggest
     * @param token The authentication token. (required)
     * @param term The term to get holidays from. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call holidaysuggestCall(String token, UUID term, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/holidaysuggest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (term != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("term", term));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call holidaysuggestValidateBeforeCall(String token, UUID term, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling holidaysuggest(Async)");
        }
        
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling holidaysuggest(Async)");
        }
        

        okhttp3.Call localVarCall = holidaysuggestCall(token, term, _callback);
        return localVarCall;

    }

    /**
     * View the holiday suggestions in the given term
     * Allows the user to view the holiday suggestions for each term.
     * @param token The authentication token. (required)
     * @param term The term to get holidays from. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void holidaysuggest(String token, UUID term) throws ApiException {
        holidaysuggestWithHttpInfo(token, term);
    }

    /**
     * View the holiday suggestions in the given term
     * Allows the user to view the holiday suggestions for each term.
     * @param token The authentication token. (required)
     * @param term The term to get holidays from. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> holidaysuggestWithHttpInfo(String token, UUID term) throws ApiException {
        okhttp3.Call localVarCall = holidaysuggestValidateBeforeCall(token, term, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the holiday suggestions in the given term (asynchronously)
     * Allows the user to view the holiday suggestions for each term.
     * @param token The authentication token. (required)
     * @param term The term to get holidays from. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call holidaysuggestAsync(String token, UUID term, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = holidaysuggestValidateBeforeCall(token, term, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for importlisttypes
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importlisttypesCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/importlisttypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importlisttypesValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling importlisttypes(Async)");
        }
        

        okhttp3.Call localVarCall = importlisttypesCall(token, _callback);
        return localVarCall;

    }

    /**
     * Lists available import types
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void importlisttypes(String token) throws ApiException {
        importlisttypesWithHttpInfo(token);
    }

    /**
     * Lists available import types
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importlisttypesWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = importlisttypesValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists available import types (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importlisttypesAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importlisttypesValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for interactiondelete
     * @param token The authentication token. (required)
     * @param id The id of the interaction to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactiondeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/interactiondelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interactiondeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling interactiondelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling interactiondelete(Async)");
        }
        

        okhttp3.Call localVarCall = interactiondeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete an interaction
     * 
     * @param token The authentication token. (required)
     * @param id The id of the interaction to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void interactiondelete(String token, UUID id) throws ApiException {
        interactiondeleteWithHttpInfo(token, id);
    }

    /**
     * Delete an interaction
     * 
     * @param token The authentication token. (required)
     * @param id The id of the interaction to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> interactiondeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = interactiondeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an interaction (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param id The id of the interaction to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactiondeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = interactiondeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for interactionfeed
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param startdate If set, only interactions that happened after this date are returned. (optional)
     * @param _public Specifies whether to return public or private interactions. (optional)
     * @param contexttype The type of the context of the interactions to return. (optional)
     * @param contextid The id of the context of the interactions to return. (optional)
     * @param types The  comma separated types of the interactions to return. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned. (optional)
     * @param orderdescending If true, last interactions will be shown first. Otherwise, interactions will be ordered ascendantly. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactionfeedCall(String token, Integer from, Integer count, OffsetDateTime startdate, Boolean _public, String contexttype, UUID contextid, String types, Integer photosize, Boolean showdefaultphoto, Boolean orderdescending, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/interactionfeed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (startdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startdate", startdate));
        }

        if (_public != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("public", _public));
        }

        if (contexttype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contexttype", contexttype));
        }

        if (contextid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contextid", contextid));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        if (showdefaultphoto != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showdefaultphoto", showdefaultphoto));
        }

        if (orderdescending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderdescending", orderdescending));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interactionfeedValidateBeforeCall(String token, Integer from, Integer count, OffsetDateTime startdate, Boolean _public, String contexttype, UUID contextid, String types, Integer photosize, Boolean showdefaultphoto, Boolean orderdescending, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling interactionfeed(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling interactionfeed(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling interactionfeed(Async)");
        }
        

        okhttp3.Call localVarCall = interactionfeedCall(token, from, count, startdate, _public, contexttype, contextid, types, photosize, showdefaultphoto, orderdescending, _callback);
        return localVarCall;

    }

    /**
     * Get the interactions feed
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param startdate If set, only interactions that happened after this date are returned. (optional)
     * @param _public Specifies whether to return public or private interactions. (optional)
     * @param contexttype The type of the context of the interactions to return. (optional)
     * @param contextid The id of the context of the interactions to return. (optional)
     * @param types The  comma separated types of the interactions to return. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned. (optional)
     * @param orderdescending If true, last interactions will be shown first. Otherwise, interactions will be ordered ascendantly. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void interactionfeed(String token, Integer from, Integer count, OffsetDateTime startdate, Boolean _public, String contexttype, UUID contextid, String types, Integer photosize, Boolean showdefaultphoto, Boolean orderdescending) throws ApiException {
        interactionfeedWithHttpInfo(token, from, count, startdate, _public, contexttype, contextid, types, photosize, showdefaultphoto, orderdescending);
    }

    /**
     * Get the interactions feed
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param startdate If set, only interactions that happened after this date are returned. (optional)
     * @param _public Specifies whether to return public or private interactions. (optional)
     * @param contexttype The type of the context of the interactions to return. (optional)
     * @param contextid The id of the context of the interactions to return. (optional)
     * @param types The  comma separated types of the interactions to return. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned. (optional)
     * @param orderdescending If true, last interactions will be shown first. Otherwise, interactions will be ordered ascendantly. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> interactionfeedWithHttpInfo(String token, Integer from, Integer count, OffsetDateTime startdate, Boolean _public, String contexttype, UUID contextid, String types, Integer photosize, Boolean showdefaultphoto, Boolean orderdescending) throws ApiException {
        okhttp3.Call localVarCall = interactionfeedValidateBeforeCall(token, from, count, startdate, _public, contexttype, contextid, types, photosize, showdefaultphoto, orderdescending, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the interactions feed (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param startdate If set, only interactions that happened after this date are returned. (optional)
     * @param _public Specifies whether to return public or private interactions. (optional)
     * @param contexttype The type of the context of the interactions to return. (optional)
     * @param contextid The id of the context of the interactions to return. (optional)
     * @param types The  comma separated types of the interactions to return. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned. (optional)
     * @param orderdescending If true, last interactions will be shown first. Otherwise, interactions will be ordered ascendantly. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactionfeedAsync(String token, Integer from, Integer count, OffsetDateTime startdate, Boolean _public, String contexttype, UUID contextid, String types, Integer photosize, Boolean showdefaultphoto, Boolean orderdescending, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = interactionfeedValidateBeforeCall(token, from, count, startdate, _public, contexttype, contextid, types, photosize, showdefaultphoto, orderdescending, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for interactionget
     * @param token The authentication token. (required)
     * @param id The id of the interaction. (required)
     * @param thumbnailmediasize The size in pixels of the thumbnail media URLs returned. Defaults to 680. If the size specified is not available, a similar one will be returned. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactiongetCall(String token, String id, Integer thumbnailmediasize, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/interactionget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (thumbnailmediasize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbnailmediasize", thumbnailmediasize));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interactiongetValidateBeforeCall(String token, String id, Integer thumbnailmediasize, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling interactionget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling interactionget(Async)");
        }
        

        okhttp3.Call localVarCall = interactiongetCall(token, id, thumbnailmediasize, photosize, _callback);
        return localVarCall;

    }

    /**
     * View an interaction
     * 
     * @param token The authentication token. (required)
     * @param id The id of the interaction. (required)
     * @param thumbnailmediasize The size in pixels of the thumbnail media URLs returned. Defaults to 680. If the size specified is not available, a similar one will be returned. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void interactionget(String token, String id, Integer thumbnailmediasize, Integer photosize) throws ApiException {
        interactiongetWithHttpInfo(token, id, thumbnailmediasize, photosize);
    }

    /**
     * View an interaction
     * 
     * @param token The authentication token. (required)
     * @param id The id of the interaction. (required)
     * @param thumbnailmediasize The size in pixels of the thumbnail media URLs returned. Defaults to 680. If the size specified is not available, a similar one will be returned. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> interactiongetWithHttpInfo(String token, String id, Integer thumbnailmediasize, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = interactiongetValidateBeforeCall(token, id, thumbnailmediasize, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View an interaction (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param id The id of the interaction. (required)
     * @param thumbnailmediasize The size in pixels of the thumbnail media URLs returned. Defaults to 680. If the size specified is not available, a similar one will be returned. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactiongetAsync(String token, String id, Integer thumbnailmediasize, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = interactiongetValidateBeforeCall(token, id, thumbnailmediasize, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for interactionlistprivatesummary
     * @param token The authentication token. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactionlistprivatesummaryCall(String token, Integer photosize, Boolean showdefaultphoto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/interactionlistprivatesummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        if (showdefaultphoto != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showdefaultphoto", showdefaultphoto));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interactionlistprivatesummaryValidateBeforeCall(String token, Integer photosize, Boolean showdefaultphoto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling interactionlistprivatesummary(Async)");
        }
        

        okhttp3.Call localVarCall = interactionlistprivatesummaryCall(token, photosize, showdefaultphoto, _callback);
        return localVarCall;

    }

    /**
     * Get current user&#39;s latest private interactions
     * 
     * @param token The authentication token. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void interactionlistprivatesummary(String token, Integer photosize, Boolean showdefaultphoto) throws ApiException {
        interactionlistprivatesummaryWithHttpInfo(token, photosize, showdefaultphoto);
    }

    /**
     * Get current user&#39;s latest private interactions
     * 
     * @param token The authentication token. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> interactionlistprivatesummaryWithHttpInfo(String token, Integer photosize, Boolean showdefaultphoto) throws ApiException {
        okhttp3.Call localVarCall = interactionlistprivatesummaryValidateBeforeCall(token, photosize, showdefaultphoto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get current user&#39;s latest private interactions (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactionlistprivatesummaryAsync(String token, Integer photosize, Boolean showdefaultphoto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = interactionlistprivatesummaryValidateBeforeCall(token, photosize, showdefaultphoto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for interactionsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactionsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/interactionsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interactionsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = interactionsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Save an interaction
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void interactionsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        interactionsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Save an interaction
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> interactionsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = interactionsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save an interaction (asynchronously)
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactionsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = interactionsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for licenseacceptagreement
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenseacceptagreementCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/licenseacceptagreement";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licenseacceptagreementValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling licenseacceptagreement(Async)");
        }
        

        okhttp3.Call localVarCall = licenseacceptagreementCall(token, _callback);
        return localVarCall;

    }

    /**
     * Accept the license agreement
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void licenseacceptagreement(String token) throws ApiException {
        licenseacceptagreementWithHttpInfo(token);
    }

    /**
     * Accept the license agreement
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> licenseacceptagreementWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = licenseacceptagreementValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Accept the license agreement (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenseacceptagreementAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = licenseacceptagreementValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for licensegetagreementstatus
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licensegetagreementstatusCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/licensegetagreementstatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licensegetagreementstatusValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling licensegetagreementstatus(Async)");
        }
        

        okhttp3.Call localVarCall = licensegetagreementstatusCall(token, _callback);
        return localVarCall;

    }

    /**
     * Check if license agreement has been accepted
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void licensegetagreementstatus(String token) throws ApiException {
        licensegetagreementstatusWithHttpInfo(token);
    }

    /**
     * Check if license agreement has been accepted
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> licensegetagreementstatusWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = licensegetagreementstatusValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if license agreement has been accepted (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licensegetagreementstatusAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = licensegetagreementstatusValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for licensegetcurrent
     * @param token The authentication token. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licensegetcurrentCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/licensegetcurrent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licensegetcurrentValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = licensegetcurrentCall(token, _callback);
        return localVarCall;

    }

    /**
     * Gets the current license information
     * 
     * @param token The authentication token. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void licensegetcurrent(String token) throws ApiException {
        licensegetcurrentWithHttpInfo(token);
    }

    /**
     * Gets the current license information
     * 
     * @param token The authentication token. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> licensegetcurrentWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = licensegetcurrentValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the current license information (asynchronously)
     * 
     * @param token The authentication token. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licensegetcurrentAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = licensegetcurrentValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for licenserenew
     * @param token The authentication token. (required)
     * @param email The e-mail of the user sending the request. (required)
     * @param phonenumber The phone number of the user sending the request. (required)
     * @param jobtitle The job title of the user sending the request. (optional)
     * @param institution The institution of the user sending the request. (optional)
     * @param comments Comments entered by the user sending the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenserenewCall(String token, String email, String phonenumber, String jobtitle, String institution, String comments, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/licenserenew";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (phonenumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phonenumber", phonenumber));
        }

        if (jobtitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobtitle", jobtitle));
        }

        if (institution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("institution", institution));
        }

        if (comments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comments", comments));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licenserenewValidateBeforeCall(String token, String email, String phonenumber, String jobtitle, String institution, String comments, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling licenserenew(Async)");
        }
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling licenserenew(Async)");
        }
        
        // verify the required parameter 'phonenumber' is set
        if (phonenumber == null) {
            throw new ApiException("Missing the required parameter 'phonenumber' when calling licenserenew(Async)");
        }
        

        okhttp3.Call localVarCall = licenserenewCall(token, email, phonenumber, jobtitle, institution, comments, _callback);
        return localVarCall;

    }

    /**
     * Contact Engineerica in order to renew the AccuCampus subscription
     * Allows the user to select the option to contact Engineerica when the AccuCampus account is nearing its renewal date.
     * @param token The authentication token. (required)
     * @param email The e-mail of the user sending the request. (required)
     * @param phonenumber The phone number of the user sending the request. (required)
     * @param jobtitle The job title of the user sending the request. (optional)
     * @param institution The institution of the user sending the request. (optional)
     * @param comments Comments entered by the user sending the request. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void licenserenew(String token, String email, String phonenumber, String jobtitle, String institution, String comments) throws ApiException {
        licenserenewWithHttpInfo(token, email, phonenumber, jobtitle, institution, comments);
    }

    /**
     * Contact Engineerica in order to renew the AccuCampus subscription
     * Allows the user to select the option to contact Engineerica when the AccuCampus account is nearing its renewal date.
     * @param token The authentication token. (required)
     * @param email The e-mail of the user sending the request. (required)
     * @param phonenumber The phone number of the user sending the request. (required)
     * @param jobtitle The job title of the user sending the request. (optional)
     * @param institution The institution of the user sending the request. (optional)
     * @param comments Comments entered by the user sending the request. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> licenserenewWithHttpInfo(String token, String email, String phonenumber, String jobtitle, String institution, String comments) throws ApiException {
        okhttp3.Call localVarCall = licenserenewValidateBeforeCall(token, email, phonenumber, jobtitle, institution, comments, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Contact Engineerica in order to renew the AccuCampus subscription (asynchronously)
     * Allows the user to select the option to contact Engineerica when the AccuCampus account is nearing its renewal date.
     * @param token The authentication token. (required)
     * @param email The e-mail of the user sending the request. (required)
     * @param phonenumber The phone number of the user sending the request. (required)
     * @param jobtitle The job title of the user sending the request. (optional)
     * @param institution The institution of the user sending the request. (optional)
     * @param comments Comments entered by the user sending the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenserenewAsync(String token, String email, String phonenumber, String jobtitle, String institution, String comments, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = licenserenewValidateBeforeCall(token, email, phonenumber, jobtitle, institution, comments, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for likedelete
     * @param token The authentication token. (required)
     * @param interactionid The id of the interaction to unlike. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call likedeleteCall(String token, UUID interactionid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/likedelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (interactionid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interactionid", interactionid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call likedeleteValidateBeforeCall(String token, UUID interactionid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling likedelete(Async)");
        }
        
        // verify the required parameter 'interactionid' is set
        if (interactionid == null) {
            throw new ApiException("Missing the required parameter 'interactionid' when calling likedelete(Async)");
        }
        

        okhttp3.Call localVarCall = likedeleteCall(token, interactionid, _callback);
        return localVarCall;

    }

    /**
     * Delete a like
     * 
     * @param token The authentication token. (required)
     * @param interactionid The id of the interaction to unlike. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void likedelete(String token, UUID interactionid) throws ApiException {
        likedeleteWithHttpInfo(token, interactionid);
    }

    /**
     * Delete a like
     * 
     * @param token The authentication token. (required)
     * @param interactionid The id of the interaction to unlike. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> likedeleteWithHttpInfo(String token, UUID interactionid) throws ApiException {
        okhttp3.Call localVarCall = likedeleteValidateBeforeCall(token, interactionid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a like (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param interactionid The id of the interaction to unlike. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call likedeleteAsync(String token, UUID interactionid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = likedeleteValidateBeforeCall(token, interactionid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for likelist
     * @param token The authentication token. (required)
     * @param interactionid The id of the interaction to unlike. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call likelistCall(String token, UUID interactionid, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/likelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (interactionid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interactionid", interactionid));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call likelistValidateBeforeCall(String token, UUID interactionid, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling likelist(Async)");
        }
        
        // verify the required parameter 'interactionid' is set
        if (interactionid == null) {
            throw new ApiException("Missing the required parameter 'interactionid' when calling likelist(Async)");
        }
        

        okhttp3.Call localVarCall = likelistCall(token, interactionid, photosize, _callback);
        return localVarCall;

    }

    /**
     * View all the likes associated to a target
     * 
     * @param token The authentication token. (required)
     * @param interactionid The id of the interaction to unlike. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void likelist(String token, UUID interactionid, Integer photosize) throws ApiException {
        likelistWithHttpInfo(token, interactionid, photosize);
    }

    /**
     * View all the likes associated to a target
     * 
     * @param token The authentication token. (required)
     * @param interactionid The id of the interaction to unlike. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> likelistWithHttpInfo(String token, UUID interactionid, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = likelistValidateBeforeCall(token, interactionid, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all the likes associated to a target (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param interactionid The id of the interaction to unlike. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call likelistAsync(String token, UUID interactionid, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = likelistValidateBeforeCall(token, interactionid, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for likesave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call likesaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/likesave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call likesaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = likesaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Save a like
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void likesave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        likesaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Save a like
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> likesaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = likesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save a like (asynchronously)
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call likesaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = likesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listtimezones
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listtimezonesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listtimezones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listtimezonesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listtimezonesCall(_callback);
        return localVarCall;

    }

    /**
     * Lists the available timezones
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void listtimezones() throws ApiException {
        listtimezonesWithHttpInfo();
    }

    /**
     * Lists the available timezones
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listtimezonesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listtimezonesValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the available timezones (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listtimezonesAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listtimezonesValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationdelete
     * @param token The authentication token. (required)
     * @param id The id of the location to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationdeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locationdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationdeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling locationdelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling locationdelete(Async)");
        }
        

        okhttp3.Call localVarCall = locationdeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a location
     * Allows the user to delete an existing location.
     * @param token The authentication token. (required)
     * @param id The id of the location to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void locationdelete(String token, UUID id) throws ApiException {
        locationdeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a location
     * Allows the user to delete an existing location.
     * @param token The authentication token. (required)
     * @param id The id of the location to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> locationdeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = locationdeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a location (asynchronously)
     * Allows the user to delete an existing location.
     * @param token The authentication token. (required)
     * @param id The id of the location to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationdeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationdeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationget
     * @param token The authentication token. (required)
     * @param id The id of the location to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationgetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locationget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationgetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling locationget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling locationget(Async)");
        }
        

        okhttp3.Call localVarCall = locationgetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of a location
     * Allows the user to search and view an individual location and its details.
     * @param token The authentication token. (required)
     * @param id The id of the location to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void locationget(String token, UUID id) throws ApiException {
        locationgetWithHttpInfo(token, id);
    }

    /**
     * Search and view details of a location
     * Allows the user to search and view an individual location and its details.
     * @param token The authentication token. (required)
     * @param id The id of the location to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> locationgetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = locationgetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of a location (asynchronously)
     * Allows the user to search and view an individual location and its details.
     * @param token The authentication token. (required)
     * @param id The id of the location to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationgetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationgetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationlist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param locations The comma-separated list containing the ids of the locations to list. (optional)
     * @param sortbygroup True to list locations sorted by the &#39;Located In&#39; property. Defaults to false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationlistCall(String token, Integer from, Integer count, String locations, Boolean sortbygroup, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locationlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (locations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locations", locations));
        }

        if (sortbygroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortbygroup", sortbygroup));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationlistValidateBeforeCall(String token, Integer from, Integer count, String locations, Boolean sortbygroup, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling locationlist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling locationlist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling locationlist(Async)");
        }
        

        okhttp3.Call localVarCall = locationlistCall(token, from, count, locations, sortbygroup, _callback);
        return localVarCall;

    }

    /**
     * View a list of locations
     * Allows the user to view the list of all locations to which they are scoped.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param locations The comma-separated list containing the ids of the locations to list. (optional)
     * @param sortbygroup True to list locations sorted by the &#39;Located In&#39; property. Defaults to false. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void locationlist(String token, Integer from, Integer count, String locations, Boolean sortbygroup) throws ApiException {
        locationlistWithHttpInfo(token, from, count, locations, sortbygroup);
    }

    /**
     * View a list of locations
     * Allows the user to view the list of all locations to which they are scoped.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param locations The comma-separated list containing the ids of the locations to list. (optional)
     * @param sortbygroup True to list locations sorted by the &#39;Located In&#39; property. Defaults to false. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> locationlistWithHttpInfo(String token, Integer from, Integer count, String locations, Boolean sortbygroup) throws ApiException {
        okhttp3.Call localVarCall = locationlistValidateBeforeCall(token, from, count, locations, sortbygroup, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of locations (asynchronously)
     * Allows the user to view the list of all locations to which they are scoped.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param locations The comma-separated list containing the ids of the locations to list. (optional)
     * @param sortbygroup True to list locations sorted by the &#39;Located In&#39; property. Defaults to false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationlistAsync(String token, Integer from, Integer count, String locations, Boolean sortbygroup, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationlistValidateBeforeCall(token, from, count, locations, sortbygroup, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/locationsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = locationsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a location
     * Allows the user to create or edit a location.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void locationsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        locationsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a location
     * Allows the user to create or edit a location.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> locationsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = locationsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a location (asynchronously)
     * Allows the user to create or edit a location.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for login
     * @param domain The account domain to login. (required)
     * @param username The username (email) of the user to login as. (required)
     * @param password The password of the user to login as. (required)
     * @param method The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;. (required)
     * @param rememberme If true then the session will not expire. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginCall(String domain, String username, String password, String method, Boolean rememberme, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (method != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("method", method));
        }

        if (rememberme != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rememberme", rememberme));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginValidateBeforeCall(String domain, String username, String password, String method, Boolean rememberme, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling login(Async)");
        }
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling login(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling login(Async)");
        }
        
        // verify the required parameter 'method' is set
        if (method == null) {
            throw new ApiException("Missing the required parameter 'method' when calling login(Async)");
        }
        

        okhttp3.Call localVarCall = loginCall(domain, username, password, method, rememberme, _callback);
        return localVarCall;

    }

    /**
     * Login
     * 
     * @param domain The account domain to login. (required)
     * @param username The username (email) of the user to login as. (required)
     * @param password The password of the user to login as. (required)
     * @param method The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;. (required)
     * @param rememberme If true then the session will not expire. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void login(String domain, String username, String password, String method, Boolean rememberme) throws ApiException {
        loginWithHttpInfo(domain, username, password, method, rememberme);
    }

    /**
     * Login
     * 
     * @param domain The account domain to login. (required)
     * @param username The username (email) of the user to login as. (required)
     * @param password The password of the user to login as. (required)
     * @param method The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;. (required)
     * @param rememberme If true then the session will not expire. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> loginWithHttpInfo(String domain, String username, String password, String method, Boolean rememberme) throws ApiException {
        okhttp3.Call localVarCall = loginValidateBeforeCall(domain, username, password, method, rememberme, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Login (asynchronously)
     * 
     * @param domain The account domain to login. (required)
     * @param username The username (email) of the user to login as. (required)
     * @param password The password of the user to login as. (required)
     * @param method The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;. (required)
     * @param rememberme If true then the session will not expire. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginAsync(String domain, String username, String password, String method, Boolean rememberme, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginValidateBeforeCall(domain, username, password, method, rememberme, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logout
     * @param token The authentication token used to login. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logoutValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = logoutCall(token, _callback);
        return localVarCall;

    }

    /**
     * Logout
     * 
     * @param token The authentication token used to login. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void logout(String token) throws ApiException {
        logoutWithHttpInfo(token);
    }

    /**
     * Logout
     * 
     * @param token The authentication token used to login. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logoutWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = logoutValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Logout (asynchronously)
     * 
     * @param token The authentication token used to login. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logoutValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediacheckin
     * @param token The authentication token. (required)
     * @param media The id of the media item to checkin. (required)
     * @param checkindate The checkout date. (required)
     * @param notes The notes of the checkout. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediacheckinCall(String token, UUID media, OffsetDateTime checkindate, String notes, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediacheckin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (media != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media", media));
        }

        if (checkindate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkindate", checkindate));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediacheckinValidateBeforeCall(String token, UUID media, OffsetDateTime checkindate, String notes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling mediacheckin(Async)");
        }
        
        // verify the required parameter 'media' is set
        if (media == null) {
            throw new ApiException("Missing the required parameter 'media' when calling mediacheckin(Async)");
        }
        
        // verify the required parameter 'checkindate' is set
        if (checkindate == null) {
            throw new ApiException("Missing the required parameter 'checkindate' when calling mediacheckin(Async)");
        }
        

        okhttp3.Call localVarCall = mediacheckinCall(token, media, checkindate, notes, _callback);
        return localVarCall;

    }

    /**
     * Check in media item
     * Allows the user to check in a media item.
     * @param token The authentication token. (required)
     * @param media The id of the media item to checkin. (required)
     * @param checkindate The checkout date. (required)
     * @param notes The notes of the checkout. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void mediacheckin(String token, UUID media, OffsetDateTime checkindate, String notes) throws ApiException {
        mediacheckinWithHttpInfo(token, media, checkindate, notes);
    }

    /**
     * Check in media item
     * Allows the user to check in a media item.
     * @param token The authentication token. (required)
     * @param media The id of the media item to checkin. (required)
     * @param checkindate The checkout date. (required)
     * @param notes The notes of the checkout. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mediacheckinWithHttpInfo(String token, UUID media, OffsetDateTime checkindate, String notes) throws ApiException {
        okhttp3.Call localVarCall = mediacheckinValidateBeforeCall(token, media, checkindate, notes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check in media item (asynchronously)
     * Allows the user to check in a media item.
     * @param token The authentication token. (required)
     * @param media The id of the media item to checkin. (required)
     * @param checkindate The checkout date. (required)
     * @param notes The notes of the checkout. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediacheckinAsync(String token, UUID media, OffsetDateTime checkindate, String notes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediacheckinValidateBeforeCall(token, media, checkindate, notes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediacheckout
     * @param token The authentication token. (required)
     * @param media The id of the media item to checkout. (required)
     * @param user The id of the user that is checking the item out. (required)
     * @param checkoutdate The checkout date. (required)
     * @param duedate The date when the checkout is due. (required)
     * @param staff The id of the staff member related to the checkout. (optional)
     * @param event The id of the event related to the checkout. (optional)
     * @param notes The notes of the checkout. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediacheckoutCall(String token, UUID media, UUID user, OffsetDateTime checkoutdate, OffsetDateTime duedate, UUID staff, UUID event, String notes, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediacheckout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (media != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media", media));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (staff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staff", staff));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (checkoutdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkoutdate", checkoutdate));
        }

        if (duedate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duedate", duedate));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediacheckoutValidateBeforeCall(String token, UUID media, UUID user, OffsetDateTime checkoutdate, OffsetDateTime duedate, UUID staff, UUID event, String notes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling mediacheckout(Async)");
        }
        
        // verify the required parameter 'media' is set
        if (media == null) {
            throw new ApiException("Missing the required parameter 'media' when calling mediacheckout(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling mediacheckout(Async)");
        }
        
        // verify the required parameter 'checkoutdate' is set
        if (checkoutdate == null) {
            throw new ApiException("Missing the required parameter 'checkoutdate' when calling mediacheckout(Async)");
        }
        
        // verify the required parameter 'duedate' is set
        if (duedate == null) {
            throw new ApiException("Missing the required parameter 'duedate' when calling mediacheckout(Async)");
        }
        

        okhttp3.Call localVarCall = mediacheckoutCall(token, media, user, checkoutdate, duedate, staff, event, notes, _callback);
        return localVarCall;

    }

    /**
     * Check out media item
     * Allows the user to check out a media item.
     * @param token The authentication token. (required)
     * @param media The id of the media item to checkout. (required)
     * @param user The id of the user that is checking the item out. (required)
     * @param checkoutdate The checkout date. (required)
     * @param duedate The date when the checkout is due. (required)
     * @param staff The id of the staff member related to the checkout. (optional)
     * @param event The id of the event related to the checkout. (optional)
     * @param notes The notes of the checkout. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void mediacheckout(String token, UUID media, UUID user, OffsetDateTime checkoutdate, OffsetDateTime duedate, UUID staff, UUID event, String notes) throws ApiException {
        mediacheckoutWithHttpInfo(token, media, user, checkoutdate, duedate, staff, event, notes);
    }

    /**
     * Check out media item
     * Allows the user to check out a media item.
     * @param token The authentication token. (required)
     * @param media The id of the media item to checkout. (required)
     * @param user The id of the user that is checking the item out. (required)
     * @param checkoutdate The checkout date. (required)
     * @param duedate The date when the checkout is due. (required)
     * @param staff The id of the staff member related to the checkout. (optional)
     * @param event The id of the event related to the checkout. (optional)
     * @param notes The notes of the checkout. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mediacheckoutWithHttpInfo(String token, UUID media, UUID user, OffsetDateTime checkoutdate, OffsetDateTime duedate, UUID staff, UUID event, String notes) throws ApiException {
        okhttp3.Call localVarCall = mediacheckoutValidateBeforeCall(token, media, user, checkoutdate, duedate, staff, event, notes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check out media item (asynchronously)
     * Allows the user to check out a media item.
     * @param token The authentication token. (required)
     * @param media The id of the media item to checkout. (required)
     * @param user The id of the user that is checking the item out. (required)
     * @param checkoutdate The checkout date. (required)
     * @param duedate The date when the checkout is due. (required)
     * @param staff The id of the staff member related to the checkout. (optional)
     * @param event The id of the event related to the checkout. (optional)
     * @param notes The notes of the checkout. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediacheckoutAsync(String token, UUID media, UUID user, OffsetDateTime checkoutdate, OffsetDateTime duedate, UUID staff, UUID event, String notes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediacheckoutValidateBeforeCall(token, media, user, checkoutdate, duedate, staff, event, notes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediacheckoutlist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param media Used to filter the checkouts of a specific media item. (optional)
     * @param user Used to filter the checkouts made by a specific user. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediacheckoutlistCall(String token, Integer from, Integer count, UUID media, UUID user, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediacheckoutlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (media != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media", media));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediacheckoutlistValidateBeforeCall(String token, Integer from, Integer count, UUID media, UUID user, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling mediacheckoutlist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling mediacheckoutlist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling mediacheckoutlist(Async)");
        }
        

        okhttp3.Call localVarCall = mediacheckoutlistCall(token, from, count, media, user, photosize, _callback);
        return localVarCall;

    }

    /**
     * View a list of past media checkouts
     * Allows the user to view a list of all past checkouts
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param media Used to filter the checkouts of a specific media item. (optional)
     * @param user Used to filter the checkouts made by a specific user. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void mediacheckoutlist(String token, Integer from, Integer count, UUID media, UUID user, Integer photosize) throws ApiException {
        mediacheckoutlistWithHttpInfo(token, from, count, media, user, photosize);
    }

    /**
     * View a list of past media checkouts
     * Allows the user to view a list of all past checkouts
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param media Used to filter the checkouts of a specific media item. (optional)
     * @param user Used to filter the checkouts made by a specific user. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mediacheckoutlistWithHttpInfo(String token, Integer from, Integer count, UUID media, UUID user, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = mediacheckoutlistValidateBeforeCall(token, from, count, media, user, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of past media checkouts (asynchronously)
     * Allows the user to view a list of all past checkouts
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param media Used to filter the checkouts of a specific media item. (optional)
     * @param user Used to filter the checkouts made by a specific user. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediacheckoutlistAsync(String token, Integer from, Integer count, UUID media, UUID user, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediacheckoutlistValidateBeforeCall(token, from, count, media, user, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediadelete
     * @param token The authentication token. (required)
     * @param id The id of the media item to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediadeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediadelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediadeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling mediadelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling mediadelete(Async)");
        }
        

        okhttp3.Call localVarCall = mediadeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a media item
     * Allows the user to delete an existing media item.
     * @param token The authentication token. (required)
     * @param id The id of the media item to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void mediadelete(String token, UUID id) throws ApiException {
        mediadeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a media item
     * Allows the user to delete an existing media item.
     * @param token The authentication token. (required)
     * @param id The id of the media item to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mediadeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = mediadeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a media item (asynchronously)
     * Allows the user to delete an existing media item.
     * @param token The authentication token. (required)
     * @param id The id of the media item to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediadeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediadeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediadeletecheckoutlog
     * @param token The authentication token. (required)
     * @param id The id of the checkout log to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediadeletecheckoutlogCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediadeletecheckoutlog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediadeletecheckoutlogValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling mediadeletecheckoutlog(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling mediadeletecheckoutlog(Async)");
        }
        

        okhttp3.Call localVarCall = mediadeletecheckoutlogCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a media checkout log
     * Allows the user to delete a media item&#39;s checkout log.
     * @param token The authentication token. (required)
     * @param id The id of the checkout log to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void mediadeletecheckoutlog(String token, UUID id) throws ApiException {
        mediadeletecheckoutlogWithHttpInfo(token, id);
    }

    /**
     * Delete a media checkout log
     * Allows the user to delete a media item&#39;s checkout log.
     * @param token The authentication token. (required)
     * @param id The id of the checkout log to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mediadeletecheckoutlogWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = mediadeletecheckoutlogValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a media checkout log (asynchronously)
     * Allows the user to delete a media item&#39;s checkout log.
     * @param token The authentication token. (required)
     * @param id The id of the checkout log to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediadeletecheckoutlogAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediadeletecheckoutlogValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediaget
     * @param token The authentication token. (required)
     * @param id The id of the media item to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediagetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediaget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediagetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling mediaget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling mediaget(Async)");
        }
        

        okhttp3.Call localVarCall = mediagetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of a media item
     * Allows the user to view an individual media item and its details.
     * @param token The authentication token. (required)
     * @param id The id of the media item to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void mediaget(String token, UUID id) throws ApiException {
        mediagetWithHttpInfo(token, id);
    }

    /**
     * Search and view details of a media item
     * Allows the user to view an individual media item and its details.
     * @param token The authentication token. (required)
     * @param id The id of the media item to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mediagetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = mediagetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of a media item (asynchronously)
     * Allows the user to view an individual media item and its details.
     * @param token The authentication token. (required)
     * @param id The id of the media item to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediagetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediagetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediagetbycode
     * @param token The authentication token. (required)
     * @param code The code of the media item to get. (required)
     * @param location The location where to look for the media item. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediagetbycodeCall(String token, String code, UUID location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediagetbycode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediagetbycodeValidateBeforeCall(String token, String code, UUID location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling mediagetbycode(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling mediagetbycode(Async)");
        }
        

        okhttp3.Call localVarCall = mediagetbycodeCall(token, code, location, _callback);
        return localVarCall;

    }

    /**
     * Search media item by unique code
     * Allows the user to search for media items by their unique code.
     * @param token The authentication token. (required)
     * @param code The code of the media item to get. (required)
     * @param location The location where to look for the media item. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void mediagetbycode(String token, String code, UUID location) throws ApiException {
        mediagetbycodeWithHttpInfo(token, code, location);
    }

    /**
     * Search media item by unique code
     * Allows the user to search for media items by their unique code.
     * @param token The authentication token. (required)
     * @param code The code of the media item to get. (required)
     * @param location The location where to look for the media item. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mediagetbycodeWithHttpInfo(String token, String code, UUID location) throws ApiException {
        okhttp3.Call localVarCall = mediagetbycodeValidateBeforeCall(token, code, location, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search media item by unique code (asynchronously)
     * Allows the user to search for media items by their unique code.
     * @param token The authentication token. (required)
     * @param code The code of the media item to get. (required)
     * @param location The location where to look for the media item. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediagetbycodeAsync(String token, String code, UUID location, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediagetbycodeValidateBeforeCall(token, code, location, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediagetcheckout
     * @param token The authentication token. (required)
     * @param id The id of the media item whose checkout information has to be retrieved. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediagetcheckoutCall(String token, UUID id, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediagetcheckout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediagetcheckoutValidateBeforeCall(String token, UUID id, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling mediagetcheckout(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling mediagetcheckout(Async)");
        }
        

        okhttp3.Call localVarCall = mediagetcheckoutCall(token, id, photosize, _callback);
        return localVarCall;

    }

    /**
     * View details of a media item checkout information
     * Allows the user to view a media item&#39;s checkout information.
     * @param token The authentication token. (required)
     * @param id The id of the media item whose checkout information has to be retrieved. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void mediagetcheckout(String token, UUID id, Integer photosize) throws ApiException {
        mediagetcheckoutWithHttpInfo(token, id, photosize);
    }

    /**
     * View details of a media item checkout information
     * Allows the user to view a media item&#39;s checkout information.
     * @param token The authentication token. (required)
     * @param id The id of the media item whose checkout information has to be retrieved. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mediagetcheckoutWithHttpInfo(String token, UUID id, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = mediagetcheckoutValidateBeforeCall(token, id, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a media item checkout information (asynchronously)
     * Allows the user to view a media item&#39;s checkout information.
     * @param token The authentication token. (required)
     * @param id The id of the media item whose checkout information has to be retrieved. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediagetcheckoutAsync(String token, UUID id, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediagetcheckoutValidateBeforeCall(token, id, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediagetcheckoutlog
     * @param token The authentication token. (required)
     * @param id The id of the media item whose checkout information has to be retrieved. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediagetcheckoutlogCall(String token, UUID id, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediagetcheckoutlog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediagetcheckoutlogValidateBeforeCall(String token, UUID id, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling mediagetcheckoutlog(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling mediagetcheckoutlog(Async)");
        }
        

        okhttp3.Call localVarCall = mediagetcheckoutlogCall(token, id, photosize, _callback);
        return localVarCall;

    }

    /**
     * View details of a media checkout log
     * Allows the user to view a media item&#39;s checkout history.
     * @param token The authentication token. (required)
     * @param id The id of the media item whose checkout information has to be retrieved. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void mediagetcheckoutlog(String token, UUID id, Integer photosize) throws ApiException {
        mediagetcheckoutlogWithHttpInfo(token, id, photosize);
    }

    /**
     * View details of a media checkout log
     * Allows the user to view a media item&#39;s checkout history.
     * @param token The authentication token. (required)
     * @param id The id of the media item whose checkout information has to be retrieved. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mediagetcheckoutlogWithHttpInfo(String token, UUID id, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = mediagetcheckoutlogValidateBeforeCall(token, id, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a media checkout log (asynchronously)
     * Allows the user to view a media item&#39;s checkout history.
     * @param token The authentication token. (required)
     * @param id The id of the media item whose checkout information has to be retrieved. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediagetcheckoutlogAsync(String token, UUID id, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediagetcheckoutlogValidateBeforeCall(token, id, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for medialist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param status Used to filter the media items by their checkout status (0 &#x3D; CheckedIn, 1 &#x3D; CheckedOut, Unspecified &#x3D; All). (optional)
     * @param user Used to filter the media items that are checked-out by a specific user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call medialistCall(String token, Integer from, Integer count, Integer status, UUID user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/medialist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call medialistValidateBeforeCall(String token, Integer from, Integer count, Integer status, UUID user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling medialist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling medialist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling medialist(Async)");
        }
        

        okhttp3.Call localVarCall = medialistCall(token, from, count, status, user, _callback);
        return localVarCall;

    }

    /**
     * View a list of media items
     * Allows the user to view the list of all media items tied to locations in which the user is scoped.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param status Used to filter the media items by their checkout status (0 &#x3D; CheckedIn, 1 &#x3D; CheckedOut, Unspecified &#x3D; All). (optional)
     * @param user Used to filter the media items that are checked-out by a specific user. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void medialist(String token, Integer from, Integer count, Integer status, UUID user) throws ApiException {
        medialistWithHttpInfo(token, from, count, status, user);
    }

    /**
     * View a list of media items
     * Allows the user to view the list of all media items tied to locations in which the user is scoped.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param status Used to filter the media items by their checkout status (0 &#x3D; CheckedIn, 1 &#x3D; CheckedOut, Unspecified &#x3D; All). (optional)
     * @param user Used to filter the media items that are checked-out by a specific user. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> medialistWithHttpInfo(String token, Integer from, Integer count, Integer status, UUID user) throws ApiException {
        okhttp3.Call localVarCall = medialistValidateBeforeCall(token, from, count, status, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of media items (asynchronously)
     * Allows the user to view the list of all media items tied to locations in which the user is scoped.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param status Used to filter the media items by their checkout status (0 &#x3D; CheckedIn, 1 &#x3D; CheckedOut, Unspecified &#x3D; All). (optional)
     * @param user Used to filter the media items that are checked-out by a specific user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call medialistAsync(String token, Integer from, Integer count, Integer status, UUID user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = medialistValidateBeforeCall(token, from, count, status, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediasave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediasaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/mediasave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediasaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = mediasaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a media item
     * Allows the user to create or edit a media item.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void mediasave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        mediasaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a media item
     * Allows the user to create or edit a media item.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mediasaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = mediasaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a media item (asynchronously)
     * Allows the user to create or edit a media item.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediasaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediasaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediatypedelete
     * @param token The authentication token. (required)
     * @param id The id of the media type to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediatypedeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediatypedelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediatypedeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling mediatypedelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling mediatypedelete(Async)");
        }
        

        okhttp3.Call localVarCall = mediatypedeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a media type
     * Allows the user to delete an existing media type.
     * @param token The authentication token. (required)
     * @param id The id of the media type to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void mediatypedelete(String token, UUID id) throws ApiException {
        mediatypedeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a media type
     * Allows the user to delete an existing media type.
     * @param token The authentication token. (required)
     * @param id The id of the media type to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mediatypedeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = mediatypedeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a media type (asynchronously)
     * Allows the user to delete an existing media type.
     * @param token The authentication token. (required)
     * @param id The id of the media type to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediatypedeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediatypedeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediatypeget
     * @param token The authentication token. (required)
     * @param id The id of the media type to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediatypegetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediatypeget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediatypegetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling mediatypeget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling mediatypeget(Async)");
        }
        

        okhttp3.Call localVarCall = mediatypegetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of a media type
     * Allows the user to view a media type and its details.
     * @param token The authentication token. (required)
     * @param id The id of the media type to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void mediatypeget(String token, UUID id) throws ApiException {
        mediatypegetWithHttpInfo(token, id);
    }

    /**
     * Search and view details of a media type
     * Allows the user to view a media type and its details.
     * @param token The authentication token. (required)
     * @param id The id of the media type to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mediatypegetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = mediatypegetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of a media type (asynchronously)
     * Allows the user to view a media type and its details.
     * @param token The authentication token. (required)
     * @param id The id of the media type to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediatypegetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediatypegetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediatypelist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediatypelistCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediatypelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediatypelistValidateBeforeCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling mediatypelist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling mediatypelist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling mediatypelist(Async)");
        }
        

        okhttp3.Call localVarCall = mediatypelistCall(token, from, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of media types
     * Allows the user to view the list of all media types.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void mediatypelist(String token, Integer from, Integer count) throws ApiException {
        mediatypelistWithHttpInfo(token, from, count);
    }

    /**
     * View a list of media types
     * Allows the user to view the list of all media types.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mediatypelistWithHttpInfo(String token, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = mediatypelistValidateBeforeCall(token, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of media types (asynchronously)
     * Allows the user to view the list of all media types.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediatypelistAsync(String token, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediatypelistValidateBeforeCall(token, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediatypesave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediatypesaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/mediatypesave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediatypesaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = mediatypesaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a media type
     * Allows the user to create or edit a media type.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void mediatypesave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        mediatypesaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a media type
     * Allows the user to create or edit a media type.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mediatypesaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = mediatypesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a media type (asynchronously)
     * Allows the user to create or edit a media type.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediatypesaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediatypesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for memorizedreportdelete
     * @param token The authentication token. (required)
     * @param id The id of the report settings to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memorizedreportdeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/memorizedreportdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call memorizedreportdeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling memorizedreportdelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling memorizedreportdelete(Async)");
        }
        

        okhttp3.Call localVarCall = memorizedreportdeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete memorized report
     * Allows the user to delete a memorized report that they have created.
     * @param token The authentication token. (required)
     * @param id The id of the report settings to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void memorizedreportdelete(String token, UUID id) throws ApiException {
        memorizedreportdeleteWithHttpInfo(token, id);
    }

    /**
     * Delete memorized report
     * Allows the user to delete a memorized report that they have created.
     * @param token The authentication token. (required)
     * @param id The id of the report settings to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> memorizedreportdeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = memorizedreportdeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete memorized report (asynchronously)
     * Allows the user to delete a memorized report that they have created.
     * @param token The authentication token. (required)
     * @param id The id of the report settings to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memorizedreportdeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = memorizedreportdeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for memorizedreportget
     * @param token The authentication token. (required)
     * @param id The id of the report configuration to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memorizedreportgetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/memorizedreportget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call memorizedreportgetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling memorizedreportget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling memorizedreportget(Async)");
        }
        

        okhttp3.Call localVarCall = memorizedreportgetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View details of a memorized report
     * Allows the user to view an individual memorized report and its details.
     * @param token The authentication token. (required)
     * @param id The id of the report configuration to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void memorizedreportget(String token, UUID id) throws ApiException {
        memorizedreportgetWithHttpInfo(token, id);
    }

    /**
     * View details of a memorized report
     * Allows the user to view an individual memorized report and its details.
     * @param token The authentication token. (required)
     * @param id The id of the report configuration to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> memorizedreportgetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = memorizedreportgetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a memorized report (asynchronously)
     * Allows the user to view an individual memorized report and its details.
     * @param token The authentication token. (required)
     * @param id The id of the report configuration to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memorizedreportgetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = memorizedreportgetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for memorizedreportlist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param customname If specified filters the memorized reports by custom name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memorizedreportlistCall(String token, Integer from, Integer count, String customname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/memorizedreportlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (customname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customname", customname));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call memorizedreportlistValidateBeforeCall(String token, Integer from, Integer count, String customname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling memorizedreportlist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling memorizedreportlist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling memorizedreportlist(Async)");
        }
        

        okhttp3.Call localVarCall = memorizedreportlistCall(token, from, count, customname, _callback);
        return localVarCall;

    }

    /**
     * View a list of all his memorized reports
     * Allows the user to view the list of all memorized reports that they have created.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param customname If specified filters the memorized reports by custom name. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void memorizedreportlist(String token, Integer from, Integer count, String customname) throws ApiException {
        memorizedreportlistWithHttpInfo(token, from, count, customname);
    }

    /**
     * View a list of all his memorized reports
     * Allows the user to view the list of all memorized reports that they have created.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param customname If specified filters the memorized reports by custom name. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> memorizedreportlistWithHttpInfo(String token, Integer from, Integer count, String customname) throws ApiException {
        okhttp3.Call localVarCall = memorizedreportlistValidateBeforeCall(token, from, count, customname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of all his memorized reports (asynchronously)
     * Allows the user to view the list of all memorized reports that they have created.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param customname If specified filters the memorized reports by custom name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memorizedreportlistAsync(String token, Integer from, Integer count, String customname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = memorizedreportlistValidateBeforeCall(token, from, count, customname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for memorizedreportsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memorizedreportsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/memorizedreportsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call memorizedreportsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = memorizedreportsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a memorized report
     * Allows the user to create or edit a memorized report for themselves.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void memorizedreportsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        memorizedreportsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a memorized report
     * Allows the user to create or edit a memorized report for themselves.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> memorizedreportsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = memorizedreportsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a memorized report (asynchronously)
     * Allows the user to create or edit a memorized report for themselves.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memorizedreportsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = memorizedreportsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for menugetitems
     * @param menuid The Id of the menu to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call menugetitemsCall(String menuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/menugetitems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (menuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("menuid", menuid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call menugetitemsValidateBeforeCall(String menuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'menuid' is set
        if (menuid == null) {
            throw new ApiException("Missing the required parameter 'menuid' when calling menugetitems(Async)");
        }
        

        okhttp3.Call localVarCall = menugetitemsCall(menuid, _callback);
        return localVarCall;

    }

    /**
     * Gets the items on the menu
     * 
     * @param menuid The Id of the menu to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void menugetitems(String menuid) throws ApiException {
        menugetitemsWithHttpInfo(menuid);
    }

    /**
     * Gets the items on the menu
     * 
     * @param menuid The Id of the menu to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> menugetitemsWithHttpInfo(String menuid) throws ApiException {
        okhttp3.Call localVarCall = menugetitemsValidateBeforeCall(menuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the items on the menu (asynchronously)
     * 
     * @param menuid The Id of the menu to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call menugetitemsAsync(String menuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = menugetitemsValidateBeforeCall(menuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for myaccount
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call myaccountCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/myaccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call myaccountValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling myaccount(Async)");
        }
        

        okhttp3.Call localVarCall = myaccountCall(token, _callback);
        return localVarCall;

    }

    /**
     * Gets the logged in user account.
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void myaccount(String token) throws ApiException {
        myaccountWithHttpInfo(token);
    }

    /**
     * Gets the logged in user account.
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> myaccountWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = myaccountValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the logged in user account. (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call myaccountAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = myaccountValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for myianatimezone
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call myianatimezoneCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/myianatimezone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call myianatimezoneValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling myianatimezone(Async)");
        }
        

        okhttp3.Call localVarCall = myianatimezoneCall(token, _callback);
        return localVarCall;

    }

    /**
     * Gets the current time zone&#39;s iana name
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void myianatimezone(String token) throws ApiException {
        myianatimezoneWithHttpInfo(token);
    }

    /**
     * Gets the current time zone&#39;s iana name
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> myianatimezoneWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = myianatimezoneValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the current time zone&#39;s iana name (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call myianatimezoneAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = myianatimezoneValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for myprofile
     * @param token The authentication token. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call myprofileCall(String token, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/myprofile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call myprofileValidateBeforeCall(String token, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling myprofile(Async)");
        }
        

        okhttp3.Call localVarCall = myprofileCall(token, photosize, _callback);
        return localVarCall;

    }

    /**
     * Gets the logged in user information.
     * 
     * @param token The authentication token. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void myprofile(String token, Integer photosize) throws ApiException {
        myprofileWithHttpInfo(token, photosize);
    }

    /**
     * Gets the logged in user information.
     * 
     * @param token The authentication token. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> myprofileWithHttpInfo(String token, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = myprofileValidateBeforeCall(token, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the logged in user information. (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call myprofileAsync(String token, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = myprofileValidateBeforeCall(token, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for myrights
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call myrightsCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/myrights";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call myrightsValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling myrights(Async)");
        }
        

        okhttp3.Call localVarCall = myrightsCall(token, _callback);
        return localVarCall;

    }

    /**
     * Gets the list of actions the user can execute.
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void myrights(String token) throws ApiException {
        myrightsWithHttpInfo(token);
    }

    /**
     * Gets the list of actions the user can execute.
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> myrightsWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = myrightsValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the list of actions the user can execute. (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call myrightsAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = myrightsValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mysaveprofile
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mysaveprofileCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/mysaveprofile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mysaveprofileValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = mysaveprofileCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Updates logged user&#39;s profile information
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void mysaveprofile(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        mysaveprofileWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Updates logged user&#39;s profile information
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mysaveprofileWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = mysaveprofileValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates logged user&#39;s profile information (asynchronously)
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mysaveprofileAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mysaveprofileValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationdelete
     * @param token The authentication token. (required)
     * @param id The id of the notification to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationdeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationdeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling notificationdelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling notificationdelete(Async)");
        }
        

        okhttp3.Call localVarCall = notificationdeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a notification
     * Allows the user to delete an existing notification.
     * @param token The authentication token. (required)
     * @param id The id of the notification to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationdelete(String token, UUID id) throws ApiException {
        notificationdeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a notification
     * Allows the user to delete an existing notification.
     * @param token The authentication token. (required)
     * @param id The id of the notification to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationdeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = notificationdeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a notification (asynchronously)
     * Allows the user to delete an existing notification.
     * @param token The authentication token. (required)
     * @param id The id of the notification to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationdeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationdeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationget
     * @param token The authentication token. (required)
     * @param id The id of the notification to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationgetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationgetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling notificationget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling notificationget(Async)");
        }
        

        okhttp3.Call localVarCall = notificationgetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View a notification
     * 
     * @param token The authentication token. (required)
     * @param id The id of the notification to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationget(String token, UUID id) throws ApiException {
        notificationgetWithHttpInfo(token, id);
    }

    /**
     * View a notification
     * 
     * @param token The authentication token. (required)
     * @param id The id of the notification to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationgetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = notificationgetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a notification (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param id The id of the notification to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationgetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationgetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationgetforstation
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationgetforstationCall(UUID station, String user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationgetforstation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationgetforstationValidateBeforeCall(UUID station, String user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling notificationgetforstation(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling notificationgetforstation(Async)");
        }
        

        okhttp3.Call localVarCall = notificationgetforstationCall(station, user, _callback);
        return localVarCall;

    }

    /**
     * Gets all public (in station) notifications for the specific user
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationgetforstation(UUID station, String user) throws ApiException {
        notificationgetforstationWithHttpInfo(station, user);
    }

    /**
     * Gets all public (in station) notifications for the specific user
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationgetforstationWithHttpInfo(UUID station, String user) throws ApiException {
        okhttp3.Call localVarCall = notificationgetforstationValidateBeforeCall(station, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets all public (in station) notifications for the specific user (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationgetforstationAsync(UUID station, String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationgetforstationValidateBeforeCall(station, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationgetunreadcount
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationgetunreadcountCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationgetunreadcount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationgetunreadcountValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling notificationgetunreadcount(Async)");
        }
        

        okhttp3.Call localVarCall = notificationgetunreadcountCall(token, _callback);
        return localVarCall;

    }

    /**
     * Get the number of unread notifications
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationgetunreadcount(String token) throws ApiException {
        notificationgetunreadcountWithHttpInfo(token);
    }

    /**
     * Get the number of unread notifications
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationgetunreadcountWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = notificationgetunreadcountValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the number of unread notifications (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationgetunreadcountAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationgetunreadcountValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationlist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param recipient The recipient whose notifications have to be listed. (optional)
     * @param status The status of the notifications to list. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param sentonscreen Specifies whether to list the notifications that were sent on-screen or not. (optional)
     * @param sentemail Specifies whether to list the notifications that were sent via e-mail or not. (optional)
     * @param sentsms Specifies whether to list the notifications that were sent via sms or not. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationlistCall(String token, Integer from, Integer count, UUID recipient, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, Boolean sentonscreen, Boolean sentemail, Boolean sentsms, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (recipient != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recipient", recipient));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (startdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startdate", startdate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        if (sentonscreen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentonscreen", sentonscreen));
        }

        if (sentemail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentemail", sentemail));
        }

        if (sentsms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentsms", sentsms));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationlistValidateBeforeCall(String token, Integer from, Integer count, UUID recipient, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, Boolean sentonscreen, Boolean sentemail, Boolean sentsms, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling notificationlist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling notificationlist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling notificationlist(Async)");
        }
        

        okhttp3.Call localVarCall = notificationlistCall(token, from, count, recipient, status, startdate, enddate, sentonscreen, sentemail, sentsms, _callback);
        return localVarCall;

    }

    /**
     * View a list of all sent notifications
     * Allows the user to view the list of all sent notifications.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param recipient The recipient whose notifications have to be listed. (optional)
     * @param status The status of the notifications to list. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param sentonscreen Specifies whether to list the notifications that were sent on-screen or not. (optional)
     * @param sentemail Specifies whether to list the notifications that were sent via e-mail or not. (optional)
     * @param sentsms Specifies whether to list the notifications that were sent via sms or not. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationlist(String token, Integer from, Integer count, UUID recipient, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, Boolean sentonscreen, Boolean sentemail, Boolean sentsms) throws ApiException {
        notificationlistWithHttpInfo(token, from, count, recipient, status, startdate, enddate, sentonscreen, sentemail, sentsms);
    }

    /**
     * View a list of all sent notifications
     * Allows the user to view the list of all sent notifications.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param recipient The recipient whose notifications have to be listed. (optional)
     * @param status The status of the notifications to list. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param sentonscreen Specifies whether to list the notifications that were sent on-screen or not. (optional)
     * @param sentemail Specifies whether to list the notifications that were sent via e-mail or not. (optional)
     * @param sentsms Specifies whether to list the notifications that were sent via sms or not. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationlistWithHttpInfo(String token, Integer from, Integer count, UUID recipient, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, Boolean sentonscreen, Boolean sentemail, Boolean sentsms) throws ApiException {
        okhttp3.Call localVarCall = notificationlistValidateBeforeCall(token, from, count, recipient, status, startdate, enddate, sentonscreen, sentemail, sentsms, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of all sent notifications (asynchronously)
     * Allows the user to view the list of all sent notifications.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param recipient The recipient whose notifications have to be listed. (optional)
     * @param status The status of the notifications to list. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param sentonscreen Specifies whether to list the notifications that were sent on-screen or not. (optional)
     * @param sentemail Specifies whether to list the notifications that were sent via e-mail or not. (optional)
     * @param sentsms Specifies whether to list the notifications that were sent via sms or not. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationlistAsync(String token, Integer from, Integer count, UUID recipient, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, Boolean sentonscreen, Boolean sentemail, Boolean sentsms, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationlistValidateBeforeCall(token, from, count, recipient, status, startdate, enddate, sentonscreen, sentemail, sentsms, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationlistmine
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param status Specifies the status of the notifications to list. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationlistmineCall(String token, Integer from, Integer count, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationlistmine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (startdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startdate", startdate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationlistmineValidateBeforeCall(String token, Integer from, Integer count, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling notificationlistmine(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling notificationlistmine(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling notificationlistmine(Async)");
        }
        

        okhttp3.Call localVarCall = notificationlistmineCall(token, from, count, status, startdate, enddate, _callback);
        return localVarCall;

    }

    /**
     * View all the notifications sent to the current user
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param status Specifies the status of the notifications to list. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationlistmine(String token, Integer from, Integer count, Integer status, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        notificationlistmineWithHttpInfo(token, from, count, status, startdate, enddate);
    }

    /**
     * View all the notifications sent to the current user
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param status Specifies the status of the notifications to list. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationlistmineWithHttpInfo(String token, Integer from, Integer count, Integer status, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        okhttp3.Call localVarCall = notificationlistmineValidateBeforeCall(token, from, count, status, startdate, enddate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all the notifications sent to the current user (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param status Specifies the status of the notifications to list. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationlistmineAsync(String token, Integer from, Integer count, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationlistmineValidateBeforeCall(token, from, count, status, startdate, enddate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationmarkasread
     * @param token The authentication token. (required)
     * @param id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read. (optional)
     * @param status Specifies the status to filter the notifications. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationmarkasreadCall(String token, UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationmarkasread";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (startdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startdate", startdate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationmarkasreadValidateBeforeCall(String token, UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling notificationmarkasread(Async)");
        }
        

        okhttp3.Call localVarCall = notificationmarkasreadCall(token, id, status, startdate, enddate, _callback);
        return localVarCall;

    }

    /**
     * Mark a notification as read
     * 
     * @param token The authentication token. (required)
     * @param id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read. (optional)
     * @param status Specifies the status to filter the notifications. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationmarkasread(String token, UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        notificationmarkasreadWithHttpInfo(token, id, status, startdate, enddate);
    }

    /**
     * Mark a notification as read
     * 
     * @param token The authentication token. (required)
     * @param id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read. (optional)
     * @param status Specifies the status to filter the notifications. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationmarkasreadWithHttpInfo(String token, UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        okhttp3.Call localVarCall = notificationmarkasreadValidateBeforeCall(token, id, status, startdate, enddate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Mark a notification as read (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read. (optional)
     * @param status Specifies the status to filter the notifications. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationmarkasreadAsync(String token, UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationmarkasreadValidateBeforeCall(token, id, status, startdate, enddate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationmarkasunread
     * @param token The authentication token. (required)
     * @param id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread. (optional)
     * @param status Specifies the status to filter the notifications. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationmarkasunreadCall(String token, UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationmarkasunread";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (startdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startdate", startdate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationmarkasunreadValidateBeforeCall(String token, UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling notificationmarkasunread(Async)");
        }
        

        okhttp3.Call localVarCall = notificationmarkasunreadCall(token, id, status, startdate, enddate, _callback);
        return localVarCall;

    }

    /**
     * Mark a notification as unread
     * 
     * @param token The authentication token. (required)
     * @param id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread. (optional)
     * @param status Specifies the status to filter the notifications. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationmarkasunread(String token, UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        notificationmarkasunreadWithHttpInfo(token, id, status, startdate, enddate);
    }

    /**
     * Mark a notification as unread
     * 
     * @param token The authentication token. (required)
     * @param id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread. (optional)
     * @param status Specifies the status to filter the notifications. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationmarkasunreadWithHttpInfo(String token, UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        okhttp3.Call localVarCall = notificationmarkasunreadValidateBeforeCall(token, id, status, startdate, enddate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Mark a notification as unread (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread. (optional)
     * @param status Specifies the status to filter the notifications. Read, Unread or All. (optional)
     * @param startdate The start date of the period to filter the notifications. (optional)
     * @param enddate The end date of the period to filter the notifications. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationmarkasunreadAsync(String token, UUID id, Integer status, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationmarkasunreadValidateBeforeCall(token, id, status, startdate, enddate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsend
     * @param token The authentication token. (required)
     * @param emailenabled Whether send the notification via email. (required)
     * @param onscreenenabled Whether to display the notification on screen. (required)
     * @param smsenabled Whether to send the notification via text message. (required)
     * @param title Notification title. (required)
     * @param tousers Comma-separated Ids of users to send the notification. (optional)
     * @param togroups Comma-separated Ids of user groups to send the notification. (optional)
     * @param onscreenbody Body of the message for on-screen display. (optional)
     * @param onscreenclick What to do when the notification is clicked. Valid values: hide, view, url. (optional)
     * @param onscreenurl Url to redirect the user, if onscreenclick&#x3D;url. (optional)
     * @param onscreenclass How to display the notification. Valid values: info, success, warning, error (optional)
     * @param onscreenduration Time in seconds to display the notification. (optional)
     * @param showonstation Whether to show the notification in the sign-in station. (optional)
     * @param emailfromname Name of the email sender. (optional)
     * @param emailfrom Reply-to email. (optional)
     * @param emailsubject Subject of the email. (optional)
     * @param emailbody Body of the email. (optional)
     * @param textmessagebody Message for SMS. Max 160 characters. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsendCall(String token, Boolean emailenabled, Boolean onscreenenabled, Boolean smsenabled, String title, String tousers, String togroups, String onscreenbody, String onscreenclick, String onscreenurl, String onscreenclass, Integer onscreenduration, Integer showonstation, String emailfromname, String emailfrom, String emailsubject, String emailbody, String textmessagebody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationsend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (tousers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tousers", tousers));
        }

        if (togroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("togroups", togroups));
        }

        if (emailenabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailenabled", emailenabled));
        }

        if (onscreenenabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onscreenenabled", onscreenenabled));
        }

        if (smsenabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smsenabled", smsenabled));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (onscreenbody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onscreenbody", onscreenbody));
        }

        if (onscreenclick != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onscreenclick", onscreenclick));
        }

        if (onscreenurl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onscreenurl", onscreenurl));
        }

        if (onscreenclass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onscreenclass", onscreenclass));
        }

        if (onscreenduration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onscreenduration", onscreenduration));
        }

        if (showonstation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showonstation", showonstation));
        }

        if (emailfromname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailfromname", emailfromname));
        }

        if (emailfrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailfrom", emailfrom));
        }

        if (emailsubject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailsubject", emailsubject));
        }

        if (emailbody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailbody", emailbody));
        }

        if (textmessagebody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textmessagebody", textmessagebody));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsendValidateBeforeCall(String token, Boolean emailenabled, Boolean onscreenenabled, Boolean smsenabled, String title, String tousers, String togroups, String onscreenbody, String onscreenclick, String onscreenurl, String onscreenclass, Integer onscreenduration, Integer showonstation, String emailfromname, String emailfrom, String emailsubject, String emailbody, String textmessagebody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling notificationsend(Async)");
        }
        
        // verify the required parameter 'emailenabled' is set
        if (emailenabled == null) {
            throw new ApiException("Missing the required parameter 'emailenabled' when calling notificationsend(Async)");
        }
        
        // verify the required parameter 'onscreenenabled' is set
        if (onscreenenabled == null) {
            throw new ApiException("Missing the required parameter 'onscreenenabled' when calling notificationsend(Async)");
        }
        
        // verify the required parameter 'smsenabled' is set
        if (smsenabled == null) {
            throw new ApiException("Missing the required parameter 'smsenabled' when calling notificationsend(Async)");
        }
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling notificationsend(Async)");
        }
        

        okhttp3.Call localVarCall = notificationsendCall(token, emailenabled, onscreenenabled, smsenabled, title, tousers, togroups, onscreenbody, onscreenclick, onscreenurl, onscreenclass, onscreenduration, showonstation, emailfromname, emailfrom, emailsubject, emailbody, textmessagebody, _callback);
        return localVarCall;

    }

    /**
     * Send notifications on screen, via email or text to users
     * Allows the user to send notifications to other users through the Send Message link.
     * @param token The authentication token. (required)
     * @param emailenabled Whether send the notification via email. (required)
     * @param onscreenenabled Whether to display the notification on screen. (required)
     * @param smsenabled Whether to send the notification via text message. (required)
     * @param title Notification title. (required)
     * @param tousers Comma-separated Ids of users to send the notification. (optional)
     * @param togroups Comma-separated Ids of user groups to send the notification. (optional)
     * @param onscreenbody Body of the message for on-screen display. (optional)
     * @param onscreenclick What to do when the notification is clicked. Valid values: hide, view, url. (optional)
     * @param onscreenurl Url to redirect the user, if onscreenclick&#x3D;url. (optional)
     * @param onscreenclass How to display the notification. Valid values: info, success, warning, error (optional)
     * @param onscreenduration Time in seconds to display the notification. (optional)
     * @param showonstation Whether to show the notification in the sign-in station. (optional)
     * @param emailfromname Name of the email sender. (optional)
     * @param emailfrom Reply-to email. (optional)
     * @param emailsubject Subject of the email. (optional)
     * @param emailbody Body of the email. (optional)
     * @param textmessagebody Message for SMS. Max 160 characters. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationsend(String token, Boolean emailenabled, Boolean onscreenenabled, Boolean smsenabled, String title, String tousers, String togroups, String onscreenbody, String onscreenclick, String onscreenurl, String onscreenclass, Integer onscreenduration, Integer showonstation, String emailfromname, String emailfrom, String emailsubject, String emailbody, String textmessagebody) throws ApiException {
        notificationsendWithHttpInfo(token, emailenabled, onscreenenabled, smsenabled, title, tousers, togroups, onscreenbody, onscreenclick, onscreenurl, onscreenclass, onscreenduration, showonstation, emailfromname, emailfrom, emailsubject, emailbody, textmessagebody);
    }

    /**
     * Send notifications on screen, via email or text to users
     * Allows the user to send notifications to other users through the Send Message link.
     * @param token The authentication token. (required)
     * @param emailenabled Whether send the notification via email. (required)
     * @param onscreenenabled Whether to display the notification on screen. (required)
     * @param smsenabled Whether to send the notification via text message. (required)
     * @param title Notification title. (required)
     * @param tousers Comma-separated Ids of users to send the notification. (optional)
     * @param togroups Comma-separated Ids of user groups to send the notification. (optional)
     * @param onscreenbody Body of the message for on-screen display. (optional)
     * @param onscreenclick What to do when the notification is clicked. Valid values: hide, view, url. (optional)
     * @param onscreenurl Url to redirect the user, if onscreenclick&#x3D;url. (optional)
     * @param onscreenclass How to display the notification. Valid values: info, success, warning, error (optional)
     * @param onscreenduration Time in seconds to display the notification. (optional)
     * @param showonstation Whether to show the notification in the sign-in station. (optional)
     * @param emailfromname Name of the email sender. (optional)
     * @param emailfrom Reply-to email. (optional)
     * @param emailsubject Subject of the email. (optional)
     * @param emailbody Body of the email. (optional)
     * @param textmessagebody Message for SMS. Max 160 characters. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationsendWithHttpInfo(String token, Boolean emailenabled, Boolean onscreenenabled, Boolean smsenabled, String title, String tousers, String togroups, String onscreenbody, String onscreenclick, String onscreenurl, String onscreenclass, Integer onscreenduration, Integer showonstation, String emailfromname, String emailfrom, String emailsubject, String emailbody, String textmessagebody) throws ApiException {
        okhttp3.Call localVarCall = notificationsendValidateBeforeCall(token, emailenabled, onscreenenabled, smsenabled, title, tousers, togroups, onscreenbody, onscreenclick, onscreenurl, onscreenclass, onscreenduration, showonstation, emailfromname, emailfrom, emailsubject, emailbody, textmessagebody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send notifications on screen, via email or text to users (asynchronously)
     * Allows the user to send notifications to other users through the Send Message link.
     * @param token The authentication token. (required)
     * @param emailenabled Whether send the notification via email. (required)
     * @param onscreenenabled Whether to display the notification on screen. (required)
     * @param smsenabled Whether to send the notification via text message. (required)
     * @param title Notification title. (required)
     * @param tousers Comma-separated Ids of users to send the notification. (optional)
     * @param togroups Comma-separated Ids of user groups to send the notification. (optional)
     * @param onscreenbody Body of the message for on-screen display. (optional)
     * @param onscreenclick What to do when the notification is clicked. Valid values: hide, view, url. (optional)
     * @param onscreenurl Url to redirect the user, if onscreenclick&#x3D;url. (optional)
     * @param onscreenclass How to display the notification. Valid values: info, success, warning, error (optional)
     * @param onscreenduration Time in seconds to display the notification. (optional)
     * @param showonstation Whether to show the notification in the sign-in station. (optional)
     * @param emailfromname Name of the email sender. (optional)
     * @param emailfrom Reply-to email. (optional)
     * @param emailsubject Subject of the email. (optional)
     * @param emailbody Body of the email. (optional)
     * @param textmessagebody Message for SMS. Max 160 characters. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsendAsync(String token, Boolean emailenabled, Boolean onscreenenabled, Boolean smsenabled, String title, String tousers, String togroups, String onscreenbody, String onscreenclick, String onscreenurl, String onscreenclass, Integer onscreenduration, Integer showonstation, String emailfromname, String emailfrom, String emailsubject, String emailbody, String textmessagebody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsendValidateBeforeCall(token, emailenabled, onscreenenabled, smsenabled, title, tousers, togroups, onscreenbody, onscreenclick, onscreenurl, onscreenclass, onscreenduration, showonstation, emailfromname, emailfrom, emailsubject, emailbody, textmessagebody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsendonscreen
     * @param token The authentication token. (required)
     * @param notification The ID of the notification to send. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsendonscreenCall(String token, UUID notification, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationsendonscreen";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (notification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notification", notification));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsendonscreenValidateBeforeCall(String token, UUID notification, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling notificationsendonscreen(Async)");
        }
        
        // verify the required parameter 'notification' is set
        if (notification == null) {
            throw new ApiException("Missing the required parameter 'notification' when calling notificationsendonscreen(Async)");
        }
        

        okhttp3.Call localVarCall = notificationsendonscreenCall(token, notification, _callback);
        return localVarCall;

    }

    /**
     * Send on-screen notifications
     * 
     * @param token The authentication token. (required)
     * @param notification The ID of the notification to send. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationsendonscreen(String token, UUID notification) throws ApiException {
        notificationsendonscreenWithHttpInfo(token, notification);
    }

    /**
     * Send on-screen notifications
     * 
     * @param token The authentication token. (required)
     * @param notification The ID of the notification to send. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationsendonscreenWithHttpInfo(String token, UUID notification) throws ApiException {
        okhttp3.Call localVarCall = notificationsendonscreenValidateBeforeCall(token, notification, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send on-screen notifications (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param notification The ID of the notification to send. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsendonscreenAsync(String token, UUID notification, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsendonscreenValidateBeforeCall(token, notification, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationtopicdelete
     * @param token The authentication token. (required)
     * @param id The id of the notification topic to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationtopicdeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationtopicdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationtopicdeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling notificationtopicdelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling notificationtopicdelete(Async)");
        }
        

        okhttp3.Call localVarCall = notificationtopicdeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a notification topic
     * Allows the user to delete an existing notification topic.
     * @param token The authentication token. (required)
     * @param id The id of the notification topic to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationtopicdelete(String token, UUID id) throws ApiException {
        notificationtopicdeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a notification topic
     * Allows the user to delete an existing notification topic.
     * @param token The authentication token. (required)
     * @param id The id of the notification topic to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationtopicdeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = notificationtopicdeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a notification topic (asynchronously)
     * Allows the user to delete an existing notification topic.
     * @param token The authentication token. (required)
     * @param id The id of the notification topic to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationtopicdeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationtopicdeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationtopicget
     * @param token The authentication token. (required)
     * @param id The id of the notification topic to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationtopicgetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationtopicget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationtopicgetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling notificationtopicget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling notificationtopicget(Async)");
        }
        

        okhttp3.Call localVarCall = notificationtopicgetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of a notification topic
     * Allows the user to view an individual notification topic and its details.
     * @param token The authentication token. (required)
     * @param id The id of the notification topic to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationtopicget(String token, UUID id) throws ApiException {
        notificationtopicgetWithHttpInfo(token, id);
    }

    /**
     * Search and view details of a notification topic
     * Allows the user to view an individual notification topic and its details.
     * @param token The authentication token. (required)
     * @param id The id of the notification topic to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationtopicgetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = notificationtopicgetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of a notification topic (asynchronously)
     * Allows the user to view an individual notification topic and its details.
     * @param token The authentication token. (required)
     * @param id The id of the notification topic to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationtopicgetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationtopicgetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationtopiclist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationtopiclistCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationtopiclist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationtopiclistValidateBeforeCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling notificationtopiclist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling notificationtopiclist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling notificationtopiclist(Async)");
        }
        

        okhttp3.Call localVarCall = notificationtopiclistCall(token, from, count, _callback);
        return localVarCall;

    }

    /**
     * List all the notification topics
     * Allows the user to view the list of all notification topics.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationtopiclist(String token, Integer from, Integer count) throws ApiException {
        notificationtopiclistWithHttpInfo(token, from, count);
    }

    /**
     * List all the notification topics
     * Allows the user to view the list of all notification topics.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationtopiclistWithHttpInfo(String token, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = notificationtopiclistValidateBeforeCall(token, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List all the notification topics (asynchronously)
     * Allows the user to view the list of all notification topics.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationtopiclistAsync(String token, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationtopiclistValidateBeforeCall(token, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationtopiclistsubscribe
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationtopiclistsubscribeCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationtopiclistsubscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationtopiclistsubscribeValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling notificationtopiclistsubscribe(Async)");
        }
        

        okhttp3.Call localVarCall = notificationtopiclistsubscribeCall(token, _callback);
        return localVarCall;

    }

    /**
     * List all the notification topics available to subscribe
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationtopiclistsubscribe(String token) throws ApiException {
        notificationtopiclistsubscribeWithHttpInfo(token);
    }

    /**
     * List all the notification topics available to subscribe
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationtopiclistsubscribeWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = notificationtopiclistsubscribeValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List all the notification topics available to subscribe (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationtopiclistsubscribeAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationtopiclistsubscribeValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationtopicsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationtopicsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/notificationtopicsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationtopicsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = notificationtopicsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a notification topic
     * Allows the user to create and edit a notification topic.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void notificationtopicsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        notificationtopicsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a notification topic
     * Allows the user to create and edit a notification topic.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationtopicsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = notificationtopicsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a notification topic (asynchronously)
     * Allows the user to create and edit a notification topic.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationtopicsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationtopicsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pushderegister
     * @param devicetoken The device token where to send the notification. (required)
     * @param platform Either ios or android (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pushderegisterCall(String devicetoken, String platform, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pushderegister";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (devicetoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetoken", devicetoken));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pushderegisterValidateBeforeCall(String devicetoken, String platform, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'devicetoken' is set
        if (devicetoken == null) {
            throw new ApiException("Missing the required parameter 'devicetoken' when calling pushderegister(Async)");
        }
        
        // verify the required parameter 'platform' is set
        if (platform == null) {
            throw new ApiException("Missing the required parameter 'platform' when calling pushderegister(Async)");
        }
        

        okhttp3.Call localVarCall = pushderegisterCall(devicetoken, platform, _callback);
        return localVarCall;

    }

    /**
     * Deregisters the current device to receive push notifications
     * 
     * @param devicetoken The device token where to send the notification. (required)
     * @param platform Either ios or android (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void pushderegister(String devicetoken, String platform) throws ApiException {
        pushderegisterWithHttpInfo(devicetoken, platform);
    }

    /**
     * Deregisters the current device to receive push notifications
     * 
     * @param devicetoken The device token where to send the notification. (required)
     * @param platform Either ios or android (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pushderegisterWithHttpInfo(String devicetoken, String platform) throws ApiException {
        okhttp3.Call localVarCall = pushderegisterValidateBeforeCall(devicetoken, platform, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deregisters the current device to receive push notifications (asynchronously)
     * 
     * @param devicetoken The device token where to send the notification. (required)
     * @param platform Either ios or android (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pushderegisterAsync(String devicetoken, String platform, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pushderegisterValidateBeforeCall(devicetoken, platform, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pushregister
     * @param devicetoken The device token where to send the notification. (required)
     * @param platform Either ios or android (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pushregisterCall(String devicetoken, String platform, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pushregister";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (devicetoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetoken", devicetoken));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pushregisterValidateBeforeCall(String devicetoken, String platform, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'devicetoken' is set
        if (devicetoken == null) {
            throw new ApiException("Missing the required parameter 'devicetoken' when calling pushregister(Async)");
        }
        
        // verify the required parameter 'platform' is set
        if (platform == null) {
            throw new ApiException("Missing the required parameter 'platform' when calling pushregister(Async)");
        }
        

        okhttp3.Call localVarCall = pushregisterCall(devicetoken, platform, _callback);
        return localVarCall;

    }

    /**
     * Registers the current device to receive push notifications
     * 
     * @param devicetoken The device token where to send the notification. (required)
     * @param platform Either ios or android (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void pushregister(String devicetoken, String platform) throws ApiException {
        pushregisterWithHttpInfo(devicetoken, platform);
    }

    /**
     * Registers the current device to receive push notifications
     * 
     * @param devicetoken The device token where to send the notification. (required)
     * @param platform Either ios or android (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pushregisterWithHttpInfo(String devicetoken, String platform) throws ApiException {
        okhttp3.Call localVarCall = pushregisterValidateBeforeCall(devicetoken, platform, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Registers the current device to receive push notifications (asynchronously)
     * 
     * @param devicetoken The device token where to send the notification. (required)
     * @param platform Either ios or android (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pushregisterAsync(String devicetoken, String platform, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pushregisterValidateBeforeCall(devicetoken, platform, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qrlabelsprint
     * @param token The authentication token. (required)
     * @param user The id of the user whose label needs to be printed. (optional)
     * @param group The id of the group whose members&#39; labels need to be printed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrlabelsprintCall(String token, UUID user, UUID group, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qrlabelsprint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qrlabelsprintValidateBeforeCall(String token, UUID user, UUID group, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling qrlabelsprint(Async)");
        }
        

        okhttp3.Call localVarCall = qrlabelsprintCall(token, user, group, _callback);
        return localVarCall;

    }

    /**
     * Print and email QR labels
     * Allows the user to generate a printable PDF of QR labels containing user Card Numbers to be emailed to users and used as attendance tracking for events.
     * @param token The authentication token. (required)
     * @param user The id of the user whose label needs to be printed. (optional)
     * @param group The id of the group whose members&#39; labels need to be printed. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void qrlabelsprint(String token, UUID user, UUID group) throws ApiException {
        qrlabelsprintWithHttpInfo(token, user, group);
    }

    /**
     * Print and email QR labels
     * Allows the user to generate a printable PDF of QR labels containing user Card Numbers to be emailed to users and used as attendance tracking for events.
     * @param token The authentication token. (required)
     * @param user The id of the user whose label needs to be printed. (optional)
     * @param group The id of the group whose members&#39; labels need to be printed. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qrlabelsprintWithHttpInfo(String token, UUID user, UUID group) throws ApiException {
        okhttp3.Call localVarCall = qrlabelsprintValidateBeforeCall(token, user, group, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Print and email QR labels (asynchronously)
     * Allows the user to generate a printable PDF of QR labels containing user Card Numbers to be emailed to users and used as attendance tracking for events.
     * @param token The authentication token. (required)
     * @param user The id of the user whose label needs to be printed. (optional)
     * @param group The id of the group whose members&#39; labels need to be printed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrlabelsprintAsync(String token, UUID user, UUID group, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qrlabelsprintValidateBeforeCall(token, user, group, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qrloginget
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrlogingetCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qrloginget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qrlogingetValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling qrloginget(Async)");
        }
        

        okhttp3.Call localVarCall = qrlogingetCall(token, _callback);
        return localVarCall;

    }

    /**
     * Gets an image of a QR token
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void qrloginget(String token) throws ApiException {
        qrlogingetWithHttpInfo(token);
    }

    /**
     * Gets an image of a QR token
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qrlogingetWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = qrlogingetValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets an image of a QR token (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrlogingetAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qrlogingetValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qrloginlogin
     * @param onetimetoken The token read from the QR code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrloginloginCall(String onetimetoken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qrloginlogin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (onetimetoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onetimetoken", onetimetoken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qrloginloginValidateBeforeCall(String onetimetoken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'onetimetoken' is set
        if (onetimetoken == null) {
            throw new ApiException("Missing the required parameter 'onetimetoken' when calling qrloginlogin(Async)");
        }
        

        okhttp3.Call localVarCall = qrloginloginCall(onetimetoken, _callback);
        return localVarCall;

    }

    /**
     * Login
     * 
     * @param onetimetoken The token read from the QR code. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void qrloginlogin(String onetimetoken) throws ApiException {
        qrloginloginWithHttpInfo(onetimetoken);
    }

    /**
     * Login
     * 
     * @param onetimetoken The token read from the QR code. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qrloginloginWithHttpInfo(String onetimetoken) throws ApiException {
        okhttp3.Call localVarCall = qrloginloginValidateBeforeCall(onetimetoken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Login (asynchronously)
     * 
     * @param onetimetoken The token read from the QR code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrloginloginAsync(String onetimetoken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qrloginloginValidateBeforeCall(onetimetoken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quickpaneldeletewidget
     * @param token The authentication token. (required)
     * @param id The id of the widget. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickpaneldeletewidgetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quickpaneldeletewidget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quickpaneldeletewidgetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling quickpaneldeletewidget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling quickpaneldeletewidget(Async)");
        }
        

        okhttp3.Call localVarCall = quickpaneldeletewidgetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Deletes a widget from the Quick Panel
     * Allows the user to delete a widget that has been added to the Quick Panel.
     * @param token The authentication token. (required)
     * @param id The id of the widget. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void quickpaneldeletewidget(String token, UUID id) throws ApiException {
        quickpaneldeletewidgetWithHttpInfo(token, id);
    }

    /**
     * Deletes a widget from the Quick Panel
     * Allows the user to delete a widget that has been added to the Quick Panel.
     * @param token The authentication token. (required)
     * @param id The id of the widget. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quickpaneldeletewidgetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = quickpaneldeletewidgetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a widget from the Quick Panel (asynchronously)
     * Allows the user to delete a widget that has been added to the Quick Panel.
     * @param token The authentication token. (required)
     * @param id The id of the widget. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickpaneldeletewidgetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quickpaneldeletewidgetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quickpanelfetchwidget
     * @param token The authentication token. (required)
     * @param widgetid The ID of the data to fetch it&#39;s data. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickpanelfetchwidgetCall(String token, UUID widgetid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quickpanelfetchwidget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (widgetid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("widgetid", widgetid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quickpanelfetchwidgetValidateBeforeCall(String token, UUID widgetid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling quickpanelfetchwidget(Async)");
        }
        
        // verify the required parameter 'widgetid' is set
        if (widgetid == null) {
            throw new ApiException("Missing the required parameter 'widgetid' when calling quickpanelfetchwidget(Async)");
        }
        

        okhttp3.Call localVarCall = quickpanelfetchwidgetCall(token, widgetid, _callback);
        return localVarCall;

    }

    /**
     * Fetches the information for a specific widget.
     * 
     * @param token The authentication token. (required)
     * @param widgetid The ID of the data to fetch it&#39;s data. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void quickpanelfetchwidget(String token, UUID widgetid) throws ApiException {
        quickpanelfetchwidgetWithHttpInfo(token, widgetid);
    }

    /**
     * Fetches the information for a specific widget.
     * 
     * @param token The authentication token. (required)
     * @param widgetid The ID of the data to fetch it&#39;s data. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quickpanelfetchwidgetWithHttpInfo(String token, UUID widgetid) throws ApiException {
        okhttp3.Call localVarCall = quickpanelfetchwidgetValidateBeforeCall(token, widgetid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fetches the information for a specific widget. (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param widgetid The ID of the data to fetch it&#39;s data. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickpanelfetchwidgetAsync(String token, UUID widgetid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quickpanelfetchwidgetValidateBeforeCall(token, widgetid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quickpanelgetwidget
     * @param token The authentication token. (required)
     * @param id The id of the widget to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickpanelgetwidgetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quickpanelgetwidget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quickpanelgetwidgetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling quickpanelgetwidget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling quickpanelgetwidget(Async)");
        }
        

        okhttp3.Call localVarCall = quickpanelgetwidgetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View details of a widget included in the Quick Panel
     * Allows the user to view a widget added in as Quick Panel.
     * @param token The authentication token. (required)
     * @param id The id of the widget to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void quickpanelgetwidget(String token, UUID id) throws ApiException {
        quickpanelgetwidgetWithHttpInfo(token, id);
    }

    /**
     * View details of a widget included in the Quick Panel
     * Allows the user to view a widget added in as Quick Panel.
     * @param token The authentication token. (required)
     * @param id The id of the widget to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quickpanelgetwidgetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = quickpanelgetwidgetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a widget included in the Quick Panel (asynchronously)
     * Allows the user to view a widget added in as Quick Panel.
     * @param token The authentication token. (required)
     * @param id The id of the widget to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickpanelgetwidgetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quickpanelgetwidgetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quickpanelinit
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickpanelinitCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quickpanelinit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quickpanelinitValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling quickpanelinit(Async)");
        }
        

        okhttp3.Call localVarCall = quickpanelinitCall(token, _callback);
        return localVarCall;

    }

    /**
     * Returns the initial information required to show the quick panels
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void quickpanelinit(String token) throws ApiException {
        quickpanelinitWithHttpInfo(token);
    }

    /**
     * Returns the initial information required to show the quick panels
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quickpanelinitWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = quickpanelinitValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns the initial information required to show the quick panels (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickpanelinitAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quickpanelinitValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quickpanellistwidgets
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickpanellistwidgetsCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quickpanellistwidgets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quickpanellistwidgetsValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling quickpanellistwidgets(Async)");
        }
        

        okhttp3.Call localVarCall = quickpanellistwidgetsCall(token, _callback);
        return localVarCall;

    }

    /**
     * Lists all the widgets that are added in the Quick Panel
     * Allows the user to view the widgets that have been added to the Quick Panel.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void quickpanellistwidgets(String token) throws ApiException {
        quickpanellistwidgetsWithHttpInfo(token);
    }

    /**
     * Lists all the widgets that are added in the Quick Panel
     * Allows the user to view the widgets that have been added to the Quick Panel.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quickpanellistwidgetsWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = quickpanellistwidgetsValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists all the widgets that are added in the Quick Panel (asynchronously)
     * Allows the user to view the widgets that have been added to the Quick Panel.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickpanellistwidgetsAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quickpanellistwidgetsValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quickpanellistwidgettypes
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickpanellistwidgettypesCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quickpanellistwidgettypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quickpanellistwidgettypesValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling quickpanellistwidgettypes(Async)");
        }
        

        okhttp3.Call localVarCall = quickpanellistwidgettypesCall(token, _callback);
        return localVarCall;

    }

    /**
     * Lists all the widget types available in the system
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void quickpanellistwidgettypes(String token) throws ApiException {
        quickpanellistwidgettypesWithHttpInfo(token);
    }

    /**
     * Lists all the widget types available in the system
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quickpanellistwidgettypesWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = quickpanellistwidgettypesValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists all the widget types available in the system (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickpanellistwidgettypesAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quickpanellistwidgettypesValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quickpanelreorderwidgets
     * @param token The authentication token. (required)
     * @param sectionname The section name where to sort the widgets. (required)
     * @param orderids CSV list of the widgets to reorder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickpanelreorderwidgetsCall(String token, String sectionname, String orderids, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quickpanelreorderwidgets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (sectionname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sectionname", sectionname));
        }

        if (orderids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderids", orderids));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quickpanelreorderwidgetsValidateBeforeCall(String token, String sectionname, String orderids, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling quickpanelreorderwidgets(Async)");
        }
        
        // verify the required parameter 'sectionname' is set
        if (sectionname == null) {
            throw new ApiException("Missing the required parameter 'sectionname' when calling quickpanelreorderwidgets(Async)");
        }
        
        // verify the required parameter 'orderids' is set
        if (orderids == null) {
            throw new ApiException("Missing the required parameter 'orderids' when calling quickpanelreorderwidgets(Async)");
        }
        

        okhttp3.Call localVarCall = quickpanelreorderwidgetsCall(token, sectionname, orderids, _callback);
        return localVarCall;

    }

    /**
     * Reorders the widgets and moves them to a specific column
     * 
     * @param token The authentication token. (required)
     * @param sectionname The section name where to sort the widgets. (required)
     * @param orderids CSV list of the widgets to reorder. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void quickpanelreorderwidgets(String token, String sectionname, String orderids) throws ApiException {
        quickpanelreorderwidgetsWithHttpInfo(token, sectionname, orderids);
    }

    /**
     * Reorders the widgets and moves them to a specific column
     * 
     * @param token The authentication token. (required)
     * @param sectionname The section name where to sort the widgets. (required)
     * @param orderids CSV list of the widgets to reorder. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quickpanelreorderwidgetsWithHttpInfo(String token, String sectionname, String orderids) throws ApiException {
        okhttp3.Call localVarCall = quickpanelreorderwidgetsValidateBeforeCall(token, sectionname, orderids, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reorders the widgets and moves them to a specific column (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param sectionname The section name where to sort the widgets. (required)
     * @param orderids CSV list of the widgets to reorder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickpanelreorderwidgetsAsync(String token, String sectionname, String orderids, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quickpanelreorderwidgetsValidateBeforeCall(token, sectionname, orderids, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quickpanelsavewidget
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickpanelsavewidgetCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/quickpanelsavewidget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quickpanelsavewidgetValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = quickpanelsavewidgetCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Saves a widget for the Quick Panel
     * Allows the user to save a widget to the Quick Panel.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void quickpanelsavewidget(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        quickpanelsavewidgetWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Saves a widget for the Quick Panel
     * Allows the user to save a widget to the Quick Panel.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quickpanelsavewidgetWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = quickpanelsavewidgetValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Saves a widget for the Quick Panel (asynchronously)
     * Allows the user to save a widget to the Quick Panel.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickpanelsavewidgetAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quickpanelsavewidgetValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingflag
     * @param token The authentication token. (required)
     * @param id The rating to flag. (required)
     * @param comment Comment why should this should be removed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingflagCall(String token, UUID id, String comment, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ratingflag";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingflagValidateBeforeCall(String token, UUID id, String comment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling ratingflag(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ratingflag(Async)");
        }
        

        okhttp3.Call localVarCall = ratingflagCall(token, id, comment, _callback);
        return localVarCall;

    }

    /**
     * Flags one rating for moderation
     * 
     * @param token The authentication token. (required)
     * @param id The rating to flag. (required)
     * @param comment Comment why should this should be removed. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingflag(String token, UUID id, String comment) throws ApiException {
        ratingflagWithHttpInfo(token, id, comment);
    }

    /**
     * Flags one rating for moderation
     * 
     * @param token The authentication token. (required)
     * @param id The rating to flag. (required)
     * @param comment Comment why should this should be removed. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingflagWithHttpInfo(String token, UUID id, String comment) throws ApiException {
        okhttp3.Call localVarCall = ratingflagValidateBeforeCall(token, id, comment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Flags one rating for moderation (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param id The rating to flag. (required)
     * @param comment Comment why should this should be removed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingflagAsync(String token, UUID id, String comment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingflagValidateBeforeCall(token, id, comment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingflagcomment
     * @param token The authentication token. (required)
     * @param id The comment to flag. (required)
     * @param comment Comment why should this should be removed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingflagcommentCall(String token, UUID id, String comment, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ratingflagcomment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingflagcommentValidateBeforeCall(String token, UUID id, String comment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling ratingflagcomment(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ratingflagcomment(Async)");
        }
        

        okhttp3.Call localVarCall = ratingflagcommentCall(token, id, comment, _callback);
        return localVarCall;

    }

    /**
     * Flags one comment for moderation
     * 
     * @param token The authentication token. (required)
     * @param id The comment to flag. (required)
     * @param comment Comment why should this should be removed. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingflagcomment(String token, UUID id, String comment) throws ApiException {
        ratingflagcommentWithHttpInfo(token, id, comment);
    }

    /**
     * Flags one comment for moderation
     * 
     * @param token The authentication token. (required)
     * @param id The comment to flag. (required)
     * @param comment Comment why should this should be removed. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingflagcommentWithHttpInfo(String token, UUID id, String comment) throws ApiException {
        okhttp3.Call localVarCall = ratingflagcommentValidateBeforeCall(token, id, comment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Flags one comment for moderation (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param id The comment to flag. (required)
     * @param comment Comment why should this should be removed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingflagcommentAsync(String token, UUID id, String comment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingflagcommentValidateBeforeCall(token, id, comment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingget
     * @param token The authentication token. (required)
     * @param type The entity type to get the rating. (required)
     * @param entityids List of ids to get the ratings. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratinggetCall(String token, String type, String entityids, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ratingget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (entityids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityids", entityids));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratinggetValidateBeforeCall(String token, String type, String entityids, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling ratingget(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling ratingget(Async)");
        }
        
        // verify the required parameter 'entityids' is set
        if (entityids == null) {
            throw new ApiException("Missing the required parameter 'entityids' when calling ratingget(Async)");
        }
        

        okhttp3.Call localVarCall = ratinggetCall(token, type, entityids, _callback);
        return localVarCall;

    }

    /**
     * Get rating for one or more entities
     * 
     * @param token The authentication token. (required)
     * @param type The entity type to get the rating. (required)
     * @param entityids List of ids to get the ratings. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingget(String token, String type, String entityids) throws ApiException {
        ratinggetWithHttpInfo(token, type, entityids);
    }

    /**
     * Get rating for one or more entities
     * 
     * @param token The authentication token. (required)
     * @param type The entity type to get the rating. (required)
     * @param entityids List of ids to get the ratings. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratinggetWithHttpInfo(String token, String type, String entityids) throws ApiException {
        okhttp3.Call localVarCall = ratinggetValidateBeforeCall(token, type, entityids, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get rating for one or more entities (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param type The entity type to get the rating. (required)
     * @param entityids List of ids to get the ratings. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratinggetAsync(String token, String type, String entityids, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratinggetValidateBeforeCall(token, type, entityids, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratinggetall
     * @param token The authentication token. (required)
     * @param type The entity type to get the rating. (required)
     * @param entityid Id of the entity to get the ratings. (required)
     * @param mostrecentfirst True to show most recent first, otherwise most helpful first. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratinggetallCall(String token, String type, String entityid, Boolean mostrecentfirst, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ratinggetall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (entityid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityid", entityid));
        }

        if (mostrecentfirst != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mostrecentfirst", mostrecentfirst));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratinggetallValidateBeforeCall(String token, String type, String entityid, Boolean mostrecentfirst, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling ratinggetall(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling ratinggetall(Async)");
        }
        
        // verify the required parameter 'entityid' is set
        if (entityid == null) {
            throw new ApiException("Missing the required parameter 'entityid' when calling ratinggetall(Async)");
        }
        

        okhttp3.Call localVarCall = ratinggetallCall(token, type, entityid, mostrecentfirst, _callback);
        return localVarCall;

    }

    /**
     * Gets the full ratings and comments for a specific entity
     * 
     * @param token The authentication token. (required)
     * @param type The entity type to get the rating. (required)
     * @param entityid Id of the entity to get the ratings. (required)
     * @param mostrecentfirst True to show most recent first, otherwise most helpful first. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratinggetall(String token, String type, String entityid, Boolean mostrecentfirst) throws ApiException {
        ratinggetallWithHttpInfo(token, type, entityid, mostrecentfirst);
    }

    /**
     * Gets the full ratings and comments for a specific entity
     * 
     * @param token The authentication token. (required)
     * @param type The entity type to get the rating. (required)
     * @param entityid Id of the entity to get the ratings. (required)
     * @param mostrecentfirst True to show most recent first, otherwise most helpful first. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratinggetallWithHttpInfo(String token, String type, String entityid, Boolean mostrecentfirst) throws ApiException {
        okhttp3.Call localVarCall = ratinggetallValidateBeforeCall(token, type, entityid, mostrecentfirst, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the full ratings and comments for a specific entity (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param type The entity type to get the rating. (required)
     * @param entityid Id of the entity to get the ratings. (required)
     * @param mostrecentfirst True to show most recent first, otherwise most helpful first. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratinggetallAsync(String token, String type, String entityid, Boolean mostrecentfirst, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratinggetallValidateBeforeCall(token, type, entityid, mostrecentfirst, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratinggetcomments
     * @param token The authentication token. (required)
     * @param ratingid The ID of the rating to get all comments. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratinggetcommentsCall(String token, UUID ratingid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ratinggetcomments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (ratingid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ratingid", ratingid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratinggetcommentsValidateBeforeCall(String token, UUID ratingid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling ratinggetcomments(Async)");
        }
        
        // verify the required parameter 'ratingid' is set
        if (ratingid == null) {
            throw new ApiException("Missing the required parameter 'ratingid' when calling ratinggetcomments(Async)");
        }
        

        okhttp3.Call localVarCall = ratinggetcommentsCall(token, ratingid, _callback);
        return localVarCall;

    }

    /**
     * Gets all the comments for a rating
     * 
     * @param token The authentication token. (required)
     * @param ratingid The ID of the rating to get all comments. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratinggetcomments(String token, UUID ratingid) throws ApiException {
        ratinggetcommentsWithHttpInfo(token, ratingid);
    }

    /**
     * Gets all the comments for a rating
     * 
     * @param token The authentication token. (required)
     * @param ratingid The ID of the rating to get all comments. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratinggetcommentsWithHttpInfo(String token, UUID ratingid) throws ApiException {
        okhttp3.Call localVarCall = ratinggetcommentsValidateBeforeCall(token, ratingid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets all the comments for a rating (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param ratingid The ID of the rating to get all comments. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratinggetcommentsAsync(String token, UUID ratingid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratinggetcommentsValidateBeforeCall(token, ratingid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratinggetpending
     * @param getgroup The ID of the group of pending ratings to get. (required)
     * @param rateid Rate this before returning. (optional)
     * @param rateval The value used to rate the item specified in rateid. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratinggetpendingCall(UUID getgroup, UUID rateid, Integer rateval, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ratinggetpending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (getgroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("getgroup", getgroup));
        }

        if (rateid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rateid", rateid));
        }

        if (rateval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rateval", rateval));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratinggetpendingValidateBeforeCall(UUID getgroup, UUID rateid, Integer rateval, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'getgroup' is set
        if (getgroup == null) {
            throw new ApiException("Missing the required parameter 'getgroup' when calling ratinggetpending(Async)");
        }
        

        okhttp3.Call localVarCall = ratinggetpendingCall(getgroup, rateid, rateval, _callback);
        return localVarCall;

    }

    /**
     * Gets info of pre-saved and pre-approved ratings
     * 
     * @param getgroup The ID of the group of pending ratings to get. (required)
     * @param rateid Rate this before returning. (optional)
     * @param rateval The value used to rate the item specified in rateid. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratinggetpending(UUID getgroup, UUID rateid, Integer rateval) throws ApiException {
        ratinggetpendingWithHttpInfo(getgroup, rateid, rateval);
    }

    /**
     * Gets info of pre-saved and pre-approved ratings
     * 
     * @param getgroup The ID of the group of pending ratings to get. (required)
     * @param rateid Rate this before returning. (optional)
     * @param rateval The value used to rate the item specified in rateid. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratinggetpendingWithHttpInfo(UUID getgroup, UUID rateid, Integer rateval) throws ApiException {
        okhttp3.Call localVarCall = ratinggetpendingValidateBeforeCall(getgroup, rateid, rateval, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets info of pre-saved and pre-approved ratings (asynchronously)
     * 
     * @param getgroup The ID of the group of pending ratings to get. (required)
     * @param rateid Rate this before returning. (optional)
     * @param rateval The value used to rate the item specified in rateid. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratinggetpendingAsync(UUID getgroup, UUID rateid, Integer rateval, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratinggetpendingValidateBeforeCall(getgroup, rateid, rateval, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratinggetpendingmoderation
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratinggetpendingmoderationCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ratinggetpendingmoderation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratinggetpendingmoderationValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling ratinggetpendingmoderation(Async)");
        }
        

        okhttp3.Call localVarCall = ratinggetpendingmoderationCall(token, _callback);
        return localVarCall;

    }

    /**
     * Shows a list of the ratings and comments that are pending for moderation
     * Allows the user to view the list of pending ratings and comments.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratinggetpendingmoderation(String token) throws ApiException {
        ratinggetpendingmoderationWithHttpInfo(token);
    }

    /**
     * Shows a list of the ratings and comments that are pending for moderation
     * Allows the user to view the list of pending ratings and comments.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratinggetpendingmoderationWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = ratinggetpendingmoderationValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Shows a list of the ratings and comments that are pending for moderation (asynchronously)
     * Allows the user to view the list of pending ratings and comments.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratinggetpendingmoderationAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratinggetpendingmoderationValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingmoderate
     * @param token The authentication token. (required)
     * @param type Either &#39;rating&#39; or &#39;comment&#39; depending on what you want to moderate. (required)
     * @param id Id of the rating or comment, as specified in type. (required)
     * @param approve True to approve, false to reject. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingmoderateCall(String token, String type, UUID id, Boolean approve, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ratingmoderate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (approve != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approve", approve));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingmoderateValidateBeforeCall(String token, String type, UUID id, Boolean approve, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling ratingmoderate(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling ratingmoderate(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ratingmoderate(Async)");
        }
        
        // verify the required parameter 'approve' is set
        if (approve == null) {
            throw new ApiException("Missing the required parameter 'approve' when calling ratingmoderate(Async)");
        }
        

        okhttp3.Call localVarCall = ratingmoderateCall(token, type, id, approve, _callback);
        return localVarCall;

    }

    /**
     * Allows the user to accept or reject a comment
     * Allows the user to approve or reject a comment or rating.
     * @param token The authentication token. (required)
     * @param type Either &#39;rating&#39; or &#39;comment&#39; depending on what you want to moderate. (required)
     * @param id Id of the rating or comment, as specified in type. (required)
     * @param approve True to approve, false to reject. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingmoderate(String token, String type, UUID id, Boolean approve) throws ApiException {
        ratingmoderateWithHttpInfo(token, type, id, approve);
    }

    /**
     * Allows the user to accept or reject a comment
     * Allows the user to approve or reject a comment or rating.
     * @param token The authentication token. (required)
     * @param type Either &#39;rating&#39; or &#39;comment&#39; depending on what you want to moderate. (required)
     * @param id Id of the rating or comment, as specified in type. (required)
     * @param approve True to approve, false to reject. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingmoderateWithHttpInfo(String token, String type, UUID id, Boolean approve) throws ApiException {
        okhttp3.Call localVarCall = ratingmoderateValidateBeforeCall(token, type, id, approve, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Allows the user to accept or reject a comment (asynchronously)
     * Allows the user to approve or reject a comment or rating.
     * @param token The authentication token. (required)
     * @param type Either &#39;rating&#39; or &#39;comment&#39; depending on what you want to moderate. (required)
     * @param id Id of the rating or comment, as specified in type. (required)
     * @param approve True to approve, false to reject. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingmoderateAsync(String token, String type, UUID id, Boolean approve, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingmoderateValidateBeforeCall(token, type, id, approve, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingpostcomment
     * @param token The authentication token. (required)
     * @param ratingid The ID of the rating to post the comment. (required)
     * @param comment Text of the comment to post. (required)
     * @param annonymous True to post the comment annonymously. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingpostcommentCall(String token, UUID ratingid, String comment, Boolean annonymous, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ratingpostcomment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (ratingid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ratingid", ratingid));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (annonymous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("annonymous", annonymous));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingpostcommentValidateBeforeCall(String token, UUID ratingid, String comment, Boolean annonymous, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling ratingpostcomment(Async)");
        }
        
        // verify the required parameter 'ratingid' is set
        if (ratingid == null) {
            throw new ApiException("Missing the required parameter 'ratingid' when calling ratingpostcomment(Async)");
        }
        
        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling ratingpostcomment(Async)");
        }
        
        // verify the required parameter 'annonymous' is set
        if (annonymous == null) {
            throw new ApiException("Missing the required parameter 'annonymous' when calling ratingpostcomment(Async)");
        }
        

        okhttp3.Call localVarCall = ratingpostcommentCall(token, ratingid, comment, annonymous, _callback);
        return localVarCall;

    }

    /**
     * Posts a comments for in a rating
     * 
     * @param token The authentication token. (required)
     * @param ratingid The ID of the rating to post the comment. (required)
     * @param comment Text of the comment to post. (required)
     * @param annonymous True to post the comment annonymously. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingpostcomment(String token, UUID ratingid, String comment, Boolean annonymous) throws ApiException {
        ratingpostcommentWithHttpInfo(token, ratingid, comment, annonymous);
    }

    /**
     * Posts a comments for in a rating
     * 
     * @param token The authentication token. (required)
     * @param ratingid The ID of the rating to post the comment. (required)
     * @param comment Text of the comment to post. (required)
     * @param annonymous True to post the comment annonymously. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingpostcommentWithHttpInfo(String token, UUID ratingid, String comment, Boolean annonymous) throws ApiException {
        okhttp3.Call localVarCall = ratingpostcommentValidateBeforeCall(token, ratingid, comment, annonymous, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Posts a comments for in a rating (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param ratingid The ID of the rating to post the comment. (required)
     * @param comment Text of the comment to post. (required)
     * @param annonymous True to post the comment annonymously. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingpostcommentAsync(String token, UUID ratingid, String comment, Boolean annonymous, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingpostcommentValidateBeforeCall(token, ratingid, comment, annonymous, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingrate
     * @param token The authentication token. (required)
     * @param type The entity type to rate. (required)
     * @param entityid Id of the entity to rate. (required)
     * @param annonymous Whether to post as annonymous. (required)
     * @param value Value from 0 to 100 with the rating. (optional)
     * @param comment Comment associated with this review. Comment can be updated later on another request too. (optional)
     * @param updatecomment Whether to update the comments. Defaults to true. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingrateCall(String token, String type, String entityid, Boolean annonymous, Integer value, String comment, Boolean updatecomment, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ratingrate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (entityid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityid", entityid));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (annonymous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("annonymous", annonymous));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (updatecomment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatecomment", updatecomment));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingrateValidateBeforeCall(String token, String type, String entityid, Boolean annonymous, Integer value, String comment, Boolean updatecomment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling ratingrate(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling ratingrate(Async)");
        }
        
        // verify the required parameter 'entityid' is set
        if (entityid == null) {
            throw new ApiException("Missing the required parameter 'entityid' when calling ratingrate(Async)");
        }
        
        // verify the required parameter 'annonymous' is set
        if (annonymous == null) {
            throw new ApiException("Missing the required parameter 'annonymous' when calling ratingrate(Async)");
        }
        

        okhttp3.Call localVarCall = ratingrateCall(token, type, entityid, annonymous, value, comment, updatecomment, _callback);
        return localVarCall;

    }

    /**
     * Rates one entity
     * 
     * @param token The authentication token. (required)
     * @param type The entity type to rate. (required)
     * @param entityid Id of the entity to rate. (required)
     * @param annonymous Whether to post as annonymous. (required)
     * @param value Value from 0 to 100 with the rating. (optional)
     * @param comment Comment associated with this review. Comment can be updated later on another request too. (optional)
     * @param updatecomment Whether to update the comments. Defaults to true. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingrate(String token, String type, String entityid, Boolean annonymous, Integer value, String comment, Boolean updatecomment) throws ApiException {
        ratingrateWithHttpInfo(token, type, entityid, annonymous, value, comment, updatecomment);
    }

    /**
     * Rates one entity
     * 
     * @param token The authentication token. (required)
     * @param type The entity type to rate. (required)
     * @param entityid Id of the entity to rate. (required)
     * @param annonymous Whether to post as annonymous. (required)
     * @param value Value from 0 to 100 with the rating. (optional)
     * @param comment Comment associated with this review. Comment can be updated later on another request too. (optional)
     * @param updatecomment Whether to update the comments. Defaults to true. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingrateWithHttpInfo(String token, String type, String entityid, Boolean annonymous, Integer value, String comment, Boolean updatecomment) throws ApiException {
        okhttp3.Call localVarCall = ratingrateValidateBeforeCall(token, type, entityid, annonymous, value, comment, updatecomment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rates one entity (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param type The entity type to rate. (required)
     * @param entityid Id of the entity to rate. (required)
     * @param annonymous Whether to post as annonymous. (required)
     * @param value Value from 0 to 100 with the rating. (optional)
     * @param comment Comment associated with this review. Comment can be updated later on another request too. (optional)
     * @param updatecomment Whether to update the comments. Defaults to true. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingrateAsync(String token, String type, String entityid, Boolean annonymous, Integer value, String comment, Boolean updatecomment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingrateValidateBeforeCall(token, type, entityid, annonymous, value, comment, updatecomment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingratepending
     * @param group The ID of the group of with pre-approved ratings. (required)
     * @param annonymous Whether to post as annonymous. (required)
     * @param rateid Rate this before returning. (optional)
     * @param value Value from 0 to 100 with the rating. (optional)
     * @param comment Comment associated with this review. Comment can be updated later on another request too. (optional)
     * @param updatecomment Whether to update the comments. Defaults to true. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingratependingCall(UUID group, Boolean annonymous, UUID rateid, Integer value, String comment, Boolean updatecomment, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ratingratepending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (rateid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rateid", rateid));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (annonymous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("annonymous", annonymous));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (updatecomment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatecomment", updatecomment));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingratependingValidateBeforeCall(UUID group, Boolean annonymous, UUID rateid, Integer value, String comment, Boolean updatecomment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling ratingratepending(Async)");
        }
        
        // verify the required parameter 'annonymous' is set
        if (annonymous == null) {
            throw new ApiException("Missing the required parameter 'annonymous' when calling ratingratepending(Async)");
        }
        

        okhttp3.Call localVarCall = ratingratependingCall(group, annonymous, rateid, value, comment, updatecomment, _callback);
        return localVarCall;

    }

    /**
     * Rates a pre-saved and pre-approved entity
     * 
     * @param group The ID of the group of with pre-approved ratings. (required)
     * @param annonymous Whether to post as annonymous. (required)
     * @param rateid Rate this before returning. (optional)
     * @param value Value from 0 to 100 with the rating. (optional)
     * @param comment Comment associated with this review. Comment can be updated later on another request too. (optional)
     * @param updatecomment Whether to update the comments. Defaults to true. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingratepending(UUID group, Boolean annonymous, UUID rateid, Integer value, String comment, Boolean updatecomment) throws ApiException {
        ratingratependingWithHttpInfo(group, annonymous, rateid, value, comment, updatecomment);
    }

    /**
     * Rates a pre-saved and pre-approved entity
     * 
     * @param group The ID of the group of with pre-approved ratings. (required)
     * @param annonymous Whether to post as annonymous. (required)
     * @param rateid Rate this before returning. (optional)
     * @param value Value from 0 to 100 with the rating. (optional)
     * @param comment Comment associated with this review. Comment can be updated later on another request too. (optional)
     * @param updatecomment Whether to update the comments. Defaults to true. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingratependingWithHttpInfo(UUID group, Boolean annonymous, UUID rateid, Integer value, String comment, Boolean updatecomment) throws ApiException {
        okhttp3.Call localVarCall = ratingratependingValidateBeforeCall(group, annonymous, rateid, value, comment, updatecomment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rates a pre-saved and pre-approved entity (asynchronously)
     * 
     * @param group The ID of the group of with pre-approved ratings. (required)
     * @param annonymous Whether to post as annonymous. (required)
     * @param rateid Rate this before returning. (optional)
     * @param value Value from 0 to 100 with the rating. (optional)
     * @param comment Comment associated with this review. Comment can be updated later on another request too. (optional)
     * @param updatecomment Whether to update the comments. Defaults to true. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingratependingAsync(UUID group, Boolean annonymous, UUID rateid, Integer value, String comment, Boolean updatecomment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingratependingValidateBeforeCall(group, annonymous, rateid, value, comment, updatecomment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingvote
     * @param token The authentication token. (required)
     * @param ratingid The ID of the rating to vote on. (required)
     * @param vote 1 to vote up, -1 to vote down. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingvoteCall(String token, UUID ratingid, Integer vote, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ratingvote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (ratingid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ratingid", ratingid));
        }

        if (vote != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vote", vote));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingvoteValidateBeforeCall(String token, UUID ratingid, Integer vote, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling ratingvote(Async)");
        }
        
        // verify the required parameter 'ratingid' is set
        if (ratingid == null) {
            throw new ApiException("Missing the required parameter 'ratingid' when calling ratingvote(Async)");
        }
        
        // verify the required parameter 'vote' is set
        if (vote == null) {
            throw new ApiException("Missing the required parameter 'vote' when calling ratingvote(Async)");
        }
        

        okhttp3.Call localVarCall = ratingvoteCall(token, ratingid, vote, _callback);
        return localVarCall;

    }

    /**
     * Votes up or down a rating
     * 
     * @param token The authentication token. (required)
     * @param ratingid The ID of the rating to vote on. (required)
     * @param vote 1 to vote up, -1 to vote down. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingvote(String token, UUID ratingid, Integer vote) throws ApiException {
        ratingvoteWithHttpInfo(token, ratingid, vote);
    }

    /**
     * Votes up or down a rating
     * 
     * @param token The authentication token. (required)
     * @param ratingid The ID of the rating to vote on. (required)
     * @param vote 1 to vote up, -1 to vote down. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingvoteWithHttpInfo(String token, UUID ratingid, Integer vote) throws ApiException {
        okhttp3.Call localVarCall = ratingvoteValidateBeforeCall(token, ratingid, vote, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Votes up or down a rating (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param ratingid The ID of the rating to vote on. (required)
     * @param vote 1 to vote up, -1 to vote down. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingvoteAsync(String token, UUID ratingid, Integer vote, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingvoteValidateBeforeCall(token, ratingid, vote, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportattanalyticsprepare
     * @param token The authentication token. (required)
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param refreshgroup The ID of the group to check (and refresh) before processing the report. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportattanalyticsprepareCall(String token, String reportname, String params, UUID refreshgroup, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reportattanalyticsprepare";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (reportname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reportname", reportname));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (refreshgroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refreshgroup", refreshgroup));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportattanalyticsprepareValidateBeforeCall(String token, String reportname, String params, UUID refreshgroup, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling reportattanalyticsprepare(Async)");
        }
        
        // verify the required parameter 'reportname' is set
        if (reportname == null) {
            throw new ApiException("Missing the required parameter 'reportname' when calling reportattanalyticsprepare(Async)");
        }
        

        okhttp3.Call localVarCall = reportattanalyticsprepareCall(token, reportname, params, refreshgroup, _callback);
        return localVarCall;

    }

    /**
     * Query and load an attendance analytics report
     * Allows the user to query and load attendance analytics reports.
     * @param token The authentication token. (required)
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param refreshgroup The ID of the group to check (and refresh) before processing the report. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void reportattanalyticsprepare(String token, String reportname, String params, UUID refreshgroup) throws ApiException {
        reportattanalyticsprepareWithHttpInfo(token, reportname, params, refreshgroup);
    }

    /**
     * Query and load an attendance analytics report
     * Allows the user to query and load attendance analytics reports.
     * @param token The authentication token. (required)
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param refreshgroup The ID of the group to check (and refresh) before processing the report. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reportattanalyticsprepareWithHttpInfo(String token, String reportname, String params, UUID refreshgroup) throws ApiException {
        okhttp3.Call localVarCall = reportattanalyticsprepareValidateBeforeCall(token, reportname, params, refreshgroup, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Query and load an attendance analytics report (asynchronously)
     * Allows the user to query and load attendance analytics reports.
     * @param token The authentication token. (required)
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param refreshgroup The ID of the group to check (and refresh) before processing the report. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportattanalyticsprepareAsync(String token, String reportname, String params, UUID refreshgroup, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportattanalyticsprepareValidateBeforeCall(token, reportname, params, refreshgroup, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportlist
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportlistCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reportlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportlistValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling reportlist(Async)");
        }
        

        okhttp3.Call localVarCall = reportlistCall(token, _callback);
        return localVarCall;

    }

    /**
     * View a list of available reports
     * Allows the user to view the complete list of available, canned reports.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void reportlist(String token) throws ApiException {
        reportlistWithHttpInfo(token);
    }

    /**
     * View a list of available reports
     * Allows the user to view the complete list of available, canned reports.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reportlistWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = reportlistValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of available reports (asynchronously)
     * Allows the user to view the complete list of available, canned reports.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportlistAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportlistValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportpermissionsbyuser
     * @param token The authentication token. (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportpermissionsbyuserCall(String token, String params, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reportpermissionsbyuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportpermissionsbyuserValidateBeforeCall(String token, String params, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling reportpermissionsbyuser(Async)");
        }
        

        okhttp3.Call localVarCall = reportpermissionsbyuserCall(token, params, _callback);
        return localVarCall;

    }

    /**
     * Permissions by user report
     * Lists all the users in the system including their corresponding permissions.
     * @param token The authentication token. (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void reportpermissionsbyuser(String token, String params) throws ApiException {
        reportpermissionsbyuserWithHttpInfo(token, params);
    }

    /**
     * Permissions by user report
     * Lists all the users in the system including their corresponding permissions.
     * @param token The authentication token. (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reportpermissionsbyuserWithHttpInfo(String token, String params) throws ApiException {
        okhttp3.Call localVarCall = reportpermissionsbyuserValidateBeforeCall(token, params, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Permissions by user report (asynchronously)
     * Lists all the users in the system including their corresponding permissions.
     * @param token The authentication token. (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportpermissionsbyuserAsync(String token, String params, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportpermissionsbyuserValidateBeforeCall(token, params, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportprepare
     * @param token The authentication token. (required)
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param repformat The format of the resulting report. Json, pdf, csv, ... (optional)
     * @param fillgroupid If specified, the result is used to fill the group with the given ID (optional)
     * @param groupby How to group the records. In the format &#39;col1+col2|col3+col4 (optional)
     * @param refreshgroup The ID of the group to check (and refresh) before processing the report. (optional)
     * @param filtertext The user friendly text of the applied filters. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportprepareCall(String token, String reportname, String params, String repformat, UUID fillgroupid, String groupby, UUID refreshgroup, String filtertext, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reportprepare";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (reportname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reportname", reportname));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (repformat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("repformat", repformat));
        }

        if (fillgroupid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillgroupid", fillgroupid));
        }

        if (groupby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupby", groupby));
        }

        if (refreshgroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refreshgroup", refreshgroup));
        }

        if (filtertext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filtertext", filtertext));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportprepareValidateBeforeCall(String token, String reportname, String params, String repformat, UUID fillgroupid, String groupby, UUID refreshgroup, String filtertext, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling reportprepare(Async)");
        }
        
        // verify the required parameter 'reportname' is set
        if (reportname == null) {
            throw new ApiException("Missing the required parameter 'reportname' when calling reportprepare(Async)");
        }
        

        okhttp3.Call localVarCall = reportprepareCall(token, reportname, params, repformat, fillgroupid, groupby, refreshgroup, filtertext, _callback);
        return localVarCall;

    }

    /**
     * Queries and loads the specified report, in background.
     * Allows the user to run reports, in background, with the exception of attendance analytics reports.
     * @param token The authentication token. (required)
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param repformat The format of the resulting report. Json, pdf, csv, ... (optional)
     * @param fillgroupid If specified, the result is used to fill the group with the given ID (optional)
     * @param groupby How to group the records. In the format &#39;col1+col2|col3+col4 (optional)
     * @param refreshgroup The ID of the group to check (and refresh) before processing the report. (optional)
     * @param filtertext The user friendly text of the applied filters. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void reportprepare(String token, String reportname, String params, String repformat, UUID fillgroupid, String groupby, UUID refreshgroup, String filtertext) throws ApiException {
        reportprepareWithHttpInfo(token, reportname, params, repformat, fillgroupid, groupby, refreshgroup, filtertext);
    }

    /**
     * Queries and loads the specified report, in background.
     * Allows the user to run reports, in background, with the exception of attendance analytics reports.
     * @param token The authentication token. (required)
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param repformat The format of the resulting report. Json, pdf, csv, ... (optional)
     * @param fillgroupid If specified, the result is used to fill the group with the given ID (optional)
     * @param groupby How to group the records. In the format &#39;col1+col2|col3+col4 (optional)
     * @param refreshgroup The ID of the group to check (and refresh) before processing the report. (optional)
     * @param filtertext The user friendly text of the applied filters. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reportprepareWithHttpInfo(String token, String reportname, String params, String repformat, UUID fillgroupid, String groupby, UUID refreshgroup, String filtertext) throws ApiException {
        okhttp3.Call localVarCall = reportprepareValidateBeforeCall(token, reportname, params, repformat, fillgroupid, groupby, refreshgroup, filtertext, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Queries and loads the specified report, in background. (asynchronously)
     * Allows the user to run reports, in background, with the exception of attendance analytics reports.
     * @param token The authentication token. (required)
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param repformat The format of the resulting report. Json, pdf, csv, ... (optional)
     * @param fillgroupid If specified, the result is used to fill the group with the given ID (optional)
     * @param groupby How to group the records. In the format &#39;col1+col2|col3+col4 (optional)
     * @param refreshgroup The ID of the group to check (and refresh) before processing the report. (optional)
     * @param filtertext The user friendly text of the applied filters. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportprepareAsync(String token, String reportname, String params, String repformat, UUID fillgroupid, String groupby, UUID refreshgroup, String filtertext, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportprepareValidateBeforeCall(token, reportname, params, repformat, fillgroupid, groupby, refreshgroup, filtertext, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportquery
     * @param token The authentication token. (required)
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportqueryCall(String token, String reportname, String params, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reportquery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (reportname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reportname", reportname));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportqueryValidateBeforeCall(String token, String reportname, String params, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling reportquery(Async)");
        }
        
        // verify the required parameter 'reportname' is set
        if (reportname == null) {
            throw new ApiException("Missing the required parameter 'reportname' when calling reportquery(Async)");
        }
        

        okhttp3.Call localVarCall = reportqueryCall(token, reportname, params, _callback);
        return localVarCall;

    }

    /**
     * Query and load a specified report
     * Allows the user to run reports with the exception of attendance analytics reports.
     * @param token The authentication token. (required)
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void reportquery(String token, String reportname, String params) throws ApiException {
        reportqueryWithHttpInfo(token, reportname, params);
    }

    /**
     * Query and load a specified report
     * Allows the user to run reports with the exception of attendance analytics reports.
     * @param token The authentication token. (required)
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reportqueryWithHttpInfo(String token, String reportname, String params) throws ApiException {
        okhttp3.Call localVarCall = reportqueryValidateBeforeCall(token, reportname, params, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Query and load a specified report (asynchronously)
     * Allows the user to run reports with the exception of attendance analytics reports.
     * @param token The authentication token. (required)
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportqueryAsync(String token, String reportname, String params, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportqueryValidateBeforeCall(token, reportname, params, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportscheduledelete
     * @param token The authentication token. (required)
     * @param id The id of the report schedule to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportscheduledeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reportscheduledelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportscheduledeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling reportscheduledelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reportscheduledelete(Async)");
        }
        

        okhttp3.Call localVarCall = reportscheduledeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a report schedule
     * Allows the user to delete a scheduled report that they created.
     * @param token The authentication token. (required)
     * @param id The id of the report schedule to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void reportscheduledelete(String token, UUID id) throws ApiException {
        reportscheduledeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a report schedule
     * Allows the user to delete a scheduled report that they created.
     * @param token The authentication token. (required)
     * @param id The id of the report schedule to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reportscheduledeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = reportscheduledeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a report schedule (asynchronously)
     * Allows the user to delete a scheduled report that they created.
     * @param token The authentication token. (required)
     * @param id The id of the report schedule to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportscheduledeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportscheduledeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportscheduleget
     * @param token The authentication token. (required)
     * @param id The id of the schedule to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportschedulegetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reportscheduleget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportschedulegetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling reportscheduleget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reportscheduleget(Async)");
        }
        

        okhttp3.Call localVarCall = reportschedulegetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Get a report schedule
     * Allows the user to view the list of reports that they scheduled.
     * @param token The authentication token. (required)
     * @param id The id of the schedule to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void reportscheduleget(String token, UUID id) throws ApiException {
        reportschedulegetWithHttpInfo(token, id);
    }

    /**
     * Get a report schedule
     * Allows the user to view the list of reports that they scheduled.
     * @param token The authentication token. (required)
     * @param id The id of the schedule to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reportschedulegetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = reportschedulegetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a report schedule (asynchronously)
     * Allows the user to view the list of reports that they scheduled.
     * @param token The authentication token. (required)
     * @param id The id of the schedule to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportschedulegetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportschedulegetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportschedulelist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportschedulelistCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reportschedulelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportschedulelistValidateBeforeCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling reportschedulelist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling reportschedulelist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling reportschedulelist(Async)");
        }
        

        okhttp3.Call localVarCall = reportschedulelistCall(token, from, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of the scheduled reports
     * Allows the user to view a list of the scheduled reports.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void reportschedulelist(String token, Integer from, Integer count) throws ApiException {
        reportschedulelistWithHttpInfo(token, from, count);
    }

    /**
     * View a list of the scheduled reports
     * Allows the user to view a list of the scheduled reports.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reportschedulelistWithHttpInfo(String token, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = reportschedulelistValidateBeforeCall(token, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of the scheduled reports (asynchronously)
     * Allows the user to view a list of the scheduled reports.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportschedulelistAsync(String token, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportschedulelistValidateBeforeCall(token, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportschedulesave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportschedulesaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/reportschedulesave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportschedulesaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = reportschedulesaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a report schedule
     * Allows the user to create or edit a scheduled report.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void reportschedulesave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        reportschedulesaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a report schedule
     * Allows the user to create or edit a scheduled report.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reportschedulesaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = reportschedulesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a report schedule (asynchronously)
     * Allows the user to create or edit a scheduled report.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportschedulesaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportschedulesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reporttagresults
     * @param token The authentication token. (required)
     * @param reportname The name of the report to execute (required)
     * @param assign Specify whether the specified tags have to be assigned or unassigned. (required)
     * @param tags The tags to assign (or unassign) to the resulting users in the report, in JSON format. (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reporttagresultsCall(String token, String reportname, Boolean assign, String tags, String params, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reporttagresults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (reportname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reportname", reportname));
        }

        if (assign != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assign", assign));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reporttagresultsValidateBeforeCall(String token, String reportname, Boolean assign, String tags, String params, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling reporttagresults(Async)");
        }
        
        // verify the required parameter 'reportname' is set
        if (reportname == null) {
            throw new ApiException("Missing the required parameter 'reportname' when calling reporttagresults(Async)");
        }
        
        // verify the required parameter 'assign' is set
        if (assign == null) {
            throw new ApiException("Missing the required parameter 'assign' when calling reporttagresults(Async)");
        }
        
        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling reporttagresults(Async)");
        }
        

        okhttp3.Call localVarCall = reporttagresultsCall(token, reportname, assign, tags, params, _callback);
        return localVarCall;

    }

    /**
     * Queries and loads a report in background and assigns (or unassigns) the specified tags to (from) the resulting users.
     * Allows the user to use a report to assign or unassign tags.
     * @param token The authentication token. (required)
     * @param reportname The name of the report to execute (required)
     * @param assign Specify whether the specified tags have to be assigned or unassigned. (required)
     * @param tags The tags to assign (or unassign) to the resulting users in the report, in JSON format. (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void reporttagresults(String token, String reportname, Boolean assign, String tags, String params) throws ApiException {
        reporttagresultsWithHttpInfo(token, reportname, assign, tags, params);
    }

    /**
     * Queries and loads a report in background and assigns (or unassigns) the specified tags to (from) the resulting users.
     * Allows the user to use a report to assign or unassign tags.
     * @param token The authentication token. (required)
     * @param reportname The name of the report to execute (required)
     * @param assign Specify whether the specified tags have to be assigned or unassigned. (required)
     * @param tags The tags to assign (or unassign) to the resulting users in the report, in JSON format. (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reporttagresultsWithHttpInfo(String token, String reportname, Boolean assign, String tags, String params) throws ApiException {
        okhttp3.Call localVarCall = reporttagresultsValidateBeforeCall(token, reportname, assign, tags, params, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Queries and loads a report in background and assigns (or unassigns) the specified tags to (from) the resulting users. (asynchronously)
     * Allows the user to use a report to assign or unassign tags.
     * @param token The authentication token. (required)
     * @param reportname The name of the report to execute (required)
     * @param assign Specify whether the specified tags have to be assigned or unassigned. (required)
     * @param tags The tags to assign (or unassign) to the resulting users in the report, in JSON format. (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reporttagresultsAsync(String token, String reportname, Boolean assign, String tags, String params, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reporttagresultsValidateBeforeCall(token, reportname, assign, tags, params, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskmodelcheckanalysis
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model whose analysis status has to be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodelcheckanalysisCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/riskmodelcheckanalysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskmodelcheckanalysisValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling riskmodelcheckanalysis(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling riskmodelcheckanalysis(Async)");
        }
        

        okhttp3.Call localVarCall = riskmodelcheckanalysisCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Check the status of the analysis of a specified risk assessment model
     * Allows the user to check the status of a risk assessment model as it is being processed.
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model whose analysis status has to be returned. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void riskmodelcheckanalysis(String token, UUID id) throws ApiException {
        riskmodelcheckanalysisWithHttpInfo(token, id);
    }

    /**
     * Check the status of the analysis of a specified risk assessment model
     * Allows the user to check the status of a risk assessment model as it is being processed.
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model whose analysis status has to be returned. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> riskmodelcheckanalysisWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = riskmodelcheckanalysisValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check the status of the analysis of a specified risk assessment model (asynchronously)
     * Allows the user to check the status of a risk assessment model as it is being processed.
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model whose analysis status has to be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodelcheckanalysisAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskmodelcheckanalysisValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskmodeldelete
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodeldeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/riskmodeldelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskmodeldeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling riskmodeldelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling riskmodeldelete(Async)");
        }
        

        okhttp3.Call localVarCall = riskmodeldeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a risk assessment model
     * Allows the user to delete a previously created risk assessment model.
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void riskmodeldelete(String token, UUID id) throws ApiException {
        riskmodeldeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a risk assessment model
     * Allows the user to delete a previously created risk assessment model.
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> riskmodeldeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = riskmodeldeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a risk assessment model (asynchronously)
     * Allows the user to delete a previously created risk assessment model.
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodeldeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskmodeldeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskmodelget
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodelgetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/riskmodelget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskmodelgetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling riskmodelget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling riskmodelget(Async)");
        }
        

        okhttp3.Call localVarCall = riskmodelgetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View details of a risk assessment model
     * Allows the user to view an individual risk assessment model and its details.
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void riskmodelget(String token, UUID id) throws ApiException {
        riskmodelgetWithHttpInfo(token, id);
    }

    /**
     * View details of a risk assessment model
     * Allows the user to view an individual risk assessment model and its details.
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> riskmodelgetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = riskmodelgetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a risk assessment model (asynchronously)
     * Allows the user to view an individual risk assessment model and its details.
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodelgetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskmodelgetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskmodelgetscore
     * @param token The authentication token. (required)
     * @param userid The id of the user to get the risk score. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodelgetscoreCall(String token, UUID userid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/riskmodelgetscore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskmodelgetscoreValidateBeforeCall(String token, UUID userid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling riskmodelgetscore(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling riskmodelgetscore(Async)");
        }
        

        okhttp3.Call localVarCall = riskmodelgetscoreCall(token, userid, _callback);
        return localVarCall;

    }

    /**
     * View the risk score for a specific user
     * Allows the user to view the risk score of another user.
     * @param token The authentication token. (required)
     * @param userid The id of the user to get the risk score. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void riskmodelgetscore(String token, UUID userid) throws ApiException {
        riskmodelgetscoreWithHttpInfo(token, userid);
    }

    /**
     * View the risk score for a specific user
     * Allows the user to view the risk score of another user.
     * @param token The authentication token. (required)
     * @param userid The id of the user to get the risk score. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> riskmodelgetscoreWithHttpInfo(String token, UUID userid) throws ApiException {
        okhttp3.Call localVarCall = riskmodelgetscoreValidateBeforeCall(token, userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the risk score for a specific user (asynchronously)
     * Allows the user to view the risk score of another user.
     * @param token The authentication token. (required)
     * @param userid The id of the user to get the risk score. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodelgetscoreAsync(String token, UUID userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskmodelgetscoreValidateBeforeCall(token, userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskmodellist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodellistCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/riskmodellist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskmodellistValidateBeforeCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling riskmodellist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling riskmodellist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling riskmodellist(Async)");
        }
        

        okhttp3.Call localVarCall = riskmodellistCall(token, from, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of risk assessment models
     * Allows the user to view the full list of risk assessment models.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void riskmodellist(String token, Integer from, Integer count) throws ApiException {
        riskmodellistWithHttpInfo(token, from, count);
    }

    /**
     * View a list of risk assessment models
     * Allows the user to view the full list of risk assessment models.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> riskmodellistWithHttpInfo(String token, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = riskmodellistValidateBeforeCall(token, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of risk assessment models (asynchronously)
     * Allows the user to view the full list of risk assessment models.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodellistAsync(String token, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskmodellistValidateBeforeCall(token, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskmodelpredict
     * @param token The authentication token. (required)
     * @param id The id of the assessment model to use in order to predict risk. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodelpredictCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/riskmodelpredict";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskmodelpredictValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling riskmodelpredict(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling riskmodelpredict(Async)");
        }
        

        okhttp3.Call localVarCall = riskmodelpredictCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Predict risk based on an assessment model
     * Allows a user to process a risk prediction from a risk assessment model that has processed.
     * @param token The authentication token. (required)
     * @param id The id of the assessment model to use in order to predict risk. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void riskmodelpredict(String token, UUID id) throws ApiException {
        riskmodelpredictWithHttpInfo(token, id);
    }

    /**
     * Predict risk based on an assessment model
     * Allows a user to process a risk prediction from a risk assessment model that has processed.
     * @param token The authentication token. (required)
     * @param id The id of the assessment model to use in order to predict risk. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> riskmodelpredictWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = riskmodelpredictValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Predict risk based on an assessment model (asynchronously)
     * Allows a user to process a risk prediction from a risk assessment model that has processed.
     * @param token The authentication token. (required)
     * @param id The id of the assessment model to use in order to predict risk. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodelpredictAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskmodelpredictValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskmodelprocess
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model to process. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodelprocessCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/riskmodelprocess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskmodelprocessValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling riskmodelprocess(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling riskmodelprocess(Async)");
        }
        

        okhttp3.Call localVarCall = riskmodelprocessCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Process a risk assessment model
     * Allows the user to process a risk assessment model once it has been created.
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model to process. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void riskmodelprocess(String token, UUID id) throws ApiException {
        riskmodelprocessWithHttpInfo(token, id);
    }

    /**
     * Process a risk assessment model
     * Allows the user to process a risk assessment model once it has been created.
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model to process. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> riskmodelprocessWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = riskmodelprocessValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Process a risk assessment model (asynchronously)
     * Allows the user to process a risk assessment model once it has been created.
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model to process. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodelprocessAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskmodelprocessValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskmodelrefresh
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model whose information has to be refreshed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodelrefreshCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/riskmodelrefresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskmodelrefreshValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling riskmodelrefresh(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling riskmodelrefresh(Async)");
        }
        

        okhttp3.Call localVarCall = riskmodelrefreshCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Refresh the information used in a risk assessment model
     * Allows the user to refresh a risk assessment model.
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model whose information has to be refreshed. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void riskmodelrefresh(String token, UUID id) throws ApiException {
        riskmodelrefreshWithHttpInfo(token, id);
    }

    /**
     * Refresh the information used in a risk assessment model
     * Allows the user to refresh a risk assessment model.
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model whose information has to be refreshed. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> riskmodelrefreshWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = riskmodelrefreshValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Refresh the information used in a risk assessment model (asynchronously)
     * Allows the user to refresh a risk assessment model.
     * @param token The authentication token. (required)
     * @param id The id of the risk assessment model whose information has to be refreshed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodelrefreshAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskmodelrefreshValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskmodelsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodelsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/riskmodelsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskmodelsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = riskmodelsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a risk assessment model
     * Allows the user to create or edit a risk assessment model.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void riskmodelsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        riskmodelsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a risk assessment model
     * Allows the user to create or edit a risk assessment model.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> riskmodelsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = riskmodelsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a risk assessment model (asynchronously)
     * Allows the user to create or edit a risk assessment model.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodelsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskmodelsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskmodeltermprecedences
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodeltermprecedencesCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/riskmodeltermprecedences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskmodeltermprecedencesValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling riskmodeltermprecedences(Async)");
        }
        

        okhttp3.Call localVarCall = riskmodeltermprecedencesCall(token, _callback);
        return localVarCall;

    }

    /**
     * View all default term precedences
     * Allows the user to view the default term precedences used in a model.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void riskmodeltermprecedences(String token) throws ApiException {
        riskmodeltermprecedencesWithHttpInfo(token);
    }

    /**
     * View all default term precedences
     * Allows the user to view the default term precedences used in a model.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> riskmodeltermprecedencesWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = riskmodeltermprecedencesValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all default term precedences (asynchronously)
     * Allows the user to view the default term precedences used in a model.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskmodeltermprecedencesAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskmodeltermprecedencesValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rolelist
     * @param token The authentication token. (required)
     * @param name Filter by name of the role. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolelistCall(String token, String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rolelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rolelistValidateBeforeCall(String token, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling rolelist(Async)");
        }
        

        okhttp3.Call localVarCall = rolelistCall(token, name, _callback);
        return localVarCall;

    }

    /**
     * Show a list of roles
     * 
     * @param token The authentication token. (required)
     * @param name Filter by name of the role. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void rolelist(String token, String name) throws ApiException {
        rolelistWithHttpInfo(token, name);
    }

    /**
     * Show a list of roles
     * 
     * @param token The authentication token. (required)
     * @param name Filter by name of the role. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rolelistWithHttpInfo(String token, String name) throws ApiException {
        okhttp3.Call localVarCall = rolelistValidateBeforeCall(token, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Show a list of roles (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param name Filter by name of the role. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolelistAsync(String token, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rolelistValidateBeforeCall(token, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruledelete
     * @param token The authentication token. (required)
     * @param id The id of the rule to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruledeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ruledelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruledeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling ruledelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ruledelete(Async)");
        }
        

        okhttp3.Call localVarCall = ruledeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a rule
     * Allows the user to delete an existing rule.
     * @param token The authentication token. (required)
     * @param id The id of the rule to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ruledelete(String token, UUID id) throws ApiException {
        ruledeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a rule
     * Allows the user to delete an existing rule.
     * @param token The authentication token. (required)
     * @param id The id of the rule to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ruledeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = ruledeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a rule (asynchronously)
     * Allows the user to delete an existing rule.
     * @param token The authentication token. (required)
     * @param id The id of the rule to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruledeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruledeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleget
     * @param token The authentication token. (required)
     * @param id The id of the rule to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ruleget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulegetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling ruleget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ruleget(Async)");
        }
        

        okhttp3.Call localVarCall = rulegetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View details of a rule
     * Allows the user to view an individual rule and its details.
     * @param token The authentication token. (required)
     * @param id The id of the rule to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ruleget(String token, UUID id) throws ApiException {
        rulegetWithHttpInfo(token, id);
    }

    /**
     * View details of a rule
     * Allows the user to view an individual rule and its details.
     * @param token The authentication token. (required)
     * @param id The id of the rule to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rulegetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = rulegetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a rule (asynchronously)
     * Allows the user to view an individual rule and its details.
     * @param token The authentication token. (required)
     * @param id The id of the rule to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulegetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulegeteventtype
     * @param token The authentication token. (required)
     * @param event The name of the event to refresh. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegeteventtypeCall(String token, String event, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulegeteventtype";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulegeteventtypeValidateBeforeCall(String token, String event, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling rulegeteventtype(Async)");
        }
        
        // verify the required parameter 'event' is set
        if (event == null) {
            throw new ApiException("Missing the required parameter 'event' when calling rulegeteventtype(Async)");
        }
        

        okhttp3.Call localVarCall = rulegeteventtypeCall(token, event, _callback);
        return localVarCall;

    }

    /**
     * View details of a rule event type
     * Allows the user to view the trigger and its available conditions for the rule.
     * @param token The authentication token. (required)
     * @param event The name of the event to refresh. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void rulegeteventtype(String token, String event) throws ApiException {
        rulegeteventtypeWithHttpInfo(token, event);
    }

    /**
     * View details of a rule event type
     * Allows the user to view the trigger and its available conditions for the rule.
     * @param token The authentication token. (required)
     * @param event The name of the event to refresh. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rulegeteventtypeWithHttpInfo(String token, String event) throws ApiException {
        okhttp3.Call localVarCall = rulegeteventtypeValidateBeforeCall(token, event, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a rule event type (asynchronously)
     * Allows the user to view the trigger and its available conditions for the rule.
     * @param token The authentication token. (required)
     * @param event The name of the event to refresh. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulegeteventtypeAsync(String token, String event, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulegeteventtypeValidateBeforeCall(token, event, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulelist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulelistCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulelistValidateBeforeCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling rulelist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling rulelist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling rulelist(Async)");
        }
        

        okhttp3.Call localVarCall = rulelistCall(token, from, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of user rules
     * Allows the user to view the list of all rules.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void rulelist(String token, Integer from, Integer count) throws ApiException {
        rulelistWithHttpInfo(token, from, count);
    }

    /**
     * View a list of user rules
     * Allows the user to view the list of all rules.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rulelistWithHttpInfo(String token, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = rulelistValidateBeforeCall(token, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of user rules (asynchronously)
     * Allows the user to view the list of all rules.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulelistAsync(String token, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulelistValidateBeforeCall(token, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulelistactions
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulelistactionsCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulelistactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulelistactionsValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling rulelistactions(Async)");
        }
        

        okhttp3.Call localVarCall = rulelistactionsCall(token, _callback);
        return localVarCall;

    }

    /**
     * View a list of rule actions available
     * Allows the user to view all the available rule actions.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void rulelistactions(String token) throws ApiException {
        rulelistactionsWithHttpInfo(token);
    }

    /**
     * View a list of rule actions available
     * Allows the user to view all the available rule actions.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rulelistactionsWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = rulelistactionsValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of rule actions available (asynchronously)
     * Allows the user to view all the available rule actions.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulelistactionsAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulelistactionsValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulelisteventtypes
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulelisteventtypesCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulelisteventtypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulelisteventtypesValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling rulelisteventtypes(Async)");
        }
        

        okhttp3.Call localVarCall = rulelisteventtypesCall(token, _callback);
        return localVarCall;

    }

    /**
     * View a list of rule event types
     * Allows the user to view a list of available triggers for rules.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void rulelisteventtypes(String token) throws ApiException {
        rulelisteventtypesWithHttpInfo(token);
    }

    /**
     * View a list of rule event types
     * Allows the user to view a list of available triggers for rules.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rulelisteventtypesWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = rulelisteventtypesValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of rule event types (asynchronously)
     * Allows the user to view a list of available triggers for rules.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulelisteventtypesAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulelisteventtypesValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulelisthttprequests
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param failed If true only failed requests will be returned (optional)
     * @param status The http status to filter the requests (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulelisthttprequestsCall(String token, Integer from, Integer count, Boolean failed, Integer status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulelisthttprequests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (failed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("failed", failed));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulelisthttprequestsValidateBeforeCall(String token, Integer from, Integer count, Boolean failed, Integer status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling rulelisthttprequests(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling rulelisthttprequests(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling rulelisthttprequests(Async)");
        }
        

        okhttp3.Call localVarCall = rulelisthttprequestsCall(token, from, count, failed, status, _callback);
        return localVarCall;

    }

    /**
     * View all the http requests sent as a result of a rule
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param failed If true only failed requests will be returned (optional)
     * @param status The http status to filter the requests (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void rulelisthttprequests(String token, Integer from, Integer count, Boolean failed, Integer status) throws ApiException {
        rulelisthttprequestsWithHttpInfo(token, from, count, failed, status);
    }

    /**
     * View all the http requests sent as a result of a rule
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param failed If true only failed requests will be returned (optional)
     * @param status The http status to filter the requests (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rulelisthttprequestsWithHttpInfo(String token, Integer from, Integer count, Boolean failed, Integer status) throws ApiException {
        okhttp3.Call localVarCall = rulelisthttprequestsValidateBeforeCall(token, from, count, failed, status, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all the http requests sent as a result of a rule (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param failed If true only failed requests will be returned (optional)
     * @param status The http status to filter the requests (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulelisthttprequestsAsync(String token, Integer from, Integer count, Boolean failed, Integer status, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulelisthttprequestsValidateBeforeCall(token, from, count, failed, status, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulesave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/rulesave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulesaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = rulesaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a rule
     * Allows the user to create or edit a rule.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void rulesave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        rulesaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a rule
     * Allows the user to create or edit a rule.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rulesaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = rulesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a rule (asynchronously)
     * Allows the user to create or edit a rule.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduledelete
     * @param token The authentication token. (required)
     * @param scheduleid The id of the schedule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduledeleteCall(String token, UUID scheduleid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduledelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (scheduleid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduleid", scheduleid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduledeleteValidateBeforeCall(String token, UUID scheduleid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling scheduledelete(Async)");
        }
        
        // verify the required parameter 'scheduleid' is set
        if (scheduleid == null) {
            throw new ApiException("Missing the required parameter 'scheduleid' when calling scheduledelete(Async)");
        }
        

        okhttp3.Call localVarCall = scheduledeleteCall(token, scheduleid, _callback);
        return localVarCall;

    }

    /**
     * Delete a schedule slot
     * Allows the user to delete a schedule slot from another user.
     * @param token The authentication token. (required)
     * @param scheduleid The id of the schedule. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduledelete(String token, UUID scheduleid) throws ApiException {
        scheduledeleteWithHttpInfo(token, scheduleid);
    }

    /**
     * Delete a schedule slot
     * Allows the user to delete a schedule slot from another user.
     * @param token The authentication token. (required)
     * @param scheduleid The id of the schedule. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduledeleteWithHttpInfo(String token, UUID scheduleid) throws ApiException {
        okhttp3.Call localVarCall = scheduledeleteValidateBeforeCall(token, scheduleid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a schedule slot (asynchronously)
     * Allows the user to delete a schedule slot from another user.
     * @param token The authentication token. (required)
     * @param scheduleid The id of the schedule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduledeleteAsync(String token, UUID scheduleid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduledeleteValidateBeforeCall(token, scheduleid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduledeletemine
     * @param token The authentication token. (required)
     * @param scheduleid The id of the schedule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduledeletemineCall(String token, UUID scheduleid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduledeletemine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (scheduleid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduleid", scheduleid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduledeletemineValidateBeforeCall(String token, UUID scheduleid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling scheduledeletemine(Async)");
        }
        
        // verify the required parameter 'scheduleid' is set
        if (scheduleid == null) {
            throw new ApiException("Missing the required parameter 'scheduleid' when calling scheduledeletemine(Async)");
        }
        

        okhttp3.Call localVarCall = scheduledeletemineCall(token, scheduleid, _callback);
        return localVarCall;

    }

    /**
     * Delete a specific block from a user&#39;s own schedule
     * Allows the user to delete a schedule block from their own availability.
     * @param token The authentication token. (required)
     * @param scheduleid The id of the schedule. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduledeletemine(String token, UUID scheduleid) throws ApiException {
        scheduledeletemineWithHttpInfo(token, scheduleid);
    }

    /**
     * Delete a specific block from a user&#39;s own schedule
     * Allows the user to delete a schedule block from their own availability.
     * @param token The authentication token. (required)
     * @param scheduleid The id of the schedule. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduledeletemineWithHttpInfo(String token, UUID scheduleid) throws ApiException {
        okhttp3.Call localVarCall = scheduledeletemineValidateBeforeCall(token, scheduleid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a specific block from a user&#39;s own schedule (asynchronously)
     * Allows the user to delete a schedule block from their own availability.
     * @param token The authentication token. (required)
     * @param scheduleid The id of the schedule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduledeletemineAsync(String token, UUID scheduleid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduledeletemineValidateBeforeCall(token, scheduleid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleenable
     * @param token The authentication token. (required)
     * @param userid The id of the user to enable or disable the schedule. (required)
     * @param enable True to enable schedules, false to disable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleenableCall(String token, UUID userid, Boolean enable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduleenable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (enable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enable", enable));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleenableValidateBeforeCall(String token, UUID userid, Boolean enable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling scheduleenable(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling scheduleenable(Async)");
        }
        
        // verify the required parameter 'enable' is set
        if (enable == null) {
            throw new ApiException("Missing the required parameter 'enable' when calling scheduleenable(Async)");
        }
        

        okhttp3.Call localVarCall = scheduleenableCall(token, userid, enable, _callback);
        return localVarCall;

    }

    /**
     * Enable or disable the schedule for a specific person
     * Allows the user to enable or disable a schedule for another user.
     * @param token The authentication token. (required)
     * @param userid The id of the user to enable or disable the schedule. (required)
     * @param enable True to enable schedules, false to disable. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleenable(String token, UUID userid, Boolean enable) throws ApiException {
        scheduleenableWithHttpInfo(token, userid, enable);
    }

    /**
     * Enable or disable the schedule for a specific person
     * Allows the user to enable or disable a schedule for another user.
     * @param token The authentication token. (required)
     * @param userid The id of the user to enable or disable the schedule. (required)
     * @param enable True to enable schedules, false to disable. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleenableWithHttpInfo(String token, UUID userid, Boolean enable) throws ApiException {
        okhttp3.Call localVarCall = scheduleenableValidateBeforeCall(token, userid, enable, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enable or disable the schedule for a specific person (asynchronously)
     * Allows the user to enable or disable a schedule for another user.
     * @param token The authentication token. (required)
     * @param userid The id of the user to enable or disable the schedule. (required)
     * @param enable True to enable schedules, false to disable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleenableAsync(String token, UUID userid, Boolean enable, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleenableValidateBeforeCall(token, userid, enable, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleenablemine
     * @param token The authentication token. (required)
     * @param enable True to enable schedules, false to disable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleenablemineCall(String token, Boolean enable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduleenablemine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (enable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enable", enable));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleenablemineValidateBeforeCall(String token, Boolean enable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling scheduleenablemine(Async)");
        }
        
        // verify the required parameter 'enable' is set
        if (enable == null) {
            throw new ApiException("Missing the required parameter 'enable' when calling scheduleenablemine(Async)");
        }
        

        okhttp3.Call localVarCall = scheduleenablemineCall(token, enable, _callback);
        return localVarCall;

    }

    /**
     * Enable or disable current user&#39;s schedule
     * Allows the user to enable or disable a schedule for himself.
     * @param token The authentication token. (required)
     * @param enable True to enable schedules, false to disable. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleenablemine(String token, Boolean enable) throws ApiException {
        scheduleenablemineWithHttpInfo(token, enable);
    }

    /**
     * Enable or disable current user&#39;s schedule
     * Allows the user to enable or disable a schedule for himself.
     * @param token The authentication token. (required)
     * @param enable True to enable schedules, false to disable. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleenablemineWithHttpInfo(String token, Boolean enable) throws ApiException {
        okhttp3.Call localVarCall = scheduleenablemineValidateBeforeCall(token, enable, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enable or disable current user&#39;s schedule (asynchronously)
     * Allows the user to enable or disable a schedule for himself.
     * @param token The authentication token. (required)
     * @param enable True to enable schedules, false to disable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleenablemineAsync(String token, Boolean enable, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleenablemineValidateBeforeCall(token, enable, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulefindallstaffslots
     * @param token The authentication token. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param staffid The id of the staff to filter by. (optional)
     * @param serviceids CSV list of the service Ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the location to filter by. (optional)
     * @param staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param availablefor The specific availability type to filter by. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulefindallstaffslotsCall(String token, OffsetDateTime starttime, OffsetDateTime endtime, UUID staffid, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedulefindallstaffslots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (starttime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starttime", starttime));
        }

        if (endtime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endtime", endtime));
        }

        if (staffid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffid", staffid));
        }

        if (serviceids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceids", serviceids));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (staffroleids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffroleids", staffroleids));
        }

        if (availablefor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availablefor", availablefor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulefindallstaffslotsValidateBeforeCall(String token, OffsetDateTime starttime, OffsetDateTime endtime, UUID staffid, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling schedulefindallstaffslots(Async)");
        }
        
        // verify the required parameter 'starttime' is set
        if (starttime == null) {
            throw new ApiException("Missing the required parameter 'starttime' when calling schedulefindallstaffslots(Async)");
        }
        
        // verify the required parameter 'endtime' is set
        if (endtime == null) {
            throw new ApiException("Missing the required parameter 'endtime' when calling schedulefindallstaffslots(Async)");
        }
        

        okhttp3.Call localVarCall = schedulefindallstaffslotsCall(token, starttime, endtime, staffid, serviceids, eventid, locationid, staffroleids, availablefor, _callback);
        return localVarCall;

    }

    /**
     * Search available schedule slots by service, event, date
     * Allows users to search available slots.
     * @param token The authentication token. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param staffid The id of the staff to filter by. (optional)
     * @param serviceids CSV list of the service Ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the location to filter by. (optional)
     * @param staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param availablefor The specific availability type to filter by. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void schedulefindallstaffslots(String token, OffsetDateTime starttime, OffsetDateTime endtime, UUID staffid, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor) throws ApiException {
        schedulefindallstaffslotsWithHttpInfo(token, starttime, endtime, staffid, serviceids, eventid, locationid, staffroleids, availablefor);
    }

    /**
     * Search available schedule slots by service, event, date
     * Allows users to search available slots.
     * @param token The authentication token. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param staffid The id of the staff to filter by. (optional)
     * @param serviceids CSV list of the service Ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the location to filter by. (optional)
     * @param staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param availablefor The specific availability type to filter by. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> schedulefindallstaffslotsWithHttpInfo(String token, OffsetDateTime starttime, OffsetDateTime endtime, UUID staffid, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor) throws ApiException {
        okhttp3.Call localVarCall = schedulefindallstaffslotsValidateBeforeCall(token, starttime, endtime, staffid, serviceids, eventid, locationid, staffroleids, availablefor, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search available schedule slots by service, event, date (asynchronously)
     * Allows users to search available slots.
     * @param token The authentication token. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param staffid The id of the staff to filter by. (optional)
     * @param serviceids CSV list of the service Ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the location to filter by. (optional)
     * @param staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param availablefor The specific availability type to filter by. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulefindallstaffslotsAsync(String token, OffsetDateTime starttime, OffsetDateTime endtime, UUID staffid, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulefindallstaffslotsValidateBeforeCall(token, starttime, endtime, staffid, serviceids, eventid, locationid, staffroleids, availablefor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulefindslots
     * @param token The authentication token. (required)
     * @param staffid The id of the staff to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param availablefor The specific availability type to filter by. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulefindslotsCall(String token, UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String availablefor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedulefindslots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (staffid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffid", staffid));
        }

        if (starttime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starttime", starttime));
        }

        if (endtime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endtime", endtime));
        }

        if (serviceids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceids", serviceids));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (availablefor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availablefor", availablefor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulefindslotsValidateBeforeCall(String token, UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String availablefor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling schedulefindslots(Async)");
        }
        
        // verify the required parameter 'staffid' is set
        if (staffid == null) {
            throw new ApiException("Missing the required parameter 'staffid' when calling schedulefindslots(Async)");
        }
        
        // verify the required parameter 'starttime' is set
        if (starttime == null) {
            throw new ApiException("Missing the required parameter 'starttime' when calling schedulefindslots(Async)");
        }
        
        // verify the required parameter 'endtime' is set
        if (endtime == null) {
            throw new ApiException("Missing the required parameter 'endtime' when calling schedulefindslots(Async)");
        }
        

        okhttp3.Call localVarCall = schedulefindslotsCall(token, staffid, starttime, endtime, serviceids, eventid, locationid, availablefor, _callback);
        return localVarCall;

    }

    /**
     * Search available schedule slots by service, event, date and/or staff
     * Allows users to search available slots when making appointments.
     * @param token The authentication token. (required)
     * @param staffid The id of the staff to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param availablefor The specific availability type to filter by. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void schedulefindslots(String token, UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String availablefor) throws ApiException {
        schedulefindslotsWithHttpInfo(token, staffid, starttime, endtime, serviceids, eventid, locationid, availablefor);
    }

    /**
     * Search available schedule slots by service, event, date and/or staff
     * Allows users to search available slots when making appointments.
     * @param token The authentication token. (required)
     * @param staffid The id of the staff to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param availablefor The specific availability type to filter by. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> schedulefindslotsWithHttpInfo(String token, UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String availablefor) throws ApiException {
        okhttp3.Call localVarCall = schedulefindslotsValidateBeforeCall(token, staffid, starttime, endtime, serviceids, eventid, locationid, availablefor, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search available schedule slots by service, event, date and/or staff (asynchronously)
     * Allows users to search available slots when making appointments.
     * @param token The authentication token. (required)
     * @param staffid The id of the staff to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param availablefor The specific availability type to filter by. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulefindslotsAsync(String token, UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String availablefor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulefindslotsValidateBeforeCall(token, staffid, starttime, endtime, serviceids, eventid, locationid, availablefor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulefindstaffavail
     * @param token The authentication token. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param availablefor Filter slots by a specific availability type. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulefindstaffavailCall(String token, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedulefindstaffavail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (serviceids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceids", serviceids));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (starttime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starttime", starttime));
        }

        if (endtime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endtime", endtime));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (staffroleids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffroleids", staffroleids));
        }

        if (availablefor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availablefor", availablefor));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulefindstaffavailValidateBeforeCall(String token, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling schedulefindstaffavail(Async)");
        }
        
        // verify the required parameter 'starttime' is set
        if (starttime == null) {
            throw new ApiException("Missing the required parameter 'starttime' when calling schedulefindstaffavail(Async)");
        }
        
        // verify the required parameter 'endtime' is set
        if (endtime == null) {
            throw new ApiException("Missing the required parameter 'endtime' when calling schedulefindstaffavail(Async)");
        }
        

        okhttp3.Call localVarCall = schedulefindstaffavailCall(token, starttime, endtime, serviceids, eventid, locationid, staffroleids, availablefor, photosize, _callback);
        return localVarCall;

    }

    /**
     * Search available staff members slots by service, event, and/or date
     * Allows users to search available staff.
     * @param token The authentication token. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param availablefor Filter slots by a specific availability type. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void schedulefindstaffavail(String token, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor, Integer photosize) throws ApiException {
        schedulefindstaffavailWithHttpInfo(token, starttime, endtime, serviceids, eventid, locationid, staffroleids, availablefor, photosize);
    }

    /**
     * Search available staff members slots by service, event, and/or date
     * Allows users to search available staff.
     * @param token The authentication token. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param availablefor Filter slots by a specific availability type. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> schedulefindstaffavailWithHttpInfo(String token, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = schedulefindstaffavailValidateBeforeCall(token, starttime, endtime, serviceids, eventid, locationid, staffroleids, availablefor, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search available staff members slots by service, event, and/or date (asynchronously)
     * Allows users to search available staff.
     * @param token The authentication token. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param availablefor Filter slots by a specific availability type. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulefindstaffavailAsync(String token, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulefindstaffavailValidateBeforeCall(token, starttime, endtime, serviceids, eventid, locationid, staffroleids, availablefor, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleget
     * @param token The authentication token. (required)
     * @param scheduleid The id of the schedule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulegetCall(String token, UUID scheduleid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduleget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (scheduleid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduleid", scheduleid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulegetValidateBeforeCall(String token, UUID scheduleid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling scheduleget(Async)");
        }
        
        // verify the required parameter 'scheduleid' is set
        if (scheduleid == null) {
            throw new ApiException("Missing the required parameter 'scheduleid' when calling scheduleget(Async)");
        }
        

        okhttp3.Call localVarCall = schedulegetCall(token, scheduleid, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of a specific schedule slot
     * Allows the user to view the details of schedule shifts for any user role that the user has permission to view.
     * @param token The authentication token. (required)
     * @param scheduleid The id of the schedule. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleget(String token, UUID scheduleid) throws ApiException {
        schedulegetWithHttpInfo(token, scheduleid);
    }

    /**
     * Search and view details of a specific schedule slot
     * Allows the user to view the details of schedule shifts for any user role that the user has permission to view.
     * @param token The authentication token. (required)
     * @param scheduleid The id of the schedule. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> schedulegetWithHttpInfo(String token, UUID scheduleid) throws ApiException {
        okhttp3.Call localVarCall = schedulegetValidateBeforeCall(token, scheduleid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of a specific schedule slot (asynchronously)
     * Allows the user to view the details of schedule shifts for any user role that the user has permission to view.
     * @param token The authentication token. (required)
     * @param scheduleid The id of the schedule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulegetAsync(String token, UUID scheduleid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulegetValidateBeforeCall(token, scheduleid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulegetmine
     * @param token The authentication token. (required)
     * @param scheduleid The id of the schedule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulegetmineCall(String token, UUID scheduleid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedulegetmine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (scheduleid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduleid", scheduleid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulegetmineValidateBeforeCall(String token, UUID scheduleid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling schedulegetmine(Async)");
        }
        
        // verify the required parameter 'scheduleid' is set
        if (scheduleid == null) {
            throw new ApiException("Missing the required parameter 'scheduleid' when calling schedulegetmine(Async)");
        }
        

        okhttp3.Call localVarCall = schedulegetmineCall(token, scheduleid, _callback);
        return localVarCall;

    }

    /**
     * View details of a specific schedule block, for current user
     * Allows the user to view the details of their own schedule shifts.
     * @param token The authentication token. (required)
     * @param scheduleid The id of the schedule. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void schedulegetmine(String token, UUID scheduleid) throws ApiException {
        schedulegetmineWithHttpInfo(token, scheduleid);
    }

    /**
     * View details of a specific schedule block, for current user
     * Allows the user to view the details of their own schedule shifts.
     * @param token The authentication token. (required)
     * @param scheduleid The id of the schedule. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> schedulegetmineWithHttpInfo(String token, UUID scheduleid) throws ApiException {
        okhttp3.Call localVarCall = schedulegetmineValidateBeforeCall(token, scheduleid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a specific schedule block, for current user (asynchronously)
     * Allows the user to view the details of their own schedule shifts.
     * @param token The authentication token. (required)
     * @param scheduleid The id of the schedule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulegetmineAsync(String token, UUID scheduleid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulegetmineValidateBeforeCall(token, scheduleid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulegetstaff
     * @param token The authentication token. (required)
     * @param userid The id of the user to get info. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulegetstaffCall(String token, UUID userid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedulegetstaff";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulegetstaffValidateBeforeCall(String token, UUID userid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling schedulegetstaff(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling schedulegetstaff(Async)");
        }
        

        okhttp3.Call localVarCall = schedulegetstaffCall(token, userid, _callback);
        return localVarCall;

    }

    /**
     * View a list of schedule information of a specified person
     * Allows the user to view the schedule shifts for user roles that the user has permission to access.
     * @param token The authentication token. (required)
     * @param userid The id of the user to get info. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void schedulegetstaff(String token, UUID userid) throws ApiException {
        schedulegetstaffWithHttpInfo(token, userid);
    }

    /**
     * View a list of schedule information of a specified person
     * Allows the user to view the schedule shifts for user roles that the user has permission to access.
     * @param token The authentication token. (required)
     * @param userid The id of the user to get info. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> schedulegetstaffWithHttpInfo(String token, UUID userid) throws ApiException {
        okhttp3.Call localVarCall = schedulegetstaffValidateBeforeCall(token, userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of schedule information of a specified person (asynchronously)
     * Allows the user to view the schedule shifts for user roles that the user has permission to access.
     * @param token The authentication token. (required)
     * @param userid The id of the user to get info. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulegetstaffAsync(String token, UUID userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulegetstaffValidateBeforeCall(token, userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulegetstaffmine
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulegetstaffmineCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedulegetstaffmine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulegetstaffmineValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling schedulegetstaffmine(Async)");
        }
        

        okhttp3.Call localVarCall = schedulegetstaffmineCall(token, _callback);
        return localVarCall;

    }

    /**
     * View current user&#39;s schedule information
     * Allows the user to view their own schedule.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void schedulegetstaffmine(String token) throws ApiException {
        schedulegetstaffmineWithHttpInfo(token);
    }

    /**
     * View current user&#39;s schedule information
     * Allows the user to view their own schedule.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> schedulegetstaffmineWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = schedulegetstaffmineValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View current user&#39;s schedule information (asynchronously)
     * Allows the user to view their own schedule.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulegetstaffmineAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulegetstaffmineValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleintegrationdeleteitem
     * @param token The authentication token. (required)
     * @param thirdpartyid The third party id to search the schedule block / appointment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleintegrationdeleteitemCall(String token, String thirdpartyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduleintegrationdeleteitem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (thirdpartyid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thirdpartyid", thirdpartyid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleintegrationdeleteitemValidateBeforeCall(String token, String thirdpartyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling scheduleintegrationdeleteitem(Async)");
        }
        
        // verify the required parameter 'thirdpartyid' is set
        if (thirdpartyid == null) {
            throw new ApiException("Missing the required parameter 'thirdpartyid' when calling scheduleintegrationdeleteitem(Async)");
        }
        

        okhttp3.Call localVarCall = scheduleintegrationdeleteitemCall(token, thirdpartyid, _callback);
        return localVarCall;

    }

    /**
     * Delete a schedule item looking up by a third party ID
     * 
     * @param token The authentication token. (required)
     * @param thirdpartyid The third party id to search the schedule block / appointment. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleintegrationdeleteitem(String token, String thirdpartyid) throws ApiException {
        scheduleintegrationdeleteitemWithHttpInfo(token, thirdpartyid);
    }

    /**
     * Delete a schedule item looking up by a third party ID
     * 
     * @param token The authentication token. (required)
     * @param thirdpartyid The third party id to search the schedule block / appointment. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleintegrationdeleteitemWithHttpInfo(String token, String thirdpartyid) throws ApiException {
        okhttp3.Call localVarCall = scheduleintegrationdeleteitemValidateBeforeCall(token, thirdpartyid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a schedule item looking up by a third party ID (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param thirdpartyid The third party id to search the schedule block / appointment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleintegrationdeleteitemAsync(String token, String thirdpartyid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleintegrationdeleteitemValidateBeforeCall(token, thirdpartyid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleintegrationdeleteitemsbymasterid
     * @param token The authentication token. (required)
     * @param thirdpartymasterid The third party master id to search the schedule items. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleintegrationdeleteitemsbymasteridCall(String token, String thirdpartymasterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduleintegrationdeleteitemsbymasterid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (thirdpartymasterid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thirdpartymasterid", thirdpartymasterid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleintegrationdeleteitemsbymasteridValidateBeforeCall(String token, String thirdpartymasterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling scheduleintegrationdeleteitemsbymasterid(Async)");
        }
        
        // verify the required parameter 'thirdpartymasterid' is set
        if (thirdpartymasterid == null) {
            throw new ApiException("Missing the required parameter 'thirdpartymasterid' when calling scheduleintegrationdeleteitemsbymasterid(Async)");
        }
        

        okhttp3.Call localVarCall = scheduleintegrationdeleteitemsbymasteridCall(token, thirdpartymasterid, _callback);
        return localVarCall;

    }

    /**
     * Delete multiple schedule items looking up by a third party master ID
     * 
     * @param token The authentication token. (required)
     * @param thirdpartymasterid The third party master id to search the schedule items. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleintegrationdeleteitemsbymasterid(String token, String thirdpartymasterid) throws ApiException {
        scheduleintegrationdeleteitemsbymasteridWithHttpInfo(token, thirdpartymasterid);
    }

    /**
     * Delete multiple schedule items looking up by a third party master ID
     * 
     * @param token The authentication token. (required)
     * @param thirdpartymasterid The third party master id to search the schedule items. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleintegrationdeleteitemsbymasteridWithHttpInfo(String token, String thirdpartymasterid) throws ApiException {
        okhttp3.Call localVarCall = scheduleintegrationdeleteitemsbymasteridValidateBeforeCall(token, thirdpartymasterid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete multiple schedule items looking up by a third party master ID (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param thirdpartymasterid The third party master id to search the schedule items. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleintegrationdeleteitemsbymasteridAsync(String token, String thirdpartymasterid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleintegrationdeleteitemsbymasteridValidateBeforeCall(token, thirdpartymasterid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleintegrationgetitem
     * @param token The authentication token. (required)
     * @param thirdpartyid The third party id to search for the schedule item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleintegrationgetitemCall(String token, String thirdpartyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduleintegrationgetitem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (thirdpartyid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thirdpartyid", thirdpartyid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleintegrationgetitemValidateBeforeCall(String token, String thirdpartyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling scheduleintegrationgetitem(Async)");
        }
        
        // verify the required parameter 'thirdpartyid' is set
        if (thirdpartyid == null) {
            throw new ApiException("Missing the required parameter 'thirdpartyid' when calling scheduleintegrationgetitem(Async)");
        }
        

        okhttp3.Call localVarCall = scheduleintegrationgetitemCall(token, thirdpartyid, _callback);
        return localVarCall;

    }

    /**
     * Get a schedule item looking up by a third party ID
     * 
     * @param token The authentication token. (required)
     * @param thirdpartyid The third party id to search for the schedule item. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleintegrationgetitem(String token, String thirdpartyid) throws ApiException {
        scheduleintegrationgetitemWithHttpInfo(token, thirdpartyid);
    }

    /**
     * Get a schedule item looking up by a third party ID
     * 
     * @param token The authentication token. (required)
     * @param thirdpartyid The third party id to search for the schedule item. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleintegrationgetitemWithHttpInfo(String token, String thirdpartyid) throws ApiException {
        okhttp3.Call localVarCall = scheduleintegrationgetitemValidateBeforeCall(token, thirdpartyid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a schedule item looking up by a third party ID (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param thirdpartyid The third party id to search for the schedule item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleintegrationgetitemAsync(String token, String thirdpartyid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleintegrationgetitemValidateBeforeCall(token, thirdpartyid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleintegrationsaveitem
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleintegrationsaveitemCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/scheduleintegrationsaveitem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleintegrationsaveitemValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = scheduleintegrationsaveitemCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Save a schedule item looking up by a third party ID
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleintegrationsaveitem(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        scheduleintegrationsaveitemWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Save a schedule item looking up by a third party ID
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleintegrationsaveitemWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = scheduleintegrationsaveitemValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save a schedule item looking up by a third party ID (asynchronously)
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleintegrationsaveitemAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleintegrationsaveitemValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleintegrationsetid
     * @param token The authentication token. (required)
     * @param id The id of the schedule block / appointment. (required)
     * @param thirdpartyid The 3rd party ID to set. (required)
     * @param thirdpartymasterid The 3rd party master ID to set (useful to handle recurring items). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleintegrationsetidCall(String token, UUID id, String thirdpartyid, String thirdpartymasterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduleintegrationsetid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (thirdpartyid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thirdpartyid", thirdpartyid));
        }

        if (thirdpartymasterid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thirdpartymasterid", thirdpartymasterid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleintegrationsetidValidateBeforeCall(String token, UUID id, String thirdpartyid, String thirdpartymasterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling scheduleintegrationsetid(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling scheduleintegrationsetid(Async)");
        }
        
        // verify the required parameter 'thirdpartyid' is set
        if (thirdpartyid == null) {
            throw new ApiException("Missing the required parameter 'thirdpartyid' when calling scheduleintegrationsetid(Async)");
        }
        

        okhttp3.Call localVarCall = scheduleintegrationsetidCall(token, id, thirdpartyid, thirdpartymasterid, _callback);
        return localVarCall;

    }

    /**
     * Set a 3rd party ID on a specific schedule item
     * 
     * @param token The authentication token. (required)
     * @param id The id of the schedule block / appointment. (required)
     * @param thirdpartyid The 3rd party ID to set. (required)
     * @param thirdpartymasterid The 3rd party master ID to set (useful to handle recurring items). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleintegrationsetid(String token, UUID id, String thirdpartyid, String thirdpartymasterid) throws ApiException {
        scheduleintegrationsetidWithHttpInfo(token, id, thirdpartyid, thirdpartymasterid);
    }

    /**
     * Set a 3rd party ID on a specific schedule item
     * 
     * @param token The authentication token. (required)
     * @param id The id of the schedule block / appointment. (required)
     * @param thirdpartyid The 3rd party ID to set. (required)
     * @param thirdpartymasterid The 3rd party master ID to set (useful to handle recurring items). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleintegrationsetidWithHttpInfo(String token, UUID id, String thirdpartyid, String thirdpartymasterid) throws ApiException {
        okhttp3.Call localVarCall = scheduleintegrationsetidValidateBeforeCall(token, id, thirdpartyid, thirdpartymasterid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set a 3rd party ID on a specific schedule item (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param id The id of the schedule block / appointment. (required)
     * @param thirdpartyid The 3rd party ID to set. (required)
     * @param thirdpartymasterid The 3rd party master ID to set (useful to handle recurring items). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleintegrationsetidAsync(String token, UUID id, String thirdpartyid, String thirdpartymasterid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleintegrationsetidValidateBeforeCall(token, id, thirdpartyid, thirdpartymasterid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulemyofftimes
     * @param token The authentication token. (required)
     * @param includedeleted If true the deleted offtimes are also returned. (optional)
     * @param onlyupcoming If true then only upcoming offtimes are returned. (optional)
     * @param modifiedafter If specified, only offtimes modified after the specified date will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulemyofftimesCall(String token, Boolean includedeleted, Boolean onlyupcoming, OffsetDateTime modifiedafter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedulemyofftimes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (includedeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includedeleted", includedeleted));
        }

        if (onlyupcoming != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyupcoming", onlyupcoming));
        }

        if (modifiedafter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedafter", modifiedafter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulemyofftimesValidateBeforeCall(String token, Boolean includedeleted, Boolean onlyupcoming, OffsetDateTime modifiedafter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling schedulemyofftimes(Async)");
        }
        

        okhttp3.Call localVarCall = schedulemyofftimesCall(token, includedeleted, onlyupcoming, modifiedafter, _callback);
        return localVarCall;

    }

    /**
     * View current user&#39;s schedule exceptions
     * Allows the user to view their own schedule exceptions.
     * @param token The authentication token. (required)
     * @param includedeleted If true the deleted offtimes are also returned. (optional)
     * @param onlyupcoming If true then only upcoming offtimes are returned. (optional)
     * @param modifiedafter If specified, only offtimes modified after the specified date will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void schedulemyofftimes(String token, Boolean includedeleted, Boolean onlyupcoming, OffsetDateTime modifiedafter) throws ApiException {
        schedulemyofftimesWithHttpInfo(token, includedeleted, onlyupcoming, modifiedafter);
    }

    /**
     * View current user&#39;s schedule exceptions
     * Allows the user to view their own schedule exceptions.
     * @param token The authentication token. (required)
     * @param includedeleted If true the deleted offtimes are also returned. (optional)
     * @param onlyupcoming If true then only upcoming offtimes are returned. (optional)
     * @param modifiedafter If specified, only offtimes modified after the specified date will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> schedulemyofftimesWithHttpInfo(String token, Boolean includedeleted, Boolean onlyupcoming, OffsetDateTime modifiedafter) throws ApiException {
        okhttp3.Call localVarCall = schedulemyofftimesValidateBeforeCall(token, includedeleted, onlyupcoming, modifiedafter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View current user&#39;s schedule exceptions (asynchronously)
     * Allows the user to view their own schedule exceptions.
     * @param token The authentication token. (required)
     * @param includedeleted If true the deleted offtimes are also returned. (optional)
     * @param onlyupcoming If true then only upcoming offtimes are returned. (optional)
     * @param modifiedafter If specified, only offtimes modified after the specified date will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulemyofftimesAsync(String token, Boolean includedeleted, Boolean onlyupcoming, OffsetDateTime modifiedafter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulemyofftimesValidateBeforeCall(token, includedeleted, onlyupcoming, modifiedafter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/schedulesave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = schedulesaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a schedule slot
     * Allows the user to create or edit a schedule slot of another user.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void schedulesave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        schedulesaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a schedule slot
     * Allows the user to create or edit a schedule slot of another user.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> schedulesaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = schedulesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a schedule slot (asynchronously)
     * Allows the user to create or edit a schedule slot of another user.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulesavemine
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesavemineCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/schedulesavemine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulesavemineValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = schedulesavemineCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a block in current user&#39;s schedule
     * Allows the user to create or edit a schedule shift in their own availability.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void schedulesavemine(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        schedulesavemineWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a block in current user&#39;s schedule
     * Allows the user to create or edit a schedule shift in their own availability.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> schedulesavemineWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = schedulesavemineValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a block in current user&#39;s schedule (asynchronously)
     * Allows the user to create or edit a schedule shift in their own availability.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulesavemineAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulesavemineValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for search
     * @param token The authentication token. (required)
     * @param query The query to search for. (required)
     * @param page Current page to show, zero-based. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCall(String token, String query, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchValidateBeforeCall(String token, String query, Integer page, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling search(Async)");
        }
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling search(Async)");
        }
        

        okhttp3.Call localVarCall = searchCall(token, query, page, _callback);
        return localVarCall;

    }

    /**
     * Search
     * 
     * @param token The authentication token. (required)
     * @param query The query to search for. (required)
     * @param page Current page to show, zero-based. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void search(String token, String query, Integer page) throws ApiException {
        searchWithHttpInfo(token, query, page);
    }

    /**
     * Search
     * 
     * @param token The authentication token. (required)
     * @param query The query to search for. (required)
     * @param page Current page to show, zero-based. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchWithHttpInfo(String token, String query, Integer page) throws ApiException {
        okhttp3.Call localVarCall = searchValidateBeforeCall(token, query, page, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param query The query to search for. (required)
     * @param page Current page to show, zero-based. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAsync(String token, String query, Integer page, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchValidateBeforeCall(token, query, page, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchgetentities
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchgetentitiesCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/searchgetentities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchgetentitiesValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling searchgetentities(Async)");
        }
        

        okhttp3.Call localVarCall = searchgetentitiesCall(token, _callback);
        return localVarCall;

    }

    /**
     * Get the information of the entities that can be searched
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void searchgetentities(String token) throws ApiException {
        searchgetentitiesWithHttpInfo(token);
    }

    /**
     * Get the information of the entities that can be searched
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchgetentitiesWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = searchgetentitiesValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the information of the entities that can be searched (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchgetentitiesAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchgetentitiesValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityassesspermission
     * @param token The authentication token. (required)
     * @param commandname Name of the action or command to get the roles. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityassesspermissionCall(String token, String commandname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/securityassesspermission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (commandname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commandname", commandname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityassesspermissionValidateBeforeCall(String token, String commandname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling securityassesspermission(Async)");
        }
        
        // verify the required parameter 'commandname' is set
        if (commandname == null) {
            throw new ApiException("Missing the required parameter 'commandname' when calling securityassesspermission(Async)");
        }
        

        okhttp3.Call localVarCall = securityassesspermissionCall(token, commandname, _callback);
        return localVarCall;

    }

    /**
     * Returns the list of users for a specific permission
     * 
     * @param token The authentication token. (required)
     * @param commandname Name of the action or command to get the roles. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void securityassesspermission(String token, String commandname) throws ApiException {
        securityassesspermissionWithHttpInfo(token, commandname);
    }

    /**
     * Returns the list of users for a specific permission
     * 
     * @param token The authentication token. (required)
     * @param commandname Name of the action or command to get the roles. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> securityassesspermissionWithHttpInfo(String token, String commandname) throws ApiException {
        okhttp3.Call localVarCall = securityassesspermissionValidateBeforeCall(token, commandname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns the list of users for a specific permission (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param commandname Name of the action or command to get the roles. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityassesspermissionAsync(String token, String commandname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityassesspermissionValidateBeforeCall(token, commandname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityassessrole
     * @param token The authentication token. (required)
     * @param roleid Role ID to list the effective permissions. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityassessroleCall(String token, UUID roleid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/securityassessrole";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (roleid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roleid", roleid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityassessroleValidateBeforeCall(String token, UUID roleid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling securityassessrole(Async)");
        }
        
        // verify the required parameter 'roleid' is set
        if (roleid == null) {
            throw new ApiException("Missing the required parameter 'roleid' when calling securityassessrole(Async)");
        }
        

        okhttp3.Call localVarCall = securityassessroleCall(token, roleid, _callback);
        return localVarCall;

    }

    /**
     * Returns the list of permissions for a specific role
     * 
     * @param token The authentication token. (required)
     * @param roleid Role ID to list the effective permissions. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void securityassessrole(String token, UUID roleid) throws ApiException {
        securityassessroleWithHttpInfo(token, roleid);
    }

    /**
     * Returns the list of permissions for a specific role
     * 
     * @param token The authentication token. (required)
     * @param roleid Role ID to list the effective permissions. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> securityassessroleWithHttpInfo(String token, UUID roleid) throws ApiException {
        okhttp3.Call localVarCall = securityassessroleValidateBeforeCall(token, roleid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns the list of permissions for a specific role (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param roleid Role ID to list the effective permissions. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityassessroleAsync(String token, UUID roleid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityassessroleValidateBeforeCall(token, roleid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityassessscope
     * @param token The authentication token. (required)
     * @param locationid Location ID to list the users with that scope. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityassessscopeCall(String token, UUID locationid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/securityassessscope";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityassessscopeValidateBeforeCall(String token, UUID locationid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling securityassessscope(Async)");
        }
        

        okhttp3.Call localVarCall = securityassessscopeCall(token, locationid, _callback);
        return localVarCall;

    }

    /**
     * Returns the list of users for a specific user
     * 
     * @param token The authentication token. (required)
     * @param locationid Location ID to list the users with that scope. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void securityassessscope(String token, UUID locationid) throws ApiException {
        securityassessscopeWithHttpInfo(token, locationid);
    }

    /**
     * Returns the list of users for a specific user
     * 
     * @param token The authentication token. (required)
     * @param locationid Location ID to list the users with that scope. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> securityassessscopeWithHttpInfo(String token, UUID locationid) throws ApiException {
        okhttp3.Call localVarCall = securityassessscopeValidateBeforeCall(token, locationid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns the list of users for a specific user (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param locationid Location ID to list the users with that scope. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityassessscopeAsync(String token, UUID locationid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityassessscopeValidateBeforeCall(token, locationid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityassessuser
     * @param token The authentication token. (required)
     * @param userid User ID to list the effective permissions. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityassessuserCall(String token, UUID userid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/securityassessuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityassessuserValidateBeforeCall(String token, UUID userid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling securityassessuser(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling securityassessuser(Async)");
        }
        

        okhttp3.Call localVarCall = securityassessuserCall(token, userid, _callback);
        return localVarCall;

    }

    /**
     * Returns the list of permissions for a specific user
     * 
     * @param token The authentication token. (required)
     * @param userid User ID to list the effective permissions. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void securityassessuser(String token, UUID userid) throws ApiException {
        securityassessuserWithHttpInfo(token, userid);
    }

    /**
     * Returns the list of permissions for a specific user
     * 
     * @param token The authentication token. (required)
     * @param userid User ID to list the effective permissions. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> securityassessuserWithHttpInfo(String token, UUID userid) throws ApiException {
        okhttp3.Call localVarCall = securityassessuserValidateBeforeCall(token, userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns the list of permissions for a specific user (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param userid User ID to list the effective permissions. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityassessuserAsync(String token, UUID userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityassessuserValidateBeforeCall(token, userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for seminardelete
     * @param token The authentication token. (required)
     * @param id The id of the seminar to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seminardeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seminardelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seminardeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling seminardelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seminardelete(Async)");
        }
        

        okhttp3.Call localVarCall = seminardeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete an event
     * Allows the user to delete an existing event.
     * @param token The authentication token. (required)
     * @param id The id of the seminar to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void seminardelete(String token, UUID id) throws ApiException {
        seminardeleteWithHttpInfo(token, id);
    }

    /**
     * Delete an event
     * Allows the user to delete an existing event.
     * @param token The authentication token. (required)
     * @param id The id of the seminar to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> seminardeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = seminardeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an event (asynchronously)
     * Allows the user to delete an existing event.
     * @param token The authentication token. (required)
     * @param id The id of the seminar to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seminardeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = seminardeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for seminarget
     * @param token The authentication token. (required)
     * @param id The id of the seminar to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seminargetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seminarget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seminargetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling seminarget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seminarget(Async)");
        }
        

        okhttp3.Call localVarCall = seminargetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of a event
     * Allows the user to view a event and its details.
     * @param token The authentication token. (required)
     * @param id The id of the seminar to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void seminarget(String token, UUID id) throws ApiException {
        seminargetWithHttpInfo(token, id);
    }

    /**
     * Search and view details of a event
     * Allows the user to view a event and its details.
     * @param token The authentication token. (required)
     * @param id The id of the seminar to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> seminargetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = seminargetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of a event (asynchronously)
     * Allows the user to view a event and its details.
     * @param token The authentication token. (required)
     * @param id The id of the seminar to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seminargetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = seminargetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for seminarlist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false. (optional)
     * @param termid Id of the term to list the events. Null to list all events. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seminarlistCall(String token, String from, String count, Boolean summaryonly, UUID termid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seminarlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (summaryonly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summaryonly", summaryonly));
        }

        if (termid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termid", termid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seminarlistValidateBeforeCall(String token, String from, String count, Boolean summaryonly, UUID termid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling seminarlist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling seminarlist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling seminarlist(Async)");
        }
        

        okhttp3.Call localVarCall = seminarlistCall(token, from, count, summaryonly, termid, _callback);
        return localVarCall;

    }

    /**
     * View a list of events
     * Allows the user to view the full list of events in the past, present, and future.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false. (optional)
     * @param termid Id of the term to list the events. Null to list all events. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void seminarlist(String token, String from, String count, Boolean summaryonly, UUID termid) throws ApiException {
        seminarlistWithHttpInfo(token, from, count, summaryonly, termid);
    }

    /**
     * View a list of events
     * Allows the user to view the full list of events in the past, present, and future.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false. (optional)
     * @param termid Id of the term to list the events. Null to list all events. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> seminarlistWithHttpInfo(String token, String from, String count, Boolean summaryonly, UUID termid) throws ApiException {
        okhttp3.Call localVarCall = seminarlistValidateBeforeCall(token, from, count, summaryonly, termid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of events (asynchronously)
     * Allows the user to view the full list of events in the past, present, and future.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false. (optional)
     * @param termid Id of the term to list the events. Null to list all events. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seminarlistAsync(String token, String from, String count, Boolean summaryonly, UUID termid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = seminarlistValidateBeforeCall(token, from, count, summaryonly, termid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for seminarsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seminarsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/seminarsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seminarsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = seminarsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a event
     * Allows the user to create or edit a event.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void seminarsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        seminarsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a event
     * Allows the user to create or edit a event.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> seminarsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = seminarsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a event (asynchronously)
     * Allows the user to create or edit a event.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seminarsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = seminarsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceassignmentaddservice
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to add. (required)
     * @param locationid The id of the location. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceassignmentaddserviceCall(String token, UUID serviceid, UUID locationid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/serviceassignmentaddservice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (serviceid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceid", serviceid));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceassignmentaddserviceValidateBeforeCall(String token, UUID serviceid, UUID locationid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling serviceassignmentaddservice(Async)");
        }
        
        // verify the required parameter 'serviceid' is set
        if (serviceid == null) {
            throw new ApiException("Missing the required parameter 'serviceid' when calling serviceassignmentaddservice(Async)");
        }
        
        // verify the required parameter 'locationid' is set
        if (locationid == null) {
            throw new ApiException("Missing the required parameter 'locationid' when calling serviceassignmentaddservice(Async)");
        }
        

        okhttp3.Call localVarCall = serviceassignmentaddserviceCall(token, serviceid, locationid, _callback);
        return localVarCall;

    }

    /**
     * Enable a service in a specific location
     * Allows the user to enable a service in a location to which they are scoped.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to add. (required)
     * @param locationid The id of the location. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void serviceassignmentaddservice(String token, UUID serviceid, UUID locationid) throws ApiException {
        serviceassignmentaddserviceWithHttpInfo(token, serviceid, locationid);
    }

    /**
     * Enable a service in a specific location
     * Allows the user to enable a service in a location to which they are scoped.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to add. (required)
     * @param locationid The id of the location. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serviceassignmentaddserviceWithHttpInfo(String token, UUID serviceid, UUID locationid) throws ApiException {
        okhttp3.Call localVarCall = serviceassignmentaddserviceValidateBeforeCall(token, serviceid, locationid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enable a service in a specific location (asynchronously)
     * Allows the user to enable a service in a location to which they are scoped.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to add. (required)
     * @param locationid The id of the location. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceassignmentaddserviceAsync(String token, UUID serviceid, UUID locationid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceassignmentaddserviceValidateBeforeCall(token, serviceid, locationid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceassignmentgetlocation
     * @param token The authentication token. (required)
     * @param locationid The id of the location to get. (required)
     * @param includegloballyavailable Specifies whether the services available globally must be returned or not. (optional)
     * @param namefilter Filters the name of the services to return. (optional)
     * @param count The max number of services to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceassignmentgetlocationCall(String token, UUID locationid, Boolean includegloballyavailable, Boolean namefilter, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/serviceassignmentgetlocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (includegloballyavailable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includegloballyavailable", includegloballyavailable));
        }

        if (namefilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namefilter", namefilter));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceassignmentgetlocationValidateBeforeCall(String token, UUID locationid, Boolean includegloballyavailable, Boolean namefilter, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling serviceassignmentgetlocation(Async)");
        }
        
        // verify the required parameter 'locationid' is set
        if (locationid == null) {
            throw new ApiException("Missing the required parameter 'locationid' when calling serviceassignmentgetlocation(Async)");
        }
        

        okhttp3.Call localVarCall = serviceassignmentgetlocationCall(token, locationid, includegloballyavailable, namefilter, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of services enabled for a specific location
     * Allows the user to view a list of services available in a location to which they are scoped.
     * @param token The authentication token. (required)
     * @param locationid The id of the location to get. (required)
     * @param includegloballyavailable Specifies whether the services available globally must be returned or not. (optional)
     * @param namefilter Filters the name of the services to return. (optional)
     * @param count The max number of services to return. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void serviceassignmentgetlocation(String token, UUID locationid, Boolean includegloballyavailable, Boolean namefilter, Integer count) throws ApiException {
        serviceassignmentgetlocationWithHttpInfo(token, locationid, includegloballyavailable, namefilter, count);
    }

    /**
     * View a list of services enabled for a specific location
     * Allows the user to view a list of services available in a location to which they are scoped.
     * @param token The authentication token. (required)
     * @param locationid The id of the location to get. (required)
     * @param includegloballyavailable Specifies whether the services available globally must be returned or not. (optional)
     * @param namefilter Filters the name of the services to return. (optional)
     * @param count The max number of services to return. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serviceassignmentgetlocationWithHttpInfo(String token, UUID locationid, Boolean includegloballyavailable, Boolean namefilter, Integer count) throws ApiException {
        okhttp3.Call localVarCall = serviceassignmentgetlocationValidateBeforeCall(token, locationid, includegloballyavailable, namefilter, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of services enabled for a specific location (asynchronously)
     * Allows the user to view a list of services available in a location to which they are scoped.
     * @param token The authentication token. (required)
     * @param locationid The id of the location to get. (required)
     * @param includegloballyavailable Specifies whether the services available globally must be returned or not. (optional)
     * @param namefilter Filters the name of the services to return. (optional)
     * @param count The max number of services to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceassignmentgetlocationAsync(String token, UUID locationid, Boolean includegloballyavailable, Boolean namefilter, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceassignmentgetlocationValidateBeforeCall(token, locationid, includegloballyavailable, namefilter, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceassignmentgetservice
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to get its locations. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceassignmentgetserviceCall(String token, UUID serviceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/serviceassignmentgetservice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (serviceid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceid", serviceid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceassignmentgetserviceValidateBeforeCall(String token, UUID serviceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling serviceassignmentgetservice(Async)");
        }
        
        // verify the required parameter 'serviceid' is set
        if (serviceid == null) {
            throw new ApiException("Missing the required parameter 'serviceid' when calling serviceassignmentgetservice(Async)");
        }
        

        okhttp3.Call localVarCall = serviceassignmentgetserviceCall(token, serviceid, _callback);
        return localVarCall;

    }

    /**
     * View a list of locations where a service is available
     * Allows the user to view a list of locations in which a service is available.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to get its locations. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void serviceassignmentgetservice(String token, UUID serviceid) throws ApiException {
        serviceassignmentgetserviceWithHttpInfo(token, serviceid);
    }

    /**
     * View a list of locations where a service is available
     * Allows the user to view a list of locations in which a service is available.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to get its locations. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serviceassignmentgetserviceWithHttpInfo(String token, UUID serviceid) throws ApiException {
        okhttp3.Call localVarCall = serviceassignmentgetserviceValidateBeforeCall(token, serviceid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of locations where a service is available (asynchronously)
     * Allows the user to view a list of locations in which a service is available.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to get its locations. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceassignmentgetserviceAsync(String token, UUID serviceid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceassignmentgetserviceValidateBeforeCall(token, serviceid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceassignmentremoveservice
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to remove. (required)
     * @param locationid The id of the location to remove the service from. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceassignmentremoveserviceCall(String token, UUID serviceid, UUID locationid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/serviceassignmentremoveservice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (serviceid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceid", serviceid));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceassignmentremoveserviceValidateBeforeCall(String token, UUID serviceid, UUID locationid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling serviceassignmentremoveservice(Async)");
        }
        
        // verify the required parameter 'serviceid' is set
        if (serviceid == null) {
            throw new ApiException("Missing the required parameter 'serviceid' when calling serviceassignmentremoveservice(Async)");
        }
        
        // verify the required parameter 'locationid' is set
        if (locationid == null) {
            throw new ApiException("Missing the required parameter 'locationid' when calling serviceassignmentremoveservice(Async)");
        }
        

        okhttp3.Call localVarCall = serviceassignmentremoveserviceCall(token, serviceid, locationid, _callback);
        return localVarCall;

    }

    /**
     * Remove a service from a location
     * Allows the user to disable a service from a location to which they are scoped.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to remove. (required)
     * @param locationid The id of the location to remove the service from. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void serviceassignmentremoveservice(String token, UUID serviceid, UUID locationid) throws ApiException {
        serviceassignmentremoveserviceWithHttpInfo(token, serviceid, locationid);
    }

    /**
     * Remove a service from a location
     * Allows the user to disable a service from a location to which they are scoped.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to remove. (required)
     * @param locationid The id of the location to remove the service from. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serviceassignmentremoveserviceWithHttpInfo(String token, UUID serviceid, UUID locationid) throws ApiException {
        okhttp3.Call localVarCall = serviceassignmentremoveserviceValidateBeforeCall(token, serviceid, locationid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a service from a location (asynchronously)
     * Allows the user to disable a service from a location to which they are scoped.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service to remove. (required)
     * @param locationid The id of the location to remove the service from. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceassignmentremoveserviceAsync(String token, UUID serviceid, UUID locationid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceassignmentremoveserviceValidateBeforeCall(token, serviceid, locationid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicedelete
     * @param token The authentication token. (required)
     * @param id The id of the service to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicedeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servicedelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicedeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling servicedelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling servicedelete(Async)");
        }
        

        okhttp3.Call localVarCall = servicedeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a service
     * Allows the user to delete a service from the existing list.
     * @param token The authentication token. (required)
     * @param id The id of the service to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void servicedelete(String token, UUID id) throws ApiException {
        servicedeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a service
     * Allows the user to delete a service from the existing list.
     * @param token The authentication token. (required)
     * @param id The id of the service to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicedeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = servicedeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a service (asynchronously)
     * Allows the user to delete a service from the existing list.
     * @param token The authentication token. (required)
     * @param id The id of the service to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicedeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicedeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceget
     * @param token The authentication token. (required)
     * @param id The id of the service to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicegetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/serviceget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicegetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling serviceget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling serviceget(Async)");
        }
        

        okhttp3.Call localVarCall = servicegetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of a service
     * Allows the user to view an individual service and its details.
     * @param token The authentication token. (required)
     * @param id The id of the service to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void serviceget(String token, UUID id) throws ApiException {
        servicegetWithHttpInfo(token, id);
    }

    /**
     * Search and view details of a service
     * Allows the user to view an individual service and its details.
     * @param token The authentication token. (required)
     * @param id The id of the service to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicegetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = servicegetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of a service (asynchronously)
     * Allows the user to view an individual service and its details.
     * @param token The authentication token. (required)
     * @param id The id of the service to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicegetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicegetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicelist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicelistCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servicelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicelistValidateBeforeCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling servicelist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling servicelist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling servicelist(Async)");
        }
        

        okhttp3.Call localVarCall = servicelistCall(token, from, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of services
     * Allows the user to view the full list of existing services.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void servicelist(String token, Integer from, Integer count) throws ApiException {
        servicelistWithHttpInfo(token, from, count);
    }

    /**
     * View a list of services
     * Allows the user to view the full list of existing services.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicelistWithHttpInfo(String token, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = servicelistValidateBeforeCall(token, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of services (asynchronously)
     * Allows the user to view the full list of existing services.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicelistAsync(String token, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicelistValidateBeforeCall(token, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/servicesave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = servicesaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a service
     * Allows the user to create or edit a service.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void servicesave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        servicesaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a service
     * Allows the user to create or edit a service.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = servicesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a service (asynchronously)
     * Allows the user to create or edit a service.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionattendancelogaddnote
     * @param token The authentication token. (required)
     * @param id The id of the attendance log. (required)
     * @param text The text of the note to add. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogaddnoteCall(String token, UUID id, String text, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionattendancelogaddnote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendancelogaddnoteValidateBeforeCall(String token, UUID id, String text, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionattendancelogaddnote(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sessionattendancelogaddnote(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling sessionattendancelogaddnote(Async)");
        }
        

        okhttp3.Call localVarCall = sessionattendancelogaddnoteCall(token, id, text, _callback);
        return localVarCall;

    }

    /**
     * Add a note to a class attendance log
     * Allows the user to add a note to a class attendance log.
     * @param token The authentication token. (required)
     * @param id The id of the attendance log. (required)
     * @param text The text of the note to add. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendancelogaddnote(String token, UUID id, String text) throws ApiException {
        sessionattendancelogaddnoteWithHttpInfo(token, id, text);
    }

    /**
     * Add a note to a class attendance log
     * Allows the user to add a note to a class attendance log.
     * @param token The authentication token. (required)
     * @param id The id of the attendance log. (required)
     * @param text The text of the note to add. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendancelogaddnoteWithHttpInfo(String token, UUID id, String text) throws ApiException {
        okhttp3.Call localVarCall = sessionattendancelogaddnoteValidateBeforeCall(token, id, text, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a note to a class attendance log (asynchronously)
     * Allows the user to add a note to a class attendance log.
     * @param token The authentication token. (required)
     * @param id The id of the attendance log. (required)
     * @param text The text of the note to add. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogaddnoteAsync(String token, UUID id, String text, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendancelogaddnoteValidateBeforeCall(token, id, text, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionattendancelogget
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendanceloggetCall(String token, UUID id, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionattendancelogget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendanceloggetValidateBeforeCall(String token, UUID id, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionattendancelogget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sessionattendancelogget(Async)");
        }
        

        okhttp3.Call localVarCall = sessionattendanceloggetCall(token, id, photosize, _callback);
        return localVarCall;

    }

    /**
     * View details of a class attendance log
     * Allows the user to view an individual class attendance log and its details.
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendancelogget(String token, UUID id, Integer photosize) throws ApiException {
        sessionattendanceloggetWithHttpInfo(token, id, photosize);
    }

    /**
     * View details of a class attendance log
     * Allows the user to view an individual class attendance log and its details.
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendanceloggetWithHttpInfo(String token, UUID id, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = sessionattendanceloggetValidateBeforeCall(token, id, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a class attendance log (asynchronously)
     * Allows the user to view an individual class attendance log and its details.
     * @param token The authentication token. (required)
     * @param id The id of the attendance log to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendanceloggetAsync(String token, UUID id, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendanceloggetValidateBeforeCall(token, id, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionattendanceloggetuser
     * @param attendee The id of the attendee to get statistic for. (required)
     * @param eventid The id of the event whose attendee statistics have to be returned. (required)
     * @param token The authentication token. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendanceloggetuserCall(UUID attendee, UUID eventid, String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionattendanceloggetuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (attendee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attendee", attendee));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendanceloggetuserValidateBeforeCall(UUID attendee, UUID eventid, String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'attendee' is set
        if (attendee == null) {
            throw new ApiException("Missing the required parameter 'attendee' when calling sessionattendanceloggetuser(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling sessionattendanceloggetuser(Async)");
        }
        

        okhttp3.Call localVarCall = sessionattendanceloggetuserCall(attendee, eventid, token, _callback);
        return localVarCall;

    }

    /**
     * View the class session attendance information for a specific user
     * Allows the user to view the attendance for a specified student.
     * @param attendee The id of the attendee to get statistic for. (required)
     * @param eventid The id of the event whose attendee statistics have to be returned. (required)
     * @param token The authentication token. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendanceloggetuser(UUID attendee, UUID eventid, String token) throws ApiException {
        sessionattendanceloggetuserWithHttpInfo(attendee, eventid, token);
    }

    /**
     * View the class session attendance information for a specific user
     * Allows the user to view the attendance for a specified student.
     * @param attendee The id of the attendee to get statistic for. (required)
     * @param eventid The id of the event whose attendee statistics have to be returned. (required)
     * @param token The authentication token. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendanceloggetuserWithHttpInfo(UUID attendee, UUID eventid, String token) throws ApiException {
        okhttp3.Call localVarCall = sessionattendanceloggetuserValidateBeforeCall(attendee, eventid, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the class session attendance information for a specific user (asynchronously)
     * Allows the user to view the attendance for a specified student.
     * @param attendee The id of the attendee to get statistic for. (required)
     * @param eventid The id of the event whose attendee statistics have to be returned. (required)
     * @param token The authentication token. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendanceloggetuserAsync(UUID attendee, UUID eventid, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendanceloggetuserValidateBeforeCall(attendee, eventid, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionattendanceloglist
     * @param token The authentication token. (required)
     * @param session The id of the session whose attendees logs have to be returned. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendanceloglistCall(String token, UUID session, Integer from, Integer count, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionattendanceloglist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (session != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("session", session));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendanceloglistValidateBeforeCall(String token, UUID session, Integer from, Integer count, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionattendanceloglist(Async)");
        }
        
        // verify the required parameter 'session' is set
        if (session == null) {
            throw new ApiException("Missing the required parameter 'session' when calling sessionattendanceloglist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling sessionattendanceloglist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling sessionattendanceloglist(Async)");
        }
        

        okhttp3.Call localVarCall = sessionattendanceloglistCall(token, session, from, count, photosize, _callback);
        return localVarCall;

    }

    /**
     * View attendance logs of the specified session
     * Allows the user to view the full list of logs from a specified session
     * @param token The authentication token. (required)
     * @param session The id of the session whose attendees logs have to be returned. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendanceloglist(String token, UUID session, Integer from, Integer count, Integer photosize) throws ApiException {
        sessionattendanceloglistWithHttpInfo(token, session, from, count, photosize);
    }

    /**
     * View attendance logs of the specified session
     * Allows the user to view the full list of logs from a specified session
     * @param token The authentication token. (required)
     * @param session The id of the session whose attendees logs have to be returned. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendanceloglistWithHttpInfo(String token, UUID session, Integer from, Integer count, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = sessionattendanceloglistValidateBeforeCall(token, session, from, count, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View attendance logs of the specified session (asynchronously)
     * Allows the user to view the full list of logs from a specified session
     * @param token The authentication token. (required)
     * @param session The id of the session whose attendees logs have to be returned. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendanceloglistAsync(String token, UUID session, Integer from, Integer count, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendanceloglistValidateBeforeCall(token, session, from, count, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionattendanceloglistevent
     * @param eventid The id of the event whose attendance has to be returned. (required)
     * @param token The authentication token. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendanceloglisteventCall(UUID eventid, String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionattendanceloglistevent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendanceloglisteventValidateBeforeCall(UUID eventid, String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling sessionattendanceloglistevent(Async)");
        }
        

        okhttp3.Call localVarCall = sessionattendanceloglisteventCall(eventid, token, _callback);
        return localVarCall;

    }

    /**
     * View the attendance information of an entire class
     * Allows the user to view the attendance information for an entire class
     * @param eventid The id of the event whose attendance has to be returned. (required)
     * @param token The authentication token. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendanceloglistevent(UUID eventid, String token) throws ApiException {
        sessionattendanceloglisteventWithHttpInfo(eventid, token);
    }

    /**
     * View the attendance information of an entire class
     * Allows the user to view the attendance information for an entire class
     * @param eventid The id of the event whose attendance has to be returned. (required)
     * @param token The authentication token. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendanceloglisteventWithHttpInfo(UUID eventid, String token) throws ApiException {
        okhttp3.Call localVarCall = sessionattendanceloglisteventValidateBeforeCall(eventid, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the attendance information of an entire class (asynchronously)
     * Allows the user to view the attendance information for an entire class
     * @param eventid The id of the event whose attendance has to be returned. (required)
     * @param token The authentication token. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendanceloglisteventAsync(UUID eventid, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendanceloglisteventValidateBeforeCall(eventid, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionattendanceloglistsummary
     * @param token The authentication token. (optional)
     * @param eventid The id of the event whose attendance has to be returned. (optional)
     * @param attendeeid The id of the attendee whose attendance has to be returned. (optional)
     * @param groupid The id of the group whose attendance has to be returned. (optional)
     * @param start The start date to filter (beginning of time by default). (optional)
     * @param end The end date to filter (today by default). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendanceloglistsummaryCall(String token, UUID eventid, UUID attendeeid, UUID groupid, String start, String end, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionattendanceloglistsummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (attendeeid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attendeeid", attendeeid));
        }

        if (groupid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupid", groupid));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendanceloglistsummaryValidateBeforeCall(String token, UUID eventid, UUID attendeeid, UUID groupid, String start, String end, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sessionattendanceloglistsummaryCall(token, eventid, attendeeid, groupid, start, end, _callback);
        return localVarCall;

    }

    /**
     * View the attendance summary for a class and/or a attendee
     * Allows the user to view the attendance summary for a given class and/or attendee.
     * @param token The authentication token. (optional)
     * @param eventid The id of the event whose attendance has to be returned. (optional)
     * @param attendeeid The id of the attendee whose attendance has to be returned. (optional)
     * @param groupid The id of the group whose attendance has to be returned. (optional)
     * @param start The start date to filter (beginning of time by default). (optional)
     * @param end The end date to filter (today by default). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendanceloglistsummary(String token, UUID eventid, UUID attendeeid, UUID groupid, String start, String end) throws ApiException {
        sessionattendanceloglistsummaryWithHttpInfo(token, eventid, attendeeid, groupid, start, end);
    }

    /**
     * View the attendance summary for a class and/or a attendee
     * Allows the user to view the attendance summary for a given class and/or attendee.
     * @param token The authentication token. (optional)
     * @param eventid The id of the event whose attendance has to be returned. (optional)
     * @param attendeeid The id of the attendee whose attendance has to be returned. (optional)
     * @param groupid The id of the group whose attendance has to be returned. (optional)
     * @param start The start date to filter (beginning of time by default). (optional)
     * @param end The end date to filter (today by default). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendanceloglistsummaryWithHttpInfo(String token, UUID eventid, UUID attendeeid, UUID groupid, String start, String end) throws ApiException {
        okhttp3.Call localVarCall = sessionattendanceloglistsummaryValidateBeforeCall(token, eventid, attendeeid, groupid, start, end, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the attendance summary for a class and/or a attendee (asynchronously)
     * Allows the user to view the attendance summary for a given class and/or attendee.
     * @param token The authentication token. (optional)
     * @param eventid The id of the event whose attendance has to be returned. (optional)
     * @param attendeeid The id of the attendee whose attendance has to be returned. (optional)
     * @param groupid The id of the group whose attendance has to be returned. (optional)
     * @param start The start date to filter (beginning of time by default). (optional)
     * @param end The end date to filter (today by default). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendanceloglistsummaryAsync(String token, UUID eventid, UUID attendeeid, UUID groupid, String start, String end, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendanceloglistsummaryValidateBeforeCall(token, eventid, attendeeid, groupid, start, end, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionattendancelogmylistsummary
     * @param token The authentication token. (optional)
     * @param eventid The id of the event whose attendance has to be returned. (optional)
     * @param start The start date to filter (beginning of time by default). (optional)
     * @param end The end date to filter (today by default). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogmylistsummaryCall(String token, UUID eventid, String start, String end, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionattendancelogmylistsummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendancelogmylistsummaryValidateBeforeCall(String token, UUID eventid, String start, String end, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sessionattendancelogmylistsummaryCall(token, eventid, start, end, _callback);
        return localVarCall;

    }

    /**
     * View my attendance summary
     * Allows the user to view their own attendance summary.
     * @param token The authentication token. (optional)
     * @param eventid The id of the event whose attendance has to be returned. (optional)
     * @param start The start date to filter (beginning of time by default). (optional)
     * @param end The end date to filter (today by default). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendancelogmylistsummary(String token, UUID eventid, String start, String end) throws ApiException {
        sessionattendancelogmylistsummaryWithHttpInfo(token, eventid, start, end);
    }

    /**
     * View my attendance summary
     * Allows the user to view their own attendance summary.
     * @param token The authentication token. (optional)
     * @param eventid The id of the event whose attendance has to be returned. (optional)
     * @param start The start date to filter (beginning of time by default). (optional)
     * @param end The end date to filter (today by default). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendancelogmylistsummaryWithHttpInfo(String token, UUID eventid, String start, String end) throws ApiException {
        okhttp3.Call localVarCall = sessionattendancelogmylistsummaryValidateBeforeCall(token, eventid, start, end, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View my attendance summary (asynchronously)
     * Allows the user to view their own attendance summary.
     * @param token The authentication token. (optional)
     * @param eventid The id of the event whose attendance has to be returned. (optional)
     * @param start The start date to filter (beginning of time by default). (optional)
     * @param end The end date to filter (today by default). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogmylistsummaryAsync(String token, UUID eventid, String start, String end, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendancelogmylistsummaryValidateBeforeCall(token, eventid, start, end, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionattendancelogsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/sessionattendancelogsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendancelogsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sessionattendancelogsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a class attendance log
     * Allows the user to create or edit a class attendance log.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendancelogsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        sessionattendancelogsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a class attendance log
     * Allows the user to create or edit a class attendance log.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendancelogsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = sessionattendancelogsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a class attendance log (asynchronously)
     * Allows the user to create or edit a class attendance log.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendancelogsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionattendancelogsaveswipe
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogsaveswipeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/sessionattendancelogsaveswipe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendancelogsaveswipeValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sessionattendancelogsaveswipeCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a class attendance log swipe
     * Allows the user to create or edit a class attendance log swipe, which are the details of time in or out.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendancelogsaveswipe(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        sessionattendancelogsaveswipeWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a class attendance log swipe
     * Allows the user to create or edit a class attendance log swipe, which are the details of time in or out.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendancelogsaveswipeWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = sessionattendancelogsaveswipeValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a class attendance log swipe (asynchronously)
     * Allows the user to create or edit a class attendance log swipe, which are the details of time in or out.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogsaveswipeAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendancelogsaveswipeValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionbulkupdate
     * @param token The authentication token. (required)
     * @param eventid The id of the event to bulk update. (required)
     * @param sessions A JSON-formatted array, with all the sessions to update, create or delete. Each item must contain an action (set/remove) and the session properties. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionbulkupdateCall(String token, UUID eventid, String sessions, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionbulkupdate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (sessions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessions", sessions));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionbulkupdateValidateBeforeCall(String token, UUID eventid, String sessions, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionbulkupdate(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling sessionbulkupdate(Async)");
        }
        
        // verify the required parameter 'sessions' is set
        if (sessions == null) {
            throw new ApiException("Missing the required parameter 'sessions' when calling sessionbulkupdate(Async)");
        }
        

        okhttp3.Call localVarCall = sessionbulkupdateCall(token, eventid, sessions, _callback);
        return localVarCall;

    }

    /**
     * Bulk update event sessions
     * Allows the user to bulk update event sessions by setting multiple attendees as present, absent, tardy, etc.
     * @param token The authentication token. (required)
     * @param eventid The id of the event to bulk update. (required)
     * @param sessions A JSON-formatted array, with all the sessions to update, create or delete. Each item must contain an action (set/remove) and the session properties. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionbulkupdate(String token, UUID eventid, String sessions) throws ApiException {
        sessionbulkupdateWithHttpInfo(token, eventid, sessions);
    }

    /**
     * Bulk update event sessions
     * Allows the user to bulk update event sessions by setting multiple attendees as present, absent, tardy, etc.
     * @param token The authentication token. (required)
     * @param eventid The id of the event to bulk update. (required)
     * @param sessions A JSON-formatted array, with all the sessions to update, create or delete. Each item must contain an action (set/remove) and the session properties. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionbulkupdateWithHttpInfo(String token, UUID eventid, String sessions) throws ApiException {
        okhttp3.Call localVarCall = sessionbulkupdateValidateBeforeCall(token, eventid, sessions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Bulk update event sessions (asynchronously)
     * Allows the user to bulk update event sessions by setting multiple attendees as present, absent, tardy, etc.
     * @param token The authentication token. (required)
     * @param eventid The id of the event to bulk update. (required)
     * @param sessions A JSON-formatted array, with all the sessions to update, create or delete. Each item must contain an action (set/remove) and the session properties. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionbulkupdateAsync(String token, UUID eventid, String sessions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionbulkupdateValidateBeforeCall(token, eventid, sessions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionget
     * @param token The authentication token. (required)
     * @param id The id of the session to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessiongetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessiongetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sessionget(Async)");
        }
        

        okhttp3.Call localVarCall = sessiongetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View details of a session
     * Allows the user to view a session in order to take attendance.
     * @param token The authentication token. (required)
     * @param id The id of the session to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionget(String token, UUID id) throws ApiException {
        sessiongetWithHttpInfo(token, id);
    }

    /**
     * View details of a session
     * Allows the user to view a session in order to take attendance.
     * @param token The authentication token. (required)
     * @param id The id of the session to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessiongetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = sessiongetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a session (asynchronously)
     * Allows the user to view a session in order to take attendance.
     * @param token The authentication token. (required)
     * @param id The id of the session to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessiongetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessiongetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessiongetschedule
     * @param token The authentication token. (optional)
     * @param day The day to return. It will also return the whole week for that day. (optional)
     * @param attendee The id of the attendee to get the schedule. (optional)
     * @param location The id of the location to get the schedule. (optional)
     * @param instructor The id of the instructor to get the schedule. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessiongetscheduleCall(String token, OffsetDateTime day, UUID attendee, UUID location, UUID instructor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessiongetschedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (day != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day", day));
        }

        if (attendee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attendee", attendee));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (instructor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instructor", instructor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessiongetscheduleValidateBeforeCall(String token, OffsetDateTime day, UUID attendee, UUID location, UUID instructor, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sessiongetscheduleCall(token, day, attendee, location, instructor, _callback);
        return localVarCall;

    }

    /**
     * Gets the schedule for a location, instructor or attendees
     * 
     * @param token The authentication token. (optional)
     * @param day The day to return. It will also return the whole week for that day. (optional)
     * @param attendee The id of the attendee to get the schedule. (optional)
     * @param location The id of the location to get the schedule. (optional)
     * @param instructor The id of the instructor to get the schedule. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessiongetschedule(String token, OffsetDateTime day, UUID attendee, UUID location, UUID instructor) throws ApiException {
        sessiongetscheduleWithHttpInfo(token, day, attendee, location, instructor);
    }

    /**
     * Gets the schedule for a location, instructor or attendees
     * 
     * @param token The authentication token. (optional)
     * @param day The day to return. It will also return the whole week for that day. (optional)
     * @param attendee The id of the attendee to get the schedule. (optional)
     * @param location The id of the location to get the schedule. (optional)
     * @param instructor The id of the instructor to get the schedule. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessiongetscheduleWithHttpInfo(String token, OffsetDateTime day, UUID attendee, UUID location, UUID instructor) throws ApiException {
        okhttp3.Call localVarCall = sessiongetscheduleValidateBeforeCall(token, day, attendee, location, instructor, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the schedule for a location, instructor or attendees (asynchronously)
     * 
     * @param token The authentication token. (optional)
     * @param day The day to return. It will also return the whole week for that day. (optional)
     * @param attendee The id of the attendee to get the schedule. (optional)
     * @param location The id of the location to get the schedule. (optional)
     * @param instructor The id of the instructor to get the schedule. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessiongetscheduleAsync(String token, OffsetDateTime day, UUID attendee, UUID location, UUID instructor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessiongetscheduleValidateBeforeCall(token, day, attendee, location, instructor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionlist
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param startdate The start date to filter the sessions (optional)
     * @param enddate The end date to filter the sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionlistCall(Integer from, Integer count, String token, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (startdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startdate", startdate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionlistValidateBeforeCall(Integer from, Integer count, String token, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling sessionlist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling sessionlist(Async)");
        }
        

        okhttp3.Call localVarCall = sessionlistCall(from, count, token, startdate, enddate, _callback);
        return localVarCall;

    }

    /**
     * Gets all future sessions of the current semester
     * 
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param startdate The start date to filter the sessions (optional)
     * @param enddate The end date to filter the sessions. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionlist(Integer from, Integer count, String token, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        sessionlistWithHttpInfo(from, count, token, startdate, enddate);
    }

    /**
     * Gets all future sessions of the current semester
     * 
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param startdate The start date to filter the sessions (optional)
     * @param enddate The end date to filter the sessions. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionlistWithHttpInfo(Integer from, Integer count, String token, OffsetDateTime startdate, OffsetDateTime enddate) throws ApiException {
        okhttp3.Call localVarCall = sessionlistValidateBeforeCall(from, count, token, startdate, enddate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets all future sessions of the current semester (asynchronously)
     * 
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param startdate The start date to filter the sessions (optional)
     * @param enddate The end date to filter the sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionlistAsync(Integer from, Integer count, String token, OffsetDateTime startdate, OffsetDateTime enddate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionlistValidateBeforeCall(from, count, token, startdate, enddate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionregaddcurrentuser
     * @param token The authentication token. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregaddcurrentuserCall(String token, UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionregaddcurrentuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (sessiondate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessiondate", sessiondate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionregaddcurrentuserValidateBeforeCall(String token, UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionregaddcurrentuser(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling sessionregaddcurrentuser(Async)");
        }
        
        // verify the required parameter 'sessiondate' is set
        if (sessiondate == null) {
            throw new ApiException("Missing the required parameter 'sessiondate' when calling sessionregaddcurrentuser(Async)");
        }
        

        okhttp3.Call localVarCall = sessionregaddcurrentuserCall(token, eventid, sessiondate, _callback);
        return localVarCall;

    }

    /**
     * Register current user to an event session
     * Allows the user to register themselves for an event.
     * @param token The authentication token. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionregaddcurrentuser(String token, UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        sessionregaddcurrentuserWithHttpInfo(token, eventid, sessiondate);
    }

    /**
     * Register current user to an event session
     * Allows the user to register themselves for an event.
     * @param token The authentication token. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionregaddcurrentuserWithHttpInfo(String token, UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        okhttp3.Call localVarCall = sessionregaddcurrentuserValidateBeforeCall(token, eventid, sessiondate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register current user to an event session (asynchronously)
     * Allows the user to register themselves for an event.
     * @param token The authentication token. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregaddcurrentuserAsync(String token, UUID eventid, OffsetDateTime sessiondate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionregaddcurrentuserValidateBeforeCall(token, eventid, sessiondate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionregadduser
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregadduserCall(String token, UUID userid, UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionregadduser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (sessiondate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessiondate", sessiondate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionregadduserValidateBeforeCall(String token, UUID userid, UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionregadduser(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling sessionregadduser(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling sessionregadduser(Async)");
        }
        
        // verify the required parameter 'sessiondate' is set
        if (sessiondate == null) {
            throw new ApiException("Missing the required parameter 'sessiondate' when calling sessionregadduser(Async)");
        }
        

        okhttp3.Call localVarCall = sessionregadduserCall(token, userid, eventid, sessiondate, _callback);
        return localVarCall;

    }

    /**
     * Register users for events
     * Allows the user to register another user for an upcoming event.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionregadduser(String token, UUID userid, UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        sessionregadduserWithHttpInfo(token, userid, eventid, sessiondate);
    }

    /**
     * Register users for events
     * Allows the user to register another user for an upcoming event.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionregadduserWithHttpInfo(String token, UUID userid, UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        okhttp3.Call localVarCall = sessionregadduserValidateBeforeCall(token, userid, eventid, sessiondate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register users for events (asynchronously)
     * Allows the user to register another user for an upcoming event.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregadduserAsync(String token, UUID userid, UUID eventid, OffsetDateTime sessiondate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionregadduserValidateBeforeCall(token, userid, eventid, sessiondate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionreggetmysessions
     * @param token The authentication token. (required)
     * @param date Start date to filter the sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionreggetmysessionsCall(String token, OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreggetmysessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionreggetmysessionsValidateBeforeCall(String token, OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionreggetmysessions(Async)");
        }
        

        okhttp3.Call localVarCall = sessionreggetmysessionsCall(token, date, _callback);
        return localVarCall;

    }

    /**
     * View all the sessions the logged user is registered to
     * 
     * @param token The authentication token. (required)
     * @param date Start date to filter the sessions. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionreggetmysessions(String token, OffsetDateTime date) throws ApiException {
        sessionreggetmysessionsWithHttpInfo(token, date);
    }

    /**
     * View all the sessions the logged user is registered to
     * 
     * @param token The authentication token. (required)
     * @param date Start date to filter the sessions. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionreggetmysessionsWithHttpInfo(String token, OffsetDateTime date) throws ApiException {
        okhttp3.Call localVarCall = sessionreggetmysessionsValidateBeforeCall(token, date, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all the sessions the logged user is registered to (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param date Start date to filter the sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionreggetmysessionsAsync(String token, OffsetDateTime date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionreggetmysessionsValidateBeforeCall(token, date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionreggetsessions
     * @param token The authentication token. (required)
     * @param userid The user id to list sessions. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionreggetsessionsCall(String token, UUID userid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreggetsessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionreggetsessionsValidateBeforeCall(String token, UUID userid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionreggetsessions(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling sessionreggetsessions(Async)");
        }
        

        okhttp3.Call localVarCall = sessionreggetsessionsCall(token, userid, _callback);
        return localVarCall;

    }

    /**
     * Lists the registrations for a specific user
     * Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
     * @param token The authentication token. (required)
     * @param userid The user id to list sessions. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionreggetsessions(String token, UUID userid) throws ApiException {
        sessionreggetsessionsWithHttpInfo(token, userid);
    }

    /**
     * Lists the registrations for a specific user
     * Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
     * @param token The authentication token. (required)
     * @param userid The user id to list sessions. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionreggetsessionsWithHttpInfo(String token, UUID userid) throws ApiException {
        okhttp3.Call localVarCall = sessionreggetsessionsValidateBeforeCall(token, userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the registrations for a specific user (asynchronously)
     * Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
     * @param token The authentication token. (required)
     * @param userid The user id to list sessions. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionreggetsessionsAsync(String token, UUID userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionreggetsessionsValidateBeforeCall(token, userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionreggetsettings
     * @param token The authentication token. (required)
     * @param locationid The id of the location to save settings. (optional)
     * @param eventid The id of the event to save settings. (optional)
     * @param sessiondate The date and time when the session starts. (optional)
     * @param noinherit True to get the location/event/session specific settings without looking for the more global settings. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionreggetsettingsCall(String token, UUID locationid, UUID eventid, OffsetDateTime sessiondate, Boolean noinherit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreggetsettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (sessiondate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessiondate", sessiondate));
        }

        if (noinherit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("noinherit", noinherit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionreggetsettingsValidateBeforeCall(String token, UUID locationid, UUID eventid, OffsetDateTime sessiondate, Boolean noinherit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionreggetsettings(Async)");
        }
        

        okhttp3.Call localVarCall = sessionreggetsettingsCall(token, locationid, eventid, sessiondate, noinherit, _callback);
        return localVarCall;

    }

    /**
     * Get the settings for session registration
     * Allows the user to view a event&#39;s session registration settings.
     * @param token The authentication token. (required)
     * @param locationid The id of the location to save settings. (optional)
     * @param eventid The id of the event to save settings. (optional)
     * @param sessiondate The date and time when the session starts. (optional)
     * @param noinherit True to get the location/event/session specific settings without looking for the more global settings. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionreggetsettings(String token, UUID locationid, UUID eventid, OffsetDateTime sessiondate, Boolean noinherit) throws ApiException {
        sessionreggetsettingsWithHttpInfo(token, locationid, eventid, sessiondate, noinherit);
    }

    /**
     * Get the settings for session registration
     * Allows the user to view a event&#39;s session registration settings.
     * @param token The authentication token. (required)
     * @param locationid The id of the location to save settings. (optional)
     * @param eventid The id of the event to save settings. (optional)
     * @param sessiondate The date and time when the session starts. (optional)
     * @param noinherit True to get the location/event/session specific settings without looking for the more global settings. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionreggetsettingsWithHttpInfo(String token, UUID locationid, UUID eventid, OffsetDateTime sessiondate, Boolean noinherit) throws ApiException {
        okhttp3.Call localVarCall = sessionreggetsettingsValidateBeforeCall(token, locationid, eventid, sessiondate, noinherit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the settings for session registration (asynchronously)
     * Allows the user to view a event&#39;s session registration settings.
     * @param token The authentication token. (required)
     * @param locationid The id of the location to save settings. (optional)
     * @param eventid The id of the event to save settings. (optional)
     * @param sessiondate The date and time when the session starts. (optional)
     * @param noinherit True to get the location/event/session specific settings without looking for the more global settings. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionreggetsettingsAsync(String token, UUID locationid, UUID eventid, OffsetDateTime sessiondate, Boolean noinherit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionreggetsettingsValidateBeforeCall(token, locationid, eventid, sessiondate, noinherit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionreggetusers
     * @param token The authentication token. (required)
     * @param eventid The event id to list sessions. (required)
     * @param sessiondate The date of the session to find. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionreggetusersCall(String token, UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreggetusers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (sessiondate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessiondate", sessiondate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionreggetusersValidateBeforeCall(String token, UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionreggetusers(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling sessionreggetusers(Async)");
        }
        
        // verify the required parameter 'sessiondate' is set
        if (sessiondate == null) {
            throw new ApiException("Missing the required parameter 'sessiondate' when calling sessionreggetusers(Async)");
        }
        

        okhttp3.Call localVarCall = sessionreggetusersCall(token, eventid, sessiondate, _callback);
        return localVarCall;

    }

    /**
     * Lists the registrations for a specific session
     * Allows the user to view the registration for a specified event session.
     * @param token The authentication token. (required)
     * @param eventid The event id to list sessions. (required)
     * @param sessiondate The date of the session to find. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionreggetusers(String token, UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        sessionreggetusersWithHttpInfo(token, eventid, sessiondate);
    }

    /**
     * Lists the registrations for a specific session
     * Allows the user to view the registration for a specified event session.
     * @param token The authentication token. (required)
     * @param eventid The event id to list sessions. (required)
     * @param sessiondate The date of the session to find. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionreggetusersWithHttpInfo(String token, UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        okhttp3.Call localVarCall = sessionreggetusersValidateBeforeCall(token, eventid, sessiondate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the registrations for a specific session (asynchronously)
     * Allows the user to view the registration for a specified event session.
     * @param token The authentication token. (required)
     * @param eventid The event id to list sessions. (required)
     * @param sessiondate The date of the session to find. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionreggetusersAsync(String token, UUID eventid, OffsetDateTime sessiondate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionreggetusersValidateBeforeCall(token, eventid, sessiondate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionreglistsessions
     * @param token The authentication token. (required)
     * @param eventid The event id to list sessions. (required)
     * @param sessiondate The date of the session to find. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionreglistsessionsCall(String token, UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreglistsessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (sessiondate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessiondate", sessiondate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionreglistsessionsValidateBeforeCall(String token, UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionreglistsessions(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling sessionreglistsessions(Async)");
        }
        

        okhttp3.Call localVarCall = sessionreglistsessionsCall(token, eventid, sessiondate, _callback);
        return localVarCall;

    }

    /**
     * List the sessions available for a specific event
     * Allows the user to view all the sessions available for a recurring event.
     * @param token The authentication token. (required)
     * @param eventid The event id to list sessions. (required)
     * @param sessiondate The date of the session to find. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionreglistsessions(String token, UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        sessionreglistsessionsWithHttpInfo(token, eventid, sessiondate);
    }

    /**
     * List the sessions available for a specific event
     * Allows the user to view all the sessions available for a recurring event.
     * @param token The authentication token. (required)
     * @param eventid The event id to list sessions. (required)
     * @param sessiondate The date of the session to find. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionreglistsessionsWithHttpInfo(String token, UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        okhttp3.Call localVarCall = sessionreglistsessionsValidateBeforeCall(token, eventid, sessiondate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List the sessions available for a specific event (asynchronously)
     * Allows the user to view all the sessions available for a recurring event.
     * @param token The authentication token. (required)
     * @param eventid The event id to list sessions. (required)
     * @param sessiondate The date of the session to find. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionreglistsessionsAsync(String token, UUID eventid, OffsetDateTime sessiondate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionreglistsessionsValidateBeforeCall(token, eventid, sessiondate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionreglistupcoming
     * @param token The authentication token. (required)
     * @param date Only sessions in the week of the specified date will be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionreglistupcomingCall(String token, OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreglistupcoming";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionreglistupcomingValidateBeforeCall(String token, OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionreglistupcoming(Async)");
        }
        
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling sessionreglistupcoming(Async)");
        }
        

        okhttp3.Call localVarCall = sessionreglistupcomingCall(token, date, _callback);
        return localVarCall;

    }

    /**
     * View a list of upcoming event sessions
     * Allows the user to view the full list of upcoming events.
     * @param token The authentication token. (required)
     * @param date Only sessions in the week of the specified date will be returned. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionreglistupcoming(String token, OffsetDateTime date) throws ApiException {
        sessionreglistupcomingWithHttpInfo(token, date);
    }

    /**
     * View a list of upcoming event sessions
     * Allows the user to view the full list of upcoming events.
     * @param token The authentication token. (required)
     * @param date Only sessions in the week of the specified date will be returned. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionreglistupcomingWithHttpInfo(String token, OffsetDateTime date) throws ApiException {
        okhttp3.Call localVarCall = sessionreglistupcomingValidateBeforeCall(token, date, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of upcoming event sessions (asynchronously)
     * Allows the user to view the full list of upcoming events.
     * @param token The authentication token. (required)
     * @param date Only sessions in the week of the specified date will be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionreglistupcomingAsync(String token, OffsetDateTime date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionreglistupcomingValidateBeforeCall(token, date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionreglistupcomingevent
     * @param token The authentication token. (required)
     * @param date Start date to filter the returned sessions. (required)
     * @param event The id of the event whose sessions will be returned (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionreglistupcomingeventCall(String token, OffsetDateTime date, UUID event, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionreglistupcomingevent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionreglistupcomingeventValidateBeforeCall(String token, OffsetDateTime date, UUID event, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionreglistupcomingevent(Async)");
        }
        
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling sessionreglistupcomingevent(Async)");
        }
        
        // verify the required parameter 'event' is set
        if (event == null) {
            throw new ApiException("Missing the required parameter 'event' when calling sessionreglistupcomingevent(Async)");
        }
        

        okhttp3.Call localVarCall = sessionreglistupcomingeventCall(token, date, event, _callback);
        return localVarCall;

    }

    /**
     * View a list of upcoming sessions of a particular event
     * Allows the user to view the upcoming recurring sessions of a specified event.
     * @param token The authentication token. (required)
     * @param date Start date to filter the returned sessions. (required)
     * @param event The id of the event whose sessions will be returned (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionreglistupcomingevent(String token, OffsetDateTime date, UUID event) throws ApiException {
        sessionreglistupcomingeventWithHttpInfo(token, date, event);
    }

    /**
     * View a list of upcoming sessions of a particular event
     * Allows the user to view the upcoming recurring sessions of a specified event.
     * @param token The authentication token. (required)
     * @param date Start date to filter the returned sessions. (required)
     * @param event The id of the event whose sessions will be returned (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionreglistupcomingeventWithHttpInfo(String token, OffsetDateTime date, UUID event) throws ApiException {
        okhttp3.Call localVarCall = sessionreglistupcomingeventValidateBeforeCall(token, date, event, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of upcoming sessions of a particular event (asynchronously)
     * Allows the user to view the upcoming recurring sessions of a specified event.
     * @param token The authentication token. (required)
     * @param date Start date to filter the returned sessions. (required)
     * @param event The id of the event whose sessions will be returned (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionreglistupcomingeventAsync(String token, OffsetDateTime date, UUID event, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionreglistupcomingeventValidateBeforeCall(token, date, event, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionregremovecurrentuser
     * @param token The authentication token. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregremovecurrentuserCall(String token, UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionregremovecurrentuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (sessiondate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessiondate", sessiondate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionregremovecurrentuserValidateBeforeCall(String token, UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionregremovecurrentuser(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling sessionregremovecurrentuser(Async)");
        }
        
        // verify the required parameter 'sessiondate' is set
        if (sessiondate == null) {
            throw new ApiException("Missing the required parameter 'sessiondate' when calling sessionregremovecurrentuser(Async)");
        }
        

        okhttp3.Call localVarCall = sessionregremovecurrentuserCall(token, eventid, sessiondate, _callback);
        return localVarCall;

    }

    /**
     * Unregister current user from an event session
     * Allows the user to un-register themselves from an event.
     * @param token The authentication token. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionregremovecurrentuser(String token, UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        sessionregremovecurrentuserWithHttpInfo(token, eventid, sessiondate);
    }

    /**
     * Unregister current user from an event session
     * Allows the user to un-register themselves from an event.
     * @param token The authentication token. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionregremovecurrentuserWithHttpInfo(String token, UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        okhttp3.Call localVarCall = sessionregremovecurrentuserValidateBeforeCall(token, eventid, sessiondate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unregister current user from an event session (asynchronously)
     * Allows the user to un-register themselves from an event.
     * @param token The authentication token. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregremovecurrentuserAsync(String token, UUID eventid, OffsetDateTime sessiondate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionregremovecurrentuserValidateBeforeCall(token, eventid, sessiondate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionregremoveuser
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregremoveuserCall(String token, UUID userid, UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionregremoveuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (sessiondate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessiondate", sessiondate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionregremoveuserValidateBeforeCall(String token, UUID userid, UUID eventid, OffsetDateTime sessiondate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionregremoveuser(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling sessionregremoveuser(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling sessionregremoveuser(Async)");
        }
        
        // verify the required parameter 'sessiondate' is set
        if (sessiondate == null) {
            throw new ApiException("Missing the required parameter 'sessiondate' when calling sessionregremoveuser(Async)");
        }
        

        okhttp3.Call localVarCall = sessionregremoveuserCall(token, userid, eventid, sessiondate, _callback);
        return localVarCall;

    }

    /**
     * Removes a user from an event session
     * Allows the user to un-register another user from an event.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionregremoveuser(String token, UUID userid, UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        sessionregremoveuserWithHttpInfo(token, userid, eventid, sessiondate);
    }

    /**
     * Removes a user from an event session
     * Allows the user to un-register another user from an event.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionregremoveuserWithHttpInfo(String token, UUID userid, UUID eventid, OffsetDateTime sessiondate) throws ApiException {
        okhttp3.Call localVarCall = sessionregremoveuserValidateBeforeCall(token, userid, eventid, sessiondate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a user from an event session (asynchronously)
     * Allows the user to un-register another user from an event.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param eventid The id of the event. (required)
     * @param sessiondate The date and time when the session starts. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregremoveuserAsync(String token, UUID userid, UUID eventid, OffsetDateTime sessiondate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionregremoveuserValidateBeforeCall(token, userid, eventid, sessiondate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionregsavesettings
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregsavesettingsCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/sessionregsavesettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionregsavesettingsValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sessionregsavesettingsCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Save the settings for an event&#39;s session registration
     * Allows the user to save the settings for an event.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionregsavesettings(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        sessionregsavesettingsWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Save the settings for an event&#39;s session registration
     * Allows the user to save the settings for an event.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionregsavesettingsWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = sessionregsavesettingsValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save the settings for an event&#39;s session registration (asynchronously)
     * Allows the user to save the settings for an event.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionregsavesettingsAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionregsavesettingsValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionswipedelete
     * @param token The authentication token. (required)
     * @param id The id of the session swipe to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionswipedeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionswipedelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionswipedeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionswipedelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sessionswipedelete(Async)");
        }
        

        okhttp3.Call localVarCall = sessionswipedeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a session swipe
     * Allows the user to delete an existing class attendance swipe.
     * @param token The authentication token. (required)
     * @param id The id of the session swipe to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionswipedelete(String token, UUID id) throws ApiException {
        sessionswipedeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a session swipe
     * Allows the user to delete an existing class attendance swipe.
     * @param token The authentication token. (required)
     * @param id The id of the session swipe to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionswipedeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = sessionswipedeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a session swipe (asynchronously)
     * Allows the user to delete an existing class attendance swipe.
     * @param token The authentication token. (required)
     * @param id The id of the session swipe to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionswipedeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionswipedeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionswipeget
     * @param token The authentication token. (required)
     * @param id The id of the swipe to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionswipegetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionswipeget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionswipegetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionswipeget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sessionswipeget(Async)");
        }
        

        okhttp3.Call localVarCall = sessionswipegetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View details of a class attendance swipe
     * Allows the user to view an individual class attendance swipe.
     * @param token The authentication token. (required)
     * @param id The id of the swipe to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionswipeget(String token, UUID id) throws ApiException {
        sessionswipegetWithHttpInfo(token, id);
    }

    /**
     * View details of a class attendance swipe
     * Allows the user to view an individual class attendance swipe.
     * @param token The authentication token. (required)
     * @param id The id of the swipe to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionswipegetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = sessionswipegetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a class attendance swipe (asynchronously)
     * Allows the user to view an individual class attendance swipe.
     * @param token The authentication token. (required)
     * @param id The id of the swipe to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionswipegetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionswipegetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionswipelistunresolved
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionswipelistunresolvedCall(Integer from, Integer count, String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionswipelistunresolved";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionswipelistunresolvedValidateBeforeCall(Integer from, Integer count, String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling sessionswipelistunresolved(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling sessionswipelistunresolved(Async)");
        }
        

        okhttp3.Call localVarCall = sessionswipelistunresolvedCall(from, count, token, _callback);
        return localVarCall;

    }

    /**
     * View a list of unresolved swipes
     * Allows the user to view all unresolved swipes.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionswipelistunresolved(Integer from, Integer count, String token) throws ApiException {
        sessionswipelistunresolvedWithHttpInfo(from, count, token);
    }

    /**
     * View a list of unresolved swipes
     * Allows the user to view all unresolved swipes.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionswipelistunresolvedWithHttpInfo(Integer from, Integer count, String token) throws ApiException {
        okhttp3.Call localVarCall = sessionswipelistunresolvedValidateBeforeCall(from, count, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of unresolved swipes (asynchronously)
     * Allows the user to view all unresolved swipes.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionswipelistunresolvedAsync(Integer from, Integer count, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionswipelistunresolvedValidateBeforeCall(from, count, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionswiperesolve
     * @param token The authentication token. (required)
     * @param id The id of the swipe to resolve. (required)
     * @param session The id of the session whose swipe has to be saved. (optional)
     * @param user The id of the user who signed-in. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionswiperesolveCall(String token, UUID id, UUID session, UUID user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionswiperesolve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (session != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("session", session));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionswiperesolveValidateBeforeCall(String token, UUID id, UUID session, UUID user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionswiperesolve(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sessionswiperesolve(Async)");
        }
        

        okhttp3.Call localVarCall = sessionswiperesolveCall(token, id, session, user, _callback);
        return localVarCall;

    }

    /**
     * Resolve a swipe and create the corresponding attendance log
     * Allows the user to resolve an unresolved swipe, which would result in the creation of an attendance log.
     * @param token The authentication token. (required)
     * @param id The id of the swipe to resolve. (required)
     * @param session The id of the session whose swipe has to be saved. (optional)
     * @param user The id of the user who signed-in. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionswiperesolve(String token, UUID id, UUID session, UUID user) throws ApiException {
        sessionswiperesolveWithHttpInfo(token, id, session, user);
    }

    /**
     * Resolve a swipe and create the corresponding attendance log
     * Allows the user to resolve an unresolved swipe, which would result in the creation of an attendance log.
     * @param token The authentication token. (required)
     * @param id The id of the swipe to resolve. (required)
     * @param session The id of the session whose swipe has to be saved. (optional)
     * @param user The id of the user who signed-in. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionswiperesolveWithHttpInfo(String token, UUID id, UUID session, UUID user) throws ApiException {
        okhttp3.Call localVarCall = sessionswiperesolveValidateBeforeCall(token, id, session, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resolve a swipe and create the corresponding attendance log (asynchronously)
     * Allows the user to resolve an unresolved swipe, which would result in the creation of an attendance log.
     * @param token The authentication token. (required)
     * @param id The id of the swipe to resolve. (required)
     * @param session The id of the session whose swipe has to be saved. (optional)
     * @param user The id of the user who signed-in. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionswiperesolveAsync(String token, UUID id, UUID session, UUID user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionswiperesolveValidateBeforeCall(token, id, session, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionswipesave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionswipesaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/sessionswipesave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionswipesaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sessionswipesaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Creates a new swipe, and if possible, creates the attendance log
     * Allows the user to create a new swipe, which would usually result in an attendance log.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionswipesave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        sessionswipesaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Creates a new swipe, and if possible, creates the attendance log
     * Allows the user to create a new swipe, which would usually result in an attendance log.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionswipesaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = sessionswipesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a new swipe, and if possible, creates the attendance log (asynchronously)
     * Allows the user to create a new swipe, which would usually result in an attendance log.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionswipesaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionswipesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionswipesaveanonym
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionswipesaveanonymCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/sessionswipesaveanonym";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionswipesaveanonymValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sessionswipesaveanonymCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Creates a new swipe from a sign-in station, and if possible, creates the attendance log
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionswipesaveanonym(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        sessionswipesaveanonymWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Creates a new swipe from a sign-in station, and if possible, creates the attendance log
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionswipesaveanonymWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = sessionswipesaveanonymValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a new swipe from a sign-in station, and if possible, creates the attendance log (asynchronously)
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionswipesaveanonymAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionswipesaveanonymValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingaddlogo
     * @param token The authentication token. (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The original filename, needed to process the file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingaddlogoCall(String token, String upload, String filename, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settingaddlogo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (upload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload", upload));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingaddlogoValidateBeforeCall(String token, String upload, String filename, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling settingaddlogo(Async)");
        }
        
        // verify the required parameter 'upload' is set
        if (upload == null) {
            throw new ApiException("Missing the required parameter 'upload' when calling settingaddlogo(Async)");
        }
        
        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling settingaddlogo(Async)");
        }
        

        okhttp3.Call localVarCall = settingaddlogoCall(token, upload, filename, _callback);
        return localVarCall;

    }

    /**
     * Add a logo to the account
     * Allows the user to add the logo for the account, which appears on all pages on the AccuCampus browser version.
     * @param token The authentication token. (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The original filename, needed to process the file. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void settingaddlogo(String token, String upload, String filename) throws ApiException {
        settingaddlogoWithHttpInfo(token, upload, filename);
    }

    /**
     * Add a logo to the account
     * Allows the user to add the logo for the account, which appears on all pages on the AccuCampus browser version.
     * @param token The authentication token. (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The original filename, needed to process the file. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> settingaddlogoWithHttpInfo(String token, String upload, String filename) throws ApiException {
        okhttp3.Call localVarCall = settingaddlogoValidateBeforeCall(token, upload, filename, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a logo to the account (asynchronously)
     * Allows the user to add the logo for the account, which appears on all pages on the AccuCampus browser version.
     * @param token The authentication token. (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The original filename, needed to process the file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingaddlogoAsync(String token, String upload, String filename, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingaddlogoValidateBeforeCall(token, upload, filename, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingget
     * @param keys The option keys to get values for. Enter multiple separated by comma. (required)
     * @param token The authentication token. (optional)
     * @param domain The account domain, in case of reading settings annonymously. (optional)
     * @param scope The scope of the settings to get. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settinggetCall(String keys, String token, String domain, String scope, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settingget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        if (keys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keys", keys));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settinggetValidateBeforeCall(String keys, String token, String domain, String scope, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keys' is set
        if (keys == null) {
            throw new ApiException("Missing the required parameter 'keys' when calling settingget(Async)");
        }
        

        okhttp3.Call localVarCall = settinggetCall(keys, token, domain, scope, _callback);
        return localVarCall;

    }

    /**
     * Get settings for the account or the specified scope
     * 
     * @param keys The option keys to get values for. Enter multiple separated by comma. (required)
     * @param token The authentication token. (optional)
     * @param domain The account domain, in case of reading settings annonymously. (optional)
     * @param scope The scope of the settings to get. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void settingget(String keys, String token, String domain, String scope) throws ApiException {
        settinggetWithHttpInfo(keys, token, domain, scope);
    }

    /**
     * Get settings for the account or the specified scope
     * 
     * @param keys The option keys to get values for. Enter multiple separated by comma. (required)
     * @param token The authentication token. (optional)
     * @param domain The account domain, in case of reading settings annonymously. (optional)
     * @param scope The scope of the settings to get. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> settinggetWithHttpInfo(String keys, String token, String domain, String scope) throws ApiException {
        okhttp3.Call localVarCall = settinggetValidateBeforeCall(keys, token, domain, scope, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get settings for the account or the specified scope (asynchronously)
     * 
     * @param keys The option keys to get values for. Enter multiple separated by comma. (required)
     * @param token The authentication token. (optional)
     * @param domain The account domain, in case of reading settings annonymously. (optional)
     * @param scope The scope of the settings to get. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settinggetAsync(String keys, String token, String domain, String scope, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = settinggetValidateBeforeCall(keys, token, domain, scope, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/settingsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = settingsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Save settings for the account or the specified scope
     * Allows the user to affect settings that are not specified elsewhere in permissions. This includes Attendance, Appointments, Compass, Media, and Social Activity.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void settingsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        settingsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Save settings for the account or the specified scope
     * Allows the user to affect settings that are not specified elsewhere in permissions. This includes Attendance, Appointments, Compass, Media, and Social Activity.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> settingsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = settingsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save settings for the account or the specified scope (asynchronously)
     * Allows the user to affect settings that are not specified elsewhere in permissions. This includes Attendance, Appointments, Compass, Media, and Social Activity.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingviewgeneral
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingviewgeneralCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settingviewgeneral";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingviewgeneralValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling settingviewgeneral(Async)");
        }
        

        okhttp3.Call localVarCall = settingviewgeneralCall(token, _callback);
        return localVarCall;

    }

    /**
     * View general settings for the account
     * Allows the user to view the settings&#39; general section.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void settingviewgeneral(String token) throws ApiException {
        settingviewgeneralWithHttpInfo(token);
    }

    /**
     * View general settings for the account
     * Allows the user to view the settings&#39; general section.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> settingviewgeneralWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = settingviewgeneralValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View general settings for the account (asynchronously)
     * Allows the user to view the settings&#39; general section.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingviewgeneralAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingviewgeneralValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialcontacts
     * @param token The authentication token. (required)
     * @param filter Text to filter results. (optional)
     * @param showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialcontactsCall(String token, String filter, Boolean showdefaultphoto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/socialcontacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (showdefaultphoto != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showdefaultphoto", showdefaultphoto));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialcontactsValidateBeforeCall(String token, String filter, Boolean showdefaultphoto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling socialcontacts(Async)");
        }
        

        okhttp3.Call localVarCall = socialcontactsCall(token, filter, showdefaultphoto, _callback);
        return localVarCall;

    }

    /**
     * Gets the list of contacts in the network
     * 
     * @param token The authentication token. (required)
     * @param filter Text to filter results. (optional)
     * @param showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void socialcontacts(String token, String filter, Boolean showdefaultphoto) throws ApiException {
        socialcontactsWithHttpInfo(token, filter, showdefaultphoto);
    }

    /**
     * Gets the list of contacts in the network
     * 
     * @param token The authentication token. (required)
     * @param filter Text to filter results. (optional)
     * @param showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> socialcontactsWithHttpInfo(String token, String filter, Boolean showdefaultphoto) throws ApiException {
        okhttp3.Call localVarCall = socialcontactsValidateBeforeCall(token, filter, showdefaultphoto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the list of contacts in the network (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param filter Text to filter results. (optional)
     * @param showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialcontactsAsync(String token, String filter, Boolean showdefaultphoto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialcontactsValidateBeforeCall(token, filter, showdefaultphoto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialgroupaddmembers
     * @param token The authentication token. (required)
     * @param id ID of the group to add members to. (required)
     * @param userids Csv list of user Ids to add. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialgroupaddmembersCall(String token, UUID id, String userids, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/socialgroupaddmembers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (userids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userids", userids));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialgroupaddmembersValidateBeforeCall(String token, UUID id, String userids, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling socialgroupaddmembers(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling socialgroupaddmembers(Async)");
        }
        
        // verify the required parameter 'userids' is set
        if (userids == null) {
            throw new ApiException("Missing the required parameter 'userids' when calling socialgroupaddmembers(Async)");
        }
        

        okhttp3.Call localVarCall = socialgroupaddmembersCall(token, id, userids, _callback);
        return localVarCall;

    }

    /**
     * Adds new members to a group (which the user must own already)
     * 
     * @param token The authentication token. (required)
     * @param id ID of the group to add members to. (required)
     * @param userids Csv list of user Ids to add. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void socialgroupaddmembers(String token, UUID id, String userids) throws ApiException {
        socialgroupaddmembersWithHttpInfo(token, id, userids);
    }

    /**
     * Adds new members to a group (which the user must own already)
     * 
     * @param token The authentication token. (required)
     * @param id ID of the group to add members to. (required)
     * @param userids Csv list of user Ids to add. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> socialgroupaddmembersWithHttpInfo(String token, UUID id, String userids) throws ApiException {
        okhttp3.Call localVarCall = socialgroupaddmembersValidateBeforeCall(token, id, userids, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adds new members to a group (which the user must own already) (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param id ID of the group to add members to. (required)
     * @param userids Csv list of user Ids to add. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialgroupaddmembersAsync(String token, UUID id, String userids, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialgroupaddmembersValidateBeforeCall(token, id, userids, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialgroupdelete
     * @param token The authentication token. (required)
     * @param id ID of the group to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialgroupdeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/socialgroupdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialgroupdeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling socialgroupdelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling socialgroupdelete(Async)");
        }
        

        okhttp3.Call localVarCall = socialgroupdeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Deletes a group
     * 
     * @param token The authentication token. (required)
     * @param id ID of the group to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void socialgroupdelete(String token, UUID id) throws ApiException {
        socialgroupdeleteWithHttpInfo(token, id);
    }

    /**
     * Deletes a group
     * 
     * @param token The authentication token. (required)
     * @param id ID of the group to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> socialgroupdeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = socialgroupdeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a group (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param id ID of the group to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialgroupdeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialgroupdeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialgrouplist
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialgrouplistCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/socialgrouplist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialgrouplistValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling socialgrouplist(Async)");
        }
        

        okhttp3.Call localVarCall = socialgrouplistCall(token, _callback);
        return localVarCall;

    }

    /**
     * View all the groups the current user is in
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void socialgrouplist(String token) throws ApiException {
        socialgrouplistWithHttpInfo(token);
    }

    /**
     * View all the groups the current user is in
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> socialgrouplistWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = socialgrouplistValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all the groups the current user is in (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialgrouplistAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialgrouplistValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialgrouplistmembers
     * @param token The authentication token. (required)
     * @param id ID of the group to list members. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialgrouplistmembersCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/socialgrouplistmembers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialgrouplistmembersValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling socialgrouplistmembers(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling socialgrouplistmembers(Async)");
        }
        

        okhttp3.Call localVarCall = socialgrouplistmembersCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Lists the members of a group
     * 
     * @param token The authentication token. (required)
     * @param id ID of the group to list members. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void socialgrouplistmembers(String token, UUID id) throws ApiException {
        socialgrouplistmembersWithHttpInfo(token, id);
    }

    /**
     * Lists the members of a group
     * 
     * @param token The authentication token. (required)
     * @param id ID of the group to list members. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> socialgrouplistmembersWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = socialgrouplistmembersValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the members of a group (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param id ID of the group to list members. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialgrouplistmembersAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialgrouplistmembersValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialgroupremovemembers
     * @param token The authentication token. (required)
     * @param id ID of the group to remove members from. (required)
     * @param userids Csv list of user Ids to remove. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialgroupremovemembersCall(String token, UUID id, String userids, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/socialgroupremovemembers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (userids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userids", userids));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialgroupremovemembersValidateBeforeCall(String token, UUID id, String userids, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling socialgroupremovemembers(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling socialgroupremovemembers(Async)");
        }
        
        // verify the required parameter 'userids' is set
        if (userids == null) {
            throw new ApiException("Missing the required parameter 'userids' when calling socialgroupremovemembers(Async)");
        }
        

        okhttp3.Call localVarCall = socialgroupremovemembersCall(token, id, userids, _callback);
        return localVarCall;

    }

    /**
     * Removes members from a group (which the user must own already)
     * 
     * @param token The authentication token. (required)
     * @param id ID of the group to remove members from. (required)
     * @param userids Csv list of user Ids to remove. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void socialgroupremovemembers(String token, UUID id, String userids) throws ApiException {
        socialgroupremovemembersWithHttpInfo(token, id, userids);
    }

    /**
     * Removes members from a group (which the user must own already)
     * 
     * @param token The authentication token. (required)
     * @param id ID of the group to remove members from. (required)
     * @param userids Csv list of user Ids to remove. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> socialgroupremovemembersWithHttpInfo(String token, UUID id, String userids) throws ApiException {
        okhttp3.Call localVarCall = socialgroupremovemembersValidateBeforeCall(token, id, userids, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes members from a group (which the user must own already) (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param id ID of the group to remove members from. (required)
     * @param userids Csv list of user Ids to remove. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialgroupremovemembersAsync(String token, UUID id, String userids, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialgroupremovemembersValidateBeforeCall(token, id, userids, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialgroupremovemyself
     * @param token The authentication token. (required)
     * @param id ID of the group to remove me from. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialgroupremovemyselfCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/socialgroupremovemyself";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialgroupremovemyselfValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling socialgroupremovemyself(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling socialgroupremovemyself(Async)");
        }
        

        okhttp3.Call localVarCall = socialgroupremovemyselfCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Removes myself from an existent group
     * 
     * @param token The authentication token. (required)
     * @param id ID of the group to remove me from. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void socialgroupremovemyself(String token, UUID id) throws ApiException {
        socialgroupremovemyselfWithHttpInfo(token, id);
    }

    /**
     * Removes myself from an existent group
     * 
     * @param token The authentication token. (required)
     * @param id ID of the group to remove me from. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> socialgroupremovemyselfWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = socialgroupremovemyselfValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes myself from an existent group (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param id ID of the group to remove me from. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialgroupremovemyselfAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialgroupremovemyselfValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialgroupsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialgroupsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/socialgroupsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialgroupsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = socialgroupsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Saves a new group
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void socialgroupsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        socialgroupsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Saves a new group
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> socialgroupsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = socialgroupsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Saves a new group (asynchronously)
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialgroupsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialgroupsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ssogeneratekey
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ssogeneratekeyCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ssogeneratekey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ssogeneratekeyValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling ssogeneratekey(Async)");
        }
        

        okhttp3.Call localVarCall = ssogeneratekeyCall(token, _callback);
        return localVarCall;

    }

    /**
     * Generate/reset single sign on access key.
     * Allows the user to generate or reset the access key for single sign-on.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ssogeneratekey(String token) throws ApiException {
        ssogeneratekeyWithHttpInfo(token);
    }

    /**
     * Generate/reset single sign on access key.
     * Allows the user to generate or reset the access key for single sign-on.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ssogeneratekeyWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = ssogeneratekeyValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generate/reset single sign on access key. (asynchronously)
     * Allows the user to generate or reset the access key for single sign-on.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ssogeneratekeyAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ssogeneratekeyValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ssogetsettings
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ssogetsettingsCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ssogetsettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ssogetsettingsValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling ssogetsettings(Async)");
        }
        

        okhttp3.Call localVarCall = ssogetsettingsCall(token, _callback);
        return localVarCall;

    }

    /**
     * View single sign on settings.
     * Allows the user to view settings for single sign-on.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ssogetsettings(String token) throws ApiException {
        ssogetsettingsWithHttpInfo(token);
    }

    /**
     * View single sign on settings.
     * Allows the user to view settings for single sign-on.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ssogetsettingsWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = ssogetsettingsValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View single sign on settings. (asynchronously)
     * Allows the user to view settings for single sign-on.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ssogetsettingsAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ssogetsettingsValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ssoissuetoken
     * @param key The single sign-on key of the account. (required)
     * @param username The email of the user to sign-on. (required)
     * @param expires Specifies whether the session should expire when inactive. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ssoissuetokenCall(String key, String username, Boolean expires, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ssoissuetoken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (expires != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expires", expires));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ssoissuetokenValidateBeforeCall(String key, String username, Boolean expires, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling ssoissuetoken(Async)");
        }
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling ssoissuetoken(Async)");
        }
        

        okhttp3.Call localVarCall = ssoissuetokenCall(key, username, expires, _callback);
        return localVarCall;

    }

    /**
     * Issue single sign-on token
     * 
     * @param key The single sign-on key of the account. (required)
     * @param username The email of the user to sign-on. (required)
     * @param expires Specifies whether the session should expire when inactive. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ssoissuetoken(String key, String username, Boolean expires) throws ApiException {
        ssoissuetokenWithHttpInfo(key, username, expires);
    }

    /**
     * Issue single sign-on token
     * 
     * @param key The single sign-on key of the account. (required)
     * @param username The email of the user to sign-on. (required)
     * @param expires Specifies whether the session should expire when inactive. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ssoissuetokenWithHttpInfo(String key, String username, Boolean expires) throws ApiException {
        okhttp3.Call localVarCall = ssoissuetokenValidateBeforeCall(key, username, expires, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Issue single sign-on token (asynchronously)
     * 
     * @param key The single sign-on key of the account. (required)
     * @param username The email of the user to sign-on. (required)
     * @param expires Specifies whether the session should expire when inactive. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ssoissuetokenAsync(String key, String username, Boolean expires, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ssoissuetokenValidateBeforeCall(key, username, expires, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ssosavesettings
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ssosavesettingsCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/ssosavesettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ssosavesettingsValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = ssosavesettingsCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Edit single sign-on settings.
     * Allows the user to edit settings for single sign-on.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ssosavesettings(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ssosavesettingsWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Edit single sign-on settings.
     * Allows the user to edit settings for single sign-on.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ssosavesettingsWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = ssosavesettingsValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Edit single sign-on settings. (asynchronously)
     * Allows the user to edit settings for single sign-on.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ssosavesettingsAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ssosavesettingsValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for staffavailaddmetoallservices
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailaddmetoallservicesCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/staffavailaddmetoallservices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call staffavailaddmetoallservicesValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling staffavailaddmetoallservices(Async)");
        }
        

        okhttp3.Call localVarCall = staffavailaddmetoallservicesCall(token, _callback);
        return localVarCall;

    }

    /**
     * Associate current user to all services
     * Allows the user to associate themselves to all services, provided they have a staff role.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void staffavailaddmetoallservices(String token) throws ApiException {
        staffavailaddmetoallservicesWithHttpInfo(token);
    }

    /**
     * Associate current user to all services
     * Allows the user to associate themselves to all services, provided they have a staff role.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> staffavailaddmetoallservicesWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = staffavailaddmetoallservicesValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Associate current user to all services (asynchronously)
     * Allows the user to associate themselves to all services, provided they have a staff role.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailaddmetoallservicesAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = staffavailaddmetoallservicesValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for staffavailaddmetoservice
     * @param token The authentication token. (required)
     * @param serviceid The id of the service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailaddmetoserviceCall(String token, UUID serviceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/staffavailaddmetoservice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (serviceid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceid", serviceid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call staffavailaddmetoserviceValidateBeforeCall(String token, UUID serviceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling staffavailaddmetoservice(Async)");
        }
        
        // verify the required parameter 'serviceid' is set
        if (serviceid == null) {
            throw new ApiException("Missing the required parameter 'serviceid' when calling staffavailaddmetoservice(Async)");
        }
        

        okhttp3.Call localVarCall = staffavailaddmetoserviceCall(token, serviceid, _callback);
        return localVarCall;

    }

    /**
     * Associate current user to a service
     * Allows the user to associate themselves to a service, provided they have a staff role.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void staffavailaddmetoservice(String token, UUID serviceid) throws ApiException {
        staffavailaddmetoserviceWithHttpInfo(token, serviceid);
    }

    /**
     * Associate current user to a service
     * Allows the user to associate themselves to a service, provided they have a staff role.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> staffavailaddmetoserviceWithHttpInfo(String token, UUID serviceid) throws ApiException {
        okhttp3.Call localVarCall = staffavailaddmetoserviceValidateBeforeCall(token, serviceid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Associate current user to a service (asynchronously)
     * Allows the user to associate themselves to a service, provided they have a staff role.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailaddmetoserviceAsync(String token, UUID serviceid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = staffavailaddmetoserviceValidateBeforeCall(token, serviceid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for staffavailaddusertoallservices
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailaddusertoallservicesCall(String token, UUID userid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/staffavailaddusertoallservices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call staffavailaddusertoallservicesValidateBeforeCall(String token, UUID userid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling staffavailaddusertoallservices(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling staffavailaddusertoallservices(Async)");
        }
        

        okhttp3.Call localVarCall = staffavailaddusertoallservicesCall(token, userid, _callback);
        return localVarCall;

    }

    /**
     * Associate a staff member to all services
     * Allows the user to make a staff member available for all services.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void staffavailaddusertoallservices(String token, UUID userid) throws ApiException {
        staffavailaddusertoallservicesWithHttpInfo(token, userid);
    }

    /**
     * Associate a staff member to all services
     * Allows the user to make a staff member available for all services.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> staffavailaddusertoallservicesWithHttpInfo(String token, UUID userid) throws ApiException {
        okhttp3.Call localVarCall = staffavailaddusertoallservicesValidateBeforeCall(token, userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Associate a staff member to all services (asynchronously)
     * Allows the user to make a staff member available for all services.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailaddusertoallservicesAsync(String token, UUID userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = staffavailaddusertoallservicesValidateBeforeCall(token, userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for staffavailaddusertoservice
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param serviceid The id of the service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailaddusertoserviceCall(String token, UUID userid, UUID serviceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/staffavailaddusertoservice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (serviceid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceid", serviceid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call staffavailaddusertoserviceValidateBeforeCall(String token, UUID userid, UUID serviceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling staffavailaddusertoservice(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling staffavailaddusertoservice(Async)");
        }
        
        // verify the required parameter 'serviceid' is set
        if (serviceid == null) {
            throw new ApiException("Missing the required parameter 'serviceid' when calling staffavailaddusertoservice(Async)");
        }
        

        okhttp3.Call localVarCall = staffavailaddusertoserviceCall(token, userid, serviceid, _callback);
        return localVarCall;

    }

    /**
     * Associate a staff member to a service
     * Allows the user to make a staff member available for a service.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param serviceid The id of the service. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void staffavailaddusertoservice(String token, UUID userid, UUID serviceid) throws ApiException {
        staffavailaddusertoserviceWithHttpInfo(token, userid, serviceid);
    }

    /**
     * Associate a staff member to a service
     * Allows the user to make a staff member available for a service.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param serviceid The id of the service. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> staffavailaddusertoserviceWithHttpInfo(String token, UUID userid, UUID serviceid) throws ApiException {
        okhttp3.Call localVarCall = staffavailaddusertoserviceValidateBeforeCall(token, userid, serviceid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Associate a staff member to a service (asynchronously)
     * Allows the user to make a staff member available for a service.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param serviceid The id of the service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailaddusertoserviceAsync(String token, UUID userid, UUID serviceid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = staffavailaddusertoserviceValidateBeforeCall(token, userid, serviceid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for staffavailgetmyservices
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailgetmyservicesCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/staffavailgetmyservices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call staffavailgetmyservicesValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling staffavailgetmyservices(Async)");
        }
        

        okhttp3.Call localVarCall = staffavailgetmyservicesCall(token, _callback);
        return localVarCall;

    }

    /**
     * View the services the current user is available for
     * Allows the user to view a list of services that they are associated with.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void staffavailgetmyservices(String token) throws ApiException {
        staffavailgetmyservicesWithHttpInfo(token);
    }

    /**
     * View the services the current user is available for
     * Allows the user to view a list of services that they are associated with.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> staffavailgetmyservicesWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = staffavailgetmyservicesValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the services the current user is available for (asynchronously)
     * Allows the user to view a list of services that they are associated with.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailgetmyservicesAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = staffavailgetmyservicesValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for staffavailgetservices
     * @param token The authentication token. (required)
     * @param userid The user id to list services. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailgetservicesCall(String token, UUID userid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/staffavailgetservices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call staffavailgetservicesValidateBeforeCall(String token, UUID userid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling staffavailgetservices(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling staffavailgetservices(Async)");
        }
        

        okhttp3.Call localVarCall = staffavailgetservicesCall(token, userid, _callback);
        return localVarCall;

    }

    /**
     * View a list of services that a staff member is available for
     * Allows the user to view the list of services that a staff member is available for.
     * @param token The authentication token. (required)
     * @param userid The user id to list services. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void staffavailgetservices(String token, UUID userid) throws ApiException {
        staffavailgetservicesWithHttpInfo(token, userid);
    }

    /**
     * View a list of services that a staff member is available for
     * Allows the user to view the list of services that a staff member is available for.
     * @param token The authentication token. (required)
     * @param userid The user id to list services. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> staffavailgetservicesWithHttpInfo(String token, UUID userid) throws ApiException {
        okhttp3.Call localVarCall = staffavailgetservicesValidateBeforeCall(token, userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of services that a staff member is available for (asynchronously)
     * Allows the user to view the list of services that a staff member is available for.
     * @param token The authentication token. (required)
     * @param userid The user id to list services. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailgetservicesAsync(String token, UUID userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = staffavailgetservicesValidateBeforeCall(token, userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for staffavailgetusersforservice
     * @param token The authentication token. (required)
     * @param serviceid The service id to list users. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailgetusersforserviceCall(String token, UUID serviceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/staffavailgetusersforservice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (serviceid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceid", serviceid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call staffavailgetusersforserviceValidateBeforeCall(String token, UUID serviceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling staffavailgetusersforservice(Async)");
        }
        
        // verify the required parameter 'serviceid' is set
        if (serviceid == null) {
            throw new ApiException("Missing the required parameter 'serviceid' when calling staffavailgetusersforservice(Async)");
        }
        

        okhttp3.Call localVarCall = staffavailgetusersforserviceCall(token, serviceid, _callback);
        return localVarCall;

    }

    /**
     * View a list of staff members that are available for a specific service
     * Allows the user to view all staff members who are available for a service.
     * @param token The authentication token. (required)
     * @param serviceid The service id to list users. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void staffavailgetusersforservice(String token, UUID serviceid) throws ApiException {
        staffavailgetusersforserviceWithHttpInfo(token, serviceid);
    }

    /**
     * View a list of staff members that are available for a specific service
     * Allows the user to view all staff members who are available for a service.
     * @param token The authentication token. (required)
     * @param serviceid The service id to list users. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> staffavailgetusersforserviceWithHttpInfo(String token, UUID serviceid) throws ApiException {
        okhttp3.Call localVarCall = staffavailgetusersforserviceValidateBeforeCall(token, serviceid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of staff members that are available for a specific service (asynchronously)
     * Allows the user to view all staff members who are available for a service.
     * @param token The authentication token. (required)
     * @param serviceid The service id to list users. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailgetusersforserviceAsync(String token, UUID serviceid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = staffavailgetusersforserviceValidateBeforeCall(token, serviceid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for staffavaillisttypes
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavaillisttypesCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/staffavaillisttypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call staffavaillisttypesValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling staffavaillisttypes(Async)");
        }
        

        okhttp3.Call localVarCall = staffavaillisttypesCall(token, _callback);
        return localVarCall;

    }

    /**
     * View all the availability types
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void staffavaillisttypes(String token) throws ApiException {
        staffavaillisttypesWithHttpInfo(token);
    }

    /**
     * View all the availability types
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> staffavaillisttypesWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = staffavaillisttypesValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all the availability types (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavaillisttypesAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = staffavaillisttypesValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for staffavailremovemefromallservices
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailremovemefromallservicesCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/staffavailremovemefromallservices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call staffavailremovemefromallservicesValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling staffavailremovemefromallservices(Async)");
        }
        

        okhttp3.Call localVarCall = staffavailremovemefromallservicesCall(token, _callback);
        return localVarCall;

    }

    /**
     * Remove current user from all services
     * Allows the user to disassociate themselves from all services, provided they have a staff role.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void staffavailremovemefromallservices(String token) throws ApiException {
        staffavailremovemefromallservicesWithHttpInfo(token);
    }

    /**
     * Remove current user from all services
     * Allows the user to disassociate themselves from all services, provided they have a staff role.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> staffavailremovemefromallservicesWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = staffavailremovemefromallservicesValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove current user from all services (asynchronously)
     * Allows the user to disassociate themselves from all services, provided they have a staff role.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailremovemefromallservicesAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = staffavailremovemefromallservicesValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for staffavailremovemefromservice
     * @param token The authentication token. (required)
     * @param serviceid The id of the service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailremovemefromserviceCall(String token, UUID serviceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/staffavailremovemefromservice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (serviceid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceid", serviceid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call staffavailremovemefromserviceValidateBeforeCall(String token, UUID serviceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling staffavailremovemefromservice(Async)");
        }
        
        // verify the required parameter 'serviceid' is set
        if (serviceid == null) {
            throw new ApiException("Missing the required parameter 'serviceid' when calling staffavailremovemefromservice(Async)");
        }
        

        okhttp3.Call localVarCall = staffavailremovemefromserviceCall(token, serviceid, _callback);
        return localVarCall;

    }

    /**
     * Remove current user from a service
     * Allows the user to disassociate themselves from a service, provided they have a staff role.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void staffavailremovemefromservice(String token, UUID serviceid) throws ApiException {
        staffavailremovemefromserviceWithHttpInfo(token, serviceid);
    }

    /**
     * Remove current user from a service
     * Allows the user to disassociate themselves from a service, provided they have a staff role.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> staffavailremovemefromserviceWithHttpInfo(String token, UUID serviceid) throws ApiException {
        okhttp3.Call localVarCall = staffavailremovemefromserviceValidateBeforeCall(token, serviceid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove current user from a service (asynchronously)
     * Allows the user to disassociate themselves from a service, provided they have a staff role.
     * @param token The authentication token. (required)
     * @param serviceid The id of the service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailremovemefromserviceAsync(String token, UUID serviceid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = staffavailremovemefromserviceValidateBeforeCall(token, serviceid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for staffavailremoveuserfromallservices
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailremoveuserfromallservicesCall(String token, UUID userid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/staffavailremoveuserfromallservices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call staffavailremoveuserfromallservicesValidateBeforeCall(String token, UUID userid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling staffavailremoveuserfromallservices(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling staffavailremoveuserfromallservices(Async)");
        }
        

        okhttp3.Call localVarCall = staffavailremoveuserfromallservicesCall(token, userid, _callback);
        return localVarCall;

    }

    /**
     * Removes a staff member from the registration to all services
     * Allows the user to remove a staff member&#39;s availability to all services.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void staffavailremoveuserfromallservices(String token, UUID userid) throws ApiException {
        staffavailremoveuserfromallservicesWithHttpInfo(token, userid);
    }

    /**
     * Removes a staff member from the registration to all services
     * Allows the user to remove a staff member&#39;s availability to all services.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> staffavailremoveuserfromallservicesWithHttpInfo(String token, UUID userid) throws ApiException {
        okhttp3.Call localVarCall = staffavailremoveuserfromallservicesValidateBeforeCall(token, userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a staff member from the registration to all services (asynchronously)
     * Allows the user to remove a staff member&#39;s availability to all services.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailremoveuserfromallservicesAsync(String token, UUID userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = staffavailremoveuserfromallservicesValidateBeforeCall(token, userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for staffavailremoveuserfromservice
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param serviceid The id of the service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailremoveuserfromserviceCall(String token, UUID userid, UUID serviceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/staffavailremoveuserfromservice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (serviceid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceid", serviceid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call staffavailremoveuserfromserviceValidateBeforeCall(String token, UUID userid, UUID serviceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling staffavailremoveuserfromservice(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling staffavailremoveuserfromservice(Async)");
        }
        
        // verify the required parameter 'serviceid' is set
        if (serviceid == null) {
            throw new ApiException("Missing the required parameter 'serviceid' when calling staffavailremoveuserfromservice(Async)");
        }
        

        okhttp3.Call localVarCall = staffavailremoveuserfromserviceCall(token, userid, serviceid, _callback);
        return localVarCall;

    }

    /**
     * Remove a staff member from a service
     * Allows the user to remove a staff member&#39;s service availability.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param serviceid The id of the service. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void staffavailremoveuserfromservice(String token, UUID userid, UUID serviceid) throws ApiException {
        staffavailremoveuserfromserviceWithHttpInfo(token, userid, serviceid);
    }

    /**
     * Remove a staff member from a service
     * Allows the user to remove a staff member&#39;s service availability.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param serviceid The id of the service. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> staffavailremoveuserfromserviceWithHttpInfo(String token, UUID userid, UUID serviceid) throws ApiException {
        okhttp3.Call localVarCall = staffavailremoveuserfromserviceValidateBeforeCall(token, userid, serviceid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a staff member from a service (asynchronously)
     * Allows the user to remove a staff member&#39;s service availability.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param serviceid The id of the service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailremoveuserfromserviceAsync(String token, UUID userid, UUID serviceid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = staffavailremoveuserfromserviceValidateBeforeCall(token, userid, serviceid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for staffavailsetavailability
     * @param token The authentication token. (required)
     * @param userid The id of the user whose specific availability has to be set. (required)
     * @param availablefor Specific availability to set. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailsetavailabilityCall(String token, UUID userid, String availablefor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/staffavailsetavailability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (availablefor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availablefor", availablefor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call staffavailsetavailabilityValidateBeforeCall(String token, UUID userid, String availablefor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling staffavailsetavailability(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling staffavailsetavailability(Async)");
        }
        

        okhttp3.Call localVarCall = staffavailsetavailabilityCall(token, userid, availablefor, _callback);
        return localVarCall;

    }

    /**
     * Make a staff member available for a specific availability type
     * Allows the user to set a staff member as available for walk ins, appointments, or both.
     * @param token The authentication token. (required)
     * @param userid The id of the user whose specific availability has to be set. (required)
     * @param availablefor Specific availability to set. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void staffavailsetavailability(String token, UUID userid, String availablefor) throws ApiException {
        staffavailsetavailabilityWithHttpInfo(token, userid, availablefor);
    }

    /**
     * Make a staff member available for a specific availability type
     * Allows the user to set a staff member as available for walk ins, appointments, or both.
     * @param token The authentication token. (required)
     * @param userid The id of the user whose specific availability has to be set. (required)
     * @param availablefor Specific availability to set. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> staffavailsetavailabilityWithHttpInfo(String token, UUID userid, String availablefor) throws ApiException {
        okhttp3.Call localVarCall = staffavailsetavailabilityValidateBeforeCall(token, userid, availablefor, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Make a staff member available for a specific availability type (asynchronously)
     * Allows the user to set a staff member as available for walk ins, appointments, or both.
     * @param token The authentication token. (required)
     * @param userid The id of the user whose specific availability has to be set. (required)
     * @param availablefor Specific availability to set. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailsetavailabilityAsync(String token, UUID userid, String availablefor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = staffavailsetavailabilityValidateBeforeCall(token, userid, availablefor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for staffavailsetmyavailability
     * @param token The authentication token. (required)
     * @param availablefor Specific availability to set. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailsetmyavailabilityCall(String token, String availablefor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/staffavailsetmyavailability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (availablefor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availablefor", availablefor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call staffavailsetmyavailabilityValidateBeforeCall(String token, String availablefor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling staffavailsetmyavailability(Async)");
        }
        

        okhttp3.Call localVarCall = staffavailsetmyavailabilityCall(token, availablefor, _callback);
        return localVarCall;

    }

    /**
     * Change current user&#39;s availability type
     * Allows the user to make themselves available for walk ins, appointments, or both.
     * @param token The authentication token. (required)
     * @param availablefor Specific availability to set. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void staffavailsetmyavailability(String token, String availablefor) throws ApiException {
        staffavailsetmyavailabilityWithHttpInfo(token, availablefor);
    }

    /**
     * Change current user&#39;s availability type
     * Allows the user to make themselves available for walk ins, appointments, or both.
     * @param token The authentication token. (required)
     * @param availablefor Specific availability to set. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> staffavailsetmyavailabilityWithHttpInfo(String token, String availablefor) throws ApiException {
        okhttp3.Call localVarCall = staffavailsetmyavailabilityValidateBeforeCall(token, availablefor, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change current user&#39;s availability type (asynchronously)
     * Allows the user to make themselves available for walk ins, appointments, or both.
     * @param token The authentication token. (required)
     * @param availablefor Specific availability to set. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staffavailsetmyavailabilityAsync(String token, String availablefor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = staffavailsetmyavailabilityValidateBeforeCall(token, availablefor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stationdelete
     * @param token The authentication token. (required)
     * @param id The id of the sign-in station to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationdeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stationdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stationdeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling stationdelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stationdelete(Async)");
        }
        

        okhttp3.Call localVarCall = stationdeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a sign-in station
     * Allows the user to delete a sign-in station from the list of existing sign-in stations that they can view based on their scope.
     * @param token The authentication token. (required)
     * @param id The id of the sign-in station to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stationdelete(String token, UUID id) throws ApiException {
        stationdeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a sign-in station
     * Allows the user to delete a sign-in station from the list of existing sign-in stations that they can view based on their scope.
     * @param token The authentication token. (required)
     * @param id The id of the sign-in station to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stationdeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = stationdeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a sign-in station (asynchronously)
     * Allows the user to delete a sign-in station from the list of existing sign-in stations that they can view based on their scope.
     * @param token The authentication token. (required)
     * @param id The id of the sign-in station to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationdeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stationdeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stationget
     * @param token The authentication token. (required)
     * @param id The id of the sign-in station to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationgetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stationget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stationgetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling stationget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stationget(Async)");
        }
        

        okhttp3.Call localVarCall = stationgetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View details of a sign-in station
     * Allows the user to view an individual sign-in station and its details.
     * @param token The authentication token. (required)
     * @param id The id of the sign-in station to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stationget(String token, UUID id) throws ApiException {
        stationgetWithHttpInfo(token, id);
    }

    /**
     * View details of a sign-in station
     * Allows the user to view an individual sign-in station and its details.
     * @param token The authentication token. (required)
     * @param id The id of the sign-in station to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stationgetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = stationgetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a sign-in station (asynchronously)
     * Allows the user to view an individual sign-in station and its details.
     * @param token The authentication token. (required)
     * @param id The id of the sign-in station to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationgetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stationgetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stationgetcurrentterms
     * @param station The id of the sign-in station whose account&#39;s current terms have to be retrieved. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationgetcurrenttermsCall(UUID station, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stationgetcurrentterms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stationgetcurrenttermsValidateBeforeCall(UUID station, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling stationgetcurrentterms(Async)");
        }
        

        okhttp3.Call localVarCall = stationgetcurrenttermsCall(station, _callback);
        return localVarCall;

    }

    /**
     * Get all the current terms
     * 
     * @param station The id of the sign-in station whose account&#39;s current terms have to be retrieved. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stationgetcurrentterms(UUID station) throws ApiException {
        stationgetcurrenttermsWithHttpInfo(station);
    }

    /**
     * Get all the current terms
     * 
     * @param station The id of the sign-in station whose account&#39;s current terms have to be retrieved. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stationgetcurrenttermsWithHttpInfo(UUID station) throws ApiException {
        okhttp3.Call localVarCall = stationgetcurrenttermsValidateBeforeCall(station, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get all the current terms (asynchronously)
     * 
     * @param station The id of the sign-in station whose account&#39;s current terms have to be retrieved. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationgetcurrenttermsAsync(UUID station, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stationgetcurrenttermsValidateBeforeCall(station, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stationgetinfo
     * @param id The id of the sign-in station to get. (required)
     * @param event The id of the event, to override the one by schedule. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationgetinfoCall(UUID id, UUID event, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stationgetinfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stationgetinfoValidateBeforeCall(UUID id, UUID event, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stationgetinfo(Async)");
        }
        

        okhttp3.Call localVarCall = stationgetinfoCall(id, event, _callback);
        return localVarCall;

    }

    /**
     * Gets a the info to display in the sign-in station by it&#39;s ID.
     * 
     * @param id The id of the sign-in station to get. (required)
     * @param event The id of the event, to override the one by schedule. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stationgetinfo(UUID id, UUID event) throws ApiException {
        stationgetinfoWithHttpInfo(id, event);
    }

    /**
     * Gets a the info to display in the sign-in station by it&#39;s ID.
     * 
     * @param id The id of the sign-in station to get. (required)
     * @param event The id of the event, to override the one by schedule. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stationgetinfoWithHttpInfo(UUID id, UUID event) throws ApiException {
        okhttp3.Call localVarCall = stationgetinfoValidateBeforeCall(id, event, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets a the info to display in the sign-in station by it&#39;s ID. (asynchronously)
     * 
     * @param id The id of the sign-in station to get. (required)
     * @param event The id of the event, to override the one by schedule. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationgetinfoAsync(UUID id, UUID event, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stationgetinfoValidateBeforeCall(id, event, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stationgetlicense
     * @param station The id of the sign-in station whose account&#39;s license has to be retrieved. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationgetlicenseCall(String station, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stationgetlicense";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stationgetlicenseValidateBeforeCall(String station, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling stationgetlicense(Async)");
        }
        

        okhttp3.Call localVarCall = stationgetlicenseCall(station, _callback);
        return localVarCall;

    }

    /**
     * Gets the current license information
     * 
     * @param station The id of the sign-in station whose account&#39;s license has to be retrieved. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stationgetlicense(String station) throws ApiException {
        stationgetlicenseWithHttpInfo(station);
    }

    /**
     * Gets the current license information
     * 
     * @param station The id of the sign-in station whose account&#39;s license has to be retrieved. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stationgetlicenseWithHttpInfo(String station) throws ApiException {
        okhttp3.Call localVarCall = stationgetlicenseValidateBeforeCall(station, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the current license information (asynchronously)
     * 
     * @param station The id of the sign-in station whose account&#39;s license has to be retrieved. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationgetlicenseAsync(String station, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stationgetlicenseValidateBeforeCall(station, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stationgetlocationsettings
     * @param location The id of the location whose station settings have to be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationgetlocationsettingsCall(UUID location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stationgetlocationsettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stationgetlocationsettingsValidateBeforeCall(UUID location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling stationgetlocationsettings(Async)");
        }
        

        okhttp3.Call localVarCall = stationgetlocationsettingsCall(location, _callback);
        return localVarCall;

    }

    /**
     * View the sign-in station settings of a specified location
     * Allows the user to view the location settings of a sign-in station.
     * @param location The id of the location whose station settings have to be returned. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stationgetlocationsettings(UUID location) throws ApiException {
        stationgetlocationsettingsWithHttpInfo(location);
    }

    /**
     * View the sign-in station settings of a specified location
     * Allows the user to view the location settings of a sign-in station.
     * @param location The id of the location whose station settings have to be returned. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stationgetlocationsettingsWithHttpInfo(UUID location) throws ApiException {
        okhttp3.Call localVarCall = stationgetlocationsettingsValidateBeforeCall(location, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the sign-in station settings of a specified location (asynchronously)
     * Allows the user to view the location settings of a sign-in station.
     * @param location The id of the location whose station settings have to be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationgetlocationsettingsAsync(UUID location, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stationgetlocationsettingsValidateBeforeCall(location, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stationlist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationlistCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stationlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stationlistValidateBeforeCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling stationlist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling stationlist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling stationlist(Async)");
        }
        

        okhttp3.Call localVarCall = stationlistCall(token, from, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of sign-in stations
     * Allows the user to view the list of sign-in stations, limited to the stations in the locations to which they are scoped.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stationlist(String token, Integer from, Integer count) throws ApiException {
        stationlistWithHttpInfo(token, from, count);
    }

    /**
     * View a list of sign-in stations
     * Allows the user to view the list of sign-in stations, limited to the stations in the locations to which they are scoped.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stationlistWithHttpInfo(String token, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = stationlistValidateBeforeCall(token, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of sign-in stations (asynchronously)
     * Allows the user to view the list of sign-in stations, limited to the stations in the locations to which they are scoped.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationlistAsync(String token, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stationlistValidateBeforeCall(token, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stationsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/stationsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stationsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = stationsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a sign-in station
     * Allows the user to create, edit, or install a sign-in station based in an area to which they are scoped.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stationsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        stationsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a sign-in station
     * Allows the user to create, edit, or install a sign-in station based in an area to which they are scoped.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stationsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = stationsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a sign-in station (asynchronously)
     * Allows the user to create, edit, or install a sign-in station based in an area to which they are scoped.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stationsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stationsavemine
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationsavemineCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/stationsavemine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stationsavemineValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = stationsavemineCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a class attendance sign-in station for myself
     * Allows the user to create a class attendance sign-in station for a course for which they are available as staff.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stationsavemine(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        stationsavemineWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a class attendance sign-in station for myself
     * Allows the user to create a class attendance sign-in station for a course for which they are available as staff.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stationsavemineWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = stationsavemineValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a class attendance sign-in station for myself (asynchronously)
     * Allows the user to create a class attendance sign-in station for a course for which they are available as staff.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationsavemineAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stationsavemineValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stationunlock
     * @param id The id of the sign-in station to unlock. (required)
     * @param passcode The passcode to unlock the station. (required)
     * @param method The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationunlockCall(UUID id, String passcode, String method, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stationunlock";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (passcode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("passcode", passcode));
        }

        if (method != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("method", method));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stationunlockValidateBeforeCall(UUID id, String passcode, String method, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stationunlock(Async)");
        }
        
        // verify the required parameter 'passcode' is set
        if (passcode == null) {
            throw new ApiException("Missing the required parameter 'passcode' when calling stationunlock(Async)");
        }
        
        // verify the required parameter 'method' is set
        if (method == null) {
            throw new ApiException("Missing the required parameter 'method' when calling stationunlock(Async)");
        }
        

        okhttp3.Call localVarCall = stationunlockCall(id, passcode, method, _callback);
        return localVarCall;

    }

    /**
     * Unlocks the sign-in station.
     * 
     * @param id The id of the sign-in station to unlock. (required)
     * @param passcode The passcode to unlock the station. (required)
     * @param method The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stationunlock(UUID id, String passcode, String method) throws ApiException {
        stationunlockWithHttpInfo(id, passcode, method);
    }

    /**
     * Unlocks the sign-in station.
     * 
     * @param id The id of the sign-in station to unlock. (required)
     * @param passcode The passcode to unlock the station. (required)
     * @param method The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stationunlockWithHttpInfo(UUID id, String passcode, String method) throws ApiException {
        okhttp3.Call localVarCall = stationunlockValidateBeforeCall(id, passcode, method, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unlocks the sign-in station. (asynchronously)
     * 
     * @param id The id of the sign-in station to unlock. (required)
     * @param passcode The passcode to unlock the station. (required)
     * @param method The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stationunlockAsync(UUID id, String passcode, String method, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stationunlockValidateBeforeCall(id, passcode, method, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for swipedelete
     * @param token The authentication token. (required)
     * @param id The id of the swipe to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swipedeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/swipedelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call swipedeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling swipedelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling swipedelete(Async)");
        }
        

        okhttp3.Call localVarCall = swipedeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a swipe
     * Allows the user to delete an existing attendance swipe.
     * @param token The authentication token. (required)
     * @param id The id of the swipe to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void swipedelete(String token, UUID id) throws ApiException {
        swipedeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a swipe
     * Allows the user to delete an existing attendance swipe.
     * @param token The authentication token. (required)
     * @param id The id of the swipe to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> swipedeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = swipedeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a swipe (asynchronously)
     * Allows the user to delete an existing attendance swipe.
     * @param token The authentication token. (required)
     * @param id The id of the swipe to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swipedeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = swipedeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for swipeget
     * @param token The authentication token. (required)
     * @param id The id of the swipe to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swipegetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/swipeget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call swipegetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling swipeget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling swipeget(Async)");
        }
        

        okhttp3.Call localVarCall = swipegetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of a swipe
     * Allows the user to view an individual attendance swipe.
     * @param token The authentication token. (required)
     * @param id The id of the swipe to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void swipeget(String token, UUID id) throws ApiException {
        swipegetWithHttpInfo(token, id);
    }

    /**
     * Search and view details of a swipe
     * Allows the user to view an individual attendance swipe.
     * @param token The authentication token. (required)
     * @param id The id of the swipe to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> swipegetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = swipegetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of a swipe (asynchronously)
     * Allows the user to view an individual attendance swipe.
     * @param token The authentication token. (required)
     * @param id The id of the swipe to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swipegetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = swipegetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for swipelist
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swipelistCall(Integer from, Integer count, String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/swipelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call swipelistValidateBeforeCall(Integer from, Integer count, String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling swipelist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling swipelist(Async)");
        }
        

        okhttp3.Call localVarCall = swipelistCall(from, count, token, _callback);
        return localVarCall;

    }

    /**
     * View a list of swipes
     * Allows the user to view a list of all swipes for the location or locations in which the user is scoped.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void swipelist(Integer from, Integer count, String token) throws ApiException {
        swipelistWithHttpInfo(from, count, token);
    }

    /**
     * View a list of swipes
     * Allows the user to view a list of all swipes for the location or locations in which the user is scoped.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> swipelistWithHttpInfo(Integer from, Integer count, String token) throws ApiException {
        okhttp3.Call localVarCall = swipelistValidateBeforeCall(from, count, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of swipes (asynchronously)
     * Allows the user to view a list of all swipes for the location or locations in which the user is scoped.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param token The authentication token. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swipelistAsync(Integer from, Integer count, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = swipelistValidateBeforeCall(from, count, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for swipesave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swipesaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/swipesave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call swipesaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = swipesaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a swipe, and if possible, save the related attendance log
     * Allows the user to save an attendance swipe, which will also save the attendance log if the information in the swipe is enough.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void swipesave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        swipesaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a swipe, and if possible, save the related attendance log
     * Allows the user to save an attendance swipe, which will also save the attendance log if the information in the swipe is enough.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> swipesaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = swipesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a swipe, and if possible, save the related attendance log (asynchronously)
     * Allows the user to save an attendance swipe, which will also save the attendance log if the information in the swipe is enough.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swipesaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = swipesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for swipesaveanonym
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swipesaveanonymCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/swipesaveanonym";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call swipesaveanonymValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = swipesaveanonymCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Creates a new swipe from a sign-in station, and if possible, creates the attendance log
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void swipesaveanonym(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        swipesaveanonymWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Creates a new swipe from a sign-in station, and if possible, creates the attendance log
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> swipesaveanonymWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = swipesaveanonymValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a new swipe from a sign-in station, and if possible, creates the attendance log (asynchronously)
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swipesaveanonymAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = swipesaveanonymValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagdelete
     * @param token The authentication token. (required)
     * @param id The id of the tag to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagdeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tagdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagdeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling tagdelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tagdelete(Async)");
        }
        

        okhttp3.Call localVarCall = tagdeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a tag
     * Allows the user to delete an existing tag.
     * @param token The authentication token. (required)
     * @param id The id of the tag to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void tagdelete(String token, UUID id) throws ApiException {
        tagdeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a tag
     * Allows the user to delete an existing tag.
     * @param token The authentication token. (required)
     * @param id The id of the tag to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tagdeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = tagdeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a tag (asynchronously)
     * Allows the user to delete an existing tag.
     * @param token The authentication token. (required)
     * @param id The id of the tag to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagdeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagdeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagget
     * @param token The authentication token. (required)
     * @param id The id of the tag to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taggetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tagget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taggetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling tagget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tagget(Async)");
        }
        

        okhttp3.Call localVarCall = taggetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View details of a specified tag
     * Allows the user to click on and view the settings for a tag.
     * @param token The authentication token. (required)
     * @param id The id of the tag to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void tagget(String token, UUID id) throws ApiException {
        taggetWithHttpInfo(token, id);
    }

    /**
     * View details of a specified tag
     * Allows the user to click on and view the settings for a tag.
     * @param token The authentication token. (required)
     * @param id The id of the tag to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> taggetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = taggetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a specified tag (asynchronously)
     * Allows the user to click on and view the settings for a tag.
     * @param token The authentication token. (required)
     * @param id The id of the tag to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taggetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = taggetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for taglist
     * @param token The authentication token. (required)
     * @param group The group of the tags to return. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taglistCall(String token, String group, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taglist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taglistValidateBeforeCall(String token, String group, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling taglist(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling taglist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling taglist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling taglist(Async)");
        }
        

        okhttp3.Call localVarCall = taglistCall(token, group, from, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of tags
     * Allows the user to view the list of tags.
     * @param token The authentication token. (required)
     * @param group The group of the tags to return. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void taglist(String token, String group, Integer from, Integer count) throws ApiException {
        taglistWithHttpInfo(token, group, from, count);
    }

    /**
     * View a list of tags
     * Allows the user to view the list of tags.
     * @param token The authentication token. (required)
     * @param group The group of the tags to return. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> taglistWithHttpInfo(String token, String group, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = taglistValidateBeforeCall(token, group, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of tags (asynchronously)
     * Allows the user to view the list of tags.
     * @param token The authentication token. (required)
     * @param group The group of the tags to return. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taglistAsync(String token, String group, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = taglistValidateBeforeCall(token, group, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for taglistgroups
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taglistgroupsCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taglistgroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taglistgroupsValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling taglistgroups(Async)");
        }
        

        okhttp3.Call localVarCall = taglistgroupsCall(token, _callback);
        return localVarCall;

    }

    /**
     * View a list of entities that can be tagged
     * Allows the user to view the list of user roles that can be tagged, according to that tag&#39;s settings.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void taglistgroups(String token) throws ApiException {
        taglistgroupsWithHttpInfo(token);
    }

    /**
     * View a list of entities that can be tagged
     * Allows the user to view the list of user roles that can be tagged, according to that tag&#39;s settings.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> taglistgroupsWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = taglistgroupsValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of entities that can be tagged (asynchronously)
     * Allows the user to view the list of user roles that can be tagged, according to that tag&#39;s settings.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taglistgroupsAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = taglistgroupsValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/tagsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = tagsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a tag
     * Allows the user to create or edit a tag.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void tagsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        tagsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a tag
     * Allows the user to create or edit a tag.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tagsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = tagsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a tag (asynchronously)
     * Allows the user to create or edit a tag.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagsearch
     * @param token The authentication token. (required)
     * @param query The query to search tags. Use group:&lt;group&gt; to search in a specific group (mandatory). (required)
     * @param allowcreatingnew Specifies whether an option to create a new tag should be retrieved. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsearchCall(String token, String query, Boolean allowcreatingnew, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tagsearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (allowcreatingnew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowcreatingnew", allowcreatingnew));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagsearchValidateBeforeCall(String token, String query, Boolean allowcreatingnew, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling tagsearch(Async)");
        }
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling tagsearch(Async)");
        }
        

        okhttp3.Call localVarCall = tagsearchCall(token, query, allowcreatingnew, _callback);
        return localVarCall;

    }

    /**
     * Search for tags in the account
     * Allows the user to search for tags.
     * @param token The authentication token. (required)
     * @param query The query to search tags. Use group:&lt;group&gt; to search in a specific group (mandatory). (required)
     * @param allowcreatingnew Specifies whether an option to create a new tag should be retrieved. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void tagsearch(String token, String query, Boolean allowcreatingnew) throws ApiException {
        tagsearchWithHttpInfo(token, query, allowcreatingnew);
    }

    /**
     * Search for tags in the account
     * Allows the user to search for tags.
     * @param token The authentication token. (required)
     * @param query The query to search tags. Use group:&lt;group&gt; to search in a specific group (mandatory). (required)
     * @param allowcreatingnew Specifies whether an option to create a new tag should be retrieved. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tagsearchWithHttpInfo(String token, String query, Boolean allowcreatingnew) throws ApiException {
        okhttp3.Call localVarCall = tagsearchValidateBeforeCall(token, query, allowcreatingnew, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search for tags in the account (asynchronously)
     * Allows the user to search for tags.
     * @param token The authentication token. (required)
     * @param query The query to search tags. Use group:&lt;group&gt; to search in a specific group (mandatory). (required)
     * @param allowcreatingnew Specifies whether an option to create a new tag should be retrieved. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsearchAsync(String token, String query, Boolean allowcreatingnew, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagsearchValidateBeforeCall(token, query, allowcreatingnew, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateaddimage
     * @param token The authentication token. (required)
     * @param template The id of the template where the image has to be added (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateaddimageCall(String token, UUID template, String upload, String filename, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templateaddimage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (template != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template", template));
        }

        if (upload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload", upload));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateaddimageValidateBeforeCall(String token, UUID template, String upload, String filename, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling templateaddimage(Async)");
        }
        
        // verify the required parameter 'template' is set
        if (template == null) {
            throw new ApiException("Missing the required parameter 'template' when calling templateaddimage(Async)");
        }
        
        // verify the required parameter 'upload' is set
        if (upload == null) {
            throw new ApiException("Missing the required parameter 'upload' when calling templateaddimage(Async)");
        }
        

        okhttp3.Call localVarCall = templateaddimageCall(token, template, upload, filename, _callback);
        return localVarCall;

    }

    /**
     * Add an image to a template
     * Allows the user to add an image to a badge or certificate template.
     * @param token The authentication token. (required)
     * @param template The id of the template where the image has to be added (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templateaddimage(String token, UUID template, String upload, String filename) throws ApiException {
        templateaddimageWithHttpInfo(token, template, upload, filename);
    }

    /**
     * Add an image to a template
     * Allows the user to add an image to a badge or certificate template.
     * @param token The authentication token. (required)
     * @param template The id of the template where the image has to be added (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templateaddimageWithHttpInfo(String token, UUID template, String upload, String filename) throws ApiException {
        okhttp3.Call localVarCall = templateaddimageValidateBeforeCall(token, template, upload, filename, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add an image to a template (asynchronously)
     * Allows the user to add an image to a badge or certificate template.
     * @param token The authentication token. (required)
     * @param template The id of the template where the image has to be added (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateaddimageAsync(String token, UUID template, String upload, String filename, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateaddimageValidateBeforeCall(token, template, upload, filename, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatedelete
     * @param token The authentication token. (required)
     * @param id The id of the template to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatedeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templatedelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatedeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling templatedelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling templatedelete(Async)");
        }
        

        okhttp3.Call localVarCall = templatedeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a template
     * Allows the user to delete an existing template.
     * @param token The authentication token. (required)
     * @param id The id of the template to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templatedelete(String token, UUID id) throws ApiException {
        templatedeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a template
     * Allows the user to delete an existing template.
     * @param token The authentication token. (required)
     * @param id The id of the template to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templatedeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = templatedeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a template (asynchronously)
     * Allows the user to delete an existing template.
     * @param token The authentication token. (required)
     * @param id The id of the template to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatedeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatedeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateemail
     * @param token The authentication token. (required)
     * @param jobid The id of the job that is creating the templates. (required)
     * @param emailsubject Args depending on the send-to flag. (required)
     * @param emailbody Args depending on the send-to flag. (required)
     * @param templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate). (optional)
     * @param emailfrom The name of the sender to be displayed in the receipients inbox (optional)
     * @param emailreplyto The reply-to field for the emails. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateemailCall(String token, String jobid, String emailsubject, String emailbody, String templatekind, String emailfrom, String emailreplyto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templateemail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (jobid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobid", jobid));
        }

        if (templatekind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templatekind", templatekind));
        }

        if (emailfrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailfrom", emailfrom));
        }

        if (emailreplyto != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailreplyto", emailreplyto));
        }

        if (emailsubject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailsubject", emailsubject));
        }

        if (emailbody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailbody", emailbody));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateemailValidateBeforeCall(String token, String jobid, String emailsubject, String emailbody, String templatekind, String emailfrom, String emailreplyto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling templateemail(Async)");
        }
        
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling templateemail(Async)");
        }
        
        // verify the required parameter 'emailsubject' is set
        if (emailsubject == null) {
            throw new ApiException("Missing the required parameter 'emailsubject' when calling templateemail(Async)");
        }
        
        // verify the required parameter 'emailbody' is set
        if (emailbody == null) {
            throw new ApiException("Missing the required parameter 'emailbody' when calling templateemail(Async)");
        }
        

        okhttp3.Call localVarCall = templateemailCall(token, jobid, emailsubject, emailbody, templatekind, emailfrom, emailreplyto, _callback);
        return localVarCall;

    }

    /**
     * Send generated templates by email
     * Allows the user to send generated templates via email through AccuCampus.
     * @param token The authentication token. (required)
     * @param jobid The id of the job that is creating the templates. (required)
     * @param emailsubject Args depending on the send-to flag. (required)
     * @param emailbody Args depending on the send-to flag. (required)
     * @param templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate). (optional)
     * @param emailfrom The name of the sender to be displayed in the receipients inbox (optional)
     * @param emailreplyto The reply-to field for the emails. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templateemail(String token, String jobid, String emailsubject, String emailbody, String templatekind, String emailfrom, String emailreplyto) throws ApiException {
        templateemailWithHttpInfo(token, jobid, emailsubject, emailbody, templatekind, emailfrom, emailreplyto);
    }

    /**
     * Send generated templates by email
     * Allows the user to send generated templates via email through AccuCampus.
     * @param token The authentication token. (required)
     * @param jobid The id of the job that is creating the templates. (required)
     * @param emailsubject Args depending on the send-to flag. (required)
     * @param emailbody Args depending on the send-to flag. (required)
     * @param templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate). (optional)
     * @param emailfrom The name of the sender to be displayed in the receipients inbox (optional)
     * @param emailreplyto The reply-to field for the emails. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templateemailWithHttpInfo(String token, String jobid, String emailsubject, String emailbody, String templatekind, String emailfrom, String emailreplyto) throws ApiException {
        okhttp3.Call localVarCall = templateemailValidateBeforeCall(token, jobid, emailsubject, emailbody, templatekind, emailfrom, emailreplyto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send generated templates by email (asynchronously)
     * Allows the user to send generated templates via email through AccuCampus.
     * @param token The authentication token. (required)
     * @param jobid The id of the job that is creating the templates. (required)
     * @param emailsubject Args depending on the send-to flag. (required)
     * @param emailbody Args depending on the send-to flag. (required)
     * @param templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate). (optional)
     * @param emailfrom The name of the sender to be displayed in the receipients inbox (optional)
     * @param emailreplyto The reply-to field for the emails. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateemailAsync(String token, String jobid, String emailsubject, String emailbody, String templatekind, String emailfrom, String emailreplyto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateemailValidateBeforeCall(token, jobid, emailsubject, emailbody, templatekind, emailfrom, emailreplyto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templategenerate
     * @param token The authentication token. (required)
     * @param template The id of the template to generate. (required)
     * @param source The source key of the selected template data source. (required)
     * @param singlefile True if all the templates should be placed in the same file, false if each one shoud be in its own file. (required)
     * @param userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas. (optional)
     * @param forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading (optional)
     * @param role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor (optional)
     * @param filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templategenerateCall(String token, UUID template, UUID source, Boolean singlefile, String userid, Boolean forsending, UUID role, String filters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templategenerate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (template != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template", template));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (singlefile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("singlefile", singlefile));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (forsending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forsending", forsending));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templategenerateValidateBeforeCall(String token, UUID template, UUID source, Boolean singlefile, String userid, Boolean forsending, UUID role, String filters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling templategenerate(Async)");
        }
        
        // verify the required parameter 'template' is set
        if (template == null) {
            throw new ApiException("Missing the required parameter 'template' when calling templategenerate(Async)");
        }
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling templategenerate(Async)");
        }
        
        // verify the required parameter 'singlefile' is set
        if (singlefile == null) {
            throw new ApiException("Missing the required parameter 'singlefile' when calling templategenerate(Async)");
        }
        

        okhttp3.Call localVarCall = templategenerateCall(token, template, source, singlefile, userid, forsending, role, filters, _callback);
        return localVarCall;

    }

    /**
     * Generate specified templates
     * Allows the user to generate an existing template as badges or certificates.
     * @param token The authentication token. (required)
     * @param template The id of the template to generate. (required)
     * @param source The source key of the selected template data source. (required)
     * @param singlefile True if all the templates should be placed in the same file, false if each one shoud be in its own file. (required)
     * @param userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas. (optional)
     * @param forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading (optional)
     * @param role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor (optional)
     * @param filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templategenerate(String token, UUID template, UUID source, Boolean singlefile, String userid, Boolean forsending, UUID role, String filters) throws ApiException {
        templategenerateWithHttpInfo(token, template, source, singlefile, userid, forsending, role, filters);
    }

    /**
     * Generate specified templates
     * Allows the user to generate an existing template as badges or certificates.
     * @param token The authentication token. (required)
     * @param template The id of the template to generate. (required)
     * @param source The source key of the selected template data source. (required)
     * @param singlefile True if all the templates should be placed in the same file, false if each one shoud be in its own file. (required)
     * @param userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas. (optional)
     * @param forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading (optional)
     * @param role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor (optional)
     * @param filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templategenerateWithHttpInfo(String token, UUID template, UUID source, Boolean singlefile, String userid, Boolean forsending, UUID role, String filters) throws ApiException {
        okhttp3.Call localVarCall = templategenerateValidateBeforeCall(token, template, source, singlefile, userid, forsending, role, filters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generate specified templates (asynchronously)
     * Allows the user to generate an existing template as badges or certificates.
     * @param token The authentication token. (required)
     * @param template The id of the template to generate. (required)
     * @param source The source key of the selected template data source. (required)
     * @param singlefile True if all the templates should be placed in the same file, false if each one shoud be in its own file. (required)
     * @param userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas. (optional)
     * @param forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading (optional)
     * @param role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor (optional)
     * @param filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templategenerateAsync(String token, UUID template, UUID source, Boolean singlefile, String userid, Boolean forsending, UUID role, String filters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templategenerateValidateBeforeCall(token, template, source, singlefile, userid, forsending, role, filters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateget
     * @param token The authentication token. (required)
     * @param id The id of the template to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templategetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templateget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templategetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling templateget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling templateget(Async)");
        }
        

        okhttp3.Call localVarCall = templategetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View details of a template
     * Allows the user to view a template and its details.
     * @param token The authentication token. (required)
     * @param id The id of the template to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templateget(String token, UUID id) throws ApiException {
        templategetWithHttpInfo(token, id);
    }

    /**
     * View details of a template
     * Allows the user to view a template and its details.
     * @param token The authentication token. (required)
     * @param id The id of the template to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templategetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = templategetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a template (asynchronously)
     * Allows the user to view a template and its details.
     * @param token The authentication token. (required)
     * @param id The id of the template to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templategetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templategetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templategetgenerated
     * @param token The authentication token. (required)
     * @param jobid The id of the job that is creating the templates. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templategetgeneratedCall(String token, String jobid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templategetgenerated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (jobid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobid", jobid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templategetgeneratedValidateBeforeCall(String token, String jobid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling templategetgenerated(Async)");
        }
        
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling templategetgenerated(Async)");
        }
        

        okhttp3.Call localVarCall = templategetgeneratedCall(token, jobid, _callback);
        return localVarCall;

    }

    /**
     * View generated templates
     * Allows the user to view templates which have been generated as badges or certificates.
     * @param token The authentication token. (required)
     * @param jobid The id of the job that is creating the templates. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templategetgenerated(String token, String jobid) throws ApiException {
        templategetgeneratedWithHttpInfo(token, jobid);
    }

    /**
     * View generated templates
     * Allows the user to view templates which have been generated as badges or certificates.
     * @param token The authentication token. (required)
     * @param jobid The id of the job that is creating the templates. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templategetgeneratedWithHttpInfo(String token, String jobid) throws ApiException {
        okhttp3.Call localVarCall = templategetgeneratedValidateBeforeCall(token, jobid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View generated templates (asynchronously)
     * Allows the user to view templates which have been generated as badges or certificates.
     * @param token The authentication token. (required)
     * @param jobid The id of the job that is creating the templates. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templategetgeneratedAsync(String token, String jobid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templategetgeneratedValidateBeforeCall(token, jobid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatelist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param kind The kind of the templates to return. It must be included in (badge, certificate). (required)
     * @param designedonly If true then it only returns the templates that were designed. Otherwise, it returns all. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatelistCall(String token, Integer from, Integer count, String kind, Boolean designedonly, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templatelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (kind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kind", kind));
        }

        if (designedonly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("designedonly", designedonly));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatelistValidateBeforeCall(String token, Integer from, Integer count, String kind, Boolean designedonly, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling templatelist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling templatelist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling templatelist(Async)");
        }
        
        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling templatelist(Async)");
        }
        

        okhttp3.Call localVarCall = templatelistCall(token, from, count, kind, designedonly, _callback);
        return localVarCall;

    }

    /**
     * View a list of defined templates
     * Allows the user to view the full list of created templates.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param kind The kind of the templates to return. It must be included in (badge, certificate). (required)
     * @param designedonly If true then it only returns the templates that were designed. Otherwise, it returns all. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templatelist(String token, Integer from, Integer count, String kind, Boolean designedonly) throws ApiException {
        templatelistWithHttpInfo(token, from, count, kind, designedonly);
    }

    /**
     * View a list of defined templates
     * Allows the user to view the full list of created templates.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param kind The kind of the templates to return. It must be included in (badge, certificate). (required)
     * @param designedonly If true then it only returns the templates that were designed. Otherwise, it returns all. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templatelistWithHttpInfo(String token, Integer from, Integer count, String kind, Boolean designedonly) throws ApiException {
        okhttp3.Call localVarCall = templatelistValidateBeforeCall(token, from, count, kind, designedonly, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of defined templates (asynchronously)
     * Allows the user to view the full list of created templates.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param kind The kind of the templates to return. It must be included in (badge, certificate). (required)
     * @param designedonly If true then it only returns the templates that were designed. Otherwise, it returns all. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatelistAsync(String token, Integer from, Integer count, String kind, Boolean designedonly, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatelistValidateBeforeCall(token, from, count, kind, designedonly, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatelistsources
     * @param token The authentication token. (required)
     * @param kind The kind of the templates to return. It must be included in (badge, certificate). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatelistsourcesCall(String token, String kind, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templatelistsources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (kind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kind", kind));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatelistsourcesValidateBeforeCall(String token, String kind, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling templatelistsources(Async)");
        }
        
        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling templatelistsources(Async)");
        }
        

        okhttp3.Call localVarCall = templatelistsourcesCall(token, kind, _callback);
        return localVarCall;

    }

    /**
     * View a list of templates&#39; data sources
     * Allows the user to see tokens to be used in the template
     * @param token The authentication token. (required)
     * @param kind The kind of the templates to return. It must be included in (badge, certificate). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templatelistsources(String token, String kind) throws ApiException {
        templatelistsourcesWithHttpInfo(token, kind);
    }

    /**
     * View a list of templates&#39; data sources
     * Allows the user to see tokens to be used in the template
     * @param token The authentication token. (required)
     * @param kind The kind of the templates to return. It must be included in (badge, certificate). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templatelistsourcesWithHttpInfo(String token, String kind) throws ApiException {
        okhttp3.Call localVarCall = templatelistsourcesValidateBeforeCall(token, kind, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of templates&#39; data sources (asynchronously)
     * Allows the user to see tokens to be used in the template
     * @param token The authentication token. (required)
     * @param kind The kind of the templates to return. It must be included in (badge, certificate). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatelistsourcesAsync(String token, String kind, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatelistsourcesValidateBeforeCall(token, kind, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/templatesave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = templatesaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a template
     * Allows the user to create or edit a template.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templatesave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        templatesaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a template
     * Allows the user to create or edit a template.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templatesaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = templatesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a template (asynchronously)
     * Allows the user to create or edit a template.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesavelayout
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesavelayoutCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/templatesavelayout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesavelayoutValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = templatesavelayoutCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Save the layout of a template
     * Allows the user to edit a template&#39;s layout.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templatesavelayout(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        templatesavelayoutWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Save the layout of a template
     * Allows the user to edit a template&#39;s layout.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templatesavelayoutWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = templatesavelayoutValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save the layout of a template (asynchronously)
     * Allows the user to edit a template&#39;s layout.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesavelayoutAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesavelayoutValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for termdelete
     * @param token The authentication token. (required)
     * @param id The id of the term to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call termdeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/termdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call termdeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling termdelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling termdelete(Async)");
        }
        

        okhttp3.Call localVarCall = termdeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a term
     * Allows the user to delete a term from the existing list.
     * @param token The authentication token. (required)
     * @param id The id of the term to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void termdelete(String token, UUID id) throws ApiException {
        termdeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a term
     * Allows the user to delete a term from the existing list.
     * @param token The authentication token. (required)
     * @param id The id of the term to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> termdeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = termdeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a term (asynchronously)
     * Allows the user to delete a term from the existing list.
     * @param token The authentication token. (required)
     * @param id The id of the term to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call termdeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = termdeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for termget
     * @param token The authentication token. (required)
     * @param id The id of the term to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call termgetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/termget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call termgetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling termget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling termget(Async)");
        }
        

        okhttp3.Call localVarCall = termgetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of a term
     * Allows the user to view a term and its details.
     * @param token The authentication token. (required)
     * @param id The id of the term to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void termget(String token, UUID id) throws ApiException {
        termgetWithHttpInfo(token, id);
    }

    /**
     * Search and view details of a term
     * Allows the user to view a term and its details.
     * @param token The authentication token. (required)
     * @param id The id of the term to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> termgetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = termgetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of a term (asynchronously)
     * Allows the user to view a term and its details.
     * @param token The authentication token. (required)
     * @param id The id of the term to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call termgetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = termgetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for termlist
     * @param token The authentication token. (required)
     * @param from The first record to return. (optional)
     * @param count The max number of records to return. (optional)
     * @param notpast Specifies whether the terms in the past should be returned or not. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call termlistCall(String token, Integer from, Integer count, Boolean notpast, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/termlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (notpast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notpast", notpast));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call termlistValidateBeforeCall(String token, Integer from, Integer count, Boolean notpast, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling termlist(Async)");
        }
        

        okhttp3.Call localVarCall = termlistCall(token, from, count, notpast, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of all terms
     * Allows the user to view the full list of existing term.
     * @param token The authentication token. (required)
     * @param from The first record to return. (optional)
     * @param count The max number of records to return. (optional)
     * @param notpast Specifies whether the terms in the past should be returned or not. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void termlist(String token, Integer from, Integer count, Boolean notpast) throws ApiException {
        termlistWithHttpInfo(token, from, count, notpast);
    }

    /**
     * Search and view details of all terms
     * Allows the user to view the full list of existing term.
     * @param token The authentication token. (required)
     * @param from The first record to return. (optional)
     * @param count The max number of records to return. (optional)
     * @param notpast Specifies whether the terms in the past should be returned or not. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> termlistWithHttpInfo(String token, Integer from, Integer count, Boolean notpast) throws ApiException {
        okhttp3.Call localVarCall = termlistValidateBeforeCall(token, from, count, notpast, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of all terms (asynchronously)
     * Allows the user to view the full list of existing term.
     * @param token The authentication token. (required)
     * @param from The first record to return. (optional)
     * @param count The max number of records to return. (optional)
     * @param notpast Specifies whether the terms in the past should be returned or not. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call termlistAsync(String token, Integer from, Integer count, Boolean notpast, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = termlistValidateBeforeCall(token, from, count, notpast, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for termsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call termsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/termsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call termsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = termsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create and edit terms
     * Allows the user to create and edit terms.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void termsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        termsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create and edit terms
     * Allows the user to create and edit terms.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> termsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = termsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create and edit terms (asynchronously)
     * Allows the user to create and edit terms.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call termsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = termsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for textcreditremaining
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call textcreditremainingCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/textcreditremaining";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call textcreditremainingValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling textcreditremaining(Async)");
        }
        

        okhttp3.Call localVarCall = textcreditremainingCall(token, _callback);
        return localVarCall;

    }

    /**
     * Gets the remaining text credits for the account
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void textcreditremaining(String token) throws ApiException {
        textcreditremainingWithHttpInfo(token);
    }

    /**
     * Gets the remaining text credits for the account
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> textcreditremainingWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = textcreditremainingValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the remaining text credits for the account (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call textcreditremainingAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = textcreditremainingValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for texttoimage
     * @param token The authentication token. (required)
     * @param text The text to convert to an image, use double pipes (||) as a new line. (required)
     * @param fontcolor The color of the text, in hex format, without the #. (optional)
     * @param fontsize The size of the text, in points. (optional)
     * @param direction Either vertical or horizontal, default horizontal. (optional)
     * @param width The image width in pixels (or height if the direction is vertical). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call texttoimageCall(String token, String text, String fontcolor, Integer fontsize, String direction, Integer width, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/texttoimage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (fontcolor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fontcolor", fontcolor));
        }

        if (fontsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fontsize", fontsize));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call texttoimageValidateBeforeCall(String token, String text, String fontcolor, Integer fontsize, String direction, Integer width, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling texttoimage(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling texttoimage(Async)");
        }
        

        okhttp3.Call localVarCall = texttoimageCall(token, text, fontcolor, fontsize, direction, width, _callback);
        return localVarCall;

    }

    /**
     * Generates a dynamic image from text
     * 
     * @param token The authentication token. (required)
     * @param text The text to convert to an image, use double pipes (||) as a new line. (required)
     * @param fontcolor The color of the text, in hex format, without the #. (optional)
     * @param fontsize The size of the text, in points. (optional)
     * @param direction Either vertical or horizontal, default horizontal. (optional)
     * @param width The image width in pixels (or height if the direction is vertical). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void texttoimage(String token, String text, String fontcolor, Integer fontsize, String direction, Integer width) throws ApiException {
        texttoimageWithHttpInfo(token, text, fontcolor, fontsize, direction, width);
    }

    /**
     * Generates a dynamic image from text
     * 
     * @param token The authentication token. (required)
     * @param text The text to convert to an image, use double pipes (||) as a new line. (required)
     * @param fontcolor The color of the text, in hex format, without the #. (optional)
     * @param fontsize The size of the text, in points. (optional)
     * @param direction Either vertical or horizontal, default horizontal. (optional)
     * @param width The image width in pixels (or height if the direction is vertical). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> texttoimageWithHttpInfo(String token, String text, String fontcolor, Integer fontsize, String direction, Integer width) throws ApiException {
        okhttp3.Call localVarCall = texttoimageValidateBeforeCall(token, text, fontcolor, fontsize, direction, width, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generates a dynamic image from text (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param text The text to convert to an image, use double pipes (||) as a new line. (required)
     * @param fontcolor The color of the text, in hex format, without the #. (optional)
     * @param fontsize The size of the text, in points. (optional)
     * @param direction Either vertical or horizontal, default horizontal. (optional)
     * @param width The image width in pixels (or height if the direction is vertical). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call texttoimageAsync(String token, String text, String fontcolor, Integer fontsize, String direction, Integer width, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = texttoimageValidateBeforeCall(token, text, fontcolor, fontsize, direction, width, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for translationget
     * @param token The authentication token. (required)
     * @param universal Pipe separated list of universal text to be translated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translationgetCall(String token, String universal, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/translationget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (universal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("universal", universal));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translationgetValidateBeforeCall(String token, String universal, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling translationget(Async)");
        }
        
        // verify the required parameter 'universal' is set
        if (universal == null) {
            throw new ApiException("Missing the required parameter 'universal' when calling translationget(Async)");
        }
        

        okhttp3.Call localVarCall = translationgetCall(token, universal, _callback);
        return localVarCall;

    }

    /**
     * Gets the translations of the specified values
     * 
     * @param token The authentication token. (required)
     * @param universal Pipe separated list of universal text to be translated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void translationget(String token, String universal) throws ApiException {
        translationgetWithHttpInfo(token, universal);
    }

    /**
     * Gets the translations of the specified values
     * 
     * @param token The authentication token. (required)
     * @param universal Pipe separated list of universal text to be translated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> translationgetWithHttpInfo(String token, String universal) throws ApiException {
        okhttp3.Call localVarCall = translationgetValidateBeforeCall(token, universal, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the translations of the specified values (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param universal Pipe separated list of universal text to be translated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translationgetAsync(String token, String universal, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = translationgetValidateBeforeCall(token, universal, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for translationgetcachefile
     * @param token The authentication token. (optional)
     * @param account The id of the account whose translations file has to be retrieved. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translationgetcachefileCall(String token, String account, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/translationgetcachefile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (account != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account", account));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translationgetcachefileValidateBeforeCall(String token, String account, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = translationgetcachefileCall(token, account, _callback);
        return localVarCall;

    }

    /**
     * Get the file containing the translations
     * 
     * @param token The authentication token. (optional)
     * @param account The id of the account whose translations file has to be retrieved. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void translationgetcachefile(String token, String account) throws ApiException {
        translationgetcachefileWithHttpInfo(token, account);
    }

    /**
     * Get the file containing the translations
     * 
     * @param token The authentication token. (optional)
     * @param account The id of the account whose translations file has to be retrieved. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> translationgetcachefileWithHttpInfo(String token, String account) throws ApiException {
        okhttp3.Call localVarCall = translationgetcachefileValidateBeforeCall(token, account, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the file containing the translations (asynchronously)
     * 
     * @param token The authentication token. (optional)
     * @param account The id of the account whose translations file has to be retrieved. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translationgetcachefileAsync(String token, String account, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = translationgetcachefileValidateBeforeCall(token, account, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for translationlist
     * @param token The authentication token. (required)
     * @param filter Text to search/filter translations. (optional)
     * @param nondefaultonly If true then it returns only the terms translated. Otherwise, it returns all. (optional)
     * @param appdefaultasuniversal If true then it uses the app default translation as the universal term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translationlistCall(String token, String filter, Boolean nondefaultonly, Boolean appdefaultasuniversal, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/translationlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (nondefaultonly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nondefaultonly", nondefaultonly));
        }

        if (appdefaultasuniversal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appdefaultasuniversal", appdefaultasuniversal));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translationlistValidateBeforeCall(String token, String filter, Boolean nondefaultonly, Boolean appdefaultasuniversal, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling translationlist(Async)");
        }
        

        okhttp3.Call localVarCall = translationlistCall(token, filter, nondefaultonly, appdefaultasuniversal, _callback);
        return localVarCall;

    }

    /**
     * Lists all the available translations in the system
     * 
     * @param token The authentication token. (required)
     * @param filter Text to search/filter translations. (optional)
     * @param nondefaultonly If true then it returns only the terms translated. Otherwise, it returns all. (optional)
     * @param appdefaultasuniversal If true then it uses the app default translation as the universal term. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void translationlist(String token, String filter, Boolean nondefaultonly, Boolean appdefaultasuniversal) throws ApiException {
        translationlistWithHttpInfo(token, filter, nondefaultonly, appdefaultasuniversal);
    }

    /**
     * Lists all the available translations in the system
     * 
     * @param token The authentication token. (required)
     * @param filter Text to search/filter translations. (optional)
     * @param nondefaultonly If true then it returns only the terms translated. Otherwise, it returns all. (optional)
     * @param appdefaultasuniversal If true then it uses the app default translation as the universal term. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> translationlistWithHttpInfo(String token, String filter, Boolean nondefaultonly, Boolean appdefaultasuniversal) throws ApiException {
        okhttp3.Call localVarCall = translationlistValidateBeforeCall(token, filter, nondefaultonly, appdefaultasuniversal, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists all the available translations in the system (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param filter Text to search/filter translations. (optional)
     * @param nondefaultonly If true then it returns only the terms translated. Otherwise, it returns all. (optional)
     * @param appdefaultasuniversal If true then it uses the app default translation as the universal term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translationlistAsync(String token, String filter, Boolean nondefaultonly, Boolean appdefaultasuniversal, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = translationlistValidateBeforeCall(token, filter, nondefaultonly, appdefaultasuniversal, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for translationsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translationsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/translationsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translationsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = translationsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Edit a translation
     * Allows the user to edit a translation for the entire account.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void translationsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        translationsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Edit a translation
     * Allows the user to edit a translation for the entire account.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> translationsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = translationsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Edit a translation (asynchronously)
     * Allows the user to edit a translation for the entire account.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translationsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = translationsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userchangepwd
     * @param token The authentication token. (required)
     * @param oldpass The old password of the authenticated user. (required)
     * @param newpass The new password of the authenticated user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userchangepwdCall(String token, UUID oldpass, UUID newpass, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userchangepwd";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (oldpass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oldpass", oldpass));
        }

        if (newpass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newpass", newpass));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userchangepwdValidateBeforeCall(String token, UUID oldpass, UUID newpass, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling userchangepwd(Async)");
        }
        
        // verify the required parameter 'oldpass' is set
        if (oldpass == null) {
            throw new ApiException("Missing the required parameter 'oldpass' when calling userchangepwd(Async)");
        }
        
        // verify the required parameter 'newpass' is set
        if (newpass == null) {
            throw new ApiException("Missing the required parameter 'newpass' when calling userchangepwd(Async)");
        }
        

        okhttp3.Call localVarCall = userchangepwdCall(token, oldpass, newpass, _callback);
        return localVarCall;

    }

    /**
     * Change user&#39;s own password
     * Allows the user to change their own password.
     * @param token The authentication token. (required)
     * @param oldpass The old password of the authenticated user. (required)
     * @param newpass The new password of the authenticated user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userchangepwd(String token, UUID oldpass, UUID newpass) throws ApiException {
        userchangepwdWithHttpInfo(token, oldpass, newpass);
    }

    /**
     * Change user&#39;s own password
     * Allows the user to change their own password.
     * @param token The authentication token. (required)
     * @param oldpass The old password of the authenticated user. (required)
     * @param newpass The new password of the authenticated user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userchangepwdWithHttpInfo(String token, UUID oldpass, UUID newpass) throws ApiException {
        okhttp3.Call localVarCall = userchangepwdValidateBeforeCall(token, oldpass, newpass, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change user&#39;s own password (asynchronously)
     * Allows the user to change their own password.
     * @param token The authentication token. (required)
     * @param oldpass The old password of the authenticated user. (required)
     * @param newpass The new password of the authenticated user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userchangepwdAsync(String token, UUID oldpass, UUID newpass, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userchangepwdValidateBeforeCall(token, oldpass, newpass, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userchangepwdbyreq
     * @param changereq The change password request ID sent by email to the user. (required)
     * @param newpass The new password of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userchangepwdbyreqCall(String changereq, String newpass, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userchangepwdbyreq";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (changereq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changereq", changereq));
        }

        if (newpass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newpass", newpass));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userchangepwdbyreqValidateBeforeCall(String changereq, String newpass, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'changereq' is set
        if (changereq == null) {
            throw new ApiException("Missing the required parameter 'changereq' when calling userchangepwdbyreq(Async)");
        }
        
        // verify the required parameter 'newpass' is set
        if (newpass == null) {
            throw new ApiException("Missing the required parameter 'newpass' when calling userchangepwdbyreq(Async)");
        }
        

        okhttp3.Call localVarCall = userchangepwdbyreqCall(changereq, newpass, _callback);
        return localVarCall;

    }

    /**
     * Changes the user password using a change password request id
     * 
     * @param changereq The change password request ID sent by email to the user. (required)
     * @param newpass The new password of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userchangepwdbyreq(String changereq, String newpass) throws ApiException {
        userchangepwdbyreqWithHttpInfo(changereq, newpass);
    }

    /**
     * Changes the user password using a change password request id
     * 
     * @param changereq The change password request ID sent by email to the user. (required)
     * @param newpass The new password of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userchangepwdbyreqWithHttpInfo(String changereq, String newpass) throws ApiException {
        okhttp3.Call localVarCall = userchangepwdbyreqValidateBeforeCall(changereq, newpass, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Changes the user password using a change password request id (asynchronously)
     * 
     * @param changereq The change password request ID sent by email to the user. (required)
     * @param newpass The new password of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userchangepwdbyreqAsync(String changereq, String newpass, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userchangepwdbyreqValidateBeforeCall(changereq, newpass, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userdelete
     * @param token The authentication token. (required)
     * @param id The id of the user to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userdeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userdeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling userdelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userdelete(Async)");
        }
        

        okhttp3.Call localVarCall = userdeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a user
     * Allows the user to delete a user.
     * @param token The authentication token. (required)
     * @param id The id of the user to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userdelete(String token, UUID id) throws ApiException {
        userdeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a user
     * Allows the user to delete a user.
     * @param token The authentication token. (required)
     * @param id The id of the user to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userdeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = userdeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a user (asynchronously)
     * Allows the user to delete a user.
     * @param token The authentication token. (required)
     * @param id The id of the user to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userdeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userdeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userfindsimilar
     * @param token The authentication token. (required)
     * @param currentid The id of the current user. (optional)
     * @param phonenumber A phone number to search for similar users. (optional)
     * @param cardnumber A card number to search for similar users. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userfindsimilarCall(String token, UUID currentid, String phonenumber, String cardnumber, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userfindsimilar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (currentid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentid", currentid));
        }

        if (phonenumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phonenumber", phonenumber));
        }

        if (cardnumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cardnumber", cardnumber));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userfindsimilarValidateBeforeCall(String token, UUID currentid, String phonenumber, String cardnumber, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling userfindsimilar(Async)");
        }
        

        okhttp3.Call localVarCall = userfindsimilarCall(token, currentid, phonenumber, cardnumber, _callback);
        return localVarCall;

    }

    /**
     * Finds similar users to prevent duplicates
     * Allows the user to be warned if a user they are creating has the same card number as another user.
     * @param token The authentication token. (required)
     * @param currentid The id of the current user. (optional)
     * @param phonenumber A phone number to search for similar users. (optional)
     * @param cardnumber A card number to search for similar users. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userfindsimilar(String token, UUID currentid, String phonenumber, String cardnumber) throws ApiException {
        userfindsimilarWithHttpInfo(token, currentid, phonenumber, cardnumber);
    }

    /**
     * Finds similar users to prevent duplicates
     * Allows the user to be warned if a user they are creating has the same card number as another user.
     * @param token The authentication token. (required)
     * @param currentid The id of the current user. (optional)
     * @param phonenumber A phone number to search for similar users. (optional)
     * @param cardnumber A card number to search for similar users. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userfindsimilarWithHttpInfo(String token, UUID currentid, String phonenumber, String cardnumber) throws ApiException {
        okhttp3.Call localVarCall = userfindsimilarValidateBeforeCall(token, currentid, phonenumber, cardnumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Finds similar users to prevent duplicates (asynchronously)
     * Allows the user to be warned if a user they are creating has the same card number as another user.
     * @param token The authentication token. (required)
     * @param currentid The id of the current user. (optional)
     * @param phonenumber A phone number to search for similar users. (optional)
     * @param cardnumber A card number to search for similar users. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userfindsimilarAsync(String token, UUID currentid, String phonenumber, String cardnumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userfindsimilarValidateBeforeCall(token, currentid, phonenumber, cardnumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userget
     * @param token The authentication token. (required)
     * @param id The id of the user to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergetCall(String token, UUID id, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergetValidateBeforeCall(String token, UUID id, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling userget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userget(Async)");
        }
        

        okhttp3.Call localVarCall = usergetCall(token, id, photosize, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of a user
     * Allows the user to search and view a user and their details.
     * @param token The authentication token. (required)
     * @param id The id of the user to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userget(String token, UUID id, Integer photosize) throws ApiException {
        usergetWithHttpInfo(token, id, photosize);
    }

    /**
     * Search and view details of a user
     * Allows the user to search and view a user and their details.
     * @param token The authentication token. (required)
     * @param id The id of the user to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usergetWithHttpInfo(String token, UUID id, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = usergetValidateBeforeCall(token, id, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of a user (asynchronously)
     * Allows the user to search and view a user and their details.
     * @param token The authentication token. (required)
     * @param id The id of the user to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergetAsync(String token, UUID id, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergetValidateBeforeCall(token, id, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergetbycard
     * @param token The authentication token. (required)
     * @param card The card number of the user to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergetbycardCall(String token, String card, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergetbycard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (card != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card", card));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergetbycardValidateBeforeCall(String token, String card, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergetbycard(Async)");
        }
        
        // verify the required parameter 'card' is set
        if (card == null) {
            throw new ApiException("Missing the required parameter 'card' when calling usergetbycard(Async)");
        }
        

        okhttp3.Call localVarCall = usergetbycardCall(token, card, photosize, _callback);
        return localVarCall;

    }

    /**
     * Search user by card number
     * Allows the user to search for a user by their card number.
     * @param token The authentication token. (required)
     * @param card The card number of the user to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usergetbycard(String token, String card, Integer photosize) throws ApiException {
        usergetbycardWithHttpInfo(token, card, photosize);
    }

    /**
     * Search user by card number
     * Allows the user to search for a user by their card number.
     * @param token The authentication token. (required)
     * @param card The card number of the user to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usergetbycardWithHttpInfo(String token, String card, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = usergetbycardValidateBeforeCall(token, card, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search user by card number (asynchronously)
     * Allows the user to search for a user by their card number.
     * @param token The authentication token. (required)
     * @param card The card number of the user to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergetbycardAsync(String token, String card, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergetbycardValidateBeforeCall(token, card, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupaddmember
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param groupid The id of the group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupaddmemberCall(String token, UUID userid, UUID groupid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroupaddmember";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (groupid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupid", groupid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupaddmemberValidateBeforeCall(String token, UUID userid, UUID groupid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergroupaddmember(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling usergroupaddmember(Async)");
        }
        
        // verify the required parameter 'groupid' is set
        if (groupid == null) {
            throw new ApiException("Missing the required parameter 'groupid' when calling usergroupaddmember(Async)");
        }
        

        okhttp3.Call localVarCall = usergroupaddmemberCall(token, userid, groupid, _callback);
        return localVarCall;

    }

    /**
     * Add a user to a group
     * Allows the user to add a user to a group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param groupid The id of the group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usergroupaddmember(String token, UUID userid, UUID groupid) throws ApiException {
        usergroupaddmemberWithHttpInfo(token, userid, groupid);
    }

    /**
     * Add a user to a group
     * Allows the user to add a user to a group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param groupid The id of the group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usergroupaddmemberWithHttpInfo(String token, UUID userid, UUID groupid) throws ApiException {
        okhttp3.Call localVarCall = usergroupaddmemberValidateBeforeCall(token, userid, groupid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a user to a group (asynchronously)
     * Allows the user to add a user to a group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param userid The id of the user to add. (required)
     * @param groupid The id of the group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupaddmemberAsync(String token, UUID userid, UUID groupid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupaddmemberValidateBeforeCall(token, userid, groupid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupdelete
     * @param token The authentication token. (required)
     * @param id The id of the group to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupdeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroupdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupdeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergroupdelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling usergroupdelete(Async)");
        }
        

        okhttp3.Call localVarCall = usergroupdeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a group
     * Allows the user to delete a group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param id The id of the group to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usergroupdelete(String token, UUID id) throws ApiException {
        usergroupdeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a group
     * Allows the user to delete a group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param id The id of the group to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usergroupdeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = usergroupdeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a group (asynchronously)
     * Allows the user to delete a group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param id The id of the group to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupdeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupdeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupget
     * @param token The authentication token. (required)
     * @param id The id of the user group to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupgetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroupget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupgetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergroupget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling usergroupget(Async)");
        }
        

        okhttp3.Call localVarCall = usergroupgetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of a user group
     * Allows the user to view a user group and its details.
     * @param token The authentication token. (required)
     * @param id The id of the user group to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usergroupget(String token, UUID id) throws ApiException {
        usergroupgetWithHttpInfo(token, id);
    }

    /**
     * Search and view details of a user group
     * Allows the user to view a user group and its details.
     * @param token The authentication token. (required)
     * @param id The id of the user group to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usergroupgetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = usergroupgetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of a user group (asynchronously)
     * Allows the user to view a user group and its details.
     * @param token The authentication token. (required)
     * @param id The id of the user group to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupgetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupgetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupgetmembers
     * @param token The authentication token. (required)
     * @param groupid The id of the user group to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupgetmembersCall(String token, UUID groupid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroupgetmembers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (groupid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupid", groupid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupgetmembersValidateBeforeCall(String token, UUID groupid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergroupgetmembers(Async)");
        }
        
        // verify the required parameter 'groupid' is set
        if (groupid == null) {
            throw new ApiException("Missing the required parameter 'groupid' when calling usergroupgetmembers(Async)");
        }
        

        okhttp3.Call localVarCall = usergroupgetmembersCall(token, groupid, _callback);
        return localVarCall;

    }

    /**
     * View the members of a user group
     * Allows the user to view the list of users in a group that they have permission to view.
     * @param token The authentication token. (required)
     * @param groupid The id of the user group to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usergroupgetmembers(String token, UUID groupid) throws ApiException {
        usergroupgetmembersWithHttpInfo(token, groupid);
    }

    /**
     * View the members of a user group
     * Allows the user to view the list of users in a group that they have permission to view.
     * @param token The authentication token. (required)
     * @param groupid The id of the user group to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usergroupgetmembersWithHttpInfo(String token, UUID groupid) throws ApiException {
        okhttp3.Call localVarCall = usergroupgetmembersValidateBeforeCall(token, groupid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the members of a user group (asynchronously)
     * Allows the user to view the list of users in a group that they have permission to view.
     * @param token The authentication token. (required)
     * @param groupid The id of the user group to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupgetmembersAsync(String token, UUID groupid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupgetmembersValidateBeforeCall(token, groupid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupgetuser
     * @param token The authentication token. (required)
     * @param userid The id of the user to get his groups. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupgetuserCall(String token, UUID userid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroupgetuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupgetuserValidateBeforeCall(String token, UUID userid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergroupgetuser(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling usergroupgetuser(Async)");
        }
        

        okhttp3.Call localVarCall = usergroupgetuserCall(token, userid, _callback);
        return localVarCall;

    }

    /**
     * View the groups which a user is registered to
     * Allows the user to view the groups an individual user is registered to, based on group and user permissions.
     * @param token The authentication token. (required)
     * @param userid The id of the user to get his groups. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usergroupgetuser(String token, UUID userid) throws ApiException {
        usergroupgetuserWithHttpInfo(token, userid);
    }

    /**
     * View the groups which a user is registered to
     * Allows the user to view the groups an individual user is registered to, based on group and user permissions.
     * @param token The authentication token. (required)
     * @param userid The id of the user to get his groups. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usergroupgetuserWithHttpInfo(String token, UUID userid) throws ApiException {
        okhttp3.Call localVarCall = usergroupgetuserValidateBeforeCall(token, userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the groups which a user is registered to (asynchronously)
     * Allows the user to view the groups an individual user is registered to, based on group and user permissions.
     * @param token The authentication token. (required)
     * @param userid The id of the user to get his groups. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupgetuserAsync(String token, UUID userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupgetuserValidateBeforeCall(token, userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergrouplist
     * @param token The authentication token. (required)
     * @param from The first record to return. (optional)
     * @param count The max number of records to return. (optional)
     * @param type The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergrouplistCall(String token, Integer from, Integer count, String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergrouplist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergrouplistValidateBeforeCall(String token, Integer from, Integer count, String type, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergrouplist(Async)");
        }
        

        okhttp3.Call localVarCall = usergrouplistCall(token, from, count, type, _callback);
        return localVarCall;

    }

    /**
     * View a list of user groups
     * Allows the user to view the list of groups that they have permission to view.
     * @param token The authentication token. (required)
     * @param from The first record to return. (optional)
     * @param count The max number of records to return. (optional)
     * @param type The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usergrouplist(String token, Integer from, Integer count, String type) throws ApiException {
        usergrouplistWithHttpInfo(token, from, count, type);
    }

    /**
     * View a list of user groups
     * Allows the user to view the list of groups that they have permission to view.
     * @param token The authentication token. (required)
     * @param from The first record to return. (optional)
     * @param count The max number of records to return. (optional)
     * @param type The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usergrouplistWithHttpInfo(String token, Integer from, Integer count, String type) throws ApiException {
        okhttp3.Call localVarCall = usergrouplistValidateBeforeCall(token, from, count, type, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of user groups (asynchronously)
     * Allows the user to view the list of groups that they have permission to view.
     * @param token The authentication token. (required)
     * @param from The first record to return. (optional)
     * @param count The max number of records to return. (optional)
     * @param type The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergrouplistAsync(String token, Integer from, Integer count, String type, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergrouplistValidateBeforeCall(token, from, count, type, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergrouprefresh
     * @param token The authentication token. (required)
     * @param group The ID of the group to refresh. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergrouprefreshCall(String token, UUID group, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergrouprefresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergrouprefreshValidateBeforeCall(String token, UUID group, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergrouprefresh(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling usergrouprefresh(Async)");
        }
        

        okhttp3.Call localVarCall = usergrouprefreshCall(token, group, _callback);
        return localVarCall;

    }

    /**
     * Refresh the dynamic group
     * Allows the user to refresh a dynamic group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param group The ID of the group to refresh. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usergrouprefresh(String token, UUID group) throws ApiException {
        usergrouprefreshWithHttpInfo(token, group);
    }

    /**
     * Refresh the dynamic group
     * Allows the user to refresh a dynamic group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param group The ID of the group to refresh. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usergrouprefreshWithHttpInfo(String token, UUID group) throws ApiException {
        okhttp3.Call localVarCall = usergrouprefreshValidateBeforeCall(token, group, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Refresh the dynamic group (asynchronously)
     * Allows the user to refresh a dynamic group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param group The ID of the group to refresh. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergrouprefreshAsync(String token, UUID group, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergrouprefreshValidateBeforeCall(token, group, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupremovemember
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param groupid The id of the group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupremovememberCall(String token, UUID userid, UUID groupid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroupremovemember";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (groupid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupid", groupid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupremovememberValidateBeforeCall(String token, UUID userid, UUID groupid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergroupremovemember(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling usergroupremovemember(Async)");
        }
        
        // verify the required parameter 'groupid' is set
        if (groupid == null) {
            throw new ApiException("Missing the required parameter 'groupid' when calling usergroupremovemember(Async)");
        }
        

        okhttp3.Call localVarCall = usergroupremovememberCall(token, userid, groupid, _callback);
        return localVarCall;

    }

    /**
     * Remove a user from a group
     * Allows the user to remove a user from a group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param groupid The id of the group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usergroupremovemember(String token, UUID userid, UUID groupid) throws ApiException {
        usergroupremovememberWithHttpInfo(token, userid, groupid);
    }

    /**
     * Remove a user from a group
     * Allows the user to remove a user from a group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param groupid The id of the group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usergroupremovememberWithHttpInfo(String token, UUID userid, UUID groupid) throws ApiException {
        okhttp3.Call localVarCall = usergroupremovememberValidateBeforeCall(token, userid, groupid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a user from a group (asynchronously)
     * Allows the user to remove a user from a group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param userid The id of the user to remove. (required)
     * @param groupid The id of the group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupremovememberAsync(String token, UUID userid, UUID groupid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupremovememberValidateBeforeCall(token, userid, groupid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupsave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupsaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/usergroupsave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupsaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usergroupsaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a group
     * Allows the user to create a new group or edit a group that they have permission to edit.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usergroupsave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        usergroupsaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a group
     * Allows the user to create a new group or edit a group that they have permission to edit.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usergroupsaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = usergroupsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a group (asynchronously)
     * Allows the user to create a new group or edit a group that they have permission to edit.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupsaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupsaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergrouptagmembers
     * @param token The authentication token. (required)
     * @param group The id of the group to save whose members have to be tagged. (required)
     * @param tags The tags to assign to the members of the specified group, in JSON format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergrouptagmembersCall(String token, UUID group, String tags, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergrouptagmembers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergrouptagmembersValidateBeforeCall(String token, UUID group, String tags, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergrouptagmembers(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling usergrouptagmembers(Async)");
        }
        

        okhttp3.Call localVarCall = usergrouptagmembersCall(token, group, tags, _callback);
        return localVarCall;

    }

    /**
     * Assign tags to the members of a specified group
     * Allows the user to assign tags to the users of a group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param group The id of the group to save whose members have to be tagged. (required)
     * @param tags The tags to assign to the members of the specified group, in JSON format. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usergrouptagmembers(String token, UUID group, String tags) throws ApiException {
        usergrouptagmembersWithHttpInfo(token, group, tags);
    }

    /**
     * Assign tags to the members of a specified group
     * Allows the user to assign tags to the users of a group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param group The id of the group to save whose members have to be tagged. (required)
     * @param tags The tags to assign to the members of the specified group, in JSON format. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usergrouptagmembersWithHttpInfo(String token, UUID group, String tags) throws ApiException {
        okhttp3.Call localVarCall = usergrouptagmembersValidateBeforeCall(token, group, tags, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Assign tags to the members of a specified group (asynchronously)
     * Allows the user to assign tags to the users of a group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param group The id of the group to save whose members have to be tagged. (required)
     * @param tags The tags to assign to the members of the specified group, in JSON format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergrouptagmembersAsync(String token, UUID group, String tags, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergrouptagmembersValidateBeforeCall(token, group, tags, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupuntagmembers
     * @param token The authentication token. (required)
     * @param group The id of the group to save whose members have to be untagged. (required)
     * @param tags The tags to unassign from the members of the specified group, in JSON format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupuntagmembersCall(String token, UUID group, String tags, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroupuntagmembers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupuntagmembersValidateBeforeCall(String token, UUID group, String tags, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergroupuntagmembers(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling usergroupuntagmembers(Async)");
        }
        

        okhttp3.Call localVarCall = usergroupuntagmembersCall(token, group, tags, _callback);
        return localVarCall;

    }

    /**
     * Unassign tags from the members of a specified group
     * Allows the user to unassign tags to the users of a group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param group The id of the group to save whose members have to be untagged. (required)
     * @param tags The tags to unassign from the members of the specified group, in JSON format. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usergroupuntagmembers(String token, UUID group, String tags) throws ApiException {
        usergroupuntagmembersWithHttpInfo(token, group, tags);
    }

    /**
     * Unassign tags from the members of a specified group
     * Allows the user to unassign tags to the users of a group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param group The id of the group to save whose members have to be untagged. (required)
     * @param tags The tags to unassign from the members of the specified group, in JSON format. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usergroupuntagmembersWithHttpInfo(String token, UUID group, String tags) throws ApiException {
        okhttp3.Call localVarCall = usergroupuntagmembersValidateBeforeCall(token, group, tags, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unassign tags from the members of a specified group (asynchronously)
     * Allows the user to unassign tags to the users of a group that they have permission to edit.
     * @param token The authentication token. (required)
     * @param group The id of the group to save whose members have to be untagged. (required)
     * @param tags The tags to unassign from the members of the specified group, in JSON format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupuntagmembersAsync(String token, UUID group, String tags, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupuntagmembersValidateBeforeCall(token, group, tags, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userlist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param roleid The id of the role to filter users by, or empty to return all users. (optional)
     * @param onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userlistCall(String token, Integer from, Integer count, UUID roleid, String onlywithoutcard, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (roleid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roleid", roleid));
        }

        if (onlywithoutcard != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlywithoutcard", onlywithoutcard));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userlistValidateBeforeCall(String token, Integer from, Integer count, UUID roleid, String onlywithoutcard, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling userlist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling userlist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling userlist(Async)");
        }
        

        okhttp3.Call localVarCall = userlistCall(token, from, count, roleid, onlywithoutcard, photosize, _callback);
        return localVarCall;

    }

    /**
     * View a list of users
     * Allows the user to view the full list of users and is based on role permissions.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param roleid The id of the role to filter users by, or empty to return all users. (optional)
     * @param onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userlist(String token, Integer from, Integer count, UUID roleid, String onlywithoutcard, Integer photosize) throws ApiException {
        userlistWithHttpInfo(token, from, count, roleid, onlywithoutcard, photosize);
    }

    /**
     * View a list of users
     * Allows the user to view the full list of users and is based on role permissions.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param roleid The id of the role to filter users by, or empty to return all users. (optional)
     * @param onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userlistWithHttpInfo(String token, Integer from, Integer count, UUID roleid, String onlywithoutcard, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = userlistValidateBeforeCall(token, from, count, roleid, onlywithoutcard, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of users (asynchronously)
     * Allows the user to view the full list of users and is based on role permissions.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param roleid The id of the role to filter users by, or empty to return all users. (optional)
     * @param onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userlistAsync(String token, Integer from, Integer count, UUID roleid, String onlywithoutcard, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userlistValidateBeforeCall(token, from, count, roleid, onlywithoutcard, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userloadphoto
     * @param token The authentication token. (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @param userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;. (optional)
     * @param automatch Set this to true to find the specific user based on the file name.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userloadphotoCall(String token, String upload, String filename, UUID userid, Boolean automatch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userloadphoto";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (upload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload", upload));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (automatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("automatch", automatch));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userloadphotoValidateBeforeCall(String token, String upload, String filename, UUID userid, Boolean automatch, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling userloadphoto(Async)");
        }
        
        // verify the required parameter 'upload' is set
        if (upload == null) {
            throw new ApiException("Missing the required parameter 'upload' when calling userloadphoto(Async)");
        }
        

        okhttp3.Call localVarCall = userloadphotoCall(token, upload, filename, userid, automatch, _callback);
        return localVarCall;

    }

    /**
     * Upload a photo for a specific user
     * Allows the user to upload a photo for a user.
     * @param token The authentication token. (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @param userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;. (optional)
     * @param automatch Set this to true to find the specific user based on the file name.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userloadphoto(String token, String upload, String filename, UUID userid, Boolean automatch) throws ApiException {
        userloadphotoWithHttpInfo(token, upload, filename, userid, automatch);
    }

    /**
     * Upload a photo for a specific user
     * Allows the user to upload a photo for a user.
     * @param token The authentication token. (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @param userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;. (optional)
     * @param automatch Set this to true to find the specific user based on the file name.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userloadphotoWithHttpInfo(String token, String upload, String filename, UUID userid, Boolean automatch) throws ApiException {
        okhttp3.Call localVarCall = userloadphotoValidateBeforeCall(token, upload, filename, userid, automatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload a photo for a specific user (asynchronously)
     * Allows the user to upload a photo for a user.
     * @param token The authentication token. (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @param userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;. (optional)
     * @param automatch Set this to true to find the specific user based on the file name.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userloadphotoAsync(String token, String upload, String filename, UUID userid, Boolean automatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userloadphotoValidateBeforeCall(token, upload, filename, userid, automatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usermovedata
     * @param token The authentication token. (required)
     * @param source The id of the user that is the source of the data. (required)
     * @param destination The id of the user that is the destination of the data. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usermovedataCall(String token, UUID source, UUID destination, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usermovedata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (destination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination", destination));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usermovedataValidateBeforeCall(String token, UUID source, UUID destination, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usermovedata(Async)");
        }
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling usermovedata(Async)");
        }
        
        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling usermovedata(Async)");
        }
        

        okhttp3.Call localVarCall = usermovedataCall(token, source, destination, _callback);
        return localVarCall;

    }

    /**
     * Move data between users
     * Allows administrators to move data between users.
     * @param token The authentication token. (required)
     * @param source The id of the user that is the source of the data. (required)
     * @param destination The id of the user that is the destination of the data. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usermovedata(String token, UUID source, UUID destination) throws ApiException {
        usermovedataWithHttpInfo(token, source, destination);
    }

    /**
     * Move data between users
     * Allows administrators to move data between users.
     * @param token The authentication token. (required)
     * @param source The id of the user that is the source of the data. (required)
     * @param destination The id of the user that is the destination of the data. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usermovedataWithHttpInfo(String token, UUID source, UUID destination) throws ApiException {
        okhttp3.Call localVarCall = usermovedataValidateBeforeCall(token, source, destination, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Move data between users (asynchronously)
     * Allows administrators to move data between users.
     * @param token The authentication token. (required)
     * @param source The id of the user that is the source of the data. (required)
     * @param destination The id of the user that is the destination of the data. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usermovedataAsync(String token, UUID source, UUID destination, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usermovedataValidateBeforeCall(token, source, destination, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userprofiledelete
     * @param token The authentication token. (required)
     * @param id The id of the user profile to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userprofiledeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userprofiledelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userprofiledeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling userprofiledelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userprofiledelete(Async)");
        }
        

        okhttp3.Call localVarCall = userprofiledeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a user profile
     * Allows the user to delete a profile from the list of profiles that they have permission to edit.
     * @param token The authentication token. (required)
     * @param id The id of the user profile to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userprofiledelete(String token, UUID id) throws ApiException {
        userprofiledeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a user profile
     * Allows the user to delete a profile from the list of profiles that they have permission to edit.
     * @param token The authentication token. (required)
     * @param id The id of the user profile to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userprofiledeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = userprofiledeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a user profile (asynchronously)
     * Allows the user to delete a profile from the list of profiles that they have permission to edit.
     * @param token The authentication token. (required)
     * @param id The id of the user profile to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userprofiledeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userprofiledeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userprofileget
     * @param token The authentication token. (required)
     * @param id The id of the profile question set. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userprofilegetCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userprofileget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userprofilegetValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling userprofileget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userprofileget(Async)");
        }
        

        okhttp3.Call localVarCall = userprofilegetCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * View a specific user profile
     * Allows the user to view individual user profiles and their details, provided they have permission to view that profile.
     * @param token The authentication token. (required)
     * @param id The id of the profile question set. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userprofileget(String token, UUID id) throws ApiException {
        userprofilegetWithHttpInfo(token, id);
    }

    /**
     * View a specific user profile
     * Allows the user to view individual user profiles and their details, provided they have permission to view that profile.
     * @param token The authentication token. (required)
     * @param id The id of the profile question set. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userprofilegetWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = userprofilegetValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a specific user profile (asynchronously)
     * Allows the user to view individual user profiles and their details, provided they have permission to view that profile.
     * @param token The authentication token. (required)
     * @param id The id of the profile question set. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userprofilegetAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userprofilegetValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userprofilegetallview
     * @param token The authentication token. (required)
     * @param id The id of the user to view, or empty for current user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userprofilegetallviewCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userprofilegetallview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userprofilegetallviewValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling userprofilegetallview(Async)");
        }
        

        okhttp3.Call localVarCall = userprofilegetallviewCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Shows the profile for a specific (or current) user, based on each profile questionnaire questions.
     * Allows the user to view a profile for a user, provided they have permission to view that user and profile.
     * @param token The authentication token. (required)
     * @param id The id of the user to view, or empty for current user. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userprofilegetallview(String token, UUID id) throws ApiException {
        userprofilegetallviewWithHttpInfo(token, id);
    }

    /**
     * Shows the profile for a specific (or current) user, based on each profile questionnaire questions.
     * Allows the user to view a profile for a user, provided they have permission to view that user and profile.
     * @param token The authentication token. (required)
     * @param id The id of the user to view, or empty for current user. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userprofilegetallviewWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = userprofilegetallviewValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Shows the profile for a specific (or current) user, based on each profile questionnaire questions. (asynchronously)
     * Allows the user to view a profile for a user, provided they have permission to view that user and profile.
     * @param token The authentication token. (required)
     * @param id The id of the user to view, or empty for current user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userprofilegetallviewAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userprofilegetallviewValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userprofilelist
     * @param token The authentication token. (required)
     * @param from The first record to return. (optional)
     * @param count The max number of records to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userprofilelistCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userprofilelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userprofilelistValidateBeforeCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling userprofilelist(Async)");
        }
        

        okhttp3.Call localVarCall = userprofilelistCall(token, from, count, _callback);
        return localVarCall;

    }

    /**
     * View the list of user profiles
     * Allows the user to view the full list of profiles that they have permission to view.
     * @param token The authentication token. (required)
     * @param from The first record to return. (optional)
     * @param count The max number of records to return. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userprofilelist(String token, Integer from, Integer count) throws ApiException {
        userprofilelistWithHttpInfo(token, from, count);
    }

    /**
     * View the list of user profiles
     * Allows the user to view the full list of profiles that they have permission to view.
     * @param token The authentication token. (required)
     * @param from The first record to return. (optional)
     * @param count The max number of records to return. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userprofilelistWithHttpInfo(String token, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = userprofilelistValidateBeforeCall(token, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the list of user profiles (asynchronously)
     * Allows the user to view the full list of profiles that they have permission to view.
     * @param token The authentication token. (required)
     * @param from The first record to return. (optional)
     * @param count The max number of records to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userprofilelistAsync(String token, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userprofilelistValidateBeforeCall(token, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userprofilelistquestions
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userprofilelistquestionsCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userprofilelistquestions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userprofilelistquestionsValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling userprofilelistquestions(Async)");
        }
        

        okhttp3.Call localVarCall = userprofilelistquestionsCall(token, _callback);
        return localVarCall;

    }

    /**
     * Gets the list of all the available user questions
     * Allows the user to view the list of questions in a profile that they have permission to view.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userprofilelistquestions(String token) throws ApiException {
        userprofilelistquestionsWithHttpInfo(token);
    }

    /**
     * Gets the list of all the available user questions
     * Allows the user to view the list of questions in a profile that they have permission to view.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userprofilelistquestionsWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = userprofilelistquestionsValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the list of all the available user questions (asynchronously)
     * Allows the user to view the list of questions in a profile that they have permission to view.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userprofilelistquestionsAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userprofilelistquestionsValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userprofilepreparestats
     * @param token The authentication token. (required)
     * @param params The ID of the group, specified as &#39;group&#x3D;...&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userprofilepreparestatsCall(String token, String params, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userprofilepreparestats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userprofilepreparestatsValidateBeforeCall(String token, String params, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling userprofilepreparestats(Async)");
        }
        

        okhttp3.Call localVarCall = userprofilepreparestatsCall(token, params, _callback);
        return localVarCall;

    }

    /**
     * Gets the statistics of a user group
     * Allows the user to view the demographic statistics of a user group.
     * @param token The authentication token. (required)
     * @param params The ID of the group, specified as &#39;group&#x3D;...&#39; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userprofilepreparestats(String token, String params) throws ApiException {
        userprofilepreparestatsWithHttpInfo(token, params);
    }

    /**
     * Gets the statistics of a user group
     * Allows the user to view the demographic statistics of a user group.
     * @param token The authentication token. (required)
     * @param params The ID of the group, specified as &#39;group&#x3D;...&#39; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userprofilepreparestatsWithHttpInfo(String token, String params) throws ApiException {
        okhttp3.Call localVarCall = userprofilepreparestatsValidateBeforeCall(token, params, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the statistics of a user group (asynchronously)
     * Allows the user to view the demographic statistics of a user group.
     * @param token The authentication token. (required)
     * @param params The ID of the group, specified as &#39;group&#x3D;...&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userprofilepreparestatsAsync(String token, String params, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userprofilepreparestatsValidateBeforeCall(token, params, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userprofilesave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userprofilesaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/userprofilesave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userprofilesaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = userprofilesaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit user profile questions
     * Allows the user to create or edit a user profile.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userprofilesave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        userprofilesaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit user profile questions
     * Allows the user to create or edit a user profile.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userprofilesaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = userprofilesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit user profile questions (asynchronously)
     * Allows the user to create or edit a user profile.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userprofilesaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userprofilesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userprofilesaveanswers
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userprofilesaveanswersCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/userprofilesaveanswers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userprofilesaveanswersValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = userprofilesaveanswersCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Saves the profile for a specific (or current) user. Additional security applies on a per profile basis.
     * Allows the user to edit a profile for a user, provided they have permission to edit that user and profile.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userprofilesaveanswers(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        userprofilesaveanswersWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Saves the profile for a specific (or current) user. Additional security applies on a per profile basis.
     * Allows the user to edit a profile for a user, provided they have permission to edit that user and profile.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userprofilesaveanswersWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = userprofilesaveanswersValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Saves the profile for a specific (or current) user. Additional security applies on a per profile basis. (asynchronously)
     * Allows the user to edit a profile for a user, provided they have permission to edit that user and profile.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userprofilesaveanswersAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userprofilesaveanswersValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userrequestpwdchange
     * @param domain The domain of the account where the user exists. (required)
     * @param email The email of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userrequestpwdchangeCall(String domain, String email, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userrequestpwdchange";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userrequestpwdchangeValidateBeforeCall(String domain, String email, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling userrequestpwdchange(Async)");
        }
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling userrequestpwdchange(Async)");
        }
        

        okhttp3.Call localVarCall = userrequestpwdchangeCall(domain, email, _callback);
        return localVarCall;

    }

    /**
     * Requests a password change
     * 
     * @param domain The domain of the account where the user exists. (required)
     * @param email The email of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userrequestpwdchange(String domain, String email) throws ApiException {
        userrequestpwdchangeWithHttpInfo(domain, email);
    }

    /**
     * Requests a password change
     * 
     * @param domain The domain of the account where the user exists. (required)
     * @param email The email of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userrequestpwdchangeWithHttpInfo(String domain, String email) throws ApiException {
        okhttp3.Call localVarCall = userrequestpwdchangeValidateBeforeCall(domain, email, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Requests a password change (asynchronously)
     * 
     * @param domain The domain of the account where the user exists. (required)
     * @param email The email of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userrequestpwdchangeAsync(String domain, String email, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userrequestpwdchangeValidateBeforeCall(domain, email, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/usersave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usersaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a user
     * Allows the user to create or edit a user.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usersave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        usersaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a user
     * Allows the user to create or edit a user.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = usersaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a user (asynchronously)
     * Allows the user to create or edit a user.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersavepwdchange
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersavepwdchangeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/usersavepwdchange";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersavepwdchangeValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usersavepwdchangeCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Send email to the specified user(s) to set/change their passwords
     * Allows the user to trigger an email to another user asking them to set or change their password.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usersavepwdchange(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        usersavepwdchangeWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Send email to the specified user(s) to set/change their passwords
     * Allows the user to trigger an email to another user asking them to set or change their password.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersavepwdchangeWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = usersavepwdchangeValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send email to the specified user(s) to set/change their passwords (asynchronously)
     * Allows the user to trigger an email to another user asking them to set or change their password.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersavepwdchangeAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersavepwdchangeValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersettingsget
     * @param token The authentication token. (required)
     * @param keys Setting key to get. Can be multiple separated by commas. (required)
     * @param user The user id whose settings have to be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersettingsgetCall(String token, String keys, UUID user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usersettingsget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (keys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keys", keys));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersettingsgetValidateBeforeCall(String token, String keys, UUID user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usersettingsget(Async)");
        }
        
        // verify the required parameter 'keys' is set
        if (keys == null) {
            throw new ApiException("Missing the required parameter 'keys' when calling usersettingsget(Async)");
        }
        

        okhttp3.Call localVarCall = usersettingsgetCall(token, keys, user, _callback);
        return localVarCall;

    }

    /**
     * Lists available user settings
     * 
     * @param token The authentication token. (required)
     * @param keys Setting key to get. Can be multiple separated by commas. (required)
     * @param user The user id whose settings have to be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usersettingsget(String token, String keys, UUID user) throws ApiException {
        usersettingsgetWithHttpInfo(token, keys, user);
    }

    /**
     * Lists available user settings
     * 
     * @param token The authentication token. (required)
     * @param keys Setting key to get. Can be multiple separated by commas. (required)
     * @param user The user id whose settings have to be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersettingsgetWithHttpInfo(String token, String keys, UUID user) throws ApiException {
        okhttp3.Call localVarCall = usersettingsgetValidateBeforeCall(token, keys, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists available user settings (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param keys Setting key to get. Can be multiple separated by commas. (required)
     * @param user The user id whose settings have to be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersettingsgetAsync(String token, String keys, UUID user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersettingsgetValidateBeforeCall(token, keys, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersettingsgetmultiple
     * @param token The authentication token. (required)
     * @param keys Setting key to get. Can be multiple separated by commas. (required)
     * @param user The user id whose settings have to be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersettingsgetmultipleCall(String token, String keys, UUID user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usersettingsgetmultiple";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (keys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keys", keys));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersettingsgetmultipleValidateBeforeCall(String token, String keys, UUID user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usersettingsgetmultiple(Async)");
        }
        
        // verify the required parameter 'keys' is set
        if (keys == null) {
            throw new ApiException("Missing the required parameter 'keys' when calling usersettingsgetmultiple(Async)");
        }
        

        okhttp3.Call localVarCall = usersettingsgetmultipleCall(token, keys, user, _callback);
        return localVarCall;

    }

    /**
     * Get multiple user settings
     * 
     * @param token The authentication token. (required)
     * @param keys Setting key to get. Can be multiple separated by commas. (required)
     * @param user The user id whose settings have to be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usersettingsgetmultiple(String token, String keys, UUID user) throws ApiException {
        usersettingsgetmultipleWithHttpInfo(token, keys, user);
    }

    /**
     * Get multiple user settings
     * 
     * @param token The authentication token. (required)
     * @param keys Setting key to get. Can be multiple separated by commas. (required)
     * @param user The user id whose settings have to be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersettingsgetmultipleWithHttpInfo(String token, String keys, UUID user) throws ApiException {
        okhttp3.Call localVarCall = usersettingsgetmultipleValidateBeforeCall(token, keys, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get multiple user settings (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param keys Setting key to get. Can be multiple separated by commas. (required)
     * @param user The user id whose settings have to be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersettingsgetmultipleAsync(String token, String keys, UUID user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersettingsgetmultipleValidateBeforeCall(token, keys, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersettingssave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersettingssaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/usersettingssave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersettingssaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usersettingssaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Saves a user setting
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usersettingssave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        usersettingssaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Saves a user setting
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersettingssaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = usersettingssaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Saves a user setting (asynchronously)
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersettingssaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersettingssaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersettingssavemultiple
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersettingssavemultipleCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/usersettingssavemultiple";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersettingssavemultipleValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usersettingssavemultipleCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Save multiple user settings at once
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void usersettingssavemultiple(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        usersettingssavemultipleWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Save multiple user settings at once
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersettingssavemultipleWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = usersettingssavemultipleValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save multiple user settings at once (asynchronously)
     * 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersettingssavemultipleAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersettingssavemultipleValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for version
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call versionValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling version(Async)");
        }
        

        okhttp3.Call localVarCall = versionCall(token, _callback);
        return localVarCall;

    }

    /**
     * Get current version information
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void version(String token) throws ApiException {
        versionWithHttpInfo(token);
    }

    /**
     * Get current version information
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> versionWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = versionValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get current version information (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = versionValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtuallineaddmyself
     * @param token The authentication token. (required)
     * @param waitinglineid ID of the waiting line to join. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtuallineaddmyselfCall(String token, UUID waitinglineid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/virtuallineaddmyself";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (waitinglineid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("waitinglineid", waitinglineid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtuallineaddmyselfValidateBeforeCall(String token, UUID waitinglineid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling virtuallineaddmyself(Async)");
        }
        
        // verify the required parameter 'waitinglineid' is set
        if (waitinglineid == null) {
            throw new ApiException("Missing the required parameter 'waitinglineid' when calling virtuallineaddmyself(Async)");
        }
        

        okhttp3.Call localVarCall = virtuallineaddmyselfCall(token, waitinglineid, _callback);
        return localVarCall;

    }

    /**
     * Add myself to a waiting line
     * Allows the user to add themselves to a waiting line from the AccuCampus mobile app.
     * @param token The authentication token. (required)
     * @param waitinglineid ID of the waiting line to join. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void virtuallineaddmyself(String token, UUID waitinglineid) throws ApiException {
        virtuallineaddmyselfWithHttpInfo(token, waitinglineid);
    }

    /**
     * Add myself to a waiting line
     * Allows the user to add themselves to a waiting line from the AccuCampus mobile app.
     * @param token The authentication token. (required)
     * @param waitinglineid ID of the waiting line to join. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> virtuallineaddmyselfWithHttpInfo(String token, UUID waitinglineid) throws ApiException {
        okhttp3.Call localVarCall = virtuallineaddmyselfValidateBeforeCall(token, waitinglineid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add myself to a waiting line (asynchronously)
     * Allows the user to add themselves to a waiting line from the AccuCampus mobile app.
     * @param token The authentication token. (required)
     * @param waitinglineid ID of the waiting line to join. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtuallineaddmyselfAsync(String token, UUID waitinglineid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtuallineaddmyselfValidateBeforeCall(token, waitinglineid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtuallinelist
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtuallinelistCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/virtuallinelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtuallinelistValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling virtuallinelist(Async)");
        }
        

        okhttp3.Call localVarCall = virtuallinelistCall(token, _callback);
        return localVarCall;

    }

    /**
     * Lists waiting lines that have remote access enabled
     * 
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void virtuallinelist(String token) throws ApiException {
        virtuallinelistWithHttpInfo(token);
    }

    /**
     * Lists waiting lines that have remote access enabled
     * 
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> virtuallinelistWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = virtuallinelistValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists waiting lines that have remote access enabled (asynchronously)
     * 
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtuallinelistAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtuallinelistValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtuallineremovemyself
     * @param token The authentication token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtuallineremovemyselfCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/virtuallineremovemyself";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtuallineremovemyselfValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling virtuallineremovemyself(Async)");
        }
        

        okhttp3.Call localVarCall = virtuallineremovemyselfCall(token, _callback);
        return localVarCall;

    }

    /**
     * Remove myself from a waiting line
     * Allows the user to remove themselves from a waiting line in the AccuCampus mobile app.
     * @param token The authentication token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void virtuallineremovemyself(String token) throws ApiException {
        virtuallineremovemyselfWithHttpInfo(token);
    }

    /**
     * Remove myself from a waiting line
     * Allows the user to remove themselves from a waiting line in the AccuCampus mobile app.
     * @param token The authentication token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> virtuallineremovemyselfWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = virtuallineremovemyselfValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove myself from a waiting line (asynchronously)
     * Allows the user to remove themselves from a waiting line in the AccuCampus mobile app.
     * @param token The authentication token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtuallineremovemyselfAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtuallineremovemyselfValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitinglineadduser
     * @param station The id of the sign-in station. (required)
     * @param user The user&#39;s card number. (required)
     * @param locationid The location&#39;s id where the swipe must be saved. (optional)
     * @param time The date and time of the swipe. (optional)
     * @param signinrole Specifies if the sign-in is for an attendee or a staff member (optional)
     * @param roleid Specifies the role the user has selected in order to sign-in (optional)
     * @param services The services ids the user has selected. (optional)
     * @param eventid The id of the event the user selected. (optional)
     * @param staff The id of the staff member the user selected. (optional)
     * @param photosize The swiping user&#39;s photo size. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineadduserCall(UUID station, String user, UUID locationid, OffsetDateTime time, String signinrole, UUID roleid, String services, UUID eventid, UUID staff, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/waitinglineadduser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (signinrole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signinrole", signinrole));
        }

        if (roleid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roleid", roleid));
        }

        if (services != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("services", services));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (staff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staff", staff));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitinglineadduserValidateBeforeCall(UUID station, String user, UUID locationid, OffsetDateTime time, String signinrole, UUID roleid, String services, UUID eventid, UUID staff, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling waitinglineadduser(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling waitinglineadduser(Async)");
        }
        

        okhttp3.Call localVarCall = waitinglineadduserCall(station, user, locationid, time, signinrole, roleid, services, eventid, staff, photosize, _callback);
        return localVarCall;

    }

    /**
     * Put user in a waiting line
     * 
     * @param station The id of the sign-in station. (required)
     * @param user The user&#39;s card number. (required)
     * @param locationid The location&#39;s id where the swipe must be saved. (optional)
     * @param time The date and time of the swipe. (optional)
     * @param signinrole Specifies if the sign-in is for an attendee or a staff member (optional)
     * @param roleid Specifies the role the user has selected in order to sign-in (optional)
     * @param services The services ids the user has selected. (optional)
     * @param eventid The id of the event the user selected. (optional)
     * @param staff The id of the staff member the user selected. (optional)
     * @param photosize The swiping user&#39;s photo size. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void waitinglineadduser(UUID station, String user, UUID locationid, OffsetDateTime time, String signinrole, UUID roleid, String services, UUID eventid, UUID staff, Integer photosize) throws ApiException {
        waitinglineadduserWithHttpInfo(station, user, locationid, time, signinrole, roleid, services, eventid, staff, photosize);
    }

    /**
     * Put user in a waiting line
     * 
     * @param station The id of the sign-in station. (required)
     * @param user The user&#39;s card number. (required)
     * @param locationid The location&#39;s id where the swipe must be saved. (optional)
     * @param time The date and time of the swipe. (optional)
     * @param signinrole Specifies if the sign-in is for an attendee or a staff member (optional)
     * @param roleid Specifies the role the user has selected in order to sign-in (optional)
     * @param services The services ids the user has selected. (optional)
     * @param eventid The id of the event the user selected. (optional)
     * @param staff The id of the staff member the user selected. (optional)
     * @param photosize The swiping user&#39;s photo size. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> waitinglineadduserWithHttpInfo(UUID station, String user, UUID locationid, OffsetDateTime time, String signinrole, UUID roleid, String services, UUID eventid, UUID staff, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = waitinglineadduserValidateBeforeCall(station, user, locationid, time, signinrole, roleid, services, eventid, staff, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Put user in a waiting line (asynchronously)
     * 
     * @param station The id of the sign-in station. (required)
     * @param user The user&#39;s card number. (required)
     * @param locationid The location&#39;s id where the swipe must be saved. (optional)
     * @param time The date and time of the swipe. (optional)
     * @param signinrole Specifies if the sign-in is for an attendee or a staff member (optional)
     * @param roleid Specifies the role the user has selected in order to sign-in (optional)
     * @param services The services ids the user has selected. (optional)
     * @param eventid The id of the event the user selected. (optional)
     * @param staff The id of the staff member the user selected. (optional)
     * @param photosize The swiping user&#39;s photo size. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineadduserAsync(UUID station, String user, UUID locationid, OffsetDateTime time, String signinrole, UUID roleid, String services, UUID eventid, UUID staff, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitinglineadduserValidateBeforeCall(station, user, locationid, time, signinrole, roleid, services, eventid, staff, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitinglinedelete
     * @param token The authentication token. (required)
     * @param id The id of the line to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglinedeleteCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/waitinglinedelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitinglinedeleteValidateBeforeCall(String token, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling waitinglinedelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling waitinglinedelete(Async)");
        }
        

        okhttp3.Call localVarCall = waitinglinedeleteCall(token, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a waiting line
     * Allows the user to delete an existing waiting line, provided it is in a location that the user is scoped to.
     * @param token The authentication token. (required)
     * @param id The id of the line to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void waitinglinedelete(String token, UUID id) throws ApiException {
        waitinglinedeleteWithHttpInfo(token, id);
    }

    /**
     * Delete a waiting line
     * Allows the user to delete an existing waiting line, provided it is in a location that the user is scoped to.
     * @param token The authentication token. (required)
     * @param id The id of the line to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> waitinglinedeleteWithHttpInfo(String token, UUID id) throws ApiException {
        okhttp3.Call localVarCall = waitinglinedeleteValidateBeforeCall(token, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a waiting line (asynchronously)
     * Allows the user to delete an existing waiting line, provided it is in a location that the user is scoped to.
     * @param token The authentication token. (required)
     * @param id The id of the line to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglinedeleteAsync(String token, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitinglinedeleteValidateBeforeCall(token, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitinglineget
     * @param token The authentication token. (required)
     * @param id The id of the waiting line to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglinegetCall(String token, UUID id, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/waitinglineget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitinglinegetValidateBeforeCall(String token, UUID id, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling waitinglineget(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling waitinglineget(Async)");
        }
        

        okhttp3.Call localVarCall = waitinglinegetCall(token, id, photosize, _callback);
        return localVarCall;

    }

    /**
     * View details of a waiting line
     * Allows the user to view the details of a waiting line in a location to which they are scoped.
     * @param token The authentication token. (required)
     * @param id The id of the waiting line to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void waitinglineget(String token, UUID id, Integer photosize) throws ApiException {
        waitinglinegetWithHttpInfo(token, id, photosize);
    }

    /**
     * View details of a waiting line
     * Allows the user to view the details of a waiting line in a location to which they are scoped.
     * @param token The authentication token. (required)
     * @param id The id of the waiting line to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> waitinglinegetWithHttpInfo(String token, UUID id, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = waitinglinegetValidateBeforeCall(token, id, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a waiting line (asynchronously)
     * Allows the user to view the details of a waiting line in a location to which they are scoped.
     * @param token The authentication token. (required)
     * @param id The id of the waiting line to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglinegetAsync(String token, UUID id, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitinglinegetValidateBeforeCall(token, id, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitinglineisuserin
     * @param station The id of the sign-in station. (required)
     * @param time The date and time of the swipe. (required)
     * @param user The card number of the user. (required)
     * @param location The id of the location the user picked. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineisuserinCall(UUID station, OffsetDateTime time, String user, UUID location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/waitinglineisuserin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitinglineisuserinValidateBeforeCall(UUID station, OffsetDateTime time, String user, UUID location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling waitinglineisuserin(Async)");
        }
        
        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling waitinglineisuserin(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling waitinglineisuserin(Async)");
        }
        

        okhttp3.Call localVarCall = waitinglineisuserinCall(station, time, user, location, _callback);
        return localVarCall;

    }

    /**
     * Check whether a user is in a waiting line, signed-in or is not in the area
     * 
     * @param station The id of the sign-in station. (required)
     * @param time The date and time of the swipe. (required)
     * @param user The card number of the user. (required)
     * @param location The id of the location the user picked. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void waitinglineisuserin(UUID station, OffsetDateTime time, String user, UUID location) throws ApiException {
        waitinglineisuserinWithHttpInfo(station, time, user, location);
    }

    /**
     * Check whether a user is in a waiting line, signed-in or is not in the area
     * 
     * @param station The id of the sign-in station. (required)
     * @param time The date and time of the swipe. (required)
     * @param user The card number of the user. (required)
     * @param location The id of the location the user picked. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> waitinglineisuserinWithHttpInfo(UUID station, OffsetDateTime time, String user, UUID location) throws ApiException {
        okhttp3.Call localVarCall = waitinglineisuserinValidateBeforeCall(station, time, user, location, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check whether a user is in a waiting line, signed-in or is not in the area (asynchronously)
     * 
     * @param station The id of the sign-in station. (required)
     * @param time The date and time of the swipe. (required)
     * @param user The card number of the user. (required)
     * @param location The id of the location the user picked. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineisuserinAsync(UUID station, OffsetDateTime time, String user, UUID location, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitinglineisuserinValidateBeforeCall(station, time, user, location, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitinglinelist
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglinelistCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/waitinglinelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitinglinelistValidateBeforeCall(String token, Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling waitinglinelist(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling waitinglinelist(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling waitinglinelist(Async)");
        }
        

        okhttp3.Call localVarCall = waitinglinelistCall(token, from, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of waiting lines
     * Allows the user to view the list of waiting lines in locations to which they are scoped.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void waitinglinelist(String token, Integer from, Integer count) throws ApiException {
        waitinglinelistWithHttpInfo(token, from, count);
    }

    /**
     * View a list of waiting lines
     * Allows the user to view the list of waiting lines in locations to which they are scoped.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> waitinglinelistWithHttpInfo(String token, Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = waitinglinelistValidateBeforeCall(token, from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of waiting lines (asynchronously)
     * Allows the user to view the list of waiting lines in locations to which they are scoped.
     * @param token The authentication token. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglinelistAsync(String token, Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitinglinelistValidateBeforeCall(token, from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitinglineremoveuser
     * @param token The authentication token. (required)
     * @param waitingline The id of the waiting line whose item has to be removed. (required)
     * @param itemid The ID of the item that has to be removed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineremoveuserCall(String token, UUID waitingline, UUID itemid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/waitinglineremoveuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (waitingline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("waitingline", waitingline));
        }

        if (itemid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemid", itemid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitinglineremoveuserValidateBeforeCall(String token, UUID waitingline, UUID itemid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling waitinglineremoveuser(Async)");
        }
        
        // verify the required parameter 'waitingline' is set
        if (waitingline == null) {
            throw new ApiException("Missing the required parameter 'waitingline' when calling waitinglineremoveuser(Async)");
        }
        
        // verify the required parameter 'itemid' is set
        if (itemid == null) {
            throw new ApiException("Missing the required parameter 'itemid' when calling waitinglineremoveuser(Async)");
        }
        

        okhttp3.Call localVarCall = waitinglineremoveuserCall(token, waitingline, itemid, _callback);
        return localVarCall;

    }

    /**
     * Remove a user from a waiting line
     * Allows the user to remove a user from a waiting line, provided they have permission to access that waiting line.
     * @param token The authentication token. (required)
     * @param waitingline The id of the waiting line whose item has to be removed. (required)
     * @param itemid The ID of the item that has to be removed. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void waitinglineremoveuser(String token, UUID waitingline, UUID itemid) throws ApiException {
        waitinglineremoveuserWithHttpInfo(token, waitingline, itemid);
    }

    /**
     * Remove a user from a waiting line
     * Allows the user to remove a user from a waiting line, provided they have permission to access that waiting line.
     * @param token The authentication token. (required)
     * @param waitingline The id of the waiting line whose item has to be removed. (required)
     * @param itemid The ID of the item that has to be removed. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> waitinglineremoveuserWithHttpInfo(String token, UUID waitingline, UUID itemid) throws ApiException {
        okhttp3.Call localVarCall = waitinglineremoveuserValidateBeforeCall(token, waitingline, itemid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a user from a waiting line (asynchronously)
     * Allows the user to remove a user from a waiting line, provided they have permission to access that waiting line.
     * @param token The authentication token. (required)
     * @param waitingline The id of the waiting line whose item has to be removed. (required)
     * @param itemid The ID of the item that has to be removed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineremoveuserAsync(String token, UUID waitingline, UUID itemid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitinglineremoveuserValidateBeforeCall(token, waitingline, itemid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitinglinesave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglinesaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/waitinglinesave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitinglinesaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = waitinglinesaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a waiting line
     * Allows the user to create or edit a waiting line in a location to which they are scoped.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void waitinglinesave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        waitinglinesaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a waiting line
     * Allows the user to create or edit a waiting line in a location to which they are scoped.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> waitinglinesaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = waitinglinesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a waiting line (asynchronously)
     * Allows the user to create or edit a waiting line in a location to which they are scoped.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglinesaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitinglinesaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitinglinesigninuser
     * @param token The authentication token. (required)
     * @param waitingline The id of the waiting line whose item needs to be signed-in. (required)
     * @param itemid The ID of the item that has to be signed-in. (required)
     * @param staff The id of the staff member selected to sign-in. (required)
     * @param photosize The swiping user&#39;s photo size. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglinesigninuserCall(String token, UUID waitingline, UUID itemid, UUID staff, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/waitinglinesigninuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (waitingline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("waitingline", waitingline));
        }

        if (itemid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemid", itemid));
        }

        if (staff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staff", staff));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitinglinesigninuserValidateBeforeCall(String token, UUID waitingline, UUID itemid, UUID staff, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling waitinglinesigninuser(Async)");
        }
        
        // verify the required parameter 'waitingline' is set
        if (waitingline == null) {
            throw new ApiException("Missing the required parameter 'waitingline' when calling waitinglinesigninuser(Async)");
        }
        
        // verify the required parameter 'itemid' is set
        if (itemid == null) {
            throw new ApiException("Missing the required parameter 'itemid' when calling waitinglinesigninuser(Async)");
        }
        
        // verify the required parameter 'staff' is set
        if (staff == null) {
            throw new ApiException("Missing the required parameter 'staff' when calling waitinglinesigninuser(Async)");
        }
        

        okhttp3.Call localVarCall = waitinglinesigninuserCall(token, waitingline, itemid, staff, photosize, _callback);
        return localVarCall;

    }

    /**
     * Sign a user in from a waiting line
     * Allows the user to sign a user in from a waiting line, provided they have permission to access that waiting line.
     * @param token The authentication token. (required)
     * @param waitingline The id of the waiting line whose item needs to be signed-in. (required)
     * @param itemid The ID of the item that has to be signed-in. (required)
     * @param staff The id of the staff member selected to sign-in. (required)
     * @param photosize The swiping user&#39;s photo size. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void waitinglinesigninuser(String token, UUID waitingline, UUID itemid, UUID staff, Integer photosize) throws ApiException {
        waitinglinesigninuserWithHttpInfo(token, waitingline, itemid, staff, photosize);
    }

    /**
     * Sign a user in from a waiting line
     * Allows the user to sign a user in from a waiting line, provided they have permission to access that waiting line.
     * @param token The authentication token. (required)
     * @param waitingline The id of the waiting line whose item needs to be signed-in. (required)
     * @param itemid The ID of the item that has to be signed-in. (required)
     * @param staff The id of the staff member selected to sign-in. (required)
     * @param photosize The swiping user&#39;s photo size. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> waitinglinesigninuserWithHttpInfo(String token, UUID waitingline, UUID itemid, UUID staff, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = waitinglinesigninuserValidateBeforeCall(token, waitingline, itemid, staff, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sign a user in from a waiting line (asynchronously)
     * Allows the user to sign a user in from a waiting line, provided they have permission to access that waiting line.
     * @param token The authentication token. (required)
     * @param waitingline The id of the waiting line whose item needs to be signed-in. (required)
     * @param itemid The ID of the item that has to be signed-in. (required)
     * @param staff The id of the staff member selected to sign-in. (required)
     * @param photosize The swiping user&#39;s photo size. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglinesigninuserAsync(String token, UUID waitingline, UUID itemid, UUID staff, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitinglinesigninuserValidateBeforeCall(token, waitingline, itemid, staff, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
