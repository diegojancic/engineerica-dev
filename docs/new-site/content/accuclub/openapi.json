{
  "openapi": "3.0.1",
  "info": {
    "title": "AccuCampus OpenAPI 3 Documentation",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://accucampus.net/api/v1"
    }
  ],
  "paths": {
    "/doc": {
      "get": {
        "summary": "Get the documentation",
        "description": "Retrieves the list of actions available in the system.",
        "operationId": "doc",
        "parameters": [
          {
            "name": "excludeanonymous",
            "in": "query",
            "description": "If true it excludes the anonymous actions from the returned list.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/featurelist": {
      "get": {
        "summary": "Lists the available features.",
        "operationId": "featurelist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/login": {
      "get": {
        "summary": "Login",
        "operationId": "login",
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "description": "The account domain to login.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "The username (email) of the user to login as.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password of the user to login as.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "method",
            "in": "query",
            "description": "The authentication method. Valid values are 'token' and 'cookie'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rememberme",
            "in": "query",
            "description": "If true then the session will not expire.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/logout": {
      "get": {
        "summary": "Logout",
        "operationId": "logout",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token used to login.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/search": {
      "get": {
        "summary": "Search",
        "operationId": "search",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The query to search for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page to show, zero-based.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/searchgetentities": {
      "get": {
        "summary": "Get the information of the entities that can be searched",
        "operationId": "searchgetentities",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/listtimezones": {
      "get": {
        "summary": "Lists the available timezones",
        "operationId": "listtimezones",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/myianatimezone": {
      "get": {
        "summary": "Gets the current time zone's iana name",
        "operationId": "myianatimezone",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/captchagetimage": {
      "get": {
        "summary": "Gets a captcha image that the user must complete to do certain requests.",
        "operationId": "captchagetimage",
        "parameters": [
          {
            "name": "captchatoken",
            "in": "query",
            "description": "The captcha token or ID returned by the captcha.getchallenge action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/captchagetchallenge": {
      "get": {
        "summary": "Gets a captcha challenge that the user must complete to do certain requests.",
        "operationId": "captchagetchallenge",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/menugetitems": {
      "get": {
        "summary": "Gets the items on the menu",
        "operationId": "menugetitems",
        "parameters": [
          {
            "name": "menuid",
            "in": "query",
            "description": "The Id of the menu to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/texttoimage": {
      "get": {
        "summary": "Generates a dynamic image from text",
        "operationId": "texttoimage",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "The text to convert to an image, use double pipes (||) as a new line.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fontcolor",
            "in": "query",
            "description": "The color of the text, in hex format, without the #.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fontsize",
            "in": "query",
            "description": "The size of the text, in points.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Either vertical or horizontal, default horizontal.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "The image width in pixels (or height if the direction is vertical).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/qrloginget": {
      "get": {
        "summary": "Gets an image of a QR token",
        "operationId": "qrloginget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/qrloginlogin": {
      "get": {
        "summary": "Login",
        "operationId": "qrloginlogin",
        "parameters": [
          {
            "name": "onetimetoken",
            "in": "query",
            "description": "The token read from the QR code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/appsharegetphone": {
      "get": {
        "summary": "Gets the phone number of the current user",
        "operationId": "appsharegetphone",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/appsharesendtext": {
      "get": {
        "summary": "Sends an SMS with the link to the app",
        "operationId": "appsharesendtext",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phonenumber",
            "in": "query",
            "description": "Phone number to where to send the link. Leave empty to the number on file.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/ssogeneratekey": {
      "get": {
        "summary": "Generate/reset single sign on access key.",
        "description": "Allows the user to generate or reset the access key for single sign-on.",
        "operationId": "ssogeneratekey",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/ssosavesettings": {
      "post": {
        "summary": "Edit single sign-on settings.",
        "description": "Allows the user to edit settings for single sign-on.",
        "operationId": "ssosavesettings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "enabled",
                  "expireswheninactive"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether the single sign on is enabled or not."
                  },
                  "expireswheninactive": {
                    "type": "boolean",
                    "description": "Specifies whether the sessions should expire when inactive."
                  },
                  "redirecturl": {
                    "type": "string",
                    "description": "The url the user gets redirected when the session is closed or expires."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/ssogetsettings": {
      "get": {
        "summary": "View single sign on settings.",
        "description": "Allows the user to view settings for single sign-on.",
        "operationId": "ssogetsettings",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/ssoissuetoken": {
      "get": {
        "summary": "Issue single sign-on token",
        "operationId": "ssoissuetoken",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "The single sign-on key of the account.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "The email of the user to sign-on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expires",
            "in": "query",
            "description": "Specifies whether the session should expire when inactive.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/licensegetcurrent": {
      "get": {
        "summary": "Gets the current license information",
        "operationId": "licensegetcurrent",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/licenserenew": {
      "get": {
        "summary": "Contact Engineerica in order to renew the AccuCampus subscription",
        "description": "Allows the user to select the option to contact Engineerica when the AccuCampus account is nearing its renewal date.",
        "operationId": "licenserenew",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The e-mail of the user sending the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phonenumber",
            "in": "query",
            "description": "The phone number of the user sending the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobtitle",
            "in": "query",
            "description": "The job title of the user sending the request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "institution",
            "in": "query",
            "description": "The institution of the user sending the request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comments",
            "in": "query",
            "description": "Comments entered by the user sending the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/licenseacceptagreement": {
      "get": {
        "summary": "Accept the license agreement",
        "operationId": "licenseacceptagreement",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/licensegetagreementstatus": {
      "get": {
        "summary": "Check if license agreement has been accepted",
        "operationId": "licensegetagreementstatus",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/myrights": {
      "get": {
        "summary": "Gets the list of actions the user can execute.",
        "operationId": "myrights",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/myprofile": {
      "get": {
        "summary": "Gets the logged in user information.",
        "operationId": "myprofile",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/mysaveprofile": {
      "post": {
        "summary": "Updates logged user's profile information",
        "operationId": "mysaveprofile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "firstname",
                  "lastname",
                  "email"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "firstname": {
                    "type": "string",
                    "description": "The first name of the user."
                  },
                  "middlename": {
                    "type": "string",
                    "description": "The middle name of the user."
                  },
                  "lastname": {
                    "type": "string",
                    "description": "The last name of the user."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email of the user."
                  },
                  "mobilephonenumber": {
                    "type": "string",
                    "description": "The mobile phone number of the user."
                  },
                  "homephonenumber": {
                    "type": "string",
                    "description": "The home phone number of the user."
                  },
                  "workphonenumber": {
                    "type": "string",
                    "description": "The work phone number of the user."
                  },
                  "streetaddress": {
                    "type": "string",
                    "description": "The street address of the user."
                  },
                  "city": {
                    "type": "string",
                    "description": "The city of the user."
                  },
                  "state": {
                    "type": "string",
                    "description": "The state of the user."
                  },
                  "zipcode": {
                    "type": "string",
                    "description": "The zip code of the user."
                  },
                  "title": {
                    "type": "string",
                    "description": "The title of the user."
                  },
                  "company": {
                    "type": "string",
                    "description": "The company of the user."
                  },
                  "photoid": {
                    "type": "string",
                    "description": "The ID of a photo uploaded using user.loadphoto.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/myaccount": {
      "get": {
        "summary": "Gets the logged in user account.",
        "operationId": "myaccount",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/userlist": {
      "get": {
        "summary": "View a list of users",
        "description": "Allows the user to view the full list of users and is based on role permissions.",
        "operationId": "userlist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "roleid",
            "in": "query",
            "description": "The id of the role to filter users by, or empty to return all users.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "onlywithoutcard",
            "in": "query",
            "description": "If is 1 then only the users without a card are returned, otherwise all users are returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/userget": {
      "get": {
        "summary": "Search and view details of a user",
        "description": "Allows the user to search and view a user and their details.",
        "operationId": "userget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the user to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/usergetbycard": {
      "get": {
        "summary": "Search user by card number",
        "description": "Allows the user to search for a user by their card number.",
        "operationId": "usergetbycard",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "card",
            "in": "query",
            "description": "The card number of the user to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/usersave": {
      "post": {
        "summary": "Create or edit a user",
        "description": "Allows the user to create or edit a user.",
        "operationId": "usersave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "firstname",
                  "lastname",
                  "email"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the user to save (leave empty to create a new one).",
                    "format": "uuid"
                  },
                  "firstname": {
                    "type": "string",
                    "description": "The first name of the user."
                  },
                  "middlename": {
                    "type": "string",
                    "description": "The middle name of the user."
                  },
                  "lastname": {
                    "type": "string",
                    "description": "The last name of the user."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email of the user."
                  },
                  "mobilephonenumber": {
                    "type": "string",
                    "description": "The mobile phone number of the user."
                  },
                  "homephonenumber": {
                    "type": "string",
                    "description": "The home phone number of the user."
                  },
                  "workphonenumber": {
                    "type": "string",
                    "description": "The work phone number of the user."
                  },
                  "streetaddress": {
                    "type": "string",
                    "description": "The street address of the user."
                  },
                  "city": {
                    "type": "string",
                    "description": "The city of the user."
                  },
                  "state": {
                    "type": "string",
                    "description": "The state of the user."
                  },
                  "zipcode": {
                    "type": "string",
                    "description": "The zip code of the user."
                  },
                  "title": {
                    "type": "string",
                    "description": "The title of the user."
                  },
                  "company": {
                    "type": "string",
                    "description": "The company of the user."
                  },
                  "password": {
                    "type": "string",
                    "description": "The new password of the user."
                  },
                  "roles": {
                    "type": "string",
                    "description": "Comma separated list of roles of the user."
                  },
                  "assigncard": {
                    "type": "string",
                    "description": "True if a new card has to be assigned to the user, otherwise false."
                  },
                  "cardnumber": {
                    "type": "string",
                    "description": "The card number that has to be assigned to the user."
                  },
                  "more": {
                    "type": "string",
                    "description": "Custom data of the user"
                  },
                  "photoid": {
                    "type": "string",
                    "description": "The ID of a photo uploaded using user.loadphoto.",
                    "format": "uuid"
                  },
                  "active": {
                    "type": "boolean",
                    "description": "The status of the user."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/userdelete": {
      "get": {
        "summary": "Delete a user",
        "description": "Allows the user to delete a user.",
        "operationId": "userdelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the user to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/userchangepwd": {
      "get": {
        "summary": "Change user's own password",
        "description": "Allows the user to change their own password.",
        "operationId": "userchangepwd",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "oldpass",
            "in": "query",
            "description": "The old password of the authenticated user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "newpass",
            "in": "query",
            "description": "The new password of the authenticated user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/userchangepwdbyreq": {
      "get": {
        "summary": "Changes the user password using a change password request id",
        "operationId": "userchangepwdbyreq",
        "parameters": [
          {
            "name": "changereq",
            "in": "query",
            "description": "The change password request ID sent by email to the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newpass",
            "in": "query",
            "description": "The new password of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/userrequestpwdchange": {
      "get": {
        "summary": "Requests a password change",
        "operationId": "userrequestpwdchange",
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "description": "The domain of the account where the user exists.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The email of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/usersavepwdchange": {
      "post": {
        "summary": "Send email to the specified user(s) to set/change their passwords",
        "description": "Allows the user to trigger an email to another user asking them to set or change their password.",
        "operationId": "usersavepwdchange",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "users": {
                    "type": "string",
                    "description": "A JSON array containing the ids of the users whose passwords have to be set."
                  },
                  "role": {
                    "type": "string",
                    "description": "A specific role whose users passwords have to be set.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/userloadphoto": {
      "get": {
        "summary": "Upload a photo for a specific user",
        "description": "Allows the user to upload a photo for a user.",
        "operationId": "userloadphoto",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upload",
            "in": "query",
            "description": "Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The local name of the uploaded file. For later reference.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in 'user.save'.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "automatch",
            "in": "query",
            "description": "Set this to true to find the specific user based on the file name. ",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/userfindsimilar": {
      "get": {
        "summary": "Finds similar users to prevent duplicates",
        "description": "Allows the user to be warned if a user they are creating has the same card number as another user.",
        "operationId": "userfindsimilar",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentid",
            "in": "query",
            "description": "The id of the current user.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "phonenumber",
            "in": "query",
            "description": "A phone number to search for similar users.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cardnumber",
            "in": "query",
            "description": "A card number to search for similar users.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/usermovedata": {
      "get": {
        "summary": "Move data between users",
        "description": "Allows administrators to move data between users.",
        "operationId": "usermovedata",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "The id of the user that is the source of the data.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "destination",
            "in": "query",
            "description": "The id of the user that is the destination of the data.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/rolelist": {
      "get": {
        "summary": "Show a list of roles",
        "operationId": "rolelist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name of the role.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/clientget": {
      "get": {
        "summary": "Get client",
        "operationId": "clientget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client",
            "in": "query",
            "description": "The unique id of the client.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientname",
            "in": "query",
            "description": "The custom name of the client.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/clientsave": {
      "post": {
        "summary": "Saves a client",
        "operationId": "clientsave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "client",
                  "clientname"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "client": {
                    "type": "string",
                    "description": "The id of the client to save.",
                    "format": "uuid"
                  },
                  "clientname": {
                    "type": "string",
                    "description": "The name of the client."
                  },
                  "pushtoken": {
                    "type": "string",
                    "description": "The push token of the client."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/clientlist": {
      "get": {
        "summary": "Gets the clients of the specified conference",
        "operationId": "clientlist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/clientsendmessage": {
      "get": {
        "summary": "Send a message to a client",
        "operationId": "clientsendmessage",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uniqueclientid",
            "in": "query",
            "description": "The unique id of the client.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "message",
            "in": "query",
            "description": "The body of the message to send.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/bgjobgetstatus": {
      "get": {
        "summary": "Get background job status",
        "operationId": "bgjobgetstatus",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobid",
            "in": "query",
            "description": "The ID of the job to get the status. 10 most recent will be returned if not specified.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "jobtype",
            "in": "query",
            "description": "The job type to filter by.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/settingget": {
      "get": {
        "summary": "Get settings for the account or the specified scope",
        "operationId": "settingget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "description": "The account domain, in case of reading settings annonymously.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keys",
            "in": "query",
            "description": "The option keys to get values for. Enter multiple separated by comma.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope of the settings to get.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/settingsave": {
      "post": {
        "summary": "Save settings for the account or the specified scope",
        "description": "Allows the user to affect settings that are not specified elsewhere in permissions. This includes Attendance, Appointments, Compass, Media, and Social Activity.",
        "operationId": "settingsave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "optionsjson"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "optionsjson": {
                    "type": "string",
                    "description": "The options to save in the account, in JSON format."
                  },
                  "scope": {
                    "type": "string",
                    "description": "The scope of the settings to save."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/settingaddlogo": {
      "get": {
        "summary": "Add a logo to the account",
        "description": "Allows the user to add the logo for the account, which appears on all pages on the AccuCampus browser version.",
        "operationId": "settingaddlogo",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upload",
            "in": "query",
            "description": "Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The original filename, needed to process the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/settingviewgeneral": {
      "get": {
        "summary": "View general settings for the account",
        "description": "Allows the user to view the settings' general section.",
        "operationId": "settingviewgeneral",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/actionloglist": {
      "get": {
        "summary": "View a list of users action logs",
        "description": "Allows the user to view the audit logs for the account.",
        "operationId": "actionloglist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The id of the user whose action logs have to be returned.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "The start date of the period to filter the logs.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "The end date of the period to filter the logs.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "resource",
            "in": "query",
            "description": "The resource to filter the action logs.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionfilter",
            "in": "query",
            "description": "The action to filter the action logs.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "argument",
            "in": "query",
            "description": "The id of the entity that was the argument of the executed action.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/version": {
      "get": {
        "summary": "Get current version information",
        "operationId": "version",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/changelog": {
      "get": {
        "summary": "Get the application change log",
        "operationId": "changelog",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/easyloginaddbgimage": {
      "get": {
        "summary": "Adds background image for the login",
        "description": "Allows the user to set the background image that all users will see when logging into an AccuCampus account not using SSO.",
        "operationId": "easyloginaddbgimage",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upload",
            "in": "query",
            "description": "Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The original filename, needed to process the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/export": {
      "get": {
        "summary": "Export AccuCampus data",
        "description": "Allows the user to export data from AccuCampus into a CSV, HTML, or Excel format.",
        "operationId": "export",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exporttype",
            "in": "query",
            "description": "What to export.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exportformat",
            "in": "query",
            "description": "The format of the resulting file. Valid types are CSV, HTML, XLS.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Pipe separated filters for the export, eg: aaa=val|bbb=val|...",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/exportlisttypes": {
      "get": {
        "summary": "Lists available export types",
        "operationId": "exportlisttypes",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/locationget": {
      "get": {
        "summary": "Search and view details of a location",
        "description": "Allows the user to search and view an individual location and its details.",
        "operationId": "locationget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the location to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/locationlist": {
      "get": {
        "summary": "View a list of locations",
        "description": "Allows the user to view the list of all locations to which they are scoped.",
        "operationId": "locationlist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locations",
            "in": "query",
            "description": "The comma-separated list containing the ids of the locations to list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortbygroup",
            "in": "query",
            "description": "True to list locations sorted by the 'Located In' property. Defaults to false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/locationdelete": {
      "get": {
        "summary": "Delete a location",
        "description": "Allows the user to delete an existing location.",
        "operationId": "locationdelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the location to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/locationsave": {
      "post": {
        "summary": "Create or edit a location",
        "description": "Allows the user to create or edit a location.",
        "operationId": "locationsave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "name"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the location save (leave empty to create a new one).",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the location."
                  },
                  "categoryid": {
                    "type": "string",
                    "description": "The id of location's LocationCategory.",
                    "format": "uuid"
                  },
                  "categoryname": {
                    "type": "string",
                    "description": "The name of the location's LocationCategory."
                  },
                  "streetaddress": {
                    "type": "string",
                    "description": "The street address of the location."
                  },
                  "latitude": {
                    "type": "number",
                    "description": "The latitude of the location.",
                    "format": "double"
                  },
                  "longitude": {
                    "type": "number",
                    "description": "The longitude of the location.",
                    "format": "double"
                  },
                  "websiteurl": {
                    "type": "string",
                    "description": "The web site url of the location."
                  },
                  "email": {
                    "type": "string",
                    "description": "The e-mail address of the location."
                  },
                  "moreinformation": {
                    "type": "string",
                    "description": "More information relevant to the location."
                  },
                  "isrestricted": {
                    "type": "boolean",
                    "description": "Whether this location has the access restricted."
                  },
                  "accessroles": {
                    "type": "string",
                    "description": "The roles that can view the info associated to this location, in JSON format."
                  },
                  "order": {
                    "type": "integer",
                    "description": "The order of the location.",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/templatelist": {
      "get": {
        "summary": "View a list of defined templates",
        "description": "Allows the user to view the full list of created templates.",
        "operationId": "templatelist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "kind",
            "in": "query",
            "description": "The kind of the templates to return. It must be included in (badge, certificate).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "designedonly",
            "in": "query",
            "description": "If true then it only returns the templates that were designed. Otherwise, it returns all.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/templateget": {
      "get": {
        "summary": "View details of a template",
        "description": "Allows the user to view a template and its details.",
        "operationId": "templateget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the template to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/templatesave": {
      "post": {
        "summary": "Create or edit a template",
        "description": "Allows the user to create or edit a template.",
        "operationId": "templatesave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "kind",
                  "name"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the template to save (leave empty to create a new one).",
                    "format": "uuid"
                  },
                  "kind": {
                    "type": "string",
                    "description": "The kind of the templates to return. It must be included in (badge, certificate)."
                  },
                  "name": {
                    "type": "string",
                    "description": "The template's name."
                  },
                  "description": {
                    "type": "string",
                    "description": "The template's description."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/templatesavelayout": {
      "post": {
        "summary": "Save the layout of a template",
        "description": "Allows the user to edit a template's layout.",
        "operationId": "templatesavelayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "id",
                  "layout"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the template whose layout needs to be saved.",
                    "format": "uuid"
                  },
                  "layout": {
                    "type": "string",
                    "description": "The template's layout (in JSON)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/templateaddimage": {
      "get": {
        "summary": "Add an image to a template",
        "description": "Allows the user to add an image to a badge or certificate template.",
        "operationId": "templateaddimage",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The id of the template where the image has to be added",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "upload",
            "in": "query",
            "description": "Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The local name of the uploaded file. For later reference.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/templatedelete": {
      "get": {
        "summary": "Delete a template",
        "description": "Allows the user to delete an existing template.",
        "operationId": "templatedelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the template to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/templategenerate": {
      "get": {
        "summary": "Generate specified templates",
        "description": "Allows the user to generate an existing template as badges or certificates.",
        "operationId": "templategenerate",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The id of the template to generate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "The source key of the selected template data source.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "singlefile",
            "in": "query",
            "description": "True if all the templates should be placed in the same file, false if each one shoud be in its own file.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "Only the template for these users is created (and emailed if 'email' is true), enter multiple separated by commas.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forsending",
            "in": "query",
            "description": "It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Pipe separated filters for the generation, eg: aaa=val|bbb=val|...",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/templategetgenerated": {
      "get": {
        "summary": "View generated templates",
        "description": "Allows the user to view templates which have been generated as badges or certificates.",
        "operationId": "templategetgenerated",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobid",
            "in": "query",
            "description": "The id of the job that is creating the templates.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/templateemail": {
      "get": {
        "summary": "Send generated templates by email",
        "description": "Allows the user to send generated templates via email through AccuCampus.",
        "operationId": "templateemail",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobid",
            "in": "query",
            "description": "The id of the job that is creating the templates.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templatekind",
            "in": "query",
            "description": "The kind of the template you're sending. It must be included in (badge, certificate).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailfrom",
            "in": "query",
            "description": "The name of the sender to be displayed in the receipients inbox",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailreplyto",
            "in": "query",
            "description": "The reply-to field for the emails.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailsubject",
            "in": "query",
            "description": "Args depending on the send-to flag.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailbody",
            "in": "query",
            "description": "Args depending on the send-to flag.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/templatelistsources": {
      "get": {
        "summary": "View a list of templates' data sources",
        "description": "Allows the user to see tokens to be used in the template",
        "operationId": "templatelistsources",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "kind",
            "in": "query",
            "description": "The kind of the templates to return. It must be included in (badge, certificate).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/textcreditremaining": {
      "get": {
        "summary": "Gets the remaining text credits for the account",
        "operationId": "textcreditremaining",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/translationlist": {
      "get": {
        "summary": "Lists all the available translations in the system",
        "operationId": "translationlist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Text to search/filter translations.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nondefaultonly",
            "in": "query",
            "description": "If true then it returns only the terms translated. Otherwise, it returns all.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "appdefaultasuniversal",
            "in": "query",
            "description": "If true then it uses the app default translation as the universal term.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/translationsave": {
      "post": {
        "summary": "Edit a translation",
        "description": "Allows the user to edit a translation for the entire account.",
        "operationId": "translationsave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "id",
                  "translation"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the translation as returned by translation.list."
                  },
                  "translation": {
                    "type": "string",
                    "description": "The translated text."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/translationget": {
      "get": {
        "summary": "Gets the translations of the specified values",
        "operationId": "translationget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "universal",
            "in": "query",
            "description": "Pipe separated list of universal text to be translated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/translationgetcachefile": {
      "get": {
        "summary": "Get the file containing the translations",
        "operationId": "translationgetcachefile",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "The id of the account whose translations file has to be retrieved.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/usersettingssave": {
      "post": {
        "summary": "Saves a user setting",
        "operationId": "usersettingssave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "key",
                  "value"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "key": {
                    "type": "string",
                    "description": "Setting key to save."
                  },
                  "value": {
                    "type": "string",
                    "description": "Setting value to save."
                  },
                  "user": {
                    "type": "string",
                    "description": "The user id whose settings have to be saved.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/usersettingssavemultiple": {
      "post": {
        "summary": "Save multiple user settings at once",
        "operationId": "usersettingssavemultiple",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "optionsjson"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "optionsjson": {
                    "type": "string",
                    "description": "The options to save in the account, in JSON format."
                  },
                  "user": {
                    "type": "string",
                    "description": "The user id whose settings have to be saved.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/usersettingsget": {
      "get": {
        "summary": "Lists available user settings",
        "operationId": "usersettingsget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keys",
            "in": "query",
            "description": "Setting key to get. Can be multiple separated by commas.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The user id whose settings have to be returned.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/usersettingsgetmultiple": {
      "get": {
        "summary": "Get multiple user settings",
        "operationId": "usersettingsgetmultiple",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keys",
            "in": "query",
            "description": "Setting key to get. Can be multiple separated by commas.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The user id whose settings have to be returned.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/quickpanelinit": {
      "get": {
        "summary": "Returns the initial information required to show the quick panels",
        "operationId": "quickpanelinit",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/quickpanelfetchwidget": {
      "get": {
        "summary": "Fetches the information for a specific widget.",
        "operationId": "quickpanelfetchwidget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "widgetid",
            "in": "query",
            "description": "The ID of the data to fetch it's data.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/quickpanellistwidgettypes": {
      "get": {
        "summary": "Lists all the widget types available in the system",
        "operationId": "quickpanellistwidgettypes",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/quickpanelgetwidget": {
      "get": {
        "summary": "View details of a widget included in the Quick Panel",
        "description": "Allows the user to view a widget added in as Quick Panel.",
        "operationId": "quickpanelgetwidget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the widget to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/quickpanellistwidgets": {
      "get": {
        "summary": "Lists all the widgets that are added in the Quick Panel",
        "description": "Allows the user to view the widgets that have been added to the Quick Panel.",
        "operationId": "quickpanellistwidgets",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/quickpanelsavewidget": {
      "post": {
        "summary": "Saves a widget for the Quick Panel",
        "description": "Allows the user to save a widget to the Quick Panel.",
        "operationId": "quickpanelsavewidget",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "sectionname",
                  "sortorder",
                  "title",
                  "type",
                  "data",
                  "roleids"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the widget.",
                    "format": "uuid"
                  },
                  "sectionname": {
                    "type": "string",
                    "description": "The section name where to add the widget."
                  },
                  "sortorder": {
                    "type": "integer",
                    "description": "The sort order of the widget.",
                    "format": "int32"
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of the widget."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of the widget."
                  },
                  "data": {
                    "type": "string",
                    "description": "Context data of the widget."
                  },
                  "roleids": {
                    "type": "string",
                    "description": "CSV list of roles that display this widget."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/quickpaneldeletewidget": {
      "get": {
        "summary": "Deletes a widget from the Quick Panel",
        "description": "Allows the user to delete a widget that has been added to the Quick Panel.",
        "operationId": "quickpaneldeletewidget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the widget.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/quickpanelreorderwidgets": {
      "get": {
        "summary": "Reorders the widgets and moves them to a specific column",
        "operationId": "quickpanelreorderwidgets",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sectionname",
            "in": "query",
            "description": "The section name where to sort the widgets.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderids",
            "in": "query",
            "description": "CSV list of the widgets to reorder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/termget": {
      "get": {
        "summary": "Search and view details of a term",
        "description": "Allows the user to view a term and its details.",
        "operationId": "termget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the term to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/termlist": {
      "get": {
        "summary": "Search and view details of all terms",
        "description": "Allows the user to view the full list of existing term.",
        "operationId": "termlist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "notpast",
            "in": "query",
            "description": "Specifies whether the terms in the past should be returned or not.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/termdelete": {
      "get": {
        "summary": "Delete a term",
        "description": "Allows the user to delete a term from the existing list.",
        "operationId": "termdelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the term to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/termsave": {
      "post": {
        "summary": "Create and edit terms",
        "description": "Allows the user to create and edit terms.",
        "operationId": "termsave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "name",
                  "start",
                  "end"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the term to save (leave empty to create a new one).",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the term."
                  },
                  "start": {
                    "type": "string",
                    "description": "The date when the term starts.",
                    "format": "date-time"
                  },
                  "end": {
                    "type": "string",
                    "description": "The date when the term ends.",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/holidaysuggest": {
      "get": {
        "summary": "View the holiday suggestions in the given term",
        "description": "Allows the user to view the holiday suggestions for each term.",
        "operationId": "holidaysuggest",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "term",
            "in": "query",
            "description": "The term to get holidays from.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/holidaylist": {
      "get": {
        "summary": "View a list of entered holidays",
        "description": "Allows the user to view all holidays entered.",
        "operationId": "holidaylist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "term",
            "in": "query",
            "description": "The term to get holidays from.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/holidaysave": {
      "post": {
        "summary": "Create or edit a list of holidays",
        "description": "Allows the user to create or edit holidays.",
        "operationId": "holidaysave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "daysoff"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "daysoff": {
                    "type": "string",
                    "description": "A json list of names and dates."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/notificationtopicget": {
      "get": {
        "summary": "Search and view details of a notification topic",
        "description": "Allows the user to view an individual notification topic and its details.",
        "operationId": "notificationtopicget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the notification topic to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/notificationtopiclist": {
      "get": {
        "summary": "List all the notification topics",
        "description": "Allows the user to view the list of all notification topics.",
        "operationId": "notificationtopiclist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/notificationtopicdelete": {
      "get": {
        "summary": "Delete a notification topic",
        "description": "Allows the user to delete an existing notification topic.",
        "operationId": "notificationtopicdelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the notification topic to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/notificationtopicsave": {
      "post": {
        "summary": "Create or edit a notification topic",
        "description": "Allows the user to create and edit a notification topic.",
        "operationId": "notificationtopicsave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "name",
                  "description"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the topic to save (leave empty to create a new one).",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the topic."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the topic."
                  },
                  "enableonscreendelivery": {
                    "type": "boolean",
                    "description": "Specifies whether the notifications assigned to this topic can be sent on-screen or not."
                  },
                  "sendonscreendefault": {
                    "type": "boolean",
                    "description": "Specifies whether the notifications assigned to this topic have to have the on-screen delivery enabled by default."
                  },
                  "enableemaildelivery": {
                    "type": "boolean",
                    "description": "Specifies whether the notifications assigned to this topic can be sent via e-mail or not."
                  },
                  "sendemaildefault": {
                    "type": "boolean",
                    "description": "Specifies whether the notifications assigned to this topic have to have the e-mail delivery enabled by default."
                  },
                  "enablesmsdelivery": {
                    "type": "boolean",
                    "description": "Specifies whether the notifications assigned to this topic can be sent via sms or not."
                  },
                  "sendsmsdefault": {
                    "type": "boolean",
                    "description": "Specifies whether the notifications assigned to this topic have to have the sms delivery enabled by default."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/notificationtopiclistsubscribe": {
      "get": {
        "summary": "List all the notification topics available to subscribe",
        "operationId": "notificationtopiclistsubscribe",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/notificationsendonscreen": {
      "get": {
        "summary": "Send on-screen notifications",
        "operationId": "notificationsendonscreen",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notification",
            "in": "query",
            "description": "The ID of the notification to send.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/notificationgetunreadcount": {
      "get": {
        "summary": "Get the number of unread notifications",
        "operationId": "notificationgetunreadcount",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/notificationget": {
      "get": {
        "summary": "View a notification",
        "operationId": "notificationget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the notification to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/notificationdelete": {
      "get": {
        "summary": "Delete a notification",
        "description": "Allows the user to delete an existing notification.",
        "operationId": "notificationdelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the notification to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/notificationlist": {
      "get": {
        "summary": "View a list of all sent notifications",
        "description": "Allows the user to view the list of all sent notifications.",
        "operationId": "notificationlist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recipient",
            "in": "query",
            "description": "The recipient whose notifications have to be listed.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status of the notifications to list. Read, Unread or All.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "The start date of the period to filter the notifications.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "The end date of the period to filter the notifications.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sentonscreen",
            "in": "query",
            "description": "Specifies whether to list the notifications that were sent on-screen or not.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sentemail",
            "in": "query",
            "description": "Specifies whether to list the notifications that were sent via e-mail or not.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sentsms",
            "in": "query",
            "description": "Specifies whether to list the notifications that were sent via sms or not.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/notificationlistmine": {
      "get": {
        "summary": "View all the notifications sent to the current user",
        "operationId": "notificationlistmine",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Specifies the status of the notifications to list. Read, Unread or All.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "The start date of the period to filter the notifications.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "The end date of the period to filter the notifications.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/notificationmarkasread": {
      "get": {
        "summary": "Mark a notification as read",
        "operationId": "notificationmarkasread",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Specifies the status to filter the notifications. Read, Unread or All.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "The start date of the period to filter the notifications.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "The end date of the period to filter the notifications.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/notificationmarkasunread": {
      "get": {
        "summary": "Mark a notification as unread",
        "operationId": "notificationmarkasunread",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Specifies the status to filter the notifications. Read, Unread or All.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "The start date of the period to filter the notifications.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "The end date of the period to filter the notifications.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/notificationsend": {
      "get": {
        "summary": "Send notifications on screen, via email or text to users",
        "description": "Allows the user to send notifications to other users through the Send Message link.",
        "operationId": "notificationsend",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tousers",
            "in": "query",
            "description": "Comma-separated Ids of users to send the notification.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "togroups",
            "in": "query",
            "description": "Comma-separated Ids of user groups to send the notification.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailenabled",
            "in": "query",
            "description": "Whether send the notification via email.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "onscreenenabled",
            "in": "query",
            "description": "Whether to display the notification on screen.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "smsenabled",
            "in": "query",
            "description": "Whether to send the notification via text message.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Notification title.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onscreenbody",
            "in": "query",
            "description": "Body of the message for on-screen display.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onscreenclick",
            "in": "query",
            "description": "What to do when the notification is clicked. Valid values: hide, view, url.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onscreenurl",
            "in": "query",
            "description": "Url to redirect the user, if onscreenclick=url.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onscreenclass",
            "in": "query",
            "description": "How to display the notification. Valid values: info, success, warning, error",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onscreenduration",
            "in": "query",
            "description": "Time in seconds to display the notification.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "showonstation",
            "in": "query",
            "description": "Whether to show the notification in the sign-in station.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "emailfromname",
            "in": "query",
            "description": "Name of the email sender.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailfrom",
            "in": "query",
            "description": "Reply-to email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailsubject",
            "in": "query",
            "description": "Subject of the email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailbody",
            "in": "query",
            "description": "Body of the email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "textmessagebody",
            "in": "query",
            "description": "Message for SMS. Max 160 characters.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/pushderegister": {
      "get": {
        "summary": "Deregisters the current device to receive push notifications",
        "operationId": "pushderegister",
        "parameters": [
          {
            "name": "devicetoken",
            "in": "query",
            "description": "The device token where to send the notification.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platform",
            "in": "query",
            "description": "Either ios or android",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/pushregister": {
      "get": {
        "summary": "Registers the current device to receive push notifications",
        "operationId": "pushregister",
        "parameters": [
          {
            "name": "devicetoken",
            "in": "query",
            "description": "The device token where to send the notification.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platform",
            "in": "query",
            "description": "Either ios or android",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/ruledelete": {
      "get": {
        "summary": "Delete a rule",
        "description": "Allows the user to delete an existing rule.",
        "operationId": "ruledelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the rule to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/ruleget": {
      "get": {
        "summary": "View details of a rule",
        "description": "Allows the user to view an individual rule and its details.",
        "operationId": "ruleget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the rule to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/rulelist": {
      "get": {
        "summary": "View a list of user rules",
        "description": "Allows the user to view the list of all rules.",
        "operationId": "rulelist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/rulesave": {
      "post": {
        "summary": "Create or edit a rule",
        "description": "Allows the user to create or edit a rule.",
        "operationId": "rulesave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "name",
                  "onevent",
                  "conditionsjson",
                  "actionsjson",
                  "active"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the rule to save (leave empty to create a new one).",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the rule."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the rule."
                  },
                  "onevent": {
                    "type": "string",
                    "description": "The event that will trigger this rule."
                  },
                  "conditionsjson": {
                    "type": "string",
                    "description": "The conditions that apply to this rule."
                  },
                  "actionsjson": {
                    "type": "string",
                    "description": "The actions that will be executed when this rule matches."
                  },
                  "active": {
                    "type": "boolean",
                    "description": "Specifies if the action is active or inactive"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/rulelistactions": {
      "get": {
        "summary": "View a list of rule actions available",
        "description": "Allows the user to view all the available rule actions.",
        "operationId": "rulelistactions",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/rulelisteventtypes": {
      "get": {
        "summary": "View a list of rule event types",
        "description": "Allows the user to view a list of available triggers for rules.",
        "operationId": "rulelisteventtypes",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/rulegeteventtype": {
      "get": {
        "summary": "View details of a rule event type",
        "description": "Allows the user to view the trigger and its available conditions for the rule.",
        "operationId": "rulegeteventtype",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The name of the event to refresh.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/rulelisthttprequests": {
      "get": {
        "summary": "View all the http requests sent as a result of a rule",
        "operationId": "rulelisthttprequests",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "failed",
            "in": "query",
            "description": "If true only failed requests will be returned",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The http status to filter the requests",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/import": {
      "get": {
        "summary": "Import data into AccuCampus",
        "description": "Allows the user to import data into AccuCampus via CSV or flat files either manually or automatically using the import utility.",
        "operationId": "import",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "importtype",
            "in": "query",
            "description": "The kind of data that is being uploaded.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upload",
            "in": "query",
            "description": "Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The local name of the uploaded file. For later reference.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parameters",
            "in": "query",
            "description": "Import parameters, in a key-value pair JSON-serialized object. Eg {'parameter':'value'}.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/importlisttypes": {
      "get": {
        "summary": "Lists available import types",
        "operationId": "importlisttypes",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/eventget": {
      "get": {
        "summary": "Search and view details of a course",
        "description": "Allows the user to view an individual course and its details.",
        "operationId": "eventget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the event to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/eventgetsessionsbydate": {
      "get": {
        "summary": "View a list of courses by date",
        "description": "Allows the user to view a list of courses by date.",
        "operationId": "eventgetsessionsbydate",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The location to filter the events.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date to filter the events. Today will be used if this parameter is omitted.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of event to list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/eventlist": {
      "get": {
        "summary": "View a list of courses",
        "description": "Allows the user to view the full list of courses.",
        "operationId": "eventlist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "summaryonly",
            "in": "query",
            "description": "True to return only the event information and not the associated schedule, dept, etc. Defaults to false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "termid",
            "in": "query",
            "description": "Id of the term to list the events. Null to list all events.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/eventsave": {
      "post": {
        "summary": "Create or edit a course",
        "description": "Allows the user to create or edit a course.",
        "operationId": "eventsave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "name",
                  "code"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the event to save (leave empty to create a new one).",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the event."
                  },
                  "codegroup": {
                    "type": "string",
                    "description": "Optional code to group events."
                  },
                  "code": {
                    "type": "string",
                    "description": "The unique code of the event."
                  },
                  "term": {
                    "type": "string",
                    "description": "The term of the event."
                  },
                  "department": {
                    "type": "string",
                    "description": "The department of the event."
                  },
                  "details": {
                    "type": "string",
                    "description": "The details of the event."
                  },
                  "recurringschedule": {
                    "type": "string",
                    "description": "The recurring schedule of the event, a JSON-formatted array. Each item must contain an action (set/remove) and the schedule properties, as returned by event.get."
                  },
                  "onetimeschedule": {
                    "type": "string",
                    "description": "The one-time schedule of the event, a JSON-formatted array. Each item must contain an action (set/remove) and the schedule properties, as returned by event.get."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/eventdelete": {
      "get": {
        "summary": "Delete a course",
        "description": "Allows the user to delete an existing course.",
        "operationId": "eventdelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the event to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/eventsearchgroup": {
      "get": {
        "summary": "Searches for the available event groups",
        "operationId": "eventsearchgroup",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to search event groups.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/usergroupdelete": {
      "get": {
        "summary": "Delete a group",
        "description": "Allows the user to delete a group that they have permission to edit.",
        "operationId": "usergroupdelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the group to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/usergroupget": {
      "get": {
        "summary": "Search and view details of a user group",
        "description": "Allows the user to view a user group and its details.",
        "operationId": "usergroupget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the user group to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/usergrouplist": {
      "get": {
        "summary": "View a list of user groups",
        "description": "Allows the user to view the list of groups that they have permission to view.",
        "operationId": "usergrouplist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of the groups to return. Either 'user', 'dynamic' or any other type of group.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/usergroupsave": {
      "post": {
        "summary": "Create or edit a group",
        "description": "Allows the user to create a new group or edit a group that they have permission to edit.",
        "operationId": "usergroupsave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "name"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the group to save (leave empty to create a new one).",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the group."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the group."
                  },
                  "isprivate": {
                    "type": "boolean",
                    "description": "Whether this group can be seen by others other than the creator."
                  },
                  "viewroles": {
                    "type": "string",
                    "description": "The roles that can view the group, in JSON format."
                  },
                  "editroles": {
                    "type": "string",
                    "description": "The roles that can edit the group, in JSON format."
                  },
                  "scopes": {
                    "type": "string",
                    "description": "The scopes that have access to this group, in JSON format."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/usergroupaddmember": {
      "get": {
        "summary": "Add a user to a group",
        "description": "Allows the user to add a user to a group that they have permission to edit.",
        "operationId": "usergroupaddmember",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to add.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "groupid",
            "in": "query",
            "description": "The id of the group.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/usergroupgetmembers": {
      "get": {
        "summary": "View the members of a user group",
        "description": "Allows the user to view the list of users in a group that they have permission to view.",
        "operationId": "usergroupgetmembers",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupid",
            "in": "query",
            "description": "The id of the user group to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/usergroupgetuser": {
      "get": {
        "summary": "View the groups which a user is registered to",
        "description": "Allows the user to view the groups an individual user is registered to, based on group and user permissions.",
        "operationId": "usergroupgetuser",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to get his groups.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/usergroupremovemember": {
      "get": {
        "summary": "Remove a user from a group",
        "description": "Allows the user to remove a user from a group that they have permission to edit.",
        "operationId": "usergroupremovemember",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "groupid",
            "in": "query",
            "description": "The id of the group.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/qrlabelsprint": {
      "get": {
        "summary": "Print and email QR labels",
        "description": "Allows the user to generate a printable PDF of QR labels containing user Card Numbers to be emailed to users and used as attendance tracking for events.",
        "operationId": "qrlabelsprint",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The id of the user whose label needs to be printed.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "The id of the group whose members' labels need to be printed.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/tagsearch": {
      "get": {
        "summary": "Search for tags in the account",
        "description": "Allows the user to search for tags.",
        "operationId": "tagsearch",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The query to search tags. Use group:<group> to search in a specific group (mandatory).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowcreatingnew",
            "in": "query",
            "description": "Specifies whether an option to create a new tag should be retrieved.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/tagget": {
      "get": {
        "summary": "View details of a specified tag",
        "description": "Allows the user to click on and view the settings for a tag.",
        "operationId": "tagget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the tag to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/tagsave": {
      "post": {
        "summary": "Create or edit a tag",
        "description": "Allows the user to create or edit a tag.",
        "operationId": "tagsave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "group",
                  "name"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the tag save (leave empty to create a new one).",
                    "format": "uuid"
                  },
                  "group": {
                    "type": "string",
                    "description": "The group id of the tag."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the tag."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the tag."
                  },
                  "requestedby": {
                    "type": "string",
                    "description": "The information regarding who requested this tag and who should use it."
                  },
                  "viewroles": {
                    "type": "string",
                    "description": "The roles that can view the answers, in JSON format."
                  },
                  "editroles": {
                    "type": "string",
                    "description": "The roles that can edit the answers, in JSON format."
                  },
                  "scopes": {
                    "type": "string",
                    "description": "The scopes that have access to this questionnaire, in JSON format."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/taglistgroups": {
      "get": {
        "summary": "View a list of entities that can be tagged",
        "description": "Allows the user to view the list of user roles that can be tagged, according to that tag's settings.",
        "operationId": "taglistgroups",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/taglist": {
      "get": {
        "summary": "View a list of tags",
        "description": "Allows the user to view the list of tags.",
        "operationId": "taglist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "The group of the tags to return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/tagdelete": {
      "get": {
        "summary": "Delete a tag",
        "description": "Allows the user to delete an existing tag.",
        "operationId": "tagdelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the tag to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/attendancelogdelete": {
      "get": {
        "summary": "Delete an attendance log",
        "description": "Allows the user to delete an existing attendance log.",
        "operationId": "attendancelogdelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the attendance log to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/attendancelogget": {
      "get": {
        "summary": "Search and view details of an attendance log",
        "description": "Allows the user to view an individual attendance log and its details.",
        "operationId": "attendancelogget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the attendance log to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/attendanceloglist": {
      "get": {
        "summary": "View a list of attendance logs",
        "description": "Allows the user to view the list of all attendance logs in the location or locations in which the user is scoped.",
        "operationId": "attendanceloglist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "The user ID of the user to get the logs.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/attendanceloglistmine": {
      "get": {
        "summary": "Gets the attendance logs of the current user",
        "operationId": "attendanceloglistmine",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/attendancelogsave": {
      "post": {
        "summary": "Create or edit an attendance log",
        "description": "Allows the user to create or edit an attendance log.",
        "operationId": "attendancelogsave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the room to save (leave empty to create a new one).",
                    "format": "uuid"
                  },
                  "cardnumber": {
                    "type": "string",
                    "description": "The card # of the user (used when the user is unknown).",
                    "format": "uuid"
                  },
                  "user": {
                    "type": "string",
                    "description": "The id of the user, or a CSV list of ids if creating new logs."
                  },
                  "location": {
                    "type": "string",
                    "description": "The id of the location where the user signed in.",
                    "format": "uuid"
                  },
                  "event": {
                    "type": "string",
                    "description": "The id of the event the user signed in to.",
                    "format": "uuid"
                  },
                  "useeventschedule": {
                    "type": "boolean",
                    "description": "Specifies whether the event schedule should be used to set the log status."
                  },
                  "notes": {
                    "type": "string",
                    "description": "The notes of the log."
                  },
                  "publicnotes": {
                    "type": "boolean",
                    "description": "Specifies whether the notes are public to the user or should only be seen by staff or admins"
                  },
                  "logdetails": {
                    "type": "string",
                    "description": "The log details in JSON format",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/attendancelogwhosin": {
      "get": {
        "summary": "View who's in a location",
        "description": "Allows the user to view the Who's In page and view all users who are logged into locations in which the user is scoped.",
        "operationId": "attendancelogwhosin",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location to search for users that are in.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The id of the event to search for users that are in.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Field to sort by. Either first-name, last-name or sign-in-time.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "The comma-separated list of ids of the roles to search for users that are in.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "extensions",
            "in": "query",
            "description": "A JSON array containing the extension filters (i.e [{name: 'nametofilter', value: 'valuetofilter'}]).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "export",
            "in": "query",
            "description": "True to export the results as CSV",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/attendancelogsignout": {
      "get": {
        "summary": "Sign out an attendance log",
        "description": "Allows the user to sign out am attendance log from the Who's In page.",
        "operationId": "attendancelogsignout",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the attendance log to sign-out.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The id of the location to filter the users to sign out.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The id of the event to filter the users to sign out.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "datetime",
            "in": "query",
            "description": "Specifies the date and time when the specified logs have to be signed out.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/attendanceloggetchangehistory": {
      "get": {
        "summary": "Search and view details of an attendance log's swipe history",
        "description": "Allows the user to view the swipes of an individual attendance logs (sign ins and sign outs).",
        "operationId": "attendanceloggetchangehistory",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the attendance log to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/swipeget": {
      "get": {
        "summary": "Search and view details of a swipe",
        "description": "Allows the user to view an individual attendance swipe.",
        "operationId": "swipeget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the swipe to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/swipelist": {
      "get": {
        "summary": "View a list of swipes",
        "description": "Allows the user to view a list of all swipes for the location or locations in which the user is scoped.",
        "operationId": "swipelist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/swipesave": {
      "post": {
        "summary": "Create or edit a swipe, and if possible, save the related attendance log",
        "description": "Allows the user to save an attendance swipe, which will also save the attendance log if the information in the swipe is enough.",
        "operationId": "swipesave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "time",
                  "cardnumber",
                  "client"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "time": {
                    "type": "string",
                    "description": "The date and time of the swipe.",
                    "format": "date-time"
                  },
                  "type": {
                    "type": "integer",
                    "description": "Specifies the attendance type (0 = Sign-In, 1 = Sign-Out). If not specified then it's inferred from existing logs.",
                    "format": "int32"
                  },
                  "cardnumber": {
                    "type": "string",
                    "description": "The number of the swipped card."
                  },
                  "location": {
                    "type": "string",
                    "description": "The id of the location whose swipe has to be saved.",
                    "format": "uuid"
                  },
                  "event": {
                    "type": "string",
                    "description": "The id of the event whose swipe has to be saved.",
                    "format": "uuid"
                  },
                  "client": {
                    "type": "string",
                    "description": "The unique id of the client whose swipe has to be saved."
                  },
                  "clientname": {
                    "type": "string",
                    "description": "The name of the client whose swipe has to be saved."
                  },
                  "metadata": {
                    "type": "string",
                    "description": "The swipe's metadata in JSON format."
                  },
                  "photosize": {
                    "type": "integer",
                    "description": "The swiping user's photo size.",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/swipedelete": {
      "get": {
        "summary": "Delete a swipe",
        "description": "Allows the user to delete an existing attendance swipe.",
        "operationId": "swipedelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the swipe to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/attendancelogcommentdelete": {
      "get": {
        "summary": "Delete a comment on an attendance log",
        "operationId": "attendancelogcommentdelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the attendance log comment to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/attendancelogcommentget": {
      "get": {
        "summary": "View a comment on an attendance log",
        "operationId": "attendancelogcommentget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the comment to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/attendancelogcommentlist": {
      "get": {
        "summary": "View all the comments on a specific attendance log",
        "operationId": "attendancelogcommentlist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attendancelog",
            "in": "query",
            "description": "The id of the attendance log whose comments have to be retrieved.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/attendancelogcommentsave": {
      "post": {
        "summary": "Save a comment on an attendance log",
        "operationId": "attendancelogcommentsave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "comments"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the comment to edit (leave empty to create a new one)",
                    "format": "uuid"
                  },
                  "attendancelog": {
                    "type": "string",
                    "description": "The id of the attendance log that has to be commented.",
                    "format": "uuid"
                  },
                  "comments": {
                    "type": "string",
                    "description": "The comments that have to be saved."
                  },
                  "public": {
                    "type": "boolean",
                    "description": "Specifies whether this comment is public to the user or should only be seen by staff or admins"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/usergrouprefresh": {
      "get": {
        "summary": "Refresh the dynamic group",
        "description": "Allows the user to refresh a dynamic group that they have permission to edit.",
        "operationId": "usergrouprefresh",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "The ID of the group to refresh.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/reportquery": {
      "get": {
        "summary": "Query and load a specified report",
        "description": "Allows the user to run reports with the exception of attendance analytics reports.",
        "operationId": "reportquery",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportname",
            "in": "query",
            "description": "The name of the report to execute",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "in": "query",
            "description": "A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/reportlist": {
      "get": {
        "summary": "View a list of available reports",
        "description": "Allows the user to view the complete list of available, canned reports.",
        "operationId": "reportlist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/reportprepare": {
      "get": {
        "summary": "Queries and loads the specified report, in background.",
        "description": "Allows the user to run reports, in background, with the exception of attendance analytics reports.",
        "operationId": "reportprepare",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportname",
            "in": "query",
            "description": "The name of the report to execute",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "in": "query",
            "description": "A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repformat",
            "in": "query",
            "description": "The format of the resulting report. Json, pdf, csv, ...",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fillgroupid",
            "in": "query",
            "description": "If specified, the result is used to fill the group with the given ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "groupby",
            "in": "query",
            "description": "How to group the records. In the format 'col1+col2|col3+col4",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshgroup",
            "in": "query",
            "description": "The ID of the group to check (and refresh) before processing the report.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filtertext",
            "in": "query",
            "description": "The user friendly text of the applied filters.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/memorizedreportlist": {
      "get": {
        "summary": "View a list of all his memorized reports",
        "description": "Allows the user to view the list of all memorized reports that they have created.",
        "operationId": "memorizedreportlist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customname",
            "in": "query",
            "description": "If specified filters the memorized reports by custom name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/memorizedreportget": {
      "get": {
        "summary": "View details of a memorized report",
        "description": "Allows the user to view an individual memorized report and its details.",
        "operationId": "memorizedreportget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the report configuration to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/memorizedreportsave": {
      "post": {
        "summary": "Create or edit a memorized report",
        "description": "Allows the user to create or edit a memorized report for themselves.",
        "operationId": "memorizedreportsave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "internalname",
                  "name",
                  "customname",
                  "url",
                  "format"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the report settings to save (leave empty to create a new one).",
                    "format": "uuid"
                  },
                  "internalname": {
                    "type": "string",
                    "description": "The internal name of the report."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the report."
                  },
                  "customname": {
                    "type": "string",
                    "description": "The custom name of the report."
                  },
                  "customdescription": {
                    "type": "string",
                    "description": "The custom name of the report."
                  },
                  "url": {
                    "type": "string",
                    "description": "The url of the report."
                  },
                  "format": {
                    "type": "string",
                    "description": "The default format of the report."
                  },
                  "params": {
                    "type": "string",
                    "description": "A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3."
                  },
                  "filters": {
                    "type": "string",
                    "description": "A JSON containing the selected filters."
                  },
                  "filtertext": {
                    "type": "string",
                    "description": "The user friendly text of the applied filters."
                  },
                  "groupby": {
                    "type": "string",
                    "description": "How to group the records. In the format 'col1+col2|col3+col4"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/memorizedreportdelete": {
      "get": {
        "summary": "Delete memorized report",
        "description": "Allows the user to delete a memorized report that they have created.",
        "operationId": "memorizedreportdelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the report settings to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/stationlist": {
      "get": {
        "summary": "View a list of sign-in stations",
        "description": "Allows the user to view the list of sign-in stations, limited to the stations in the locations to which they are scoped.",
        "operationId": "stationlist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/stationdelete": {
      "get": {
        "summary": "Delete a sign-in station",
        "description": "Allows the user to delete a sign-in station from the list of existing sign-in stations that they can view based on their scope.",
        "operationId": "stationdelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the sign-in station to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/stationget": {
      "get": {
        "summary": "View details of a sign-in station",
        "description": "Allows the user to view an individual sign-in station and its details.",
        "operationId": "stationget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/stationgetinfo": {
      "get": {
        "summary": "Gets a the info to display in the sign-in station by it's ID.",
        "operationId": "stationgetinfo",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The id of the event, to override the one by schedule.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/stationsave": {
      "post": {
        "summary": "Create or edit a sign-in station",
        "description": "Allows the user to create, edit, or install a sign-in station based in an area to which they are scoped.",
        "operationId": "stationsave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "name",
                  "mode",
                  "passcode"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the sign-in station to save (leave empty to create a new one).",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "description": "The friendly name of the sign-in station."
                  },
                  "mode": {
                    "type": "string",
                    "description": "The mode of the sign-in station."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title to display in the station."
                  },
                  "instructions": {
                    "type": "string",
                    "description": "Instructions to display in the station."
                  },
                  "passcode": {
                    "type": "string",
                    "description": "The passcode used to change settings in the station, empty text to disable security."
                  },
                  "location": {
                    "type": "string",
                    "description": "Id of the location Title to display in the station.",
                    "format": "uuid"
                  },
                  "showids": {
                    "type": "boolean",
                    "description": "Whether to show the visitor ids in the sign-in station."
                  },
                  "shownames": {
                    "type": "boolean",
                    "description": "Whether to show the visitor names in the sign-in station."
                  },
                  "showphotos": {
                    "type": "boolean",
                    "description": "Whether to show the visitor photos in the sign-in station."
                  },
                  "infotimeout": {
                    "type": "integer",
                    "description": "Specifies how much time the success or error message is shown after a swipe.",
                    "format": "int32"
                  },
                  "photopixelwidth": {
                    "type": "integer",
                    "description": "Specifies the pixel width of the photos in the sign-in station.",
                    "format": "int32"
                  },
                  "allowcreatingvisitors": {
                    "type": "boolean",
                    "description": "Whether to allow creating visitors from the sign-in station."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/stationunlock": {
      "get": {
        "summary": "Unlocks the sign-in station.",
        "operationId": "stationunlock",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id of the sign-in station to unlock.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "passcode",
            "in": "query",
            "description": "The passcode to unlock the station.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "method",
            "in": "query",
            "description": "The authentication method. Valid values are 'token' and 'cookie'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/stationgetlicense": {
      "get": {
        "summary": "Gets the current license information",
        "operationId": "stationgetlicense",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station whose account's license has to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/stationgetcurrentterms": {
      "get": {
        "summary": "Get all the current terms",
        "operationId": "stationgetcurrentterms",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station whose account's current terms have to be retrieved.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/swipesaveanonym": {
      "post": {
        "summary": "Creates a new swipe from a sign-in station, and if possible, creates the attendance log",
        "operationId": "swipesaveanonym",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "station",
                  "user"
                ],
                "properties": {
                  "station": {
                    "type": "string",
                    "description": "The id of the sign-in station.",
                    "format": "uuid"
                  },
                  "client": {
                    "type": "string",
                    "description": "The id of the client where this swipe is being generated."
                  },
                  "time": {
                    "type": "string",
                    "description": "The date and time of the swipe. Now is considered if omitted.",
                    "format": "date-time"
                  },
                  "user": {
                    "type": "string",
                    "description": "The user's card number."
                  },
                  "event": {
                    "type": "string",
                    "description": "The id of the event whose swipe has to be saved.",
                    "format": "uuid"
                  },
                  "location": {
                    "type": "string",
                    "description": "The id of the location where the swipe has to be saved.",
                    "format": "uuid"
                  },
                  "type": {
                    "type": "integer",
                    "description": "Specifies the attendance type (0 = Sign-In, 1 = Sign-Out).",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/notificationgetforstation": {
      "get": {
        "summary": "Gets all public (in station) notifications for the specific user",
        "operationId": "notificationgetforstation",
        "parameters": [
          {
            "name": "station",
            "in": "query",
            "description": "The id of the sign-in station to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The card of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advroleget": {
      "get": {
        "summary": "View details of a role",
        "description": "Allows the user to view a role and its details.",
        "operationId": "advroleget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the location to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advrolelist": {
      "get": {
        "summary": "Lists the roles for the current account",
        "operationId": "advrolelist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includepolicies",
            "in": "query",
            "description": "True to include the policies, defaults to false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeinternal",
            "in": "query",
            "description": "True to include the internal roles too.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name of the role.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advroledelete": {
      "get": {
        "summary": "Delete a role",
        "description": "Allows the user to delete a role from the list of available roles.",
        "operationId": "advroledelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the location to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advrolesave": {
      "post": {
        "summary": "Create or edit a role",
        "description": "Allows the user to create or edit a role's permissions.",
        "operationId": "advrolesave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "name",
                  "description",
                  "policies",
                  "editroles"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the role to save (leave empty to create a new one).",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the role."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the role, for admin use."
                  },
                  "policies": {
                    "type": "string",
                    "description": "The policies for the role."
                  },
                  "viewroles": {
                    "type": "string",
                    "description": "CSV list of the roles this role can view."
                  },
                  "editroles": {
                    "type": "string",
                    "description": "CSV list of the roles this role can edit."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advrolelisttemplates": {
      "get": {
        "summary": "View a list of role templates",
        "description": "Allows the user to view the full list of available role templates.",
        "operationId": "advrolelisttemplates",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advrolelistmaps": {
      "get": {
        "summary": "Lists the maps a roles is mapped to",
        "operationId": "advrolelistmaps",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleid",
            "in": "query",
            "description": "The id of the role to list the maps.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advrolelistrolesmapped": {
      "get": {
        "summary": "Lists the roles mappings",
        "operationId": "advrolelistrolesmapped",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "map",
            "in": "query",
            "description": "List only the roles in the specified map.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advrolesavemapping": {
      "post": {
        "summary": "Saves a role mapping",
        "description": "Allows the user to add a role to a mapped category on the 'Role Mapping' page.",
        "operationId": "advrolesavemapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "map",
                  "roleid"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "map": {
                    "type": "string",
                    "description": "The map name to save the role."
                  },
                  "roleid": {
                    "type": "string",
                    "description": "The id of the role.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advroledeletemapping": {
      "get": {
        "summary": "Delete a role mapping",
        "description": "Allows the user to delete a role from its mapped categories on the 'Role Mapping' page.",
        "operationId": "advroledeletemapping",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "map",
            "in": "query",
            "description": "The map name to save the role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleid",
            "in": "query",
            "description": "The id of the role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advrolecheckperm": {
      "get": {
        "summary": "Checks the permissions are assigned for the given roles",
        "operationId": "advrolecheckperm",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "CSV list of the role ids to check",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissions",
            "in": "query",
            "description": "CSV list of the permissions to check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advroleaddmissing": {
      "get": {
        "summary": "Adds the missing permissions to a role. Requires access to advrole.save",
        "operationId": "advroleaddmissing",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "CSV list of the role ids to check",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissions",
            "in": "query",
            "description": "CSV list of the permissions to check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advrolesuserlist": {
      "get": {
        "summary": "List users. Alias to user.list, use that one instead.",
        "operationId": "advrolesuserlist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "roleid",
            "in": "query",
            "description": "The id of the role to filter users by, or empty to return all users.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "onlywithoutcard",
            "in": "query",
            "description": "If is 1 then only the users without a card are returned, otherwise all users are returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "photosize",
            "in": "query",
            "description": "The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/advroleuserupgrade": {
      "get": {
        "summary": "Upgrade a user to another role (requires permission to edit those roles)",
        "description": "Allow the user to add a role to another user, given that he has access to view that other user and edit people with that new role.",
        "operationId": "advroleuserupgrade",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "Id of the user to upgrade",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "roleid",
            "in": "query",
            "description": "Id of the role to add",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/securityassessuser": {
      "get": {
        "summary": "Returns the list of permissions for a specific user",
        "operationId": "securityassessuser",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "User ID to list the effective permissions.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/securityassessrole": {
      "get": {
        "summary": "Returns the list of permissions for a specific role",
        "operationId": "securityassessrole",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleid",
            "in": "query",
            "description": "Role ID to list the effective permissions.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/securityassesspermission": {
      "get": {
        "summary": "Returns the list of users for a specific permission",
        "operationId": "securityassesspermission",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commandname",
            "in": "query",
            "description": "Name of the action or command to get the roles.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/securityassessscope": {
      "get": {
        "summary": "Returns the list of users for a specific user",
        "operationId": "securityassessscope",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationid",
            "in": "query",
            "description": "Location ID to list the users with that scope.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/reportpermissionsbyuser": {
      "get": {
        "summary": "Permissions by user report",
        "description": "Lists all the users in the system including their corresponding permissions.",
        "operationId": "reportpermissionsbyuser",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "in": "query",
            "description": "A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/creditget": {
      "get": {
        "summary": "View details of assigned credit",
        "description": "Allows the user to view an credit and its details.",
        "operationId": "creditget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the credit to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/creditlist": {
      "get": {
        "summary": "View a list of credits for a specific user",
        "description": "Allows the user to view the full list of credits for a user.",
        "operationId": "creditlist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/creditlistmine": {
      "get": {
        "summary": "View the list of credits of the current user",
        "description": "Allows the current user to view his full list of credits.",
        "operationId": "creditlistmine",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/creditdelete": {
      "get": {
        "summary": "Delete a credit",
        "description": "Allows the user to delete credits.",
        "operationId": "creditdelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the credit to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/creditsave": {
      "post": {
        "summary": "Create or edit credit for a user",
        "description": "Allows the user to create or edit credit for a user",
        "operationId": "creditsave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "user",
                  "amount",
                  "discountmethod"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the credit save (leave empty to create a new one).",
                    "format": "uuid"
                  },
                  "user": {
                    "type": "string",
                    "description": "The Id of the user to add credit.",
                    "format": "uuid"
                  },
                  "amount": {
                    "type": "number",
                    "description": "The amount of credits.",
                    "format": "float"
                  },
                  "paidamount": {
                    "type": "number",
                    "description": "The amount paid by the user.",
                    "format": "float"
                  },
                  "validfrom": {
                    "type": "string",
                    "description": "The date when it starts being valid.",
                    "format": "date-time"
                  },
                  "validto": {
                    "type": "string",
                    "description": "The date when it ends being valid.",
                    "format": "date-time"
                  },
                  "discountmethod": {
                    "type": "string",
                    "description": "One of the discount credit methods: visit, minutes, full-hours, partial-hours."
                  },
                  "notes": {
                    "type": "string",
                    "description": "Admin notes"
                  },
                  "rulesjson": {
                    "type": "string",
                    "description": "The validations rules in JSON format."
                  },
                  "sourceplanid": {
                    "type": "string",
                    "description": "The Id of the plan used to create the credit.",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/creditgetuserbalance": {
      "get": {
        "summary": "Get the total amount of credits of the specified user",
        "description": "Allows the user to view the total amount of credits of a specified user.",
        "operationId": "creditgetuserbalance",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The id of the user whose balance has to be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/creditlistdetails": {
      "get": {
        "summary": "Gets the credit usage details",
        "operationId": "creditlistdetails",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credit",
            "in": "query",
            "description": "The id of the credit to look up for details.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/creditsavedetails": {
      "post": {
        "summary": "Create or edit credit details",
        "operationId": "creditsavedetails",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "credit"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the credit detail to save (leave empty to create a new one).",
                    "format": "uuid"
                  },
                  "credit": {
                    "type": "string",
                    "description": "The Id of the credit.",
                    "format": "uuid"
                  },
                  "amount": {
                    "type": "number",
                    "description": "The amount of credits, if updating, it will not be used.",
                    "format": "float"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Admin notes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/creditplanget": {
      "get": {
        "summary": "Gets a credit plan",
        "operationId": "creditplanget",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the credit plan to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/creditplanlist": {
      "get": {
        "summary": "Gets the credit plans available",
        "operationId": "creditplanlist",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The first record to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The max number of records to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/creditplandelete": {
      "get": {
        "summary": "Deletes a credit plan",
        "operationId": "creditplandelete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the credit plan to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/creditplansave": {
      "post": {
        "summary": "Saves a credit plan",
        "operationId": "creditplansave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token",
                  "name",
                  "amount",
                  "paymentamount",
                  "discountmethod"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "id": {
                    "type": "string",
                    "description": "The id of the credit save (leave empty to create a new one).",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the membership plan"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the membership plan"
                  },
                  "salesnotes": {
                    "type": "string",
                    "description": "Sale point notes or comments."
                  },
                  "amount": {
                    "type": "number",
                    "description": "The amount of credits.",
                    "format": "float"
                  },
                  "paymentamount": {
                    "type": "number",
                    "description": "The amount that the user must pay.",
                    "format": "float"
                  },
                  "rulesjson": {
                    "type": "string",
                    "description": "The validations rules in JSON format."
                  },
                  "discountmethod": {
                    "type": "string",
                    "description": "One of the discount credit methods: visit, minutes, full-hours, partial-hours."
                  },
                  "validfor": {
                    "type": "string",
                    "description": "Valid for, format example: 1h, 2d, 3w, 1m, 1y."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/creditdiscountmethods": {
      "get": {
        "summary": "Gets the valid discount methods.",
        "operationId": "creditdiscountmethods",
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/sessionreglistsessions": {
      "get": {
        "summary": "List the sessions available for a specific event",
        "description": "Allows the user to view all the sessions available for a recurring event.",
        "operationId": "sessionreglistsessions",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The event id to list sessions.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sessiondate",
            "in": "query",
            "description": "The date of the session to find.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/sessionreglistupcoming": {
      "get": {
        "summary": "View a list of upcoming event sessions",
        "description": "Allows the user to view the full list of upcoming events.",
        "operationId": "sessionreglistupcoming",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Only sessions in the week of the specified date will be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/sessionreglistupcomingevent": {
      "get": {
        "summary": "View a list of upcoming sessions of a particular event",
        "description": "Allows the user to view the upcoming recurring sessions of a specified event.",
        "operationId": "sessionreglistupcomingevent",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Start date to filter the returned sessions.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The id of the event whose sessions will be returned",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/sessionreggetusers": {
      "get": {
        "summary": "Lists the registrations for a specific session",
        "description": "Allows the user to view the registration for a specified event session.",
        "operationId": "sessionreggetusers",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The event id to list sessions.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sessiondate",
            "in": "query",
            "description": "The date of the session to find.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/sessionregadduser": {
      "get": {
        "summary": "Register users for events",
        "description": "Allows the user to register another user for an upcoming event.",
        "operationId": "sessionregadduser",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to add.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sessiondate",
            "in": "query",
            "description": "The date and time when the session starts.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/sessionregaddcurrentuser": {
      "get": {
        "summary": "Register current user to an event session",
        "description": "Allows the user to register themselves for an event.",
        "operationId": "sessionregaddcurrentuser",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sessiondate",
            "in": "query",
            "description": "The date and time when the session starts.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/sessionregremoveuser": {
      "get": {
        "summary": "Removes a user from an event session",
        "description": "Allows the user to un-register another user from an event.",
        "operationId": "sessionregremoveuser",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "The id of the user to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sessiondate",
            "in": "query",
            "description": "The date and time when the session starts.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/sessionregremovecurrentuser": {
      "get": {
        "summary": "Unregister current user from an event session",
        "description": "Allows the user to un-register themselves from an event.",
        "operationId": "sessionregremovecurrentuser",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sessiondate",
            "in": "query",
            "description": "The date and time when the session starts.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/sessionreggetsessions": {
      "get": {
        "summary": "Lists the registrations for a specific user",
        "description": "Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.",
        "operationId": "sessionreggetsessions",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "The user id to list sessions.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/sessionreggetmysessions": {
      "get": {
        "summary": "View all the sessions the logged user is registered to",
        "operationId": "sessionreggetmysessions",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Start date to filter the sessions.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/sessionreggetsettings": {
      "get": {
        "summary": "Get the settings for session registration",
        "description": "Allows the user to view a event's session registration settings.",
        "operationId": "sessionreggetsettings",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The authentication token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationid",
            "in": "query",
            "description": "The id of the location to save settings.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "The id of the event to save settings.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sessiondate",
            "in": "query",
            "description": "The date and time when the session starts.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "noinherit",
            "in": "query",
            "description": "True to get the location/event/session specific settings without looking for the more global settings.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    },
    "/sessionregsavesettings": {
      "post": {
        "summary": "Save the settings for an event's session registration",
        "description": "Allows the user to save the settings for an event.",
        "operationId": "sessionregsavesettings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The authentication token."
                  },
                  "locationid": {
                    "type": "string",
                    "description": "The id of the location to save settings.",
                    "format": "uuid"
                  },
                  "eventid": {
                    "type": "string",
                    "description": "The id of the event to save settings.",
                    "format": "uuid"
                  },
                  "sessiondate": {
                    "type": "string",
                    "description": "The date and time when the session starts.",
                    "format": "date-time"
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether the registration is enabled or not."
                  },
                  "capacity": {
                    "type": "integer",
                    "description": "The capacity of the class.",
                    "format": "int32"
                  },
                  "trainerid": {
                    "type": "string",
                    "description": "The trainer ID.",
                    "format": "uuid"
                  },
                  "showupcomingdays": {
                    "type": "integer",
                    "description": "# of days to show upcoming sessions",
                    "format": "int32"
                  },
                  "registernolessdurationbasis": {
                    "type": "integer",
                    "description": "Specifies the time unit of measurement to restrict the period when attendees can register to sessions (no less than 0 = Minutes, 1 = Hours, 2 = Days, 3 = Weeks).",
                    "format": "int32"
                  },
                  "registernolessduration": {
                    "type": "integer",
                    "description": "Specifies the duration of the period when attendees can register to sessions (no less than the specified magnitude).",
                    "format": "int32"
                  },
                  "registernomoredurationbasis": {
                    "type": "integer",
                    "description": "Specifies the time unit of measurement to restrict the period when attendees can register to sessions (no more than 0 = Minutes, 1 = Hours, 2 = Days, 3 = Weeks).",
                    "format": "int32"
                  },
                  "registernomoreduration": {
                    "type": "integer",
                    "description": "Specifies the duration of the period when attendees can register to sessions (no more than the specified magnitude).",
                    "format": "int32"
                  },
                  "unregisternolessdurationbasis": {
                    "type": "integer",
                    "description": "Specifies the time unit of measurement to restrict the period when attendees can unregister from sessions (no less than 0 = Minutes, 1 = Hours, 2 = Days, 3 = Weeks).",
                    "format": "int32"
                  },
                  "unregisternolessduration": {
                    "type": "integer",
                    "description": "Specifies the duration of the period when attendees can unregister from sessions (no less than the specified magnitude).",
                    "format": "int32"
                  },
                  "remindhours": {
                    "type": "integer",
                    "description": "Specifies the hours before the event when the reminder is sent.",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ActionResult"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Specifies if the execution of the action was successful"
          },
          "results": {
            "type": "array",
            "items": {
              "properties": {
                "prop1": {
                  "type": "object",
                  "description": "A result property..."
                },
                "prop2": {
                  "type": "object",
                  "description": "Another result property..."
                }
              }
            },
            "description": "Objects returned by the action"
          },
          "message": {
            "type": "string",
            "description": "Message with context information about the response"
          }
        },
        "description": "Default action result"
      },
      "ErrorActionResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Specifies if the execution of the action was successful"
          },
          "message": {
            "type": "string",
            "description": "Message with context information about the response"
          },
          "error_flag": {
            "type": "string",
            "description": "Error flag that describes the error in the execution"
          },
          "domain": {
            "type": "string",
            "description": "Contains the domain of the account where the action was applied on"
          },
          "redirect_url": {
            "type": "string",
            "description": "Contains the url to redirect to when an error is found during the execution of the action"
          }
        },
        "description": "Object returned when the action execution failed"
      }
    }
  }
}