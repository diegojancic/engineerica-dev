# coding: utf-8

"""
    AccuTraining OpenAPI 3

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class NotificationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def notification_delete(self, id, **kwargs):  # noqa: E501
        """Delete a notification  # noqa: E501

        Allows the user to delete an existing notification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The id of the notification to delete. (required)
        :param object body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.notification_delete_with_http_info(id, **kwargs)  # noqa: E501

    def notification_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a notification  # noqa: E501

        Allows the user to delete an existing notification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The id of the notification to delete. (required)
        :param object body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `notification_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/notification/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_get(self, id, **kwargs):  # noqa: E501
        """View a notification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The id of the notification to get. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.notification_get_with_http_info(id, **kwargs)  # noqa: E501

    def notification_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """View a notification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The id of the notification to get. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `notification_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/notification/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_getforstation(self, station, user, **kwargs):  # noqa: E501
        """Gets all public (in station) notifications for the specific user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_getforstation(station, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str station: The id of the sign-in station to get. (required)
        :param str user: The card of the user. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.notification_getforstation_with_http_info(station, user, **kwargs)  # noqa: E501

    def notification_getforstation_with_http_info(self, station, user, **kwargs):  # noqa: E501
        """Gets all public (in station) notifications for the specific user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_getforstation_with_http_info(station, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str station: The id of the sign-in station to get. (required)
        :param str user: The card of the user. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'station',
            'user'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_getforstation" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'station' is set
        if self.api_client.client_side_validation and ('station' not in local_var_params or  # noqa: E501
                                                        local_var_params['station'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `station` when calling `notification_getforstation`")  # noqa: E501
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in local_var_params or  # noqa: E501
                                                        local_var_params['user'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user` when calling `notification_getforstation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'station' in local_var_params and local_var_params['station'] is not None:  # noqa: E501
            query_params.append(('station', local_var_params['station']))  # noqa: E501
        if 'user' in local_var_params and local_var_params['user'] is not None:  # noqa: E501
            query_params.append(('user', local_var_params['user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/notification/getforstation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_getunreadcount(self, **kwargs):  # noqa: E501
        """Get the number of unread notifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_getunreadcount(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.notification_getunreadcount_with_http_info(**kwargs)  # noqa: E501

    def notification_getunreadcount_with_http_info(self, **kwargs):  # noqa: E501
        """Get the number of unread notifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_getunreadcount_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_getunreadcount" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/notification/getunreadcount', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_list(self, _from, count, **kwargs):  # noqa: E501
        """View a list of all sent notifications  # noqa: E501

        Allows the user to view the list of all sent notifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_list(_from, count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int _from: The first record to return. (required)
        :param int count: The max number of records to return. (required)
        :param str recipient: The recipient whose notifications have to be listed.
        :param int status: The status of the notifications to list. Read, Unread or All.
        :param datetime startdate: The start date of the period to filter the notifications.
        :param datetime enddate: The end date of the period to filter the notifications.
        :param bool sentonscreen: Specifies whether to list the notifications that were sent on-screen or not.
        :param bool sentemail: Specifies whether to list the notifications that were sent via e-mail or not.
        :param bool sentsms: Specifies whether to list the notifications that were sent via sms or not.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.notification_list_with_http_info(_from, count, **kwargs)  # noqa: E501

    def notification_list_with_http_info(self, _from, count, **kwargs):  # noqa: E501
        """View a list of all sent notifications  # noqa: E501

        Allows the user to view the list of all sent notifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_list_with_http_info(_from, count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int _from: The first record to return. (required)
        :param int count: The max number of records to return. (required)
        :param str recipient: The recipient whose notifications have to be listed.
        :param int status: The status of the notifications to list. Read, Unread or All.
        :param datetime startdate: The start date of the period to filter the notifications.
        :param datetime enddate: The end date of the period to filter the notifications.
        :param bool sentonscreen: Specifies whether to list the notifications that were sent on-screen or not.
        :param bool sentemail: Specifies whether to list the notifications that were sent via e-mail or not.
        :param bool sentsms: Specifies whether to list the notifications that were sent via sms or not.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            '_from',
            'count',
            'recipient',
            'status',
            'startdate',
            'enddate',
            'sentonscreen',
            'sentemail',
            'sentsms'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter '_from' is set
        if self.api_client.client_side_validation and ('_from' not in local_var_params or  # noqa: E501
                                                        local_var_params['_from'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `_from` when calling `notification_list`")  # noqa: E501
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in local_var_params or  # noqa: E501
                                                        local_var_params['count'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `count` when calling `notification_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in local_var_params and local_var_params['_from'] is not None:  # noqa: E501
            query_params.append(('from', local_var_params['_from']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'recipient' in local_var_params and local_var_params['recipient'] is not None:  # noqa: E501
            query_params.append(('recipient', local_var_params['recipient']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'startdate' in local_var_params and local_var_params['startdate'] is not None:  # noqa: E501
            query_params.append(('startdate', local_var_params['startdate']))  # noqa: E501
        if 'enddate' in local_var_params and local_var_params['enddate'] is not None:  # noqa: E501
            query_params.append(('enddate', local_var_params['enddate']))  # noqa: E501
        if 'sentonscreen' in local_var_params and local_var_params['sentonscreen'] is not None:  # noqa: E501
            query_params.append(('sentonscreen', local_var_params['sentonscreen']))  # noqa: E501
        if 'sentemail' in local_var_params and local_var_params['sentemail'] is not None:  # noqa: E501
            query_params.append(('sentemail', local_var_params['sentemail']))  # noqa: E501
        if 'sentsms' in local_var_params and local_var_params['sentsms'] is not None:  # noqa: E501
            query_params.append(('sentsms', local_var_params['sentsms']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/notification/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_listmine(self, _from, count, **kwargs):  # noqa: E501
        """View all the notifications sent to the current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_listmine(_from, count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int _from: The first record to return. (required)
        :param int count: The max number of records to return. (required)
        :param int status: Specifies the status of the notifications to list. Read, Unread or All.
        :param datetime startdate: The start date of the period to filter the notifications.
        :param datetime enddate: The end date of the period to filter the notifications.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.notification_listmine_with_http_info(_from, count, **kwargs)  # noqa: E501

    def notification_listmine_with_http_info(self, _from, count, **kwargs):  # noqa: E501
        """View all the notifications sent to the current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_listmine_with_http_info(_from, count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int _from: The first record to return. (required)
        :param int count: The max number of records to return. (required)
        :param int status: Specifies the status of the notifications to list. Read, Unread or All.
        :param datetime startdate: The start date of the period to filter the notifications.
        :param datetime enddate: The end date of the period to filter the notifications.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            '_from',
            'count',
            'status',
            'startdate',
            'enddate'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_listmine" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter '_from' is set
        if self.api_client.client_side_validation and ('_from' not in local_var_params or  # noqa: E501
                                                        local_var_params['_from'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `_from` when calling `notification_listmine`")  # noqa: E501
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in local_var_params or  # noqa: E501
                                                        local_var_params['count'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `count` when calling `notification_listmine`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in local_var_params and local_var_params['_from'] is not None:  # noqa: E501
            query_params.append(('from', local_var_params['_from']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'startdate' in local_var_params and local_var_params['startdate'] is not None:  # noqa: E501
            query_params.append(('startdate', local_var_params['startdate']))  # noqa: E501
        if 'enddate' in local_var_params and local_var_params['enddate'] is not None:  # noqa: E501
            query_params.append(('enddate', local_var_params['enddate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/notification/listmine', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_markasread(self, **kwargs):  # noqa: E501
        """Mark a notification as read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_markasread(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read.
        :param int status: Specifies the status to filter the notifications. Read, Unread or All.
        :param datetime startdate: The start date of the period to filter the notifications.
        :param datetime enddate: The end date of the period to filter the notifications.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.notification_markasread_with_http_info(**kwargs)  # noqa: E501

    def notification_markasread_with_http_info(self, **kwargs):  # noqa: E501
        """Mark a notification as read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_markasread_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read.
        :param int status: Specifies the status to filter the notifications. Read, Unread or All.
        :param datetime startdate: The start date of the period to filter the notifications.
        :param datetime enddate: The end date of the period to filter the notifications.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'status',
            'startdate',
            'enddate'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_markasread" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'startdate' in local_var_params and local_var_params['startdate'] is not None:  # noqa: E501
            query_params.append(('startdate', local_var_params['startdate']))  # noqa: E501
        if 'enddate' in local_var_params and local_var_params['enddate'] is not None:  # noqa: E501
            query_params.append(('enddate', local_var_params['enddate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/notification/markasread', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_markasunread(self, **kwargs):  # noqa: E501
        """Mark a notification as unread  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_markasunread(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread.
        :param int status: Specifies the status to filter the notifications. Read, Unread or All.
        :param datetime startdate: The start date of the period to filter the notifications.
        :param datetime enddate: The end date of the period to filter the notifications.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.notification_markasunread_with_http_info(**kwargs)  # noqa: E501

    def notification_markasunread_with_http_info(self, **kwargs):  # noqa: E501
        """Mark a notification as unread  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_markasunread_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread.
        :param int status: Specifies the status to filter the notifications. Read, Unread or All.
        :param datetime startdate: The start date of the period to filter the notifications.
        :param datetime enddate: The end date of the period to filter the notifications.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'status',
            'startdate',
            'enddate'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_markasunread" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'startdate' in local_var_params and local_var_params['startdate'] is not None:  # noqa: E501
            query_params.append(('startdate', local_var_params['startdate']))  # noqa: E501
        if 'enddate' in local_var_params and local_var_params['enddate'] is not None:  # noqa: E501
            query_params.append(('enddate', local_var_params['enddate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/notification/markasunread', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_send(self, emailenabled, onscreenenabled, smsenabled, title, **kwargs):  # noqa: E501
        """Send notifications on screen, via email or text to users  # noqa: E501

        Allows the user to send notifications to other users through the Send Message link.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_send(emailenabled, onscreenenabled, smsenabled, title, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool emailenabled: Whether send the notification via email. (required)
        :param bool onscreenenabled: Whether to display the notification on screen. (required)
        :param bool smsenabled: Whether to send the notification via text message. (required)
        :param str title: Notification title. (required)
        :param str tousers: Comma-separated Ids of users to send the notification.
        :param str togroups: Comma-separated Ids of user groups to send the notification.
        :param str onscreenbody: Body of the message for on-screen display.
        :param str onscreenclick: What to do when the notification is clicked. Valid values: hide, view, url.
        :param str onscreenurl: Url to redirect the user, if onscreenclick=url.
        :param str onscreenclass: How to display the notification. Valid values: info, success, warning, error
        :param int onscreenduration: Time in seconds to display the notification.
        :param int showonstation: Whether to show the notification in the sign-in station.
        :param str emailfromname: Name of the email sender.
        :param str emailfrom: Reply-to email.
        :param str emailsubject: Subject of the email.
        :param str emailbody: Body of the email.
        :param str textmessagebody: Message for SMS. Max 160 characters.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.notification_send_with_http_info(emailenabled, onscreenenabled, smsenabled, title, **kwargs)  # noqa: E501

    def notification_send_with_http_info(self, emailenabled, onscreenenabled, smsenabled, title, **kwargs):  # noqa: E501
        """Send notifications on screen, via email or text to users  # noqa: E501

        Allows the user to send notifications to other users through the Send Message link.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_send_with_http_info(emailenabled, onscreenenabled, smsenabled, title, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool emailenabled: Whether send the notification via email. (required)
        :param bool onscreenenabled: Whether to display the notification on screen. (required)
        :param bool smsenabled: Whether to send the notification via text message. (required)
        :param str title: Notification title. (required)
        :param str tousers: Comma-separated Ids of users to send the notification.
        :param str togroups: Comma-separated Ids of user groups to send the notification.
        :param str onscreenbody: Body of the message for on-screen display.
        :param str onscreenclick: What to do when the notification is clicked. Valid values: hide, view, url.
        :param str onscreenurl: Url to redirect the user, if onscreenclick=url.
        :param str onscreenclass: How to display the notification. Valid values: info, success, warning, error
        :param int onscreenduration: Time in seconds to display the notification.
        :param int showonstation: Whether to show the notification in the sign-in station.
        :param str emailfromname: Name of the email sender.
        :param str emailfrom: Reply-to email.
        :param str emailsubject: Subject of the email.
        :param str emailbody: Body of the email.
        :param str textmessagebody: Message for SMS. Max 160 characters.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'emailenabled',
            'onscreenenabled',
            'smsenabled',
            'title',
            'tousers',
            'togroups',
            'onscreenbody',
            'onscreenclick',
            'onscreenurl',
            'onscreenclass',
            'onscreenduration',
            'showonstation',
            'emailfromname',
            'emailfrom',
            'emailsubject',
            'emailbody',
            'textmessagebody'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_send" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'emailenabled' is set
        if self.api_client.client_side_validation and ('emailenabled' not in local_var_params or  # noqa: E501
                                                        local_var_params['emailenabled'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `emailenabled` when calling `notification_send`")  # noqa: E501
        # verify the required parameter 'onscreenenabled' is set
        if self.api_client.client_side_validation and ('onscreenenabled' not in local_var_params or  # noqa: E501
                                                        local_var_params['onscreenenabled'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `onscreenenabled` when calling `notification_send`")  # noqa: E501
        # verify the required parameter 'smsenabled' is set
        if self.api_client.client_side_validation and ('smsenabled' not in local_var_params or  # noqa: E501
                                                        local_var_params['smsenabled'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `smsenabled` when calling `notification_send`")  # noqa: E501
        # verify the required parameter 'title' is set
        if self.api_client.client_side_validation and ('title' not in local_var_params or  # noqa: E501
                                                        local_var_params['title'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `title` when calling `notification_send`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tousers' in local_var_params and local_var_params['tousers'] is not None:  # noqa: E501
            query_params.append(('tousers', local_var_params['tousers']))  # noqa: E501
        if 'togroups' in local_var_params and local_var_params['togroups'] is not None:  # noqa: E501
            query_params.append(('togroups', local_var_params['togroups']))  # noqa: E501
        if 'emailenabled' in local_var_params and local_var_params['emailenabled'] is not None:  # noqa: E501
            query_params.append(('emailenabled', local_var_params['emailenabled']))  # noqa: E501
        if 'onscreenenabled' in local_var_params and local_var_params['onscreenenabled'] is not None:  # noqa: E501
            query_params.append(('onscreenenabled', local_var_params['onscreenenabled']))  # noqa: E501
        if 'smsenabled' in local_var_params and local_var_params['smsenabled'] is not None:  # noqa: E501
            query_params.append(('smsenabled', local_var_params['smsenabled']))  # noqa: E501
        if 'title' in local_var_params and local_var_params['title'] is not None:  # noqa: E501
            query_params.append(('title', local_var_params['title']))  # noqa: E501
        if 'onscreenbody' in local_var_params and local_var_params['onscreenbody'] is not None:  # noqa: E501
            query_params.append(('onscreenbody', local_var_params['onscreenbody']))  # noqa: E501
        if 'onscreenclick' in local_var_params and local_var_params['onscreenclick'] is not None:  # noqa: E501
            query_params.append(('onscreenclick', local_var_params['onscreenclick']))  # noqa: E501
        if 'onscreenurl' in local_var_params and local_var_params['onscreenurl'] is not None:  # noqa: E501
            query_params.append(('onscreenurl', local_var_params['onscreenurl']))  # noqa: E501
        if 'onscreenclass' in local_var_params and local_var_params['onscreenclass'] is not None:  # noqa: E501
            query_params.append(('onscreenclass', local_var_params['onscreenclass']))  # noqa: E501
        if 'onscreenduration' in local_var_params and local_var_params['onscreenduration'] is not None:  # noqa: E501
            query_params.append(('onscreenduration', local_var_params['onscreenduration']))  # noqa: E501
        if 'showonstation' in local_var_params and local_var_params['showonstation'] is not None:  # noqa: E501
            query_params.append(('showonstation', local_var_params['showonstation']))  # noqa: E501
        if 'emailfromname' in local_var_params and local_var_params['emailfromname'] is not None:  # noqa: E501
            query_params.append(('emailfromname', local_var_params['emailfromname']))  # noqa: E501
        if 'emailfrom' in local_var_params and local_var_params['emailfrom'] is not None:  # noqa: E501
            query_params.append(('emailfrom', local_var_params['emailfrom']))  # noqa: E501
        if 'emailsubject' in local_var_params and local_var_params['emailsubject'] is not None:  # noqa: E501
            query_params.append(('emailsubject', local_var_params['emailsubject']))  # noqa: E501
        if 'emailbody' in local_var_params and local_var_params['emailbody'] is not None:  # noqa: E501
            query_params.append(('emailbody', local_var_params['emailbody']))  # noqa: E501
        if 'textmessagebody' in local_var_params and local_var_params['textmessagebody'] is not None:  # noqa: E501
            query_params.append(('textmessagebody', local_var_params['textmessagebody']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/notification/send', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_sendonscreen(self, notification, **kwargs):  # noqa: E501
        """Send on-screen notifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_sendonscreen(notification, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str notification: The ID of the notification to send. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.notification_sendonscreen_with_http_info(notification, **kwargs)  # noqa: E501

    def notification_sendonscreen_with_http_info(self, notification, **kwargs):  # noqa: E501
        """Send on-screen notifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_sendonscreen_with_http_info(notification, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str notification: The ID of the notification to send. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'notification'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_sendonscreen" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'notification' is set
        if self.api_client.client_side_validation and ('notification' not in local_var_params or  # noqa: E501
                                                        local_var_params['notification'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `notification` when calling `notification_sendonscreen`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'notification' in local_var_params and local_var_params['notification'] is not None:  # noqa: E501
            query_params.append(('notification', local_var_params['notification']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/notification/sendonscreen', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
