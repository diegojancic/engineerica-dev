/*
 * AccuTraining OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for userChangepwd
     * @param oldpass The old password of the authenticated user. (required)
     * @param newpass The new password of the authenticated user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userChangepwdCall(UUID oldpass, UUID newpass, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/changepwd";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (oldpass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oldpass", oldpass));
        }

        if (newpass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newpass", newpass));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userChangepwdValidateBeforeCall(UUID oldpass, UUID newpass, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'oldpass' is set
        if (oldpass == null) {
            throw new ApiException("Missing the required parameter 'oldpass' when calling userChangepwd(Async)");
        }
        
        // verify the required parameter 'newpass' is set
        if (newpass == null) {
            throw new ApiException("Missing the required parameter 'newpass' when calling userChangepwd(Async)");
        }
        

        okhttp3.Call localVarCall = userChangepwdCall(oldpass, newpass, _callback);
        return localVarCall;

    }

    /**
     * Change user&#39;s own password
     * Allows the user to change their own password.
     * @param oldpass The old password of the authenticated user. (required)
     * @param newpass The new password of the authenticated user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userChangepwd(UUID oldpass, UUID newpass) throws ApiException {
        userChangepwdWithHttpInfo(oldpass, newpass);
    }

    /**
     * Change user&#39;s own password
     * Allows the user to change their own password.
     * @param oldpass The old password of the authenticated user. (required)
     * @param newpass The new password of the authenticated user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userChangepwdWithHttpInfo(UUID oldpass, UUID newpass) throws ApiException {
        okhttp3.Call localVarCall = userChangepwdValidateBeforeCall(oldpass, newpass, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change user&#39;s own password (asynchronously)
     * Allows the user to change their own password.
     * @param oldpass The old password of the authenticated user. (required)
     * @param newpass The new password of the authenticated user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userChangepwdAsync(UUID oldpass, UUID newpass, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userChangepwdValidateBeforeCall(oldpass, newpass, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userChangepwdbyreq
     * @param changereq The change password request ID sent by email to the user. (required)
     * @param newpass The new password of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userChangepwdbyreqCall(String changereq, String newpass, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/changepwdbyreq";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (changereq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changereq", changereq));
        }

        if (newpass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newpass", newpass));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userChangepwdbyreqValidateBeforeCall(String changereq, String newpass, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'changereq' is set
        if (changereq == null) {
            throw new ApiException("Missing the required parameter 'changereq' when calling userChangepwdbyreq(Async)");
        }
        
        // verify the required parameter 'newpass' is set
        if (newpass == null) {
            throw new ApiException("Missing the required parameter 'newpass' when calling userChangepwdbyreq(Async)");
        }
        

        okhttp3.Call localVarCall = userChangepwdbyreqCall(changereq, newpass, _callback);
        return localVarCall;

    }

    /**
     * Changes the user password using a change password request id
     * 
     * @param changereq The change password request ID sent by email to the user. (required)
     * @param newpass The new password of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userChangepwdbyreq(String changereq, String newpass) throws ApiException {
        userChangepwdbyreqWithHttpInfo(changereq, newpass);
    }

    /**
     * Changes the user password using a change password request id
     * 
     * @param changereq The change password request ID sent by email to the user. (required)
     * @param newpass The new password of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userChangepwdbyreqWithHttpInfo(String changereq, String newpass) throws ApiException {
        okhttp3.Call localVarCall = userChangepwdbyreqValidateBeforeCall(changereq, newpass, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Changes the user password using a change password request id (asynchronously)
     * 
     * @param changereq The change password request ID sent by email to the user. (required)
     * @param newpass The new password of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userChangepwdbyreqAsync(String changereq, String newpass, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userChangepwdbyreqValidateBeforeCall(changereq, newpass, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userDelete
     * @param id The id of the user to delete. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userDeleteCall(UUID id, oas_any_type_not_mapped body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userDeleteValidateBeforeCall(UUID id, oas_any_type_not_mapped body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userDelete(Async)");
        }
        

        okhttp3.Call localVarCall = userDeleteCall(id, body, _callback);
        return localVarCall;

    }

    /**
     * Delete a user
     * Allows the user to delete a user.
     * @param id The id of the user to delete. (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userDelete(UUID id, oas_any_type_not_mapped body) throws ApiException {
        userDeleteWithHttpInfo(id, body);
    }

    /**
     * Delete a user
     * Allows the user to delete a user.
     * @param id The id of the user to delete. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userDeleteWithHttpInfo(UUID id, oas_any_type_not_mapped body) throws ApiException {
        okhttp3.Call localVarCall = userDeleteValidateBeforeCall(id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a user (asynchronously)
     * Allows the user to delete a user.
     * @param id The id of the user to delete. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userDeleteAsync(UUID id, oas_any_type_not_mapped body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userDeleteValidateBeforeCall(id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userFindsimilar
     * @param currentid The id of the current user. (optional)
     * @param phonenumber A phone number to search for similar users. (optional)
     * @param cardnumber A card number to search for similar users. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userFindsimilarCall(UUID currentid, String phonenumber, String cardnumber, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/findsimilar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currentid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentid", currentid));
        }

        if (phonenumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phonenumber", phonenumber));
        }

        if (cardnumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cardnumber", cardnumber));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userFindsimilarValidateBeforeCall(UUID currentid, String phonenumber, String cardnumber, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = userFindsimilarCall(currentid, phonenumber, cardnumber, _callback);
        return localVarCall;

    }

    /**
     * Finds similar users to prevent duplicates
     * Allows the user to be warned if a user they are creating has the same card number as another user.
     * @param currentid The id of the current user. (optional)
     * @param phonenumber A phone number to search for similar users. (optional)
     * @param cardnumber A card number to search for similar users. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userFindsimilar(UUID currentid, String phonenumber, String cardnumber) throws ApiException {
        userFindsimilarWithHttpInfo(currentid, phonenumber, cardnumber);
    }

    /**
     * Finds similar users to prevent duplicates
     * Allows the user to be warned if a user they are creating has the same card number as another user.
     * @param currentid The id of the current user. (optional)
     * @param phonenumber A phone number to search for similar users. (optional)
     * @param cardnumber A card number to search for similar users. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userFindsimilarWithHttpInfo(UUID currentid, String phonenumber, String cardnumber) throws ApiException {
        okhttp3.Call localVarCall = userFindsimilarValidateBeforeCall(currentid, phonenumber, cardnumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Finds similar users to prevent duplicates (asynchronously)
     * Allows the user to be warned if a user they are creating has the same card number as another user.
     * @param currentid The id of the current user. (optional)
     * @param phonenumber A phone number to search for similar users. (optional)
     * @param cardnumber A card number to search for similar users. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userFindsimilarAsync(UUID currentid, String phonenumber, String cardnumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userFindsimilarValidateBeforeCall(currentid, phonenumber, cardnumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGet
     * @param id The id of the user to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetCall(UUID id, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetValidateBeforeCall(UUID id, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userGet(Async)");
        }
        

        okhttp3.Call localVarCall = userGetCall(id, photosize, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of a user
     * Allows the user to search and view a user and their details.
     * @param id The id of the user to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userGet(UUID id, Integer photosize) throws ApiException {
        userGetWithHttpInfo(id, photosize);
    }

    /**
     * Search and view details of a user
     * Allows the user to search and view a user and their details.
     * @param id The id of the user to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userGetWithHttpInfo(UUID id, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = userGetValidateBeforeCall(id, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of a user (asynchronously)
     * Allows the user to search and view a user and their details.
     * @param id The id of the user to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetAsync(UUID id, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetValidateBeforeCall(id, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGetbycard
     * @param card The card number of the user to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetbycardCall(String card, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/getbycard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (card != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card", card));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetbycardValidateBeforeCall(String card, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'card' is set
        if (card == null) {
            throw new ApiException("Missing the required parameter 'card' when calling userGetbycard(Async)");
        }
        

        okhttp3.Call localVarCall = userGetbycardCall(card, photosize, _callback);
        return localVarCall;

    }

    /**
     * Search user by card number
     * Allows the user to search for a user by their card number.
     * @param card The card number of the user to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userGetbycard(String card, Integer photosize) throws ApiException {
        userGetbycardWithHttpInfo(card, photosize);
    }

    /**
     * Search user by card number
     * Allows the user to search for a user by their card number.
     * @param card The card number of the user to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userGetbycardWithHttpInfo(String card, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = userGetbycardValidateBeforeCall(card, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search user by card number (asynchronously)
     * Allows the user to search for a user by their card number.
     * @param card The card number of the user to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetbycardAsync(String card, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetbycardValidateBeforeCall(card, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userList
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param roleid The id of the role to filter users by, or empty to return all users. (optional)
     * @param onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListCall(Integer from, Integer count, UUID roleid, String onlywithoutcard, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (roleid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roleid", roleid));
        }

        if (onlywithoutcard != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlywithoutcard", onlywithoutcard));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userListValidateBeforeCall(Integer from, Integer count, UUID roleid, String onlywithoutcard, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling userList(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling userList(Async)");
        }
        

        okhttp3.Call localVarCall = userListCall(from, count, roleid, onlywithoutcard, photosize, _callback);
        return localVarCall;

    }

    /**
     * View a list of users
     * Allows the user to view the full list of users and is based on role permissions.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param roleid The id of the role to filter users by, or empty to return all users. (optional)
     * @param onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userList(Integer from, Integer count, UUID roleid, String onlywithoutcard, Integer photosize) throws ApiException {
        userListWithHttpInfo(from, count, roleid, onlywithoutcard, photosize);
    }

    /**
     * View a list of users
     * Allows the user to view the full list of users and is based on role permissions.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param roleid The id of the role to filter users by, or empty to return all users. (optional)
     * @param onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userListWithHttpInfo(Integer from, Integer count, UUID roleid, String onlywithoutcard, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = userListValidateBeforeCall(from, count, roleid, onlywithoutcard, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of users (asynchronously)
     * Allows the user to view the full list of users and is based on role permissions.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param roleid The id of the role to filter users by, or empty to return all users. (optional)
     * @param onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListAsync(Integer from, Integer count, UUID roleid, String onlywithoutcard, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userListValidateBeforeCall(from, count, roleid, onlywithoutcard, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userLoadphoto
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @param userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;. (optional)
     * @param automatch Set this to true to find the specific user based on the file name.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userLoadphotoCall(String upload, String filename, UUID userid, Boolean automatch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/loadphoto";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (upload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload", upload));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (automatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("automatch", automatch));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userLoadphotoValidateBeforeCall(String upload, String filename, UUID userid, Boolean automatch, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'upload' is set
        if (upload == null) {
            throw new ApiException("Missing the required parameter 'upload' when calling userLoadphoto(Async)");
        }
        

        okhttp3.Call localVarCall = userLoadphotoCall(upload, filename, userid, automatch, _callback);
        return localVarCall;

    }

    /**
     * Upload a photo for a specific user
     * Allows the user to upload a photo for a user.
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @param userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;. (optional)
     * @param automatch Set this to true to find the specific user based on the file name.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userLoadphoto(String upload, String filename, UUID userid, Boolean automatch) throws ApiException {
        userLoadphotoWithHttpInfo(upload, filename, userid, automatch);
    }

    /**
     * Upload a photo for a specific user
     * Allows the user to upload a photo for a user.
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @param userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;. (optional)
     * @param automatch Set this to true to find the specific user based on the file name.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userLoadphotoWithHttpInfo(String upload, String filename, UUID userid, Boolean automatch) throws ApiException {
        okhttp3.Call localVarCall = userLoadphotoValidateBeforeCall(upload, filename, userid, automatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload a photo for a specific user (asynchronously)
     * Allows the user to upload a photo for a user.
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @param userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;. (optional)
     * @param automatch Set this to true to find the specific user based on the file name.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userLoadphotoAsync(String upload, String filename, UUID userid, Boolean automatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userLoadphotoValidateBeforeCall(upload, filename, userid, automatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userMovedata
     * @param source The id of the user that is the source of the data. (required)
     * @param destination The id of the user that is the destination of the data. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userMovedataCall(UUID source, UUID destination, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/movedata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (destination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination", destination));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userMovedataValidateBeforeCall(UUID source, UUID destination, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling userMovedata(Async)");
        }
        
        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling userMovedata(Async)");
        }
        

        okhttp3.Call localVarCall = userMovedataCall(source, destination, _callback);
        return localVarCall;

    }

    /**
     * Move data between users
     * Allows administrators to move data between users.
     * @param source The id of the user that is the source of the data. (required)
     * @param destination The id of the user that is the destination of the data. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userMovedata(UUID source, UUID destination) throws ApiException {
        userMovedataWithHttpInfo(source, destination);
    }

    /**
     * Move data between users
     * Allows administrators to move data between users.
     * @param source The id of the user that is the source of the data. (required)
     * @param destination The id of the user that is the destination of the data. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userMovedataWithHttpInfo(UUID source, UUID destination) throws ApiException {
        okhttp3.Call localVarCall = userMovedataValidateBeforeCall(source, destination, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Move data between users (asynchronously)
     * Allows administrators to move data between users.
     * @param source The id of the user that is the source of the data. (required)
     * @param destination The id of the user that is the destination of the data. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userMovedataAsync(UUID source, UUID destination, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userMovedataValidateBeforeCall(source, destination, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userRequestpwdchange
     * @param domain The domain of the account where the user exists. (required)
     * @param email The email of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userRequestpwdchangeCall(String domain, String email, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/requestpwdchange";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userRequestpwdchangeValidateBeforeCall(String domain, String email, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling userRequestpwdchange(Async)");
        }
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling userRequestpwdchange(Async)");
        }
        

        okhttp3.Call localVarCall = userRequestpwdchangeCall(domain, email, _callback);
        return localVarCall;

    }

    /**
     * Requests a password change
     * 
     * @param domain The domain of the account where the user exists. (required)
     * @param email The email of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userRequestpwdchange(String domain, String email) throws ApiException {
        userRequestpwdchangeWithHttpInfo(domain, email);
    }

    /**
     * Requests a password change
     * 
     * @param domain The domain of the account where the user exists. (required)
     * @param email The email of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userRequestpwdchangeWithHttpInfo(String domain, String email) throws ApiException {
        okhttp3.Call localVarCall = userRequestpwdchangeValidateBeforeCall(domain, email, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Requests a password change (asynchronously)
     * 
     * @param domain The domain of the account where the user exists. (required)
     * @param email The email of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userRequestpwdchangeAsync(String domain, String email, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userRequestpwdchangeValidateBeforeCall(domain, email, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userSave
     * @param id The id of the user to save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSaveCall(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/user/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSaveValidateBeforeCall(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userSave(Async)");
        }
        

        okhttp3.Call localVarCall = userSaveCall(id, UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a user
     * Allows the user to create or edit a user.
     * @param id The id of the user to save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userSave(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        userSaveWithHttpInfo(id, UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a user
     * Allows the user to create or edit a user.
     * @param id The id of the user to save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userSaveWithHttpInfo(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = userSaveValidateBeforeCall(id, UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a user (asynchronously)
     * Allows the user to create or edit a user.
     * @param id The id of the user to save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSaveAsync(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSaveValidateBeforeCall(id, UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userSavepwdchange
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSavepwdchangeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/user/savepwdchange";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSavepwdchangeValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = userSavepwdchangeCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Send email to the specified user(s) to set/change their passwords
     * Allows the user to trigger an email to another user asking them to set or change their password.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userSavepwdchange(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        userSavepwdchangeWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Send email to the specified user(s) to set/change their passwords
     * Allows the user to trigger an email to another user asking them to set or change their password.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userSavepwdchangeWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = userSavepwdchangeValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send email to the specified user(s) to set/change their passwords (asynchronously)
     * Allows the user to trigger an email to another user asking them to set or change their password.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSavepwdchangeAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSavepwdchangeValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
