/*
 * AccuTraining OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportApi {
    private ApiClient localVarApiClient;

    public ReportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for reportList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportListCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = reportListCall(_callback);
        return localVarCall;

    }

    /**
     * View a list of available reports
     * Allows the user to view the complete list of available, canned reports.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void reportList() throws ApiException {
        reportListWithHttpInfo();
    }

    /**
     * View a list of available reports
     * Allows the user to view the complete list of available, canned reports.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reportListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = reportListValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of available reports (asynchronously)
     * Allows the user to view the complete list of available, canned reports.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportListAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportListValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportPermissionsbyuser
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportPermissionsbyuserCall(String params, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/permissionsbyuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportPermissionsbyuserValidateBeforeCall(String params, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = reportPermissionsbyuserCall(params, _callback);
        return localVarCall;

    }

    /**
     * Permissions by user report
     * Lists all the users in the system including their corresponding permissions.
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void reportPermissionsbyuser(String params) throws ApiException {
        reportPermissionsbyuserWithHttpInfo(params);
    }

    /**
     * Permissions by user report
     * Lists all the users in the system including their corresponding permissions.
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reportPermissionsbyuserWithHttpInfo(String params) throws ApiException {
        okhttp3.Call localVarCall = reportPermissionsbyuserValidateBeforeCall(params, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Permissions by user report (asynchronously)
     * Lists all the users in the system including their corresponding permissions.
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportPermissionsbyuserAsync(String params, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportPermissionsbyuserValidateBeforeCall(params, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportPrepare
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param repformat The format of the resulting report. Json, pdf, csv, ... (optional)
     * @param fillgroupid If specified, the result is used to fill the group with the given ID (optional)
     * @param groupby How to group the records. In the format &#39;col1+col2|col3+col4 (optional)
     * @param refreshgroup The ID of the group to check (and refresh) before processing the report. (optional)
     * @param filtertext The user friendly text of the applied filters. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportPrepareCall(String reportname, String params, String repformat, UUID fillgroupid, String groupby, UUID refreshgroup, String filtertext, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/prepare";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (reportname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reportname", reportname));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (repformat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("repformat", repformat));
        }

        if (fillgroupid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillgroupid", fillgroupid));
        }

        if (groupby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupby", groupby));
        }

        if (refreshgroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refreshgroup", refreshgroup));
        }

        if (filtertext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filtertext", filtertext));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportPrepareValidateBeforeCall(String reportname, String params, String repformat, UUID fillgroupid, String groupby, UUID refreshgroup, String filtertext, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reportname' is set
        if (reportname == null) {
            throw new ApiException("Missing the required parameter 'reportname' when calling reportPrepare(Async)");
        }
        

        okhttp3.Call localVarCall = reportPrepareCall(reportname, params, repformat, fillgroupid, groupby, refreshgroup, filtertext, _callback);
        return localVarCall;

    }

    /**
     * Queries and loads the specified report, in background.
     * Allows the user to run reports, in background, with the exception of attendance analytics reports.
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param repformat The format of the resulting report. Json, pdf, csv, ... (optional)
     * @param fillgroupid If specified, the result is used to fill the group with the given ID (optional)
     * @param groupby How to group the records. In the format &#39;col1+col2|col3+col4 (optional)
     * @param refreshgroup The ID of the group to check (and refresh) before processing the report. (optional)
     * @param filtertext The user friendly text of the applied filters. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void reportPrepare(String reportname, String params, String repformat, UUID fillgroupid, String groupby, UUID refreshgroup, String filtertext) throws ApiException {
        reportPrepareWithHttpInfo(reportname, params, repformat, fillgroupid, groupby, refreshgroup, filtertext);
    }

    /**
     * Queries and loads the specified report, in background.
     * Allows the user to run reports, in background, with the exception of attendance analytics reports.
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param repformat The format of the resulting report. Json, pdf, csv, ... (optional)
     * @param fillgroupid If specified, the result is used to fill the group with the given ID (optional)
     * @param groupby How to group the records. In the format &#39;col1+col2|col3+col4 (optional)
     * @param refreshgroup The ID of the group to check (and refresh) before processing the report. (optional)
     * @param filtertext The user friendly text of the applied filters. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reportPrepareWithHttpInfo(String reportname, String params, String repformat, UUID fillgroupid, String groupby, UUID refreshgroup, String filtertext) throws ApiException {
        okhttp3.Call localVarCall = reportPrepareValidateBeforeCall(reportname, params, repformat, fillgroupid, groupby, refreshgroup, filtertext, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Queries and loads the specified report, in background. (asynchronously)
     * Allows the user to run reports, in background, with the exception of attendance analytics reports.
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param repformat The format of the resulting report. Json, pdf, csv, ... (optional)
     * @param fillgroupid If specified, the result is used to fill the group with the given ID (optional)
     * @param groupby How to group the records. In the format &#39;col1+col2|col3+col4 (optional)
     * @param refreshgroup The ID of the group to check (and refresh) before processing the report. (optional)
     * @param filtertext The user friendly text of the applied filters. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportPrepareAsync(String reportname, String params, String repformat, UUID fillgroupid, String groupby, UUID refreshgroup, String filtertext, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportPrepareValidateBeforeCall(reportname, params, repformat, fillgroupid, groupby, refreshgroup, filtertext, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportQuery
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportQueryCall(String reportname, String params, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (reportname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reportname", reportname));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportQueryValidateBeforeCall(String reportname, String params, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reportname' is set
        if (reportname == null) {
            throw new ApiException("Missing the required parameter 'reportname' when calling reportQuery(Async)");
        }
        

        okhttp3.Call localVarCall = reportQueryCall(reportname, params, _callback);
        return localVarCall;

    }

    /**
     * Query and load a specified report
     * Allows the user to run reports with the exception of attendance analytics reports.
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void reportQuery(String reportname, String params) throws ApiException {
        reportQueryWithHttpInfo(reportname, params);
    }

    /**
     * Query and load a specified report
     * Allows the user to run reports with the exception of attendance analytics reports.
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reportQueryWithHttpInfo(String reportname, String params) throws ApiException {
        okhttp3.Call localVarCall = reportQueryValidateBeforeCall(reportname, params, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Query and load a specified report (asynchronously)
     * Allows the user to run reports with the exception of attendance analytics reports.
     * @param reportname The name of the report to execute (required)
     * @param params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportQueryAsync(String reportname, String params, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportQueryValidateBeforeCall(reportname, params, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
