/*
 * AccuCampus OpenAPI 3 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Remove an action item from an action plan
     *
     * Allows a user to remove an action item from a user&#39;s action plan.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.actionassignmentdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of an action item assigned to a user
     *
     * Allows the user to view an individual action item and its details, minus all the action item&#39;s updates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.actionassignmentget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of action items in a user&#39;s plan
     *
     * Allows the user to view the list of all action items for a specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        Integer assignee = null;
        Integer status = null;
        api.actionassignmentlist(token, from, count, assignee, status);

        // TODO: test validations
    }
    
    /**
     * View the history of an action item assigned to a user
     *
     * Allows the user to view an individual action plan and its details, including all the action plan&#39;s updates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentlisthistoryTest() throws ApiException {
        String token = null;
        UUID actionassignment = null;
        api.actionassignmentlisthistory(token, actionassignment);

        // TODO: test validations
    }
    
    /**
     * List public action assignments assigned to the logged user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentlistmineTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        Integer status = null;
        api.actionassignmentlistmine(token, from, count, status);

        // TODO: test validations
    }
    
    /**
     * List public action assignment history
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentlistpublichistoryTest() throws ApiException {
        String token = null;
        UUID actionassignment = null;
        api.actionassignmentlistpublichistory(token, actionassignment);

        // TODO: test validations
    }
    
    /**
     * Bulk complete action items
     *
     * Allows the user to bulk complete action items.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentmarkcompleteTest() throws ApiException {
        String token = null;
        String item = null;
        UUID assignee = null;
        UUID group = null;
        String notes = null;
        api.actionassignmentmarkcomplete(token, item, assignee, group, notes);

        // TODO: test validations
    }
    
    /**
     * Add an action item to a user&#39;s action plan
     *
     * Allows the user to edit or assign an action item to a user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.actionassignmentsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Update an action item assigned to a user
     *
     * Allows the user to update or mark an action item as complete.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentsavehistoryTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.actionassignmentsavehistory(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete an action item
     *
     * Allows the user to delete an action item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionitemdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.actionitemdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of an action item
     *
     * Allows the user to view an individual action item and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionitemgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.actionitemget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of action items
     *
     * Allows the user to view a list of action items
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionitemlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.actionitemlist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Create or edit an action item
     *
     * Allows the user to edit an action item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionitemsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.actionitemsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * View a list of users action logs
     *
     * Allows the user to view the audit logs for the account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionloglistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        UUID user = null;
        OffsetDateTime startdate = null;
        OffsetDateTime enddate = null;
        String resource = null;
        String actionfilter = null;
        String argument = null;
        api.actionloglist(token, from, count, user, startdate, enddate, resource, actionfilter, argument);

        // TODO: test validations
    }
    
    /**
     * Assign an action item pack to a user
     *
     * Allows the user to assign an action pack to a user or group of users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionpackassignTest() throws ApiException {
        String token = null;
        UUID pack = null;
        Boolean itemsdata = null;
        UUID assignee = null;
        UUID group = null;
        String notes = null;
        api.actionpackassign(token, pack, itemsdata, assignee, group, notes);

        // TODO: test validations
    }
    
    /**
     * Delete an action item pack
     *
     * Allows the user to delete an action item pack.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionpackdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.actionpackdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of an action item pack
     *
     * Allows the user to view an individual action pack and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionpackgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.actionpackget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of action item packs
     *
     * Allows the user to view the full list of action item packs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionpacklistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.actionpacklist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Create or edit an action item pack
     *
     * Allows the user to edit an action item pack.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionpacksaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.actionpacksave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete an action item type
     *
     * Allows the user to delete an action item type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actiontypedeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.actiontypedelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of an action item type
     *
     * Allows the user to view an individual action item type and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actiontypegetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.actiontypeget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of action item types
     *
     * Allows the user to view the full list of action item types.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actiontypelistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.actiontypelist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Create or edit an action item type
     *
     * Allows the user to dit an action item type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actiontypesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.actiontypesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Adds the missing permissions to a role. Requires access to advrole.save
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advroleaddmissingTest() throws ApiException {
        String token = null;
        String roles = null;
        String permissions = null;
        api.advroleaddmissing(token, roles, permissions);

        // TODO: test validations
    }
    
    /**
     * Checks the permissions are assigned for the given roles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolecheckpermTest() throws ApiException {
        String token = null;
        String roles = null;
        String permissions = null;
        api.advrolecheckperm(token, roles, permissions);

        // TODO: test validations
    }
    
    /**
     * Delete a role
     *
     * Allows the user to delete a role from the list of available roles.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advroledeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.advroledelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Delete a role mapping
     *
     * Allows the user to delete a role from its mapped categories on the &#39;Role Mapping&#39; page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advroledeletemappingTest() throws ApiException {
        String token = null;
        String map = null;
        UUID roleid = null;
        api.advroledeletemapping(token, map, roleid);

        // TODO: test validations
    }
    
    /**
     * View details of a role
     *
     * Allows the user to view a role and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolegetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.advroleget(token, id);

        // TODO: test validations
    }
    
    /**
     * Lists the roles for the current account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolelistTest() throws ApiException {
        String token = null;
        Boolean includepolicies = null;
        Boolean includeinternal = null;
        String name = null;
        api.advrolelist(token, includepolicies, includeinternal, name);

        // TODO: test validations
    }
    
    /**
     * Lists the maps a roles is mapped to
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolelistmapsTest() throws ApiException {
        String token = null;
        UUID roleid = null;
        api.advrolelistmaps(token, roleid);

        // TODO: test validations
    }
    
    /**
     * Lists the roles mappings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolelistrolesmappedTest() throws ApiException {
        String token = null;
        String map = null;
        api.advrolelistrolesmapped(token, map);

        // TODO: test validations
    }
    
    /**
     * View a list of role templates
     *
     * Allows the user to view the full list of available role templates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolelisttemplatesTest() throws ApiException {
        String token = null;
        api.advrolelisttemplates(token);

        // TODO: test validations
    }
    
    /**
     * Create or edit a role
     *
     * Allows the user to create or edit a role&#39;s permissions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.advrolesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Saves a role mapping
     *
     * Allows the user to add a role to a mapped category on the &#39;Role Mapping&#39; page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolesavemappingTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.advrolesavemapping(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * List users. Alias to user.list, use that one instead.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolesuserlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        UUID roleid = null;
        String onlywithoutcard = null;
        Integer photosize = null;
        api.advrolesuserlist(token, from, count, roleid, onlywithoutcard, photosize);

        // TODO: test validations
    }
    
    /**
     * Upgrade a user to another role (requires permission to edit those roles)
     *
     * Allow the user to add a role to another user, given that he has access to view that other user and edit people with that new role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advroleuserupgradeTest() throws ApiException {
        String token = null;
        UUID userid = null;
        UUID roleid = null;
        api.advroleuserupgrade(token, userid, roleid);

        // TODO: test validations
    }
    
    /**
     * Gets the phone number of the current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appsharegetphoneTest() throws ApiException {
        String token = null;
        api.appsharegetphone(token);

        // TODO: test validations
    }
    
    /**
     * Sends an SMS with the link to the app
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appsharesendtextTest() throws ApiException {
        String token = null;
        String phonenumber = null;
        api.appsharesendtext(token, phonenumber);

        // TODO: test validations
    }
    
    /**
     * Delete a comment on an attendance log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancelogcommentdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.attendancelogcommentdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View a comment on an attendance log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancelogcommentgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.attendancelogcommentget(token, id);

        // TODO: test validations
    }
    
    /**
     * View all the comments on a specific attendance log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancelogcommentlistTest() throws ApiException {
        UUID attendancelog = null;
        String token = null;
        api.attendancelogcommentlist(attendancelog, token);

        // TODO: test validations
    }
    
    /**
     * Save a comment on an attendance log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancelogcommentsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.attendancelogcommentsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete an attendance log
     *
     * Allows the user to delete an existing attendance log.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancelogdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.attendancelogdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of an attendance log
     *
     * Allows the user to view an individual attendance log and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendanceloggetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.attendancelogget(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of an attendance log&#39;s swipe history
     *
     * Allows the user to view the swipes of an individual attendance logs (sign ins and sign outs).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendanceloggetchangehistoryTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.attendanceloggetchangehistory(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of attendance logs
     *
     * Allows the user to view the list of all attendance logs in the location or locations in which the user is scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendanceloglistTest() throws ApiException {
        Integer from = null;
        Integer count = null;
        String token = null;
        String filter = null;
        UUID userid = null;
        api.attendanceloglist(from, count, token, filter, userid);

        // TODO: test validations
    }
    
    /**
     * Gets the attendance logs of the current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendanceloglistmineTest() throws ApiException {
        Integer from = null;
        Integer count = null;
        String token = null;
        String filter = null;
        api.attendanceloglistmine(from, count, token, filter);

        // TODO: test validations
    }
    
    /**
     * Create or edit an attendance log
     *
     * Allows the user to create or edit an attendance log.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancelogsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.attendancelogsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Sign out an attendance log
     *
     * Allows the user to sign out am attendance log from the Who&#39;s In page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancelogsignoutTest() throws ApiException {
        String token = null;
        UUID id = null;
        UUID location = null;
        UUID event = null;
        OffsetDateTime datetime = null;
        api.attendancelogsignout(token, id, location, event, datetime);

        // TODO: test validations
    }
    
    /**
     * View who&#39;s in a location
     *
     * Allows the user to view the Who&#39;s In page and view all users who are logged into locations in which the user is scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancelogwhosinTest() throws ApiException {
        Integer from = null;
        Integer count = null;
        String token = null;
        UUID location = null;
        UUID event = null;
        String sorting = null;
        String roles = null;
        Integer photosize = null;
        String extensions = null;
        Boolean export = null;
        api.attendancelogwhosin(from, count, token, location, event, sorting, roles, photosize, extensions, export);

        // TODO: test validations
    }
    
    /**
     * Get background job status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bgjobgetstatusTest() throws ApiException {
        String token = null;
        UUID jobid = null;
        String jobtype = null;
        api.bgjobgetstatus(token, jobid, jobtype);

        // TODO: test validations
    }
    
    /**
     * Import data into AccuCampus
     *
     * Allows the user to import data into AccuCampus via CSV or flat files either manually or automatically using the import utility.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void callImportTest() throws ApiException {
        String token = null;
        String importtype = null;
        String upload = null;
        String filename = null;
        String parameters = null;
        api.callImport(token, importtype, upload, filename, parameters);

        // TODO: test validations
    }
    
    /**
     * Gets a captcha challenge that the user must complete to do certain requests.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void captchagetchallengeTest() throws ApiException {
        api.captchagetchallenge();

        // TODO: test validations
    }
    
    /**
     * Gets a captcha image that the user must complete to do certain requests.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void captchagetimageTest() throws ApiException {
        String captchatoken = null;
        api.captchagetimage(captchatoken);

        // TODO: test validations
    }
    
    /**
     * Get the application change log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changelogTest() throws ApiException {
        String token = null;
        api.changelog(token);

        // TODO: test validations
    }
    
    /**
     * Get client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientgetTest() throws ApiException {
        String token = null;
        String client = null;
        String clientname = null;
        api.clientget(token, client, clientname);

        // TODO: test validations
    }
    
    /**
     * Gets the clients of the specified conference
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.clientlist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Saves a client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.clientsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Send a message to a client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientsendmessageTest() throws ApiException {
        String token = null;
        UUID uniqueclientid = null;
        String message = null;
        api.clientsendmessage(token, uniqueclientid, message);

        // TODO: test validations
    }
    
    /**
     * Delete a college department
     *
     * Allows the user to delete an existing college department.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void departmentdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.departmentdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a college department
     *
     * Allows the user to view an individual college department and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void departmentgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.departmentget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of college departments
     *
     * Allows the user to view the full list of college departments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void departmentlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.departmentlist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Create or edit a college department
     *
     * Allows the user to create or edit a college department.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void departmentsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.departmentsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Get the documentation
     *
     * Retrieves the list of actions available in the system.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void docTest() throws ApiException {
        Boolean excludeanonymous = null;
        api.doc(excludeanonymous);

        // TODO: test validations
    }
    
    /**
     * Adds background image for the login
     *
     * Allows the user to set the background image that all users will see when logging into an AccuCampus account not using SSO.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void easyloginaddbgimageTest() throws ApiException {
        String token = null;
        String upload = null;
        String filename = null;
        api.easyloginaddbgimage(token, upload, filename);

        // TODO: test validations
    }
    
    /**
     * Delete a course
     *
     * Allows the user to delete an existing course.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.eventdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a course
     *
     * Allows the user to view an individual course and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.eventget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of courses by date
     *
     * Allows the user to view a list of courses by date.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventgetsessionsbydateTest() throws ApiException {
        String token = null;
        UUID location = null;
        OffsetDateTime date = null;
        String type = null;
        api.eventgetsessionsbydate(token, location, date, type);

        // TODO: test validations
    }
    
    /**
     * View a list of courses
     *
     * Allows the user to view the full list of courses.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventlistTest() throws ApiException {
        String token = null;
        String from = null;
        String count = null;
        Boolean summaryonly = null;
        UUID termid = null;
        api.eventlist(token, from, count, summaryonly, termid);

        // TODO: test validations
    }
    
    /**
     * Create or edit a course
     *
     * Allows the user to create or edit a course.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.eventsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Searches for the available event groups
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventsearchgroupTest() throws ApiException {
        String token = null;
        UUID query = null;
        api.eventsearchgroup(token, query);

        // TODO: test validations
    }
    
    /**
     * Export AccuCampus data
     *
     * Allows the user to export data from AccuCampus into a CSV, HTML, or Excel format.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportTest() throws ApiException {
        String token = null;
        String exporttype = null;
        String exportformat = null;
        String filters = null;
        api.export(token, exporttype, exportformat, filters);

        // TODO: test validations
    }
    
    /**
     * Lists available export types
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportlisttypesTest() throws ApiException {
        String token = null;
        api.exportlisttypes(token);

        // TODO: test validations
    }
    
    /**
     * Lists the available features.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void featurelistTest() throws ApiException {
        String token = null;
        api.featurelist(token);

        // TODO: test validations
    }
    
    /**
     * View a list of entered holidays
     *
     * Allows the user to view all holidays entered.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void holidaylistTest() throws ApiException {
        String token = null;
        UUID term = null;
        api.holidaylist(token, term);

        // TODO: test validations
    }
    
    /**
     * Create or edit a list of holidays
     *
     * Allows the user to create or edit holidays.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void holidaysaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.holidaysave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * View the holiday suggestions in the given term
     *
     * Allows the user to view the holiday suggestions for each term.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void holidaysuggestTest() throws ApiException {
        String token = null;
        UUID term = null;
        api.holidaysuggest(token, term);

        // TODO: test validations
    }
    
    /**
     * Lists available import types
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importlisttypesTest() throws ApiException {
        String token = null;
        api.importlisttypes(token);

        // TODO: test validations
    }
    
    /**
     * Accept the license agreement
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void licenseacceptagreementTest() throws ApiException {
        String token = null;
        api.licenseacceptagreement(token);

        // TODO: test validations
    }
    
    /**
     * Check if license agreement has been accepted
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void licensegetagreementstatusTest() throws ApiException {
        String token = null;
        api.licensegetagreementstatus(token);

        // TODO: test validations
    }
    
    /**
     * Gets the current license information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void licensegetcurrentTest() throws ApiException {
        String token = null;
        api.licensegetcurrent(token);

        // TODO: test validations
    }
    
    /**
     * Contact Engineerica in order to renew the AccuCampus subscription
     *
     * Allows the user to select the option to contact Engineerica when the AccuCampus account is nearing its renewal date.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void licenserenewTest() throws ApiException {
        String token = null;
        String email = null;
        String phonenumber = null;
        String jobtitle = null;
        String institution = null;
        String comments = null;
        api.licenserenew(token, email, phonenumber, jobtitle, institution, comments);

        // TODO: test validations
    }
    
    /**
     * Lists the available timezones
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listtimezonesTest() throws ApiException {
        api.listtimezones();

        // TODO: test validations
    }
    
    /**
     * Delete a location
     *
     * Allows the user to delete an existing location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.locationdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a location
     *
     * Allows the user to search and view an individual location and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.locationget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of locations
     *
     * Allows the user to view the list of all locations to which they are scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        String locations = null;
        Boolean sortbygroup = null;
        api.locationlist(token, from, count, locations, sortbygroup);

        // TODO: test validations
    }
    
    /**
     * Create or edit a location
     *
     * Allows the user to create or edit a location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.locationsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Login
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginTest() throws ApiException {
        String domain = null;
        String username = null;
        String password = null;
        String method = null;
        Boolean rememberme = null;
        api.login(domain, username, password, method, rememberme);

        // TODO: test validations
    }
    
    /**
     * Logout
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logoutTest() throws ApiException {
        String token = null;
        api.logout(token);

        // TODO: test validations
    }
    
    /**
     * Delete memorized report
     *
     * Allows the user to delete a memorized report that they have created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memorizedreportdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.memorizedreportdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of a memorized report
     *
     * Allows the user to view an individual memorized report and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memorizedreportgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.memorizedreportget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of all his memorized reports
     *
     * Allows the user to view the list of all memorized reports that they have created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memorizedreportlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        String customname = null;
        api.memorizedreportlist(token, from, count, customname);

        // TODO: test validations
    }
    
    /**
     * Create or edit a memorized report
     *
     * Allows the user to create or edit a memorized report for themselves.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memorizedreportsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.memorizedreportsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Gets the items on the menu
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void menugetitemsTest() throws ApiException {
        String menuid = null;
        api.menugetitems(menuid);

        // TODO: test validations
    }
    
    /**
     * Gets the logged in user account.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void myaccountTest() throws ApiException {
        String token = null;
        api.myaccount(token);

        // TODO: test validations
    }
    
    /**
     * Gets the current time zone&#39;s iana name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void myianatimezoneTest() throws ApiException {
        String token = null;
        api.myianatimezone(token);

        // TODO: test validations
    }
    
    /**
     * Gets the logged in user information.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void myprofileTest() throws ApiException {
        String token = null;
        Integer photosize = null;
        api.myprofile(token, photosize);

        // TODO: test validations
    }
    
    /**
     * Gets the list of actions the user can execute.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void myrightsTest() throws ApiException {
        String token = null;
        api.myrights(token);

        // TODO: test validations
    }
    
    /**
     * Updates logged user&#39;s profile information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mysaveprofileTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.mysaveprofile(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete a notification
     *
     * Allows the user to delete an existing notification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.notificationdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View a notification
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.notificationget(token, id);

        // TODO: test validations
    }
    
    /**
     * Gets all public (in station) notifications for the specific user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationgetforstationTest() throws ApiException {
        UUID station = null;
        String user = null;
        api.notificationgetforstation(station, user);

        // TODO: test validations
    }
    
    /**
     * Get the number of unread notifications
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationgetunreadcountTest() throws ApiException {
        String token = null;
        api.notificationgetunreadcount(token);

        // TODO: test validations
    }
    
    /**
     * View a list of all sent notifications
     *
     * Allows the user to view the list of all sent notifications.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        UUID recipient = null;
        Integer status = null;
        OffsetDateTime startdate = null;
        OffsetDateTime enddate = null;
        Boolean sentonscreen = null;
        Boolean sentemail = null;
        Boolean sentsms = null;
        api.notificationlist(token, from, count, recipient, status, startdate, enddate, sentonscreen, sentemail, sentsms);

        // TODO: test validations
    }
    
    /**
     * View all the notifications sent to the current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationlistmineTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        Integer status = null;
        OffsetDateTime startdate = null;
        OffsetDateTime enddate = null;
        api.notificationlistmine(token, from, count, status, startdate, enddate);

        // TODO: test validations
    }
    
    /**
     * Mark a notification as read
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationmarkasreadTest() throws ApiException {
        String token = null;
        UUID id = null;
        Integer status = null;
        OffsetDateTime startdate = null;
        OffsetDateTime enddate = null;
        api.notificationmarkasread(token, id, status, startdate, enddate);

        // TODO: test validations
    }
    
    /**
     * Mark a notification as unread
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationmarkasunreadTest() throws ApiException {
        String token = null;
        UUID id = null;
        Integer status = null;
        OffsetDateTime startdate = null;
        OffsetDateTime enddate = null;
        api.notificationmarkasunread(token, id, status, startdate, enddate);

        // TODO: test validations
    }
    
    /**
     * Send notifications on screen, via email or text to users
     *
     * Allows the user to send notifications to other users through the Send Message link.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationsendTest() throws ApiException {
        String token = null;
        Boolean emailenabled = null;
        Boolean onscreenenabled = null;
        Boolean smsenabled = null;
        String title = null;
        String tousers = null;
        String togroups = null;
        String onscreenbody = null;
        String onscreenclick = null;
        String onscreenurl = null;
        String onscreenclass = null;
        Integer onscreenduration = null;
        Integer showonstation = null;
        String emailfromname = null;
        String emailfrom = null;
        String emailsubject = null;
        String emailbody = null;
        String textmessagebody = null;
        api.notificationsend(token, emailenabled, onscreenenabled, smsenabled, title, tousers, togroups, onscreenbody, onscreenclick, onscreenurl, onscreenclass, onscreenduration, showonstation, emailfromname, emailfrom, emailsubject, emailbody, textmessagebody);

        // TODO: test validations
    }
    
    /**
     * Send on-screen notifications
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationsendonscreenTest() throws ApiException {
        String token = null;
        UUID notification = null;
        api.notificationsendonscreen(token, notification);

        // TODO: test validations
    }
    
    /**
     * Delete a notification topic
     *
     * Allows the user to delete an existing notification topic.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationtopicdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.notificationtopicdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a notification topic
     *
     * Allows the user to view an individual notification topic and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationtopicgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.notificationtopicget(token, id);

        // TODO: test validations
    }
    
    /**
     * List all the notification topics
     *
     * Allows the user to view the list of all notification topics.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationtopiclistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.notificationtopiclist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * List all the notification topics available to subscribe
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationtopiclistsubscribeTest() throws ApiException {
        String token = null;
        api.notificationtopiclistsubscribe(token);

        // TODO: test validations
    }
    
    /**
     * Create or edit a notification topic
     *
     * Allows the user to create and edit a notification topic.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationtopicsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.notificationtopicsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Deregisters the current device to receive push notifications
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pushderegisterTest() throws ApiException {
        String devicetoken = null;
        String platform = null;
        api.pushderegister(devicetoken, platform);

        // TODO: test validations
    }
    
    /**
     * Registers the current device to receive push notifications
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pushregisterTest() throws ApiException {
        String devicetoken = null;
        String platform = null;
        api.pushregister(devicetoken, platform);

        // TODO: test validations
    }
    
    /**
     * Print and email QR labels
     *
     * Allows the user to generate a printable PDF of QR labels containing user Card Numbers to be emailed to users and used as attendance tracking for events.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void qrlabelsprintTest() throws ApiException {
        String token = null;
        UUID user = null;
        UUID group = null;
        api.qrlabelsprint(token, user, group);

        // TODO: test validations
    }
    
    /**
     * Gets an image of a QR token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void qrlogingetTest() throws ApiException {
        String token = null;
        api.qrloginget(token);

        // TODO: test validations
    }
    
    /**
     * Login
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void qrloginloginTest() throws ApiException {
        String onetimetoken = null;
        api.qrloginlogin(onetimetoken);

        // TODO: test validations
    }
    
    /**
     * Deletes a widget from the Quick Panel
     *
     * Allows the user to delete a widget that has been added to the Quick Panel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quickpaneldeletewidgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.quickpaneldeletewidget(token, id);

        // TODO: test validations
    }
    
    /**
     * Fetches the information for a specific widget.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quickpanelfetchwidgetTest() throws ApiException {
        String token = null;
        UUID widgetid = null;
        api.quickpanelfetchwidget(token, widgetid);

        // TODO: test validations
    }
    
    /**
     * View details of a widget included in the Quick Panel
     *
     * Allows the user to view a widget added in as Quick Panel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quickpanelgetwidgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.quickpanelgetwidget(token, id);

        // TODO: test validations
    }
    
    /**
     * Returns the initial information required to show the quick panels
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quickpanelinitTest() throws ApiException {
        String token = null;
        api.quickpanelinit(token);

        // TODO: test validations
    }
    
    /**
     * Lists all the widgets that are added in the Quick Panel
     *
     * Allows the user to view the widgets that have been added to the Quick Panel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quickpanellistwidgetsTest() throws ApiException {
        String token = null;
        api.quickpanellistwidgets(token);

        // TODO: test validations
    }
    
    /**
     * Lists all the widget types available in the system
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quickpanellistwidgettypesTest() throws ApiException {
        String token = null;
        api.quickpanellistwidgettypes(token);

        // TODO: test validations
    }
    
    /**
     * Reorders the widgets and moves them to a specific column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quickpanelreorderwidgetsTest() throws ApiException {
        String token = null;
        String sectionname = null;
        String orderids = null;
        api.quickpanelreorderwidgets(token, sectionname, orderids);

        // TODO: test validations
    }
    
    /**
     * Saves a widget for the Quick Panel
     *
     * Allows the user to save a widget to the Quick Panel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quickpanelsavewidgetTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.quickpanelsavewidget(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * View a list of available reports
     *
     * Allows the user to view the complete list of available, canned reports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportlistTest() throws ApiException {
        String token = null;
        api.reportlist(token);

        // TODO: test validations
    }
    
    /**
     * Permissions by user report
     *
     * Lists all the users in the system including their corresponding permissions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportpermissionsbyuserTest() throws ApiException {
        String token = null;
        String params = null;
        api.reportpermissionsbyuser(token, params);

        // TODO: test validations
    }
    
    /**
     * Queries and loads the specified report, in background.
     *
     * Allows the user to run reports, in background, with the exception of attendance analytics reports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportprepareTest() throws ApiException {
        String token = null;
        String reportname = null;
        String params = null;
        String repformat = null;
        UUID fillgroupid = null;
        String groupby = null;
        UUID refreshgroup = null;
        String filtertext = null;
        api.reportprepare(token, reportname, params, repformat, fillgroupid, groupby, refreshgroup, filtertext);

        // TODO: test validations
    }
    
    /**
     * Query and load a specified report
     *
     * Allows the user to run reports with the exception of attendance analytics reports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportqueryTest() throws ApiException {
        String token = null;
        String reportname = null;
        String params = null;
        api.reportquery(token, reportname, params);

        // TODO: test validations
    }
    
    /**
     * Show a list of roles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rolelistTest() throws ApiException {
        String token = null;
        String name = null;
        api.rolelist(token, name);

        // TODO: test validations
    }
    
    /**
     * Delete a rule
     *
     * Allows the user to delete an existing rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ruledeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.ruledelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of a rule
     *
     * Allows the user to view an individual rule and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulegetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.ruleget(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of a rule event type
     *
     * Allows the user to view the trigger and its available conditions for the rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulegeteventtypeTest() throws ApiException {
        String token = null;
        String event = null;
        api.rulegeteventtype(token, event);

        // TODO: test validations
    }
    
    /**
     * View a list of user rules
     *
     * Allows the user to view the list of all rules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulelistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.rulelist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * View a list of rule actions available
     *
     * Allows the user to view all the available rule actions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulelistactionsTest() throws ApiException {
        String token = null;
        api.rulelistactions(token);

        // TODO: test validations
    }
    
    /**
     * View a list of rule event types
     *
     * Allows the user to view a list of available triggers for rules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulelisteventtypesTest() throws ApiException {
        String token = null;
        api.rulelisteventtypes(token);

        // TODO: test validations
    }
    
    /**
     * View all the http requests sent as a result of a rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulelisthttprequestsTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        Boolean failed = null;
        Integer status = null;
        api.rulelisthttprequests(token, from, count, failed, status);

        // TODO: test validations
    }
    
    /**
     * Create or edit a rule
     *
     * Allows the user to create or edit a rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.rulesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Search
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchTest() throws ApiException {
        String token = null;
        String query = null;
        Integer page = null;
        api.search(token, query, page);

        // TODO: test validations
    }
    
    /**
     * Get the information of the entities that can be searched
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchgetentitiesTest() throws ApiException {
        String token = null;
        api.searchgetentities(token);

        // TODO: test validations
    }
    
    /**
     * Returns the list of users for a specific permission
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void securityassesspermissionTest() throws ApiException {
        String token = null;
        String commandname = null;
        api.securityassesspermission(token, commandname);

        // TODO: test validations
    }
    
    /**
     * Returns the list of permissions for a specific role
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void securityassessroleTest() throws ApiException {
        String token = null;
        UUID roleid = null;
        api.securityassessrole(token, roleid);

        // TODO: test validations
    }
    
    /**
     * Returns the list of users for a specific user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void securityassessscopeTest() throws ApiException {
        String token = null;
        UUID locationid = null;
        api.securityassessscope(token, locationid);

        // TODO: test validations
    }
    
    /**
     * Returns the list of permissions for a specific user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void securityassessuserTest() throws ApiException {
        String token = null;
        UUID userid = null;
        api.securityassessuser(token, userid);

        // TODO: test validations
    }
    
    /**
     * Register current user to an event session
     *
     * Allows the user to register themselves for an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregaddcurrentuserTest() throws ApiException {
        String token = null;
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionregaddcurrentuser(token, eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * Register users for events
     *
     * Allows the user to register another user for an upcoming event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregadduserTest() throws ApiException {
        String token = null;
        UUID userid = null;
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionregadduser(token, userid, eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * View all the sessions the logged user is registered to
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionreggetmysessionsTest() throws ApiException {
        String token = null;
        OffsetDateTime date = null;
        api.sessionreggetmysessions(token, date);

        // TODO: test validations
    }
    
    /**
     * Lists the registrations for a specific user
     *
     * Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionreggetsessionsTest() throws ApiException {
        String token = null;
        UUID userid = null;
        api.sessionreggetsessions(token, userid);

        // TODO: test validations
    }
    
    /**
     * Get the settings for session registration
     *
     * Allows the user to view a event&#39;s session registration settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionreggetsettingsTest() throws ApiException {
        String token = null;
        UUID locationid = null;
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        Boolean noinherit = null;
        api.sessionreggetsettings(token, locationid, eventid, sessiondate, noinherit);

        // TODO: test validations
    }
    
    /**
     * Lists the registrations for a specific session
     *
     * Allows the user to view the registration for a specified event session.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionreggetusersTest() throws ApiException {
        String token = null;
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionreggetusers(token, eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * List the sessions available for a specific event
     *
     * Allows the user to view all the sessions available for a recurring event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionreglistsessionsTest() throws ApiException {
        String token = null;
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionreglistsessions(token, eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * View a list of upcoming event sessions
     *
     * Allows the user to view the full list of upcoming events.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionreglistupcomingTest() throws ApiException {
        String token = null;
        OffsetDateTime date = null;
        api.sessionreglistupcoming(token, date);

        // TODO: test validations
    }
    
    /**
     * View a list of upcoming sessions of a particular event
     *
     * Allows the user to view the upcoming recurring sessions of a specified event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionreglistupcomingeventTest() throws ApiException {
        String token = null;
        OffsetDateTime date = null;
        UUID event = null;
        api.sessionreglistupcomingevent(token, date, event);

        // TODO: test validations
    }
    
    /**
     * Unregister current user from an event session
     *
     * Allows the user to un-register themselves from an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregremovecurrentuserTest() throws ApiException {
        String token = null;
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionregremovecurrentuser(token, eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * Removes a user from an event session
     *
     * Allows the user to un-register another user from an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregremoveuserTest() throws ApiException {
        String token = null;
        UUID userid = null;
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionregremoveuser(token, userid, eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * Save the settings for an event&#39;s session registration
     *
     * Allows the user to save the settings for an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregsavesettingsTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.sessionregsavesettings(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Add a logo to the account
     *
     * Allows the user to add the logo for the account, which appears on all pages on the AccuCampus browser version.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingaddlogoTest() throws ApiException {
        String token = null;
        String upload = null;
        String filename = null;
        api.settingaddlogo(token, upload, filename);

        // TODO: test validations
    }
    
    /**
     * Get settings for the account or the specified scope
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settinggetTest() throws ApiException {
        String keys = null;
        String token = null;
        String domain = null;
        String scope = null;
        api.settingget(keys, token, domain, scope);

        // TODO: test validations
    }
    
    /**
     * Save settings for the account or the specified scope
     *
     * Allows the user to affect settings that are not specified elsewhere in permissions. This includes Attendance, Appointments, Compass, Media, and Social Activity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.settingsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * View general settings for the account
     *
     * Allows the user to view the settings&#39; general section.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingviewgeneralTest() throws ApiException {
        String token = null;
        api.settingviewgeneral(token);

        // TODO: test validations
    }
    
    /**
     * Generate/reset single sign on access key.
     *
     * Allows the user to generate or reset the access key for single sign-on.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ssogeneratekeyTest() throws ApiException {
        String token = null;
        api.ssogeneratekey(token);

        // TODO: test validations
    }
    
    /**
     * View single sign on settings.
     *
     * Allows the user to view settings for single sign-on.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ssogetsettingsTest() throws ApiException {
        String token = null;
        api.ssogetsettings(token);

        // TODO: test validations
    }
    
    /**
     * Issue single sign-on token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ssoissuetokenTest() throws ApiException {
        String key = null;
        String username = null;
        Boolean expires = null;
        api.ssoissuetoken(key, username, expires);

        // TODO: test validations
    }
    
    /**
     * Edit single sign-on settings.
     *
     * Allows the user to edit settings for single sign-on.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ssosavesettingsTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.ssosavesettings(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete a sign-in station
     *
     * Allows the user to delete a sign-in station from the list of existing sign-in stations that they can view based on their scope.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.stationdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of a sign-in station
     *
     * Allows the user to view an individual sign-in station and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.stationget(token, id);

        // TODO: test validations
    }
    
    /**
     * Get all the current terms
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationgetcurrenttermsTest() throws ApiException {
        UUID station = null;
        api.stationgetcurrentterms(station);

        // TODO: test validations
    }
    
    /**
     * Gets a the info to display in the sign-in station by it&#39;s ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationgetinfoTest() throws ApiException {
        UUID id = null;
        UUID event = null;
        api.stationgetinfo(id, event);

        // TODO: test validations
    }
    
    /**
     * Gets the current license information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationgetlicenseTest() throws ApiException {
        String station = null;
        api.stationgetlicense(station);

        // TODO: test validations
    }
    
    /**
     * View a list of sign-in stations
     *
     * Allows the user to view the list of sign-in stations, limited to the stations in the locations to which they are scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.stationlist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Create or edit a sign-in station
     *
     * Allows the user to create, edit, or install a sign-in station based in an area to which they are scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.stationsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Unlocks the sign-in station.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationunlockTest() throws ApiException {
        UUID id = null;
        String passcode = null;
        String method = null;
        api.stationunlock(id, passcode, method);

        // TODO: test validations
    }
    
    /**
     * Delete a swipe
     *
     * Allows the user to delete an existing attendance swipe.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void swipedeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.swipedelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a swipe
     *
     * Allows the user to view an individual attendance swipe.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void swipegetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.swipeget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of swipes
     *
     * Allows the user to view a list of all swipes for the location or locations in which the user is scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void swipelistTest() throws ApiException {
        Integer from = null;
        Integer count = null;
        String token = null;
        api.swipelist(from, count, token);

        // TODO: test validations
    }
    
    /**
     * Create or edit a swipe, and if possible, save the related attendance log
     *
     * Allows the user to save an attendance swipe, which will also save the attendance log if the information in the swipe is enough.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void swipesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.swipesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Creates a new swipe from a sign-in station, and if possible, creates the attendance log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void swipesaveanonymTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.swipesaveanonym(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete a tag
     *
     * Allows the user to delete an existing tag.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tagdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.tagdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of a specified tag
     *
     * Allows the user to click on and view the settings for a tag.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taggetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.tagget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of tags
     *
     * Allows the user to view the list of tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taglistTest() throws ApiException {
        String token = null;
        String group = null;
        Integer from = null;
        Integer count = null;
        api.taglist(token, group, from, count);

        // TODO: test validations
    }
    
    /**
     * View a list of entities that can be tagged
     *
     * Allows the user to view the list of user roles that can be tagged, according to that tag&#39;s settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taglistgroupsTest() throws ApiException {
        String token = null;
        api.taglistgroups(token);

        // TODO: test validations
    }
    
    /**
     * Create or edit a tag
     *
     * Allows the user to create or edit a tag.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tagsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.tagsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Search for tags in the account
     *
     * Allows the user to search for tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tagsearchTest() throws ApiException {
        String token = null;
        String query = null;
        Boolean allowcreatingnew = null;
        api.tagsearch(token, query, allowcreatingnew);

        // TODO: test validations
    }
    
    /**
     * Add an image to a template
     *
     * Allows the user to add an image to a badge or certificate template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templateaddimageTest() throws ApiException {
        String token = null;
        UUID template = null;
        String upload = null;
        String filename = null;
        api.templateaddimage(token, template, upload, filename);

        // TODO: test validations
    }
    
    /**
     * Delete a template
     *
     * Allows the user to delete an existing template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templatedeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.templatedelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Send generated templates by email
     *
     * Allows the user to send generated templates via email through AccuCampus.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templateemailTest() throws ApiException {
        String token = null;
        String jobid = null;
        String emailsubject = null;
        String emailbody = null;
        String templatekind = null;
        String emailfrom = null;
        String emailreplyto = null;
        api.templateemail(token, jobid, emailsubject, emailbody, templatekind, emailfrom, emailreplyto);

        // TODO: test validations
    }
    
    /**
     * Generate specified templates
     *
     * Allows the user to generate an existing template as badges or certificates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templategenerateTest() throws ApiException {
        String token = null;
        UUID template = null;
        UUID source = null;
        Boolean singlefile = null;
        String userid = null;
        Boolean forsending = null;
        UUID role = null;
        String filters = null;
        api.templategenerate(token, template, source, singlefile, userid, forsending, role, filters);

        // TODO: test validations
    }
    
    /**
     * View details of a template
     *
     * Allows the user to view a template and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templategetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.templateget(token, id);

        // TODO: test validations
    }
    
    /**
     * View generated templates
     *
     * Allows the user to view templates which have been generated as badges or certificates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templategetgeneratedTest() throws ApiException {
        String token = null;
        String jobid = null;
        api.templategetgenerated(token, jobid);

        // TODO: test validations
    }
    
    /**
     * View a list of defined templates
     *
     * Allows the user to view the full list of created templates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templatelistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        String kind = null;
        Boolean designedonly = null;
        api.templatelist(token, from, count, kind, designedonly);

        // TODO: test validations
    }
    
    /**
     * View a list of templates&#39; data sources
     *
     * Allows the user to see tokens to be used in the template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templatelistsourcesTest() throws ApiException {
        String token = null;
        String kind = null;
        api.templatelistsources(token, kind);

        // TODO: test validations
    }
    
    /**
     * Create or edit a template
     *
     * Allows the user to create or edit a template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templatesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.templatesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Save the layout of a template
     *
     * Allows the user to edit a template&#39;s layout.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templatesavelayoutTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.templatesavelayout(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete a term
     *
     * Allows the user to delete a term from the existing list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void termdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.termdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a term
     *
     * Allows the user to view a term and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void termgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.termget(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of all terms
     *
     * Allows the user to view the full list of existing term.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void termlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        Boolean notpast = null;
        api.termlist(token, from, count, notpast);

        // TODO: test validations
    }
    
    /**
     * Create and edit terms
     *
     * Allows the user to create and edit terms.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void termsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.termsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Gets the remaining text credits for the account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void textcreditremainingTest() throws ApiException {
        String token = null;
        api.textcreditremaining(token);

        // TODO: test validations
    }
    
    /**
     * Generates a dynamic image from text
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void texttoimageTest() throws ApiException {
        String token = null;
        String text = null;
        String fontcolor = null;
        Integer fontsize = null;
        String direction = null;
        Integer width = null;
        api.texttoimage(token, text, fontcolor, fontsize, direction, width);

        // TODO: test validations
    }
    
    /**
     * Gets the translations of the specified values
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void translationgetTest() throws ApiException {
        String token = null;
        String universal = null;
        api.translationget(token, universal);

        // TODO: test validations
    }
    
    /**
     * Get the file containing the translations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void translationgetcachefileTest() throws ApiException {
        String token = null;
        String account = null;
        api.translationgetcachefile(token, account);

        // TODO: test validations
    }
    
    /**
     * Lists all the available translations in the system
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void translationlistTest() throws ApiException {
        String token = null;
        String filter = null;
        Boolean nondefaultonly = null;
        Boolean appdefaultasuniversal = null;
        api.translationlist(token, filter, nondefaultonly, appdefaultasuniversal);

        // TODO: test validations
    }
    
    /**
     * Edit a translation
     *
     * Allows the user to edit a translation for the entire account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void translationsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.translationsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Change user&#39;s own password
     *
     * Allows the user to change their own password.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userchangepwdTest() throws ApiException {
        String token = null;
        UUID oldpass = null;
        UUID newpass = null;
        api.userchangepwd(token, oldpass, newpass);

        // TODO: test validations
    }
    
    /**
     * Changes the user password using a change password request id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userchangepwdbyreqTest() throws ApiException {
        String changereq = null;
        String newpass = null;
        api.userchangepwdbyreq(changereq, newpass);

        // TODO: test validations
    }
    
    /**
     * Delete a user
     *
     * Allows the user to delete a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.userdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Finds similar users to prevent duplicates
     *
     * Allows the user to be warned if a user they are creating has the same card number as another user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userfindsimilarTest() throws ApiException {
        String token = null;
        UUID currentid = null;
        String phonenumber = null;
        String cardnumber = null;
        api.userfindsimilar(token, currentid, phonenumber, cardnumber);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a user
     *
     * Allows the user to search and view a user and their details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergetTest() throws ApiException {
        String token = null;
        UUID id = null;
        Integer photosize = null;
        api.userget(token, id, photosize);

        // TODO: test validations
    }
    
    /**
     * Search user by card number
     *
     * Allows the user to search for a user by their card number.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergetbycardTest() throws ApiException {
        String token = null;
        String card = null;
        Integer photosize = null;
        api.usergetbycard(token, card, photosize);

        // TODO: test validations
    }
    
    /**
     * Add a user to a group
     *
     * Allows the user to add a user to a group that they have permission to edit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupaddmemberTest() throws ApiException {
        String token = null;
        UUID userid = null;
        UUID groupid = null;
        api.usergroupaddmember(token, userid, groupid);

        // TODO: test validations
    }
    
    /**
     * Delete a group
     *
     * Allows the user to delete a group that they have permission to edit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.usergroupdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a user group
     *
     * Allows the user to view a user group and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.usergroupget(token, id);

        // TODO: test validations
    }
    
    /**
     * View the members of a user group
     *
     * Allows the user to view the list of users in a group that they have permission to view.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupgetmembersTest() throws ApiException {
        String token = null;
        UUID groupid = null;
        api.usergroupgetmembers(token, groupid);

        // TODO: test validations
    }
    
    /**
     * View the groups which a user is registered to
     *
     * Allows the user to view the groups an individual user is registered to, based on group and user permissions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupgetuserTest() throws ApiException {
        String token = null;
        UUID userid = null;
        api.usergroupgetuser(token, userid);

        // TODO: test validations
    }
    
    /**
     * View a list of user groups
     *
     * Allows the user to view the list of groups that they have permission to view.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergrouplistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        String type = null;
        api.usergrouplist(token, from, count, type);

        // TODO: test validations
    }
    
    /**
     * Refresh the dynamic group
     *
     * Allows the user to refresh a dynamic group that they have permission to edit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergrouprefreshTest() throws ApiException {
        String token = null;
        UUID group = null;
        api.usergrouprefresh(token, group);

        // TODO: test validations
    }
    
    /**
     * Remove a user from a group
     *
     * Allows the user to remove a user from a group that they have permission to edit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupremovememberTest() throws ApiException {
        String token = null;
        UUID userid = null;
        UUID groupid = null;
        api.usergroupremovemember(token, userid, groupid);

        // TODO: test validations
    }
    
    /**
     * Create or edit a group
     *
     * Allows the user to create a new group or edit a group that they have permission to edit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.usergroupsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * View a list of users
     *
     * Allows the user to view the full list of users and is based on role permissions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        UUID roleid = null;
        String onlywithoutcard = null;
        Integer photosize = null;
        api.userlist(token, from, count, roleid, onlywithoutcard, photosize);

        // TODO: test validations
    }
    
    /**
     * Upload a photo for a specific user
     *
     * Allows the user to upload a photo for a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userloadphotoTest() throws ApiException {
        String token = null;
        String upload = null;
        String filename = null;
        UUID userid = null;
        Boolean automatch = null;
        api.userloadphoto(token, upload, filename, userid, automatch);

        // TODO: test validations
    }
    
    /**
     * Move data between users
     *
     * Allows administrators to move data between users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usermovedataTest() throws ApiException {
        String token = null;
        UUID source = null;
        UUID destination = null;
        api.usermovedata(token, source, destination);

        // TODO: test validations
    }
    
    /**
     * Requests a password change
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userrequestpwdchangeTest() throws ApiException {
        String domain = null;
        String email = null;
        api.userrequestpwdchange(domain, email);

        // TODO: test validations
    }
    
    /**
     * Create or edit a user
     *
     * Allows the user to create or edit a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.usersave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Send email to the specified user(s) to set/change their passwords
     *
     * Allows the user to trigger an email to another user asking them to set or change their password.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersavepwdchangeTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.usersavepwdchange(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Lists available user settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersettingsgetTest() throws ApiException {
        String token = null;
        String keys = null;
        UUID user = null;
        api.usersettingsget(token, keys, user);

        // TODO: test validations
    }
    
    /**
     * Get multiple user settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersettingsgetmultipleTest() throws ApiException {
        String token = null;
        String keys = null;
        UUID user = null;
        api.usersettingsgetmultiple(token, keys, user);

        // TODO: test validations
    }
    
    /**
     * Saves a user setting
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersettingssaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.usersettingssave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Save multiple user settings at once
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersettingssavemultipleTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.usersettingssavemultiple(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Deletes a task plan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usertaskdeleteplanTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.usertaskdeleteplan(token, id);

        // TODO: test validations
    }
    
    /**
     * Lists the task plans of the logged user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usertaskgetmineTest() throws ApiException {
        String token = null;
        api.usertaskgetmine(token);

        // TODO: test validations
    }
    
    /**
     * Gets a task plan by Id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usertaskgetplanTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.usertaskgetplan(token, id);

        // TODO: test validations
    }
    
    /**
     * Lists task types or definitions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usertasklistdefsTest() throws ApiException {
        api.usertasklistdefs();

        // TODO: test validations
    }
    
    /**
     * Lists task plans
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usertasklistplanTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.usertasklistplan(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Saves a task plan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usertasksaveplanTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.usertasksaveplan(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Get current version information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void versionTest() throws ApiException {
        String token = null;
        api.version(token);

        // TODO: test validations
    }
    
}
