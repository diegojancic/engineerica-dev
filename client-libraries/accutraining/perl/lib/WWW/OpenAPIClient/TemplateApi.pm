=begin comment

AccuTraining OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::TemplateApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# template_addimage
#
# Add an image to a template
# 
# @param string $template The id of the template where the image has to be added (required)
# @param string $upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
# @param string $filename The local name of the uploaded file. For later reference. (optional)
{
    my $params = {
    'template' => {
        data_type => 'string',
        description => 'The id of the template where the image has to be added',
        required => '1',
    },
    'upload' => {
        data_type => 'string',
        description => 'Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).',
        required => '1',
    },
    'filename' => {
        data_type => 'string',
        description => 'The local name of the uploaded file. For later reference.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'template_addimage' } = { 
        summary => 'Add an image to a template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub template_addimage {
    my ($self, %args) = @_;

    # verify the required parameter 'template' is set
    unless (exists $args{'template'}) {
      croak("Missing the required parameter 'template' when calling template_addimage");
    }

    # verify the required parameter 'upload' is set
    unless (exists $args{'upload'}) {
      croak("Missing the required parameter 'upload' when calling template_addimage");
    }

    # parse inputs
    my $_resource_path = '/template/addimage';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'template'}) {
        $query_params->{'template'} = $self->{api_client}->to_query_value($args{'template'});
    }

    # query params
    if ( exists $args{'upload'}) {
        $query_params->{'upload'} = $self->{api_client}->to_query_value($args{'upload'});
    }

    # query params
    if ( exists $args{'filename'}) {
        $query_params->{'filename'} = $self->{api_client}->to_query_value($args{'filename'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# template_delete
#
# Delete a template
# 
# @param string $id The id of the template to delete. (required)
# @param AnyType $body  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the template to delete.',
        required => '1',
    },
    'body' => {
        data_type => 'AnyType',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'template_delete' } = { 
        summary => 'Delete a template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub template_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling template_delete");
    }

    # parse inputs
    my $_resource_path = '/template/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# template_email
#
# Send generated templates by email
# 
# @param string $jobid The id of the job that is creating the templates. (required)
# @param string $emailsubject Args depending on the send-to flag. (required)
# @param string $emailbody Args depending on the send-to flag. (required)
# @param string $templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate). (optional)
# @param string $emailfrom The name of the sender to be displayed in the receipients inbox (optional)
# @param string $emailreplyto The reply-to field for the emails. (optional)
{
    my $params = {
    'jobid' => {
        data_type => 'string',
        description => 'The id of the job that is creating the templates.',
        required => '1',
    },
    'emailsubject' => {
        data_type => 'string',
        description => 'Args depending on the send-to flag.',
        required => '1',
    },
    'emailbody' => {
        data_type => 'string',
        description => 'Args depending on the send-to flag.',
        required => '1',
    },
    'templatekind' => {
        data_type => 'string',
        description => 'The kind of the template you&#39;re sending. It must be included in (badge, certificate).',
        required => '0',
    },
    'emailfrom' => {
        data_type => 'string',
        description => 'The name of the sender to be displayed in the receipients inbox',
        required => '0',
    },
    'emailreplyto' => {
        data_type => 'string',
        description => 'The reply-to field for the emails.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'template_email' } = { 
        summary => 'Send generated templates by email',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub template_email {
    my ($self, %args) = @_;

    # verify the required parameter 'jobid' is set
    unless (exists $args{'jobid'}) {
      croak("Missing the required parameter 'jobid' when calling template_email");
    }

    # verify the required parameter 'emailsubject' is set
    unless (exists $args{'emailsubject'}) {
      croak("Missing the required parameter 'emailsubject' when calling template_email");
    }

    # verify the required parameter 'emailbody' is set
    unless (exists $args{'emailbody'}) {
      croak("Missing the required parameter 'emailbody' when calling template_email");
    }

    # parse inputs
    my $_resource_path = '/template/email';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'jobid'}) {
        $query_params->{'jobid'} = $self->{api_client}->to_query_value($args{'jobid'});
    }

    # query params
    if ( exists $args{'templatekind'}) {
        $query_params->{'templatekind'} = $self->{api_client}->to_query_value($args{'templatekind'});
    }

    # query params
    if ( exists $args{'emailfrom'}) {
        $query_params->{'emailfrom'} = $self->{api_client}->to_query_value($args{'emailfrom'});
    }

    # query params
    if ( exists $args{'emailreplyto'}) {
        $query_params->{'emailreplyto'} = $self->{api_client}->to_query_value($args{'emailreplyto'});
    }

    # query params
    if ( exists $args{'emailsubject'}) {
        $query_params->{'emailsubject'} = $self->{api_client}->to_query_value($args{'emailsubject'});
    }

    # query params
    if ( exists $args{'emailbody'}) {
        $query_params->{'emailbody'} = $self->{api_client}->to_query_value($args{'emailbody'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# template_generate
#
# Generate specified templates
# 
# @param string $template The id of the template to generate. (required)
# @param string $source The source key of the selected template data source. (required)
# @param boolean $singlefile True if all the templates should be placed in the same file, false if each one shoud be in its own file. (required)
# @param string $userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas. (optional)
# @param boolean $forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading (optional)
# @param string $role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor (optional)
# @param string $filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
{
    my $params = {
    'template' => {
        data_type => 'string',
        description => 'The id of the template to generate.',
        required => '1',
    },
    'source' => {
        data_type => 'string',
        description => 'The source key of the selected template data source.',
        required => '1',
    },
    'singlefile' => {
        data_type => 'boolean',
        description => 'True if all the templates should be placed in the same file, false if each one shoud be in its own file.',
        required => '1',
    },
    'userid' => {
        data_type => 'string',
        description => 'Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas.',
        required => '0',
    },
    'forsending' => {
        data_type => 'boolean',
        description => 'It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading',
        required => '0',
    },
    'role' => {
        data_type => 'string',
        description => 'When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor',
        required => '0',
    },
    'filters' => {
        data_type => 'string',
        description => 'Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|...',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'template_generate' } = { 
        summary => 'Generate specified templates',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub template_generate {
    my ($self, %args) = @_;

    # verify the required parameter 'template' is set
    unless (exists $args{'template'}) {
      croak("Missing the required parameter 'template' when calling template_generate");
    }

    # verify the required parameter 'source' is set
    unless (exists $args{'source'}) {
      croak("Missing the required parameter 'source' when calling template_generate");
    }

    # verify the required parameter 'singlefile' is set
    unless (exists $args{'singlefile'}) {
      croak("Missing the required parameter 'singlefile' when calling template_generate");
    }

    # parse inputs
    my $_resource_path = '/template/generate';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'template'}) {
        $query_params->{'template'} = $self->{api_client}->to_query_value($args{'template'});
    }

    # query params
    if ( exists $args{'source'}) {
        $query_params->{'source'} = $self->{api_client}->to_query_value($args{'source'});
    }

    # query params
    if ( exists $args{'singlefile'}) {
        $query_params->{'singlefile'} = $self->{api_client}->to_query_value($args{'singlefile'});
    }

    # query params
    if ( exists $args{'userid'}) {
        $query_params->{'userid'} = $self->{api_client}->to_query_value($args{'userid'});
    }

    # query params
    if ( exists $args{'forsending'}) {
        $query_params->{'forsending'} = $self->{api_client}->to_query_value($args{'forsending'});
    }

    # query params
    if ( exists $args{'role'}) {
        $query_params->{'role'} = $self->{api_client}->to_query_value($args{'role'});
    }

    # query params
    if ( exists $args{'filters'}) {
        $query_params->{'filters'} = $self->{api_client}->to_query_value($args{'filters'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# template_get
#
# View details of a template
# 
# @param string $id The id of the template to get. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the template to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'template_get' } = { 
        summary => 'View details of a template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub template_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling template_get");
    }

    # parse inputs
    my $_resource_path = '/template/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# template_getgenerated
#
# View generated templates
# 
# @param string $jobid The id of the job that is creating the templates. (required)
{
    my $params = {
    'jobid' => {
        data_type => 'string',
        description => 'The id of the job that is creating the templates.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'template_getgenerated' } = { 
        summary => 'View generated templates',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub template_getgenerated {
    my ($self, %args) = @_;

    # verify the required parameter 'jobid' is set
    unless (exists $args{'jobid'}) {
      croak("Missing the required parameter 'jobid' when calling template_getgenerated");
    }

    # parse inputs
    my $_resource_path = '/template/getgenerated';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'jobid'}) {
        $query_params->{'jobid'} = $self->{api_client}->to_query_value($args{'jobid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# template_list
#
# View a list of defined templates
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $kind The kind of the templates to return. It must be included in (badge, certificate). (required)
# @param boolean $designedonly If true then it only returns the templates that were designed. Otherwise, it returns all. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'kind' => {
        data_type => 'string',
        description => 'The kind of the templates to return. It must be included in (badge, certificate).',
        required => '1',
    },
    'designedonly' => {
        data_type => 'boolean',
        description => 'If true then it only returns the templates that were designed. Otherwise, it returns all.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'template_list' } = { 
        summary => 'View a list of defined templates',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub template_list {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling template_list");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling template_list");
    }

    # verify the required parameter 'kind' is set
    unless (exists $args{'kind'}) {
      croak("Missing the required parameter 'kind' when calling template_list");
    }

    # parse inputs
    my $_resource_path = '/template/list';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'kind'}) {
        $query_params->{'kind'} = $self->{api_client}->to_query_value($args{'kind'});
    }

    # query params
    if ( exists $args{'designedonly'}) {
        $query_params->{'designedonly'} = $self->{api_client}->to_query_value($args{'designedonly'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# template_listsources
#
# View a list of templates' data sources
# 
# @param string $kind The kind of the templates to return. It must be included in (badge, certificate). (required)
{
    my $params = {
    'kind' => {
        data_type => 'string',
        description => 'The kind of the templates to return. It must be included in (badge, certificate).',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'template_listsources' } = { 
        summary => 'View a list of templates&#39; data sources',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub template_listsources {
    my ($self, %args) = @_;

    # verify the required parameter 'kind' is set
    unless (exists $args{'kind'}) {
      croak("Missing the required parameter 'kind' when calling template_listsources");
    }

    # parse inputs
    my $_resource_path = '/template/listsources';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'kind'}) {
        $query_params->{'kind'} = $self->{api_client}->to_query_value($args{'kind'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# template_save
#
# Create or edit a template
# 
# @param string $id The id of the template to save (leave empty to create a new one). (required)
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the template to save (leave empty to create a new one).',
        required => '1',
    },
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'template_save' } = { 
        summary => 'Create or edit a template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub template_save {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling template_save");
    }

    # parse inputs
    my $_resource_path = '/template/{id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# template_savelayout
#
# Save the layout of a template
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'template_savelayout' } = { 
        summary => 'Save the layout of a template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub template_savelayout {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/template/savelayout';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
