=begin comment

AccuTraining OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ActionassignmentApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# actionassignment_delete
#
# Remove an action item from an action plan
# 
# @param string $id The id of the action assignment to delete. (required)
# @param AnyType $body  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the action assignment to delete.',
        required => '1',
    },
    'body' => {
        data_type => 'AnyType',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignment_delete' } = { 
        summary => 'Remove an action item from an action plan',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignment_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling actionassignment_delete");
    }

    # parse inputs
    my $_resource_path = '/actionassignment/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionassignment_get
#
# Search and view details of an action item assigned to a user
# 
# @param string $id The id of the action assignment to get. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the action assignment to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignment_get' } = { 
        summary => 'Search and view details of an action item assigned to a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignment_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling actionassignment_get");
    }

    # parse inputs
    my $_resource_path = '/actionassignment/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionassignment_list
#
# View a list of action items in a user's plan
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param int $assignee The assignee&#39;s id to filter the assignments. (optional)
# @param int $status The status to filter the assignments. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'assignee' => {
        data_type => 'int',
        description => 'The assignee&#39;s id to filter the assignments.',
        required => '0',
    },
    'status' => {
        data_type => 'int',
        description => 'The status to filter the assignments.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignment_list' } = { 
        summary => 'View a list of action items in a user&#39;s plan',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignment_list {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling actionassignment_list");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling actionassignment_list");
    }

    # parse inputs
    my $_resource_path = '/actionassignment/list';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'assignee'}) {
        $query_params->{'assignee'} = $self->{api_client}->to_query_value($args{'assignee'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionassignment_listhistory
#
# View the history of an action item assigned to a user
# 
# @param string $actionassignment The action assignment&#39;s id whose history the user wants to get. (required)
{
    my $params = {
    'actionassignment' => {
        data_type => 'string',
        description => 'The action assignment&#39;s id whose history the user wants to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignment_listhistory' } = { 
        summary => 'View the history of an action item assigned to a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignment_listhistory {
    my ($self, %args) = @_;

    # verify the required parameter 'actionassignment' is set
    unless (exists $args{'actionassignment'}) {
      croak("Missing the required parameter 'actionassignment' when calling actionassignment_listhistory");
    }

    # parse inputs
    my $_resource_path = '/actionassignment/listhistory';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'actionassignment'}) {
        $query_params->{'actionassignment'} = $self->{api_client}->to_query_value($args{'actionassignment'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionassignment_listmine
#
# List public action assignments assigned to the logged user
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param int $status The status to filter the assignments. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'status' => {
        data_type => 'int',
        description => 'The status to filter the assignments.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignment_listmine' } = { 
        summary => 'List public action assignments assigned to the logged user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignment_listmine {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling actionassignment_listmine");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling actionassignment_listmine");
    }

    # parse inputs
    my $_resource_path = '/actionassignment/listmine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionassignment_listpublichistory
#
# List public action assignment history
# 
# @param string $actionassignment The action assignment&#39;s id whose history the user wants to get. (required)
{
    my $params = {
    'actionassignment' => {
        data_type => 'string',
        description => 'The action assignment&#39;s id whose history the user wants to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignment_listpublichistory' } = { 
        summary => 'List public action assignment history',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignment_listpublichistory {
    my ($self, %args) = @_;

    # verify the required parameter 'actionassignment' is set
    unless (exists $args{'actionassignment'}) {
      croak("Missing the required parameter 'actionassignment' when calling actionassignment_listpublichistory");
    }

    # parse inputs
    my $_resource_path = '/actionassignment/listpublichistory';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'actionassignment'}) {
        $query_params->{'actionassignment'} = $self->{api_client}->to_query_value($args{'actionassignment'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionassignment_markcomplete
#
# Bulk complete action items
# 
# @param string $item The action item to assign. (required)
# @param string $assignee The assignee of the item. (optional)
# @param string $group The group to assing the item. (optional)
# @param string $notes The assignment&#39;s notes. (optional)
{
    my $params = {
    'item' => {
        data_type => 'string',
        description => 'The action item to assign.',
        required => '1',
    },
    'assignee' => {
        data_type => 'string',
        description => 'The assignee of the item.',
        required => '0',
    },
    'group' => {
        data_type => 'string',
        description => 'The group to assing the item.',
        required => '0',
    },
    'notes' => {
        data_type => 'string',
        description => 'The assignment&#39;s notes.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignment_markcomplete' } = { 
        summary => 'Bulk complete action items',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignment_markcomplete {
    my ($self, %args) = @_;

    # verify the required parameter 'item' is set
    unless (exists $args{'item'}) {
      croak("Missing the required parameter 'item' when calling actionassignment_markcomplete");
    }

    # parse inputs
    my $_resource_path = '/actionassignment/markcomplete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'assignee'}) {
        $query_params->{'assignee'} = $self->{api_client}->to_query_value($args{'assignee'});
    }

    # query params
    if ( exists $args{'group'}) {
        $query_params->{'group'} = $self->{api_client}->to_query_value($args{'group'});
    }

    # query params
    if ( exists $args{'item'}) {
        $query_params->{'item'} = $self->{api_client}->to_query_value($args{'item'});
    }

    # query params
    if ( exists $args{'notes'}) {
        $query_params->{'notes'} = $self->{api_client}->to_query_value($args{'notes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionassignment_save
#
# Add an action item to a user's action plan
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignment_save' } = { 
        summary => 'Add an action item to a user&#39;s action plan',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignment_save {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/actionassignment/save';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# actionassignment_savehistory
#
# Update an action item assigned to a user
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'actionassignment_savehistory' } = { 
        summary => 'Update an action item assigned to a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub actionassignment_savehistory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/actionassignment/savehistory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
