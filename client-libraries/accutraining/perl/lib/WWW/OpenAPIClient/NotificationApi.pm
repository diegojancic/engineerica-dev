=begin comment

AccuTraining OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::NotificationApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# notification_delete
#
# Delete a notification
# 
# @param string $id The id of the notification to delete. (required)
# @param AnyType $body  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the notification to delete.',
        required => '1',
    },
    'body' => {
        data_type => 'AnyType',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notification_delete' } = { 
        summary => 'Delete a notification',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notification_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling notification_delete");
    }

    # parse inputs
    my $_resource_path = '/notification/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notification_get
#
# View a notification
# 
# @param string $id The id of the notification to get. (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the notification to get.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notification_get' } = { 
        summary => 'View a notification',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notification_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling notification_get");
    }

    # parse inputs
    my $_resource_path = '/notification/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notification_getforstation
#
# Gets all public (in station) notifications for the specific user
# 
# @param string $station The id of the sign-in station to get. (required)
# @param string $user The card of the user. (required)
{
    my $params = {
    'station' => {
        data_type => 'string',
        description => 'The id of the sign-in station to get.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'The card of the user.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notification_getforstation' } = { 
        summary => 'Gets all public (in station) notifications for the specific user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notification_getforstation {
    my ($self, %args) = @_;

    # verify the required parameter 'station' is set
    unless (exists $args{'station'}) {
      croak("Missing the required parameter 'station' when calling notification_getforstation");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling notification_getforstation");
    }

    # parse inputs
    my $_resource_path = '/notification/getforstation';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'station'}) {
        $query_params->{'station'} = $self->{api_client}->to_query_value($args{'station'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notification_getunreadcount
#
# Get the number of unread notifications
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'notification_getunreadcount' } = { 
        summary => 'Get the number of unread notifications',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notification_getunreadcount {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/notification/getunreadcount';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notification_list
#
# View a list of all sent notifications
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param string $recipient The recipient whose notifications have to be listed. (optional)
# @param int $status The status of the notifications to list. Read, Unread or All. (optional)
# @param DateTime $startdate The start date of the period to filter the notifications. (optional)
# @param DateTime $enddate The end date of the period to filter the notifications. (optional)
# @param boolean $sentonscreen Specifies whether to list the notifications that were sent on-screen or not. (optional)
# @param boolean $sentemail Specifies whether to list the notifications that were sent via e-mail or not. (optional)
# @param boolean $sentsms Specifies whether to list the notifications that were sent via sms or not. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'recipient' => {
        data_type => 'string',
        description => 'The recipient whose notifications have to be listed.',
        required => '0',
    },
    'status' => {
        data_type => 'int',
        description => 'The status of the notifications to list. Read, Unread or All.',
        required => '0',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'The start date of the period to filter the notifications.',
        required => '0',
    },
    'enddate' => {
        data_type => 'DateTime',
        description => 'The end date of the period to filter the notifications.',
        required => '0',
    },
    'sentonscreen' => {
        data_type => 'boolean',
        description => 'Specifies whether to list the notifications that were sent on-screen or not.',
        required => '0',
    },
    'sentemail' => {
        data_type => 'boolean',
        description => 'Specifies whether to list the notifications that were sent via e-mail or not.',
        required => '0',
    },
    'sentsms' => {
        data_type => 'boolean',
        description => 'Specifies whether to list the notifications that were sent via sms or not.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notification_list' } = { 
        summary => 'View a list of all sent notifications',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notification_list {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling notification_list");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling notification_list");
    }

    # parse inputs
    my $_resource_path = '/notification/list';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'recipient'}) {
        $query_params->{'recipient'} = $self->{api_client}->to_query_value($args{'recipient'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'enddate'}) {
        $query_params->{'enddate'} = $self->{api_client}->to_query_value($args{'enddate'});
    }

    # query params
    if ( exists $args{'sentonscreen'}) {
        $query_params->{'sentonscreen'} = $self->{api_client}->to_query_value($args{'sentonscreen'});
    }

    # query params
    if ( exists $args{'sentemail'}) {
        $query_params->{'sentemail'} = $self->{api_client}->to_query_value($args{'sentemail'});
    }

    # query params
    if ( exists $args{'sentsms'}) {
        $query_params->{'sentsms'} = $self->{api_client}->to_query_value($args{'sentsms'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notification_listmine
#
# View all the notifications sent to the current user
# 
# @param int $from The first record to return. (required)
# @param int $count The max number of records to return. (required)
# @param int $status Specifies the status of the notifications to list. Read, Unread or All. (optional)
# @param DateTime $startdate The start date of the period to filter the notifications. (optional)
# @param DateTime $enddate The end date of the period to filter the notifications. (optional)
{
    my $params = {
    'from' => {
        data_type => 'int',
        description => 'The first record to return.',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'The max number of records to return.',
        required => '1',
    },
    'status' => {
        data_type => 'int',
        description => 'Specifies the status of the notifications to list. Read, Unread or All.',
        required => '0',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'The start date of the period to filter the notifications.',
        required => '0',
    },
    'enddate' => {
        data_type => 'DateTime',
        description => 'The end date of the period to filter the notifications.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notification_listmine' } = { 
        summary => 'View all the notifications sent to the current user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notification_listmine {
    my ($self, %args) = @_;

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling notification_listmine");
    }

    # verify the required parameter 'count' is set
    unless (exists $args{'count'}) {
      croak("Missing the required parameter 'count' when calling notification_listmine");
    }

    # parse inputs
    my $_resource_path = '/notification/listmine';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'enddate'}) {
        $query_params->{'enddate'} = $self->{api_client}->to_query_value($args{'enddate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notification_markasread
#
# Mark a notification as read
# 
# @param string $id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read. (optional)
# @param int $status Specifies the status to filter the notifications. Read, Unread or All. (optional)
# @param DateTime $startdate The start date of the period to filter the notifications. (optional)
# @param DateTime $enddate The end date of the period to filter the notifications. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read.',
        required => '0',
    },
    'status' => {
        data_type => 'int',
        description => 'Specifies the status to filter the notifications. Read, Unread or All.',
        required => '0',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'The start date of the period to filter the notifications.',
        required => '0',
    },
    'enddate' => {
        data_type => 'DateTime',
        description => 'The end date of the period to filter the notifications.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notification_markasread' } = { 
        summary => 'Mark a notification as read',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notification_markasread {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/notification/markasread';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'enddate'}) {
        $query_params->{'enddate'} = $self->{api_client}->to_query_value($args{'enddate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notification_markasunread
#
# Mark a notification as unread
# 
# @param string $id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread. (optional)
# @param int $status Specifies the status to filter the notifications. Read, Unread or All. (optional)
# @param DateTime $startdate The start date of the period to filter the notifications. (optional)
# @param DateTime $enddate The end date of the period to filter the notifications. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread.',
        required => '0',
    },
    'status' => {
        data_type => 'int',
        description => 'Specifies the status to filter the notifications. Read, Unread or All.',
        required => '0',
    },
    'startdate' => {
        data_type => 'DateTime',
        description => 'The start date of the period to filter the notifications.',
        required => '0',
    },
    'enddate' => {
        data_type => 'DateTime',
        description => 'The end date of the period to filter the notifications.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notification_markasunread' } = { 
        summary => 'Mark a notification as unread',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notification_markasunread {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/notification/markasunread';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'startdate'}) {
        $query_params->{'startdate'} = $self->{api_client}->to_query_value($args{'startdate'});
    }

    # query params
    if ( exists $args{'enddate'}) {
        $query_params->{'enddate'} = $self->{api_client}->to_query_value($args{'enddate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notification_send
#
# Send notifications on screen, via email or text to users
# 
# @param boolean $emailenabled Whether send the notification via email. (required)
# @param boolean $onscreenenabled Whether to display the notification on screen. (required)
# @param boolean $smsenabled Whether to send the notification via text message. (required)
# @param string $title Notification title. (required)
# @param string $tousers Comma-separated Ids of users to send the notification. (optional)
# @param string $togroups Comma-separated Ids of user groups to send the notification. (optional)
# @param string $onscreenbody Body of the message for on-screen display. (optional)
# @param string $onscreenclick What to do when the notification is clicked. Valid values: hide, view, url. (optional)
# @param string $onscreenurl Url to redirect the user, if onscreenclick&#x3D;url. (optional)
# @param string $onscreenclass How to display the notification. Valid values: info, success, warning, error (optional)
# @param int $onscreenduration Time in seconds to display the notification. (optional)
# @param int $showonstation Whether to show the notification in the sign-in station. (optional)
# @param string $emailfromname Name of the email sender. (optional)
# @param string $emailfrom Reply-to email. (optional)
# @param string $emailsubject Subject of the email. (optional)
# @param string $emailbody Body of the email. (optional)
# @param string $textmessagebody Message for SMS. Max 160 characters. (optional)
{
    my $params = {
    'emailenabled' => {
        data_type => 'boolean',
        description => 'Whether send the notification via email.',
        required => '1',
    },
    'onscreenenabled' => {
        data_type => 'boolean',
        description => 'Whether to display the notification on screen.',
        required => '1',
    },
    'smsenabled' => {
        data_type => 'boolean',
        description => 'Whether to send the notification via text message.',
        required => '1',
    },
    'title' => {
        data_type => 'string',
        description => 'Notification title.',
        required => '1',
    },
    'tousers' => {
        data_type => 'string',
        description => 'Comma-separated Ids of users to send the notification.',
        required => '0',
    },
    'togroups' => {
        data_type => 'string',
        description => 'Comma-separated Ids of user groups to send the notification.',
        required => '0',
    },
    'onscreenbody' => {
        data_type => 'string',
        description => 'Body of the message for on-screen display.',
        required => '0',
    },
    'onscreenclick' => {
        data_type => 'string',
        description => 'What to do when the notification is clicked. Valid values: hide, view, url.',
        required => '0',
    },
    'onscreenurl' => {
        data_type => 'string',
        description => 'Url to redirect the user, if onscreenclick&#x3D;url.',
        required => '0',
    },
    'onscreenclass' => {
        data_type => 'string',
        description => 'How to display the notification. Valid values: info, success, warning, error',
        required => '0',
    },
    'onscreenduration' => {
        data_type => 'int',
        description => 'Time in seconds to display the notification.',
        required => '0',
    },
    'showonstation' => {
        data_type => 'int',
        description => 'Whether to show the notification in the sign-in station.',
        required => '0',
    },
    'emailfromname' => {
        data_type => 'string',
        description => 'Name of the email sender.',
        required => '0',
    },
    'emailfrom' => {
        data_type => 'string',
        description => 'Reply-to email.',
        required => '0',
    },
    'emailsubject' => {
        data_type => 'string',
        description => 'Subject of the email.',
        required => '0',
    },
    'emailbody' => {
        data_type => 'string',
        description => 'Body of the email.',
        required => '0',
    },
    'textmessagebody' => {
        data_type => 'string',
        description => 'Message for SMS. Max 160 characters.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notification_send' } = { 
        summary => 'Send notifications on screen, via email or text to users',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notification_send {
    my ($self, %args) = @_;

    # verify the required parameter 'emailenabled' is set
    unless (exists $args{'emailenabled'}) {
      croak("Missing the required parameter 'emailenabled' when calling notification_send");
    }

    # verify the required parameter 'onscreenenabled' is set
    unless (exists $args{'onscreenenabled'}) {
      croak("Missing the required parameter 'onscreenenabled' when calling notification_send");
    }

    # verify the required parameter 'smsenabled' is set
    unless (exists $args{'smsenabled'}) {
      croak("Missing the required parameter 'smsenabled' when calling notification_send");
    }

    # verify the required parameter 'title' is set
    unless (exists $args{'title'}) {
      croak("Missing the required parameter 'title' when calling notification_send");
    }

    # parse inputs
    my $_resource_path = '/notification/send';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'tousers'}) {
        $query_params->{'tousers'} = $self->{api_client}->to_query_value($args{'tousers'});
    }

    # query params
    if ( exists $args{'togroups'}) {
        $query_params->{'togroups'} = $self->{api_client}->to_query_value($args{'togroups'});
    }

    # query params
    if ( exists $args{'emailenabled'}) {
        $query_params->{'emailenabled'} = $self->{api_client}->to_query_value($args{'emailenabled'});
    }

    # query params
    if ( exists $args{'onscreenenabled'}) {
        $query_params->{'onscreenenabled'} = $self->{api_client}->to_query_value($args{'onscreenenabled'});
    }

    # query params
    if ( exists $args{'smsenabled'}) {
        $query_params->{'smsenabled'} = $self->{api_client}->to_query_value($args{'smsenabled'});
    }

    # query params
    if ( exists $args{'title'}) {
        $query_params->{'title'} = $self->{api_client}->to_query_value($args{'title'});
    }

    # query params
    if ( exists $args{'onscreenbody'}) {
        $query_params->{'onscreenbody'} = $self->{api_client}->to_query_value($args{'onscreenbody'});
    }

    # query params
    if ( exists $args{'onscreenclick'}) {
        $query_params->{'onscreenclick'} = $self->{api_client}->to_query_value($args{'onscreenclick'});
    }

    # query params
    if ( exists $args{'onscreenurl'}) {
        $query_params->{'onscreenurl'} = $self->{api_client}->to_query_value($args{'onscreenurl'});
    }

    # query params
    if ( exists $args{'onscreenclass'}) {
        $query_params->{'onscreenclass'} = $self->{api_client}->to_query_value($args{'onscreenclass'});
    }

    # query params
    if ( exists $args{'onscreenduration'}) {
        $query_params->{'onscreenduration'} = $self->{api_client}->to_query_value($args{'onscreenduration'});
    }

    # query params
    if ( exists $args{'showonstation'}) {
        $query_params->{'showonstation'} = $self->{api_client}->to_query_value($args{'showonstation'});
    }

    # query params
    if ( exists $args{'emailfromname'}) {
        $query_params->{'emailfromname'} = $self->{api_client}->to_query_value($args{'emailfromname'});
    }

    # query params
    if ( exists $args{'emailfrom'}) {
        $query_params->{'emailfrom'} = $self->{api_client}->to_query_value($args{'emailfrom'});
    }

    # query params
    if ( exists $args{'emailsubject'}) {
        $query_params->{'emailsubject'} = $self->{api_client}->to_query_value($args{'emailsubject'});
    }

    # query params
    if ( exists $args{'emailbody'}) {
        $query_params->{'emailbody'} = $self->{api_client}->to_query_value($args{'emailbody'});
    }

    # query params
    if ( exists $args{'textmessagebody'}) {
        $query_params->{'textmessagebody'} = $self->{api_client}->to_query_value($args{'textmessagebody'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notification_sendonscreen
#
# Send on-screen notifications
# 
# @param string $notification The ID of the notification to send. (required)
{
    my $params = {
    'notification' => {
        data_type => 'string',
        description => 'The ID of the notification to send.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'notification_sendonscreen' } = { 
        summary => 'Send on-screen notifications',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notification_sendonscreen {
    my ($self, %args) = @_;

    # verify the required parameter 'notification' is set
    unless (exists $args{'notification'}) {
      croak("Missing the required parameter 'notification' when calling notification_sendonscreen");
    }

    # parse inputs
    my $_resource_path = '/notification/sendonscreen';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'notification'}) {
        $query_params->{'notification'} = $self->{api_client}->to_query_value($args{'notification'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
