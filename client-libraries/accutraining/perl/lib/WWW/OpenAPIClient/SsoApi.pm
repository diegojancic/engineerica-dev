=begin comment

AccuTraining OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::SsoApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# sso_generatekey
#
# Generate/reset single sign on access key.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'sso_generatekey' } = { 
        summary => 'Generate/reset single sign on access key.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sso_generatekey {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/sso/generatekey';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sso_getsettings
#
# View single sign on settings.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'sso_getsettings' } = { 
        summary => 'View single sign on settings.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sso_getsettings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/sso/getsettings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sso_issuetoken
#
# Issue single sign-on token
# 
# @param string $key The single sign-on key of the account. (required)
# @param string $username The email of the user to sign-on. (required)
# @param boolean $expires Specifies whether the session should expire when inactive. (optional)
{
    my $params = {
    'key' => {
        data_type => 'string',
        description => 'The single sign-on key of the account.',
        required => '1',
    },
    'username' => {
        data_type => 'string',
        description => 'The email of the user to sign-on.',
        required => '1',
    },
    'expires' => {
        data_type => 'boolean',
        description => 'Specifies whether the session should expire when inactive.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sso_issuetoken' } = { 
        summary => 'Issue single sign-on token',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sso_issuetoken {
    my ($self, %args) = @_;

    # verify the required parameter 'key' is set
    unless (exists $args{'key'}) {
      croak("Missing the required parameter 'key' when calling sso_issuetoken");
    }

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling sso_issuetoken");
    }

    # parse inputs
    my $_resource_path = '/sso/issuetoken';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'key'}) {
        $query_params->{'key'} = $self->{api_client}->to_query_value($args{'key'});
    }

    # query params
    if ( exists $args{'username'}) {
        $query_params->{'username'} = $self->{api_client}->to_query_value($args{'username'});
    }

    # query params
    if ( exists $args{'expires'}) {
        $query_params->{'expires'} = $self->{api_client}->to_query_value($args{'expires'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# sso_savesettings
#
# Edit single sign-on settings.
# 
# @param UNKNOWN_BASE_TYPE $unknown_base_type  (optional)
{
    my $params = {
    'unknown_base_type' => {
        data_type => 'UNKNOWN_BASE_TYPE',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sso_savesettings' } = { 
        summary => 'Edit single sign-on settings.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sso_savesettings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/sso/savesettings';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unknown_base_type'}) {
        $_body_data = $args{'unknown_base_type'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
