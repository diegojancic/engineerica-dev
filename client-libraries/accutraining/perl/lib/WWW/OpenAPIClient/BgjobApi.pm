=begin comment

AccuTraining OpenAPI 3

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::BgjobApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# bgjob_getstatus
#
# Get background job status
# 
# @param string $jobid The ID of the job to get the status. 10 most recent will be returned if not specified. (optional)
# @param string $jobtype The job type to filter by. (optional)
{
    my $params = {
    'jobid' => {
        data_type => 'string',
        description => 'The ID of the job to get the status. 10 most recent will be returned if not specified.',
        required => '0',
    },
    'jobtype' => {
        data_type => 'string',
        description => 'The job type to filter by.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'bgjob_getstatus' } = { 
        summary => 'Get background job status',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub bgjob_getstatus {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/bgjob/getstatus';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'jobid'}) {
        $query_params->{'jobid'} = $self->{api_client}->to_query_value($args{'jobid'});
    }

    # query params
    if ( exists $args{'jobtype'}) {
        $query_params->{'jobtype'} = $self->{api_client}->to_query_value($args{'jobtype'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
