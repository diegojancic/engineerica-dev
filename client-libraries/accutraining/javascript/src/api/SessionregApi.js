/**
 * AccuTraining OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Sessionreg service.
* @module api/SessionregApi
* @version 1.0.0
*/
export default class SessionregApi {

    /**
    * Constructs a new SessionregApi. 
    * @alias module:api/SessionregApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sessionregAddcurrentuser operation.
     * @callback module:api/SessionregApi~sessionregAddcurrentuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register current user to an event session
     * Allows the user to register themselves for an event.
     * @param {String} eventid The id of the event.
     * @param {Date} sessiondate The date and time when the session starts.
     * @param {module:api/SessionregApi~sessionregAddcurrentuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregAddcurrentuser(eventid, sessiondate, callback) {
      let postBody = null;
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionregAddcurrentuser");
      }
      // verify the required parameter 'sessiondate' is set
      if (sessiondate === undefined || sessiondate === null) {
        throw new Error("Missing the required parameter 'sessiondate' when calling sessionregAddcurrentuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'eventid': eventid,
        'sessiondate': sessiondate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreg/addcurrentuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregAdduser operation.
     * @callback module:api/SessionregApi~sessionregAdduserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register users for events
     * Allows the user to register another user for an upcoming event.
     * @param {String} userid The id of the user to add.
     * @param {String} eventid The id of the event.
     * @param {Date} sessiondate The date and time when the session starts.
     * @param {module:api/SessionregApi~sessionregAdduserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregAdduser(userid, eventid, sessiondate, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling sessionregAdduser");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionregAdduser");
      }
      // verify the required parameter 'sessiondate' is set
      if (sessiondate === undefined || sessiondate === null) {
        throw new Error("Missing the required parameter 'sessiondate' when calling sessionregAdduser");
      }

      let pathParams = {
      };
      let queryParams = {
        'userid': userid,
        'eventid': eventid,
        'sessiondate': sessiondate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreg/adduser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregGetmysessions operation.
     * @callback module:api/SessionregApi~sessionregGetmysessionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the sessions the logged user is registered to
     * @param {Object} opts Optional parameters
     * @param {Date} opts._date Start date to filter the sessions.
     * @param {module:api/SessionregApi~sessionregGetmysessionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregGetmysessions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'date': opts['_date']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreg/getmysessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregGetsessions operation.
     * @callback module:api/SessionregApi~sessionregGetsessionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the registrations for a specific user
     * Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
     * @param {String} userid The user id to list sessions.
     * @param {module:api/SessionregApi~sessionregGetsessionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregGetsessions(userid, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling sessionregGetsessions");
      }

      let pathParams = {
      };
      let queryParams = {
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreg/getsessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregGetsettings operation.
     * @callback module:api/SessionregApi~sessionregGetsettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the settings for session registration
     * Allows the user to view a event's session registration settings.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locationid The id of the location to save settings.
     * @param {String} opts.eventid The id of the event to save settings.
     * @param {Date} opts.sessiondate The date and time when the session starts.
     * @param {Boolean} opts.noinherit True to get the location/event/session specific settings without looking for the more global settings.
     * @param {module:api/SessionregApi~sessionregGetsettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregGetsettings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'locationid': opts['locationid'],
        'eventid': opts['eventid'],
        'sessiondate': opts['sessiondate'],
        'noinherit': opts['noinherit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreg/getsettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregGetusers operation.
     * @callback module:api/SessionregApi~sessionregGetusersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the registrations for a specific session
     * Allows the user to view the registration for a specified event session.
     * @param {String} eventid The event id to list sessions.
     * @param {Date} sessiondate The date of the session to find.
     * @param {module:api/SessionregApi~sessionregGetusersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregGetusers(eventid, sessiondate, callback) {
      let postBody = null;
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionregGetusers");
      }
      // verify the required parameter 'sessiondate' is set
      if (sessiondate === undefined || sessiondate === null) {
        throw new Error("Missing the required parameter 'sessiondate' when calling sessionregGetusers");
      }

      let pathParams = {
      };
      let queryParams = {
        'eventid': eventid,
        'sessiondate': sessiondate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreg/getusers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregListsessions operation.
     * @callback module:api/SessionregApi~sessionregListsessionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the sessions available for a specific event
     * Allows the user to view all the sessions available for a recurring event.
     * @param {String} eventid The event id to list sessions.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.sessiondate The date of the session to find.
     * @param {module:api/SessionregApi~sessionregListsessionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregListsessions(eventid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionregListsessions");
      }

      let pathParams = {
      };
      let queryParams = {
        'eventid': eventid,
        'sessiondate': opts['sessiondate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreg/listsessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregListupcoming operation.
     * @callback module:api/SessionregApi~sessionregListupcomingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of upcoming event sessions
     * Allows the user to view the full list of upcoming events.
     * @param {Date} _date Only sessions in the week of the specified date will be returned.
     * @param {module:api/SessionregApi~sessionregListupcomingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregListupcoming(_date, callback) {
      let postBody = null;
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling sessionregListupcoming");
      }

      let pathParams = {
      };
      let queryParams = {
        'date': _date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreg/listupcoming', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregListupcomingevent operation.
     * @callback module:api/SessionregApi~sessionregListupcomingeventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of upcoming sessions of a particular event
     * Allows the user to view the upcoming recurring sessions of a specified event.
     * @param {Date} _date Start date to filter the returned sessions.
     * @param {String} event The id of the event whose sessions will be returned
     * @param {module:api/SessionregApi~sessionregListupcomingeventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregListupcomingevent(_date, event, callback) {
      let postBody = null;
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling sessionregListupcomingevent");
      }
      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling sessionregListupcomingevent");
      }

      let pathParams = {
      };
      let queryParams = {
        'date': _date,
        'event': event
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreg/listupcomingevent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregRemovecurrentuser operation.
     * @callback module:api/SessionregApi~sessionregRemovecurrentuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unregister current user from an event session
     * Allows the user to un-register themselves from an event.
     * @param {String} eventid The id of the event.
     * @param {Date} sessiondate The date and time when the session starts.
     * @param {module:api/SessionregApi~sessionregRemovecurrentuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregRemovecurrentuser(eventid, sessiondate, callback) {
      let postBody = null;
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionregRemovecurrentuser");
      }
      // verify the required parameter 'sessiondate' is set
      if (sessiondate === undefined || sessiondate === null) {
        throw new Error("Missing the required parameter 'sessiondate' when calling sessionregRemovecurrentuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'eventid': eventid,
        'sessiondate': sessiondate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreg/removecurrentuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregRemoveuser operation.
     * @callback module:api/SessionregApi~sessionregRemoveuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user from an event session
     * Allows the user to un-register another user from an event.
     * @param {String} userid The id of the user to remove.
     * @param {String} eventid The id of the event.
     * @param {Date} sessiondate The date and time when the session starts.
     * @param {module:api/SessionregApi~sessionregRemoveuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregRemoveuser(userid, eventid, sessiondate, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling sessionregRemoveuser");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionregRemoveuser");
      }
      // verify the required parameter 'sessiondate' is set
      if (sessiondate === undefined || sessiondate === null) {
        throw new Error("Missing the required parameter 'sessiondate' when calling sessionregRemoveuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'userid': userid,
        'eventid': eventid,
        'sessiondate': sessiondate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreg/removeuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregSavesettings operation.
     * @callback module:api/SessionregApi~sessionregSavesettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save the settings for an event's session registration
     * Allows the user to save the settings for an event.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/SessionregApi~sessionregSavesettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregSavesettings(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreg/savesettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
