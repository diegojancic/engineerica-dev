/**
 * AccuTraining OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Translation service.
* @module api/TranslationApi
* @version 1.0.0
*/
export default class TranslationApi {

    /**
    * Constructs a new TranslationApi. 
    * @alias module:api/TranslationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the translationGet operation.
     * @callback module:api/TranslationApi~translationGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the translations of the specified values
     * @param {String} universal Pipe separated list of universal text to be translated.
     * @param {module:api/TranslationApi~translationGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    translationGet(universal, callback) {
      let postBody = null;
      // verify the required parameter 'universal' is set
      if (universal === undefined || universal === null) {
        throw new Error("Missing the required parameter 'universal' when calling translationGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'universal': universal
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/translation/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translationGetcachefile operation.
     * @callback module:api/TranslationApi~translationGetcachefileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the file containing the translations
     * @param {Object} opts Optional parameters
     * @param {String} opts.account The id of the account whose translations file has to be retrieved.
     * @param {module:api/TranslationApi~translationGetcachefileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    translationGetcachefile(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'account': opts['account']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/translation/getcachefile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translationList operation.
     * @callback module:api/TranslationApi~translationListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the available translations in the system
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Text to search/filter translations.
     * @param {Boolean} opts.nondefaultonly If true then it returns only the terms translated. Otherwise, it returns all.
     * @param {Boolean} opts.appdefaultasuniversal If true then it uses the app default translation as the universal term.
     * @param {module:api/TranslationApi~translationListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    translationList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'nondefaultonly': opts['nondefaultonly'],
        'appdefaultasuniversal': opts['appdefaultasuniversal']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/translation/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translationSave operation.
     * @callback module:api/TranslationApi~translationSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a translation
     * Allows the user to edit a translation for the entire account.
     * @param {String} id The id of the translation as returned by translation.list.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/TranslationApi~translationSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    translationSave(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling translationSave");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/translation/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
