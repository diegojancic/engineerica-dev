/**
 * AccuTraining OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* License service.
* @module api/LicenseApi
* @version 1.0.0
*/
export default class LicenseApi {

    /**
    * Constructs a new LicenseApi. 
    * @alias module:api/LicenseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the licenseAcceptagreement operation.
     * @callback module:api/LicenseApi~licenseAcceptagreementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept the license agreement
     * @param {module:api/LicenseApi~licenseAcceptagreementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    licenseAcceptagreement(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/license/acceptagreement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licenseGetagreementstatus operation.
     * @callback module:api/LicenseApi~licenseGetagreementstatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if license agreement has been accepted
     * @param {module:api/LicenseApi~licenseGetagreementstatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    licenseGetagreementstatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/license/getagreementstatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licenseGetcurrent operation.
     * @callback module:api/LicenseApi~licenseGetcurrentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current license information
     * @param {module:api/LicenseApi~licenseGetcurrentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    licenseGetcurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/license/getcurrent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licenseRenew operation.
     * @callback module:api/LicenseApi~licenseRenewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contact Engineerica in order to renew the AccuTraining subscription
     * Allows the user to select the option to contact Engineerica when the AccuTraining account is nearing its renewal date.
     * @param {String} email The e-mail of the user sending the request.
     * @param {String} phonenumber The phone number of the user sending the request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.jobtitle The job title of the user sending the request.
     * @param {String} opts.institution The institution of the user sending the request.
     * @param {String} opts.comments Comments entered by the user sending the request.
     * @param {module:api/LicenseApi~licenseRenewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    licenseRenew(email, phonenumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling licenseRenew");
      }
      // verify the required parameter 'phonenumber' is set
      if (phonenumber === undefined || phonenumber === null) {
        throw new Error("Missing the required parameter 'phonenumber' when calling licenseRenew");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email,
        'phonenumber': phonenumber,
        'jobtitle': opts['jobtitle'],
        'institution': opts['institution'],
        'comments': opts['comments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/license/renew', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
