/**
 * AccuCampus OpenAPI 3 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the actionassignmentdelete operation.
     * @callback module:api/DefaultApi~actionassignmentdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an action item from an action plan
     * Allows a user to remove an action item from a user's action plan.
     * @param {String} token The authentication token.
     * @param {String} id The id of the action assignment to delete.
     * @param {module:api/DefaultApi~actionassignmentdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionassignmentdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionassignmentdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentget operation.
     * @callback module:api/DefaultApi~actionassignmentgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of an action item assigned to a user
     * Allows the user to view an individual action item and its details, minus all the action item's updates.
     * @param {String} token The authentication token.
     * @param {String} id The id of the action assignment to get.
     * @param {module:api/DefaultApi~actionassignmentgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionassignmentget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionassignmentget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentlist operation.
     * @callback module:api/DefaultApi~actionassignmentlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of action items in a user's plan
     * Allows the user to view the list of all action items for a specified user.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.assignee The assignee's id to filter the assignments.
     * @param {Number} opts.status The status to filter the assignments.
     * @param {module:api/DefaultApi~actionassignmentlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentlist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionassignmentlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling actionassignmentlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling actionassignmentlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'assignee': opts['assignee'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentlisthistory operation.
     * @callback module:api/DefaultApi~actionassignmentlisthistoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the history of an action item assigned to a user
     * Allows the user to view an individual action plan and its details, including all the action plan's updates.
     * @param {String} token The authentication token.
     * @param {String} actionassignment The action assignment's id whose history the user wants to get.
     * @param {module:api/DefaultApi~actionassignmentlisthistoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentlisthistory(token, actionassignment, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionassignmentlisthistory");
      }
      // verify the required parameter 'actionassignment' is set
      if (actionassignment === undefined || actionassignment === null) {
        throw new Error("Missing the required parameter 'actionassignment' when calling actionassignmentlisthistory");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'actionassignment': actionassignment
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentlisthistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentlistmine operation.
     * @callback module:api/DefaultApi~actionassignmentlistmineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List public action assignments assigned to the logged user
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.status The status to filter the assignments.
     * @param {module:api/DefaultApi~actionassignmentlistmineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentlistmine(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionassignmentlistmine");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling actionassignmentlistmine");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling actionassignmentlistmine");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentlistmine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentlistpublichistory operation.
     * @callback module:api/DefaultApi~actionassignmentlistpublichistoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List public action assignment history
     * @param {String} token The authentication token.
     * @param {String} actionassignment The action assignment's id whose history the user wants to get.
     * @param {module:api/DefaultApi~actionassignmentlistpublichistoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentlistpublichistory(token, actionassignment, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionassignmentlistpublichistory");
      }
      // verify the required parameter 'actionassignment' is set
      if (actionassignment === undefined || actionassignment === null) {
        throw new Error("Missing the required parameter 'actionassignment' when calling actionassignmentlistpublichistory");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'actionassignment': actionassignment
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentlistpublichistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentmarkcomplete operation.
     * @callback module:api/DefaultApi~actionassignmentmarkcompleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk complete action items
     * Allows the user to bulk complete action items.
     * @param {String} token The authentication token.
     * @param {String} item The action item to assign.
     * @param {Object} opts Optional parameters
     * @param {String} opts.assignee The assignee of the item.
     * @param {String} opts.group The group to assing the item.
     * @param {String} opts.notes The assignment's notes.
     * @param {module:api/DefaultApi~actionassignmentmarkcompleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentmarkcomplete(token, item, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionassignmentmarkcomplete");
      }
      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling actionassignmentmarkcomplete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'assignee': opts['assignee'],
        'group': opts['group'],
        'item': item,
        'notes': opts['notes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentmarkcomplete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentsave operation.
     * @callback module:api/DefaultApi~actionassignmentsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an action item to a user's action plan
     * Allows the user to edit or assign an action item to a user
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~actionassignmentsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionassignmentsavehistory operation.
     * @callback module:api/DefaultApi~actionassignmentsavehistoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an action item assigned to a user
     * Allows the user to update or mark an action item as complete.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~actionassignmentsavehistoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionassignmentsavehistory(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionassignmentsavehistory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionitemdelete operation.
     * @callback module:api/DefaultApi~actionitemdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an action item
     * Allows the user to delete an action item.
     * @param {String} token The authentication token.
     * @param {String} id The id of the action item to delete.
     * @param {module:api/DefaultApi~actionitemdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionitemdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionitemdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionitemdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionitemdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionitemget operation.
     * @callback module:api/DefaultApi~actionitemgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of an action item
     * Allows the user to view an individual action item and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the action item to get.
     * @param {module:api/DefaultApi~actionitemgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionitemget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionitemget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionitemget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionitemget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionitemlist operation.
     * @callback module:api/DefaultApi~actionitemlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of action items
     * Allows the user to view a list of action items
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~actionitemlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionitemlist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionitemlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling actionitemlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling actionitemlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionitemlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionitemsave operation.
     * @callback module:api/DefaultApi~actionitemsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit an action item
     * Allows the user to edit an action item.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~actionitemsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionitemsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionitemsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionloglist operation.
     * @callback module:api/DefaultApi~actionloglistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of users action logs
     * Allows the user to view the audit logs for the account.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.user The id of the user whose action logs have to be returned.
     * @param {Date} opts.startdate The start date of the period to filter the logs.
     * @param {Date} opts.enddate The end date of the period to filter the logs.
     * @param {String} opts.resource The resource to filter the action logs.
     * @param {String} opts.actionfilter The action to filter the action logs.
     * @param {String} opts.argument The id of the entity that was the argument of the executed action.
     * @param {module:api/DefaultApi~actionloglistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionloglist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionloglist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling actionloglist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling actionloglist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'user': opts['user'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate'],
        'resource': opts['resource'],
        'actionfilter': opts['actionfilter'],
        'argument': opts['argument'],
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionloglist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionpackassign operation.
     * @callback module:api/DefaultApi~actionpackassignCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign an action item pack to a user
     * Allows the user to assign an action pack to a user or group of users.
     * @param {String} token The authentication token.
     * @param {String} pack The id of the action pack to assign.
     * @param {Boolean} itemsdata A JSON array containing the action items' data needed to assign them to the assignee (Id, Event, DateDue, DateExpired, NotifyAssigne).
     * @param {Object} opts Optional parameters
     * @param {String} opts.assignee The assignee of the pack.
     * @param {String} opts.group The group to assign the pack.
     * @param {String} opts.notes The assignment's notes.
     * @param {module:api/DefaultApi~actionpackassignCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionpackassign(token, pack, itemsdata, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionpackassign");
      }
      // verify the required parameter 'pack' is set
      if (pack === undefined || pack === null) {
        throw new Error("Missing the required parameter 'pack' when calling actionpackassign");
      }
      // verify the required parameter 'itemsdata' is set
      if (itemsdata === undefined || itemsdata === null) {
        throw new Error("Missing the required parameter 'itemsdata' when calling actionpackassign");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'pack': pack,
        'assignee': opts['assignee'],
        'group': opts['group'],
        'itemsdata': itemsdata,
        'notes': opts['notes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionpackassign', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionpackdelete operation.
     * @callback module:api/DefaultApi~actionpackdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an action item pack
     * Allows the user to delete an action item pack.
     * @param {String} token The authentication token.
     * @param {String} id The id of the action pack to delete.
     * @param {module:api/DefaultApi~actionpackdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionpackdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionpackdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionpackdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionpackdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionpackget operation.
     * @callback module:api/DefaultApi~actionpackgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of an action item pack
     * Allows the user to view an individual action pack and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the action pack to get.
     * @param {module:api/DefaultApi~actionpackgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionpackget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionpackget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionpackget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionpackget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionpacklist operation.
     * @callback module:api/DefaultApi~actionpacklistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of action item packs
     * Allows the user to view the full list of action item packs.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~actionpacklistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionpacklist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actionpacklist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling actionpacklist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling actionpacklist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionpacklist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionpacksave operation.
     * @callback module:api/DefaultApi~actionpacksaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit an action item pack
     * Allows the user to edit an action item pack.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~actionpacksaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionpacksave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionpacksave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actiontypedelete operation.
     * @callback module:api/DefaultApi~actiontypedeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an action item type
     * Allows the user to delete an action item type.
     * @param {String} token The authentication token.
     * @param {String} id The id of the action type to delete.
     * @param {module:api/DefaultApi~actiontypedeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actiontypedelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actiontypedelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actiontypedelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actiontypedelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actiontypeget operation.
     * @callback module:api/DefaultApi~actiontypegetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of an action item type
     * Allows the user to view an individual action item type and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the action type to get.
     * @param {module:api/DefaultApi~actiontypegetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actiontypeget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actiontypeget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actiontypeget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actiontypeget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actiontypelist operation.
     * @callback module:api/DefaultApi~actiontypelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of action item types
     * Allows the user to view the full list of action item types.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~actiontypelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actiontypelist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling actiontypelist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling actiontypelist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling actiontypelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actiontypelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actiontypesave operation.
     * @callback module:api/DefaultApi~actiontypesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit an action item type
     * Allows the user to dit an action item type.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~actiontypesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actiontypesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actiontypesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroleaddmissing operation.
     * @callback module:api/DefaultApi~advroleaddmissingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the missing permissions to a role. Requires access to advrole.save
     * @param {String} token The authentication token.
     * @param {String} roles CSV list of the role ids to check
     * @param {String} permissions CSV list of the permissions to check
     * @param {module:api/DefaultApi~advroleaddmissingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleaddmissing(token, roles, permissions, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advroleaddmissing");
      }
      // verify the required parameter 'roles' is set
      if (roles === undefined || roles === null) {
        throw new Error("Missing the required parameter 'roles' when calling advroleaddmissing");
      }
      // verify the required parameter 'permissions' is set
      if (permissions === undefined || permissions === null) {
        throw new Error("Missing the required parameter 'permissions' when calling advroleaddmissing");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'roles': roles,
        'permissions': permissions
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advroleaddmissing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advrolecheckperm operation.
     * @callback module:api/DefaultApi~advrolecheckpermCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the permissions are assigned for the given roles
     * @param {String} token The authentication token.
     * @param {String} roles CSV list of the role ids to check
     * @param {String} permissions CSV list of the permissions to check
     * @param {module:api/DefaultApi~advrolecheckpermCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advrolecheckperm(token, roles, permissions, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advrolecheckperm");
      }
      // verify the required parameter 'roles' is set
      if (roles === undefined || roles === null) {
        throw new Error("Missing the required parameter 'roles' when calling advrolecheckperm");
      }
      // verify the required parameter 'permissions' is set
      if (permissions === undefined || permissions === null) {
        throw new Error("Missing the required parameter 'permissions' when calling advrolecheckperm");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'roles': roles,
        'permissions': permissions
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrolecheckperm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroledelete operation.
     * @callback module:api/DefaultApi~advroledeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role
     * Allows the user to delete a role from the list of available roles.
     * @param {String} token The authentication token.
     * @param {String} id The id of the location to delete.
     * @param {module:api/DefaultApi~advroledeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroledelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advroledelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling advroledelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advroledelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroledeletemapping operation.
     * @callback module:api/DefaultApi~advroledeletemappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role mapping
     * Allows the user to delete a role from its mapped categories on the 'Role Mapping' page.
     * @param {String} token The authentication token.
     * @param {String} map The map name to save the role.
     * @param {String} roleid The id of the role.
     * @param {module:api/DefaultApi~advroledeletemappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroledeletemapping(token, map, roleid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advroledeletemapping");
      }
      // verify the required parameter 'map' is set
      if (map === undefined || map === null) {
        throw new Error("Missing the required parameter 'map' when calling advroledeletemapping");
      }
      // verify the required parameter 'roleid' is set
      if (roleid === undefined || roleid === null) {
        throw new Error("Missing the required parameter 'roleid' when calling advroledeletemapping");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'map': map,
        'roleid': roleid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advroledeletemapping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroleget operation.
     * @callback module:api/DefaultApi~advrolegetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a role
     * Allows the user to view a role and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the location to get.
     * @param {module:api/DefaultApi~advrolegetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advroleget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling advroleget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advroleget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advrolelist operation.
     * @callback module:api/DefaultApi~advrolelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the roles for the current account
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includepolicies True to include the policies, defaults to false.
     * @param {Boolean} opts.includeinternal True to include the internal roles too.
     * @param {String} opts.name Filter by name of the role.
     * @param {module:api/DefaultApi~advrolelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advrolelist(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advrolelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'includepolicies': opts['includepolicies'],
        'includeinternal': opts['includeinternal'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrolelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advrolelistmaps operation.
     * @callback module:api/DefaultApi~advrolelistmapsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the maps a roles is mapped to
     * @param {String} token The authentication token.
     * @param {String} roleid The id of the role to list the maps.
     * @param {module:api/DefaultApi~advrolelistmapsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advrolelistmaps(token, roleid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advrolelistmaps");
      }
      // verify the required parameter 'roleid' is set
      if (roleid === undefined || roleid === null) {
        throw new Error("Missing the required parameter 'roleid' when calling advrolelistmaps");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'roleid': roleid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrolelistmaps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advrolelistrolesmapped operation.
     * @callback module:api/DefaultApi~advrolelistrolesmappedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the roles mappings
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.map List only the roles in the specified map.
     * @param {module:api/DefaultApi~advrolelistrolesmappedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advrolelistrolesmapped(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advrolelistrolesmapped");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'map': opts['map']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrolelistrolesmapped', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advrolelisttemplates operation.
     * @callback module:api/DefaultApi~advrolelisttemplatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of role templates
     * Allows the user to view the full list of available role templates.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~advrolelisttemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advrolelisttemplates(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advrolelisttemplates");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrolelisttemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advrolesave operation.
     * @callback module:api/DefaultApi~advrolesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a role
     * Allows the user to create or edit a role's permissions.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~advrolesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advrolesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrolesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advrolesavemapping operation.
     * @callback module:api/DefaultApi~advrolesavemappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves a role mapping
     * Allows the user to add a role to a mapped category on the 'Role Mapping' page.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~advrolesavemappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advrolesavemapping(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrolesavemapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advrolesuserlist operation.
     * @callback module:api/DefaultApi~advrolesuserlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users. Alias to user.list, use that one instead.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.roleid The id of the role to filter users by, or empty to return all users.
     * @param {String} opts.onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~advrolesuserlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advrolesuserlist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advrolesuserlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling advrolesuserlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling advrolesuserlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'roleid': opts['roleid'],
        'onlywithoutcard': opts['onlywithoutcard'],
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advrolesuserlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the advroleuserupgrade operation.
     * @callback module:api/DefaultApi~advroleuserupgradeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upgrade a user to another role (requires permission to edit those roles)
     * Allow the user to add a role to another user, given that he has access to view that other user and edit people with that new role.
     * @param {String} token The authentication token.
     * @param {String} userid Id of the user to upgrade
     * @param {String} roleid Id of the role to add
     * @param {module:api/DefaultApi~advroleuserupgradeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advroleuserupgrade(token, userid, roleid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling advroleuserupgrade");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling advroleuserupgrade");
      }
      // verify the required parameter 'roleid' is set
      if (roleid === undefined || roleid === null) {
        throw new Error("Missing the required parameter 'roleid' when calling advroleuserupgrade");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'roleid': roleid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/advroleuserupgrade', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsharegetphone operation.
     * @callback module:api/DefaultApi~appsharegetphoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the phone number of the current user
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~appsharegetphoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsharegetphone(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appsharegetphone");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appsharegetphone', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsharesendtext operation.
     * @callback module:api/DefaultApi~appsharesendtextCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an SMS with the link to the app
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.phonenumber Phone number to where to send the link. Leave empty to the number on file.
     * @param {module:api/DefaultApi~appsharesendtextCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsharesendtext(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appsharesendtext");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'phonenumber': opts['phonenumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appsharesendtext', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogcommentdelete operation.
     * @callback module:api/DefaultApi~attendancelogcommentdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a comment on an attendance log
     * @param {String} token The authentication token.
     * @param {String} id The id of the attendance log comment to delete.
     * @param {module:api/DefaultApi~attendancelogcommentdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogcommentdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling attendancelogcommentdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendancelogcommentdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogcommentdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogcommentget operation.
     * @callback module:api/DefaultApi~attendancelogcommentgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a comment on an attendance log
     * @param {String} token The authentication token.
     * @param {String} id The id of the comment to get.
     * @param {module:api/DefaultApi~attendancelogcommentgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogcommentget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling attendancelogcommentget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendancelogcommentget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogcommentget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogcommentlist operation.
     * @callback module:api/DefaultApi~attendancelogcommentlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the comments on a specific attendance log
     * @param {String} attendancelog The id of the attendance log whose comments have to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {module:api/DefaultApi~attendancelogcommentlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogcommentlist(attendancelog, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'attendancelog' is set
      if (attendancelog === undefined || attendancelog === null) {
        throw new Error("Missing the required parameter 'attendancelog' when calling attendancelogcommentlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'attendancelog': attendancelog
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogcommentlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogcommentsave operation.
     * @callback module:api/DefaultApi~attendancelogcommentsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a comment on an attendance log
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~attendancelogcommentsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogcommentsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogcommentsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogdelete operation.
     * @callback module:api/DefaultApi~attendancelogdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an attendance log
     * Allows the user to delete an existing attendance log.
     * @param {String} token The authentication token.
     * @param {String} id The id of the attendance log to delete.
     * @param {module:api/DefaultApi~attendancelogdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling attendancelogdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendancelogdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogget operation.
     * @callback module:api/DefaultApi~attendanceloggetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of an attendance log
     * Allows the user to view an individual attendance log and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the attendance log to get.
     * @param {module:api/DefaultApi~attendanceloggetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling attendancelogget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendancelogget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendanceloggetchangehistory operation.
     * @callback module:api/DefaultApi~attendanceloggetchangehistoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of an attendance log's swipe history
     * Allows the user to view the swipes of an individual attendance logs (sign ins and sign outs).
     * @param {String} token The authentication token.
     * @param {String} id The id of the attendance log to get.
     * @param {module:api/DefaultApi~attendanceloggetchangehistoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendanceloggetchangehistory(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling attendanceloggetchangehistory");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attendanceloggetchangehistory");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendanceloggetchangehistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendanceloglist operation.
     * @callback module:api/DefaultApi~attendanceloglistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of attendance logs
     * Allows the user to view the list of all attendance logs in the location or locations in which the user is scoped.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {String} opts.filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
     * @param {String} opts.userid The user ID of the user to get the logs.
     * @param {module:api/DefaultApi~attendanceloglistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendanceloglist(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling attendanceloglist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling attendanceloglist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'from': from,
        'count': count,
        'filter': opts['filter'],
        'userid': opts['userid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendanceloglist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendanceloglistmine operation.
     * @callback module:api/DefaultApi~attendanceloglistmineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the attendance logs of the current user
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {String} opts.filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
     * @param {module:api/DefaultApi~attendanceloglistmineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendanceloglistmine(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling attendanceloglistmine");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling attendanceloglistmine");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'from': from,
        'count': count,
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendanceloglistmine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogsave operation.
     * @callback module:api/DefaultApi~attendancelogsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit an attendance log
     * Allows the user to create or edit an attendance log.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~attendancelogsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogsignout operation.
     * @callback module:api/DefaultApi~attendancelogsignoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign out an attendance log
     * Allows the user to sign out am attendance log from the Who's In page.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The id of the attendance log to sign-out.
     * @param {String} opts.location The id of the location to filter the users to sign out.
     * @param {String} opts.event The id of the event to filter the users to sign out.
     * @param {Date} opts.datetime Specifies the date and time when the specified logs have to be signed out.
     * @param {module:api/DefaultApi~attendancelogsignoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogsignout(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling attendancelogsignout");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': opts['id'],
        'location': opts['location'],
        'event': opts['event'],
        'datetime': opts['datetime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogsignout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attendancelogwhosin operation.
     * @callback module:api/DefaultApi~attendancelogwhosinCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View who's in a location
     * Allows the user to view the Who's In page and view all users who are logged into locations in which the user is scoped.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {String} opts.location The id of the location to search for users that are in.
     * @param {String} opts.event The id of the event to search for users that are in.
     * @param {String} opts.sorting Field to sort by. Either first-name, last-name or sign-in-time.
     * @param {String} opts.roles The comma-separated list of ids of the roles to search for users that are in.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {String} opts.extensions A JSON array containing the extension filters (i.e [{name: 'nametofilter', value: 'valuetofilter'}]).
     * @param {Boolean} opts._export True to export the results as CSV
     * @param {module:api/DefaultApi~attendancelogwhosinCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attendancelogwhosin(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling attendancelogwhosin");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling attendancelogwhosin");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'from': from,
        'count': count,
        'location': opts['location'],
        'event': opts['event'],
        'sorting': opts['sorting'],
        'roles': opts['roles'],
        'photosize': opts['photosize'],
        'extensions': opts['extensions'],
        'export': opts['_export']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attendancelogwhosin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bgjobgetstatus operation.
     * @callback module:api/DefaultApi~bgjobgetstatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get background job status
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.jobid The ID of the job to get the status. 10 most recent will be returned if not specified.
     * @param {String} opts.jobtype The job type to filter by.
     * @param {module:api/DefaultApi~bgjobgetstatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bgjobgetstatus(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling bgjobgetstatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'jobid': opts['jobid'],
        'jobtype': opts['jobtype']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bgjobgetstatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callExport operation.
     * @callback module:api/DefaultApi~callExportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export AccuCampus data
     * Allows the user to export data from AccuCampus into a CSV, HTML, or Excel format.
     * @param {String} token The authentication token.
     * @param {String} exporttype What to export.
     * @param {String} exportformat The format of the resulting file. Valid types are CSV, HTML, XLS.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filters Pipe separated filters for the export, eg: aaa=val|bbb=val|...
     * @param {module:api/DefaultApi~callExportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    callExport(token, exporttype, exportformat, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling callExport");
      }
      // verify the required parameter 'exporttype' is set
      if (exporttype === undefined || exporttype === null) {
        throw new Error("Missing the required parameter 'exporttype' when calling callExport");
      }
      // verify the required parameter 'exportformat' is set
      if (exportformat === undefined || exportformat === null) {
        throw new Error("Missing the required parameter 'exportformat' when calling callExport");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'exporttype': exporttype,
        'exportformat': exportformat,
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callImport operation.
     * @callback module:api/DefaultApi~callImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import data into AccuCampus
     * Allows the user to import data into AccuCampus via CSV or flat files either manually or automatically using the import utility.
     * @param {String} token The authentication token.
     * @param {String} importtype The kind of data that is being uploaded.
     * @param {String} upload Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).
     * @param {Object} opts Optional parameters
     * @param {String} opts.filename The local name of the uploaded file. For later reference.
     * @param {String} opts.parameters Import parameters, in a key-value pair JSON-serialized object. Eg {'parameter':'value'}.
     * @param {module:api/DefaultApi~callImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    callImport(token, importtype, upload, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling callImport");
      }
      // verify the required parameter 'importtype' is set
      if (importtype === undefined || importtype === null) {
        throw new Error("Missing the required parameter 'importtype' when calling callImport");
      }
      // verify the required parameter 'upload' is set
      if (upload === undefined || upload === null) {
        throw new Error("Missing the required parameter 'upload' when calling callImport");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'importtype': importtype,
        'upload': upload,
        'filename': opts['filename'],
        'parameters': opts['parameters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/import', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the captchagetchallenge operation.
     * @callback module:api/DefaultApi~captchagetchallengeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a captcha challenge that the user must complete to do certain requests.
     * @param {module:api/DefaultApi~captchagetchallengeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    captchagetchallenge(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/captchagetchallenge', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the captchagetimage operation.
     * @callback module:api/DefaultApi~captchagetimageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a captcha image that the user must complete to do certain requests.
     * @param {String} captchatoken The captcha token or ID returned by the captcha.getchallenge action
     * @param {module:api/DefaultApi~captchagetimageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    captchagetimage(captchatoken, callback) {
      let postBody = null;
      // verify the required parameter 'captchatoken' is set
      if (captchatoken === undefined || captchatoken === null) {
        throw new Error("Missing the required parameter 'captchatoken' when calling captchagetimage");
      }

      let pathParams = {
      };
      let queryParams = {
        'captchatoken': captchatoken
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/captchagetimage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changelog operation.
     * @callback module:api/DefaultApi~changelogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the application change log
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~changelogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changelog(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling changelog");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/changelog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientget operation.
     * @callback module:api/DefaultApi~clientgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get client
     * @param {String} token The authentication token.
     * @param {String} client The unique id of the client.
     * @param {Object} opts Optional parameters
     * @param {String} opts.clientname The custom name of the client.
     * @param {module:api/DefaultApi~clientgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientget(token, client, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling clientget");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling clientget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'client': client,
        'clientname': opts['clientname']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/clientget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientlist operation.
     * @callback module:api/DefaultApi~clientlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the clients of the specified conference
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~clientlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientlist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling clientlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling clientlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling clientlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/clientlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientsave operation.
     * @callback module:api/DefaultApi~clientsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves a client
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~clientsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/clientsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientsendmessage operation.
     * @callback module:api/DefaultApi~clientsendmessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a message to a client
     * @param {String} token The authentication token.
     * @param {String} uniqueclientid The unique id of the client.
     * @param {String} message The body of the message to send.
     * @param {module:api/DefaultApi~clientsendmessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientsendmessage(token, uniqueclientid, message, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling clientsendmessage");
      }
      // verify the required parameter 'uniqueclientid' is set
      if (uniqueclientid === undefined || uniqueclientid === null) {
        throw new Error("Missing the required parameter 'uniqueclientid' when calling clientsendmessage");
      }
      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling clientsendmessage");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'uniqueclientid': uniqueclientid,
        'message': message
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/clientsendmessage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the departmentdelete operation.
     * @callback module:api/DefaultApi~departmentdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a college department
     * Allows the user to delete an existing college department.
     * @param {String} token The authentication token.
     * @param {String} id The id of the department to delete.
     * @param {module:api/DefaultApi~departmentdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    departmentdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling departmentdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling departmentdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/departmentdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the departmentget operation.
     * @callback module:api/DefaultApi~departmentgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a college department
     * Allows the user to view an individual college department and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the department to get.
     * @param {module:api/DefaultApi~departmentgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    departmentget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling departmentget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling departmentget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/departmentget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the departmentlist operation.
     * @callback module:api/DefaultApi~departmentlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of college departments
     * Allows the user to view the full list of college departments.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~departmentlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    departmentlist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling departmentlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling departmentlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling departmentlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/departmentlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the departmentsave operation.
     * @callback module:api/DefaultApi~departmentsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a college department
     * Allows the user to create or edit a college department.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~departmentsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    departmentsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/departmentsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doc operation.
     * @callback module:api/DefaultApi~docCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the documentation
     * Retrieves the list of actions available in the system.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.excludeanonymous If true it excludes the anonymous actions from the returned list.
     * @param {module:api/DefaultApi~docCallback} callback The callback function, accepting three arguments: error, data, response
     */
    doc(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'excludeanonymous': opts['excludeanonymous']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/doc', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the easyloginaddbgimage operation.
     * @callback module:api/DefaultApi~easyloginaddbgimageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds background image for the login
     * Allows the user to set the background image that all users will see when logging into an AccuCampus account not using SSO.
     * @param {String} token The authentication token.
     * @param {String} upload Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).
     * @param {String} filename The original filename, needed to process the file.
     * @param {module:api/DefaultApi~easyloginaddbgimageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    easyloginaddbgimage(token, upload, filename, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling easyloginaddbgimage");
      }
      // verify the required parameter 'upload' is set
      if (upload === undefined || upload === null) {
        throw new Error("Missing the required parameter 'upload' when calling easyloginaddbgimage");
      }
      // verify the required parameter 'filename' is set
      if (filename === undefined || filename === null) {
        throw new Error("Missing the required parameter 'filename' when calling easyloginaddbgimage");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'upload': upload,
        'filename': filename
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/easyloginaddbgimage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventdelete operation.
     * @callback module:api/DefaultApi~eventdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a course
     * Allows the user to delete an existing course.
     * @param {String} token The authentication token.
     * @param {String} id The id of the event to delete.
     * @param {module:api/DefaultApi~eventdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventget operation.
     * @callback module:api/DefaultApi~eventgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a course
     * Allows the user to view an individual course and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the event to get.
     * @param {module:api/DefaultApi~eventgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventgetsessionsbydate operation.
     * @callback module:api/DefaultApi~eventgetsessionsbydateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of courses by date
     * Allows the user to view a list of courses by date.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.location The location to filter the events.
     * @param {Date} opts._date The date to filter the events. Today will be used if this parameter is omitted.
     * @param {String} opts.type Type of event to list.
     * @param {module:api/DefaultApi~eventgetsessionsbydateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventgetsessionsbydate(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventgetsessionsbydate");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'location': opts['location'],
        'date': opts['_date'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventgetsessionsbydate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventlist operation.
     * @callback module:api/DefaultApi~eventlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of courses
     * Allows the user to view the full list of courses.
     * @param {String} token The authentication token.
     * @param {String} from The first record to return.
     * @param {String} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false.
     * @param {String} opts.termid Id of the term to list the events. Null to list all events.
     * @param {module:api/DefaultApi~eventlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventlist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling eventlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling eventlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'summaryonly': opts['summaryonly'],
        'termid': opts['termid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsave operation.
     * @callback module:api/DefaultApi~eventsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a course
     * Allows the user to create or edit a course.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~eventsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsearchgroup operation.
     * @callback module:api/DefaultApi~eventsearchgroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for the available event groups
     * @param {String} token The authentication token.
     * @param {String} query Query to search event groups.
     * @param {module:api/DefaultApi~eventsearchgroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventsearchgroup(token, query, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling eventsearchgroup");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling eventsearchgroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'query': query
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventsearchgroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportlisttypes operation.
     * @callback module:api/DefaultApi~exportlisttypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists available export types
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~exportlisttypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportlisttypes(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling exportlisttypes");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/exportlisttypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featurelist operation.
     * @callback module:api/DefaultApi~featurelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the available features.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~featurelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    featurelist(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling featurelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/featurelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the holidaylist operation.
     * @callback module:api/DefaultApi~holidaylistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of entered holidays
     * Allows the user to view all holidays entered.
     * @param {String} token The authentication token.
     * @param {String} term The term to get holidays from.
     * @param {module:api/DefaultApi~holidaylistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    holidaylist(token, term, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling holidaylist");
      }
      // verify the required parameter 'term' is set
      if (term === undefined || term === null) {
        throw new Error("Missing the required parameter 'term' when calling holidaylist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'term': term
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/holidaylist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the holidaysave operation.
     * @callback module:api/DefaultApi~holidaysaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a list of holidays
     * Allows the user to create or edit holidays.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~holidaysaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    holidaysave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/holidaysave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the holidaysuggest operation.
     * @callback module:api/DefaultApi~holidaysuggestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the holiday suggestions in the given term
     * Allows the user to view the holiday suggestions for each term.
     * @param {String} token The authentication token.
     * @param {String} term The term to get holidays from.
     * @param {module:api/DefaultApi~holidaysuggestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    holidaysuggest(token, term, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling holidaysuggest");
      }
      // verify the required parameter 'term' is set
      if (term === undefined || term === null) {
        throw new Error("Missing the required parameter 'term' when calling holidaysuggest");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'term': term
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/holidaysuggest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importlisttypes operation.
     * @callback module:api/DefaultApi~importlisttypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists available import types
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~importlisttypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importlisttypes(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling importlisttypes");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/importlisttypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licenseacceptagreement operation.
     * @callback module:api/DefaultApi~licenseacceptagreementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept the license agreement
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~licenseacceptagreementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    licenseacceptagreement(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling licenseacceptagreement");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/licenseacceptagreement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licensegetagreementstatus operation.
     * @callback module:api/DefaultApi~licensegetagreementstatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if license agreement has been accepted
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~licensegetagreementstatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    licensegetagreementstatus(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling licensegetagreementstatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/licensegetagreementstatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licensegetcurrent operation.
     * @callback module:api/DefaultApi~licensegetcurrentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current license information
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {module:api/DefaultApi~licensegetcurrentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    licensegetcurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/licensegetcurrent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licenserenew operation.
     * @callback module:api/DefaultApi~licenserenewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contact Engineerica in order to renew the AccuCampus subscription
     * Allows the user to select the option to contact Engineerica when the AccuCampus account is nearing its renewal date.
     * @param {String} token The authentication token.
     * @param {String} email The e-mail of the user sending the request.
     * @param {String} phonenumber The phone number of the user sending the request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.jobtitle The job title of the user sending the request.
     * @param {String} opts.institution The institution of the user sending the request.
     * @param {String} opts.comments Comments entered by the user sending the request.
     * @param {module:api/DefaultApi~licenserenewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    licenserenew(token, email, phonenumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling licenserenew");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling licenserenew");
      }
      // verify the required parameter 'phonenumber' is set
      if (phonenumber === undefined || phonenumber === null) {
        throw new Error("Missing the required parameter 'phonenumber' when calling licenserenew");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'email': email,
        'phonenumber': phonenumber,
        'jobtitle': opts['jobtitle'],
        'institution': opts['institution'],
        'comments': opts['comments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/licenserenew', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listtimezones operation.
     * @callback module:api/DefaultApi~listtimezonesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the available timezones
     * @param {module:api/DefaultApi~listtimezonesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listtimezones(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listtimezones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationdelete operation.
     * @callback module:api/DefaultApi~locationdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a location
     * Allows the user to delete an existing location.
     * @param {String} token The authentication token.
     * @param {String} id The id of the location to delete.
     * @param {module:api/DefaultApi~locationdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    locationdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling locationdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling locationdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/locationdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationget operation.
     * @callback module:api/DefaultApi~locationgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a location
     * Allows the user to search and view an individual location and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the location to get.
     * @param {module:api/DefaultApi~locationgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    locationget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling locationget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling locationget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/locationget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationlist operation.
     * @callback module:api/DefaultApi~locationlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of locations
     * Allows the user to view the list of all locations to which they are scoped.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locations The comma-separated list containing the ids of the locations to list.
     * @param {Boolean} opts.sortbygroup True to list locations sorted by the 'Located In' property. Defaults to false.
     * @param {module:api/DefaultApi~locationlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    locationlist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling locationlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling locationlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling locationlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'locations': opts['locations'],
        'sortbygroup': opts['sortbygroup']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/locationlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationsave operation.
     * @callback module:api/DefaultApi~locationsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a location
     * Allows the user to create or edit a location.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~locationsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    locationsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/locationsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/DefaultApi~loginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * @param {String} domain The account domain to login.
     * @param {String} username The username (email) of the user to login as.
     * @param {String} password The password of the user to login as.
     * @param {String} method The authentication method. Valid values are 'token' and 'cookie'.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.rememberme If true then the session will not expire.
     * @param {module:api/DefaultApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    login(domain, username, password, method, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling login");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling login");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling login");
      }
      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
        'domain': domain,
        'username': username,
        'password': password,
        'method': method,
        'rememberme': opts['rememberme']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/DefaultApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token used to login.
     * @param {module:api/DefaultApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logout(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memorizedreportdelete operation.
     * @callback module:api/DefaultApi~memorizedreportdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete memorized report
     * Allows the user to delete a memorized report that they have created.
     * @param {String} token The authentication token.
     * @param {String} id The id of the report settings to delete.
     * @param {module:api/DefaultApi~memorizedreportdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    memorizedreportdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling memorizedreportdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling memorizedreportdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/memorizedreportdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memorizedreportget operation.
     * @callback module:api/DefaultApi~memorizedreportgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a memorized report
     * Allows the user to view an individual memorized report and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the report configuration to get.
     * @param {module:api/DefaultApi~memorizedreportgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    memorizedreportget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling memorizedreportget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling memorizedreportget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/memorizedreportget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memorizedreportlist operation.
     * @callback module:api/DefaultApi~memorizedreportlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of all his memorized reports
     * Allows the user to view the list of all memorized reports that they have created.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.customname If specified filters the memorized reports by custom name.
     * @param {module:api/DefaultApi~memorizedreportlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    memorizedreportlist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling memorizedreportlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling memorizedreportlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling memorizedreportlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'customname': opts['customname'],
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/memorizedreportlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memorizedreportsave operation.
     * @callback module:api/DefaultApi~memorizedreportsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a memorized report
     * Allows the user to create or edit a memorized report for themselves.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~memorizedreportsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    memorizedreportsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/memorizedreportsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the menugetitems operation.
     * @callback module:api/DefaultApi~menugetitemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the items on the menu
     * @param {String} menuid The Id of the menu to get.
     * @param {module:api/DefaultApi~menugetitemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    menugetitems(menuid, callback) {
      let postBody = null;
      // verify the required parameter 'menuid' is set
      if (menuid === undefined || menuid === null) {
        throw new Error("Missing the required parameter 'menuid' when calling menugetitems");
      }

      let pathParams = {
      };
      let queryParams = {
        'menuid': menuid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/menugetitems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myaccount operation.
     * @callback module:api/DefaultApi~myaccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the logged in user account.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~myaccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myaccount(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling myaccount");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/myaccount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myianatimezone operation.
     * @callback module:api/DefaultApi~myianatimezoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current time zone's iana name
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~myianatimezoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myianatimezone(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling myianatimezone");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/myianatimezone', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myprofile operation.
     * @callback module:api/DefaultApi~myprofileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the logged in user information.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~myprofileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myprofile(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling myprofile");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/myprofile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myrights operation.
     * @callback module:api/DefaultApi~myrightsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of actions the user can execute.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~myrightsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myrights(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling myrights");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/myrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mysaveprofile operation.
     * @callback module:api/DefaultApi~mysaveprofileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates logged user's profile information
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~mysaveprofileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mysaveprofile(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mysaveprofile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationdelete operation.
     * @callback module:api/DefaultApi~notificationdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a notification
     * Allows the user to delete an existing notification.
     * @param {String} token The authentication token.
     * @param {String} id The id of the notification to delete.
     * @param {module:api/DefaultApi~notificationdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling notificationdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationget operation.
     * @callback module:api/DefaultApi~notificationgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a notification
     * @param {String} token The authentication token.
     * @param {String} id The id of the notification to get.
     * @param {module:api/DefaultApi~notificationgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling notificationget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationgetforstation operation.
     * @callback module:api/DefaultApi~notificationgetforstationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all public (in station) notifications for the specific user
     * @param {String} station The id of the sign-in station to get.
     * @param {String} user The card of the user.
     * @param {module:api/DefaultApi~notificationgetforstationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationgetforstation(station, user, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling notificationgetforstation");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling notificationgetforstation");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station,
        'user': user
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationgetforstation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationgetunreadcount operation.
     * @callback module:api/DefaultApi~notificationgetunreadcountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the number of unread notifications
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~notificationgetunreadcountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationgetunreadcount(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationgetunreadcount");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationgetunreadcount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationlist operation.
     * @callback module:api/DefaultApi~notificationlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of all sent notifications
     * Allows the user to view the list of all sent notifications.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.recipient The recipient whose notifications have to be listed.
     * @param {Number} opts.status The status of the notifications to list. Read, Unread or All.
     * @param {Date} opts.startdate The start date of the period to filter the notifications.
     * @param {Date} opts.enddate The end date of the period to filter the notifications.
     * @param {Boolean} opts.sentonscreen Specifies whether to list the notifications that were sent on-screen or not.
     * @param {Boolean} opts.sentemail Specifies whether to list the notifications that were sent via e-mail or not.
     * @param {Boolean} opts.sentsms Specifies whether to list the notifications that were sent via sms or not.
     * @param {module:api/DefaultApi~notificationlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationlist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling notificationlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling notificationlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'recipient': opts['recipient'],
        'status': opts['status'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate'],
        'sentonscreen': opts['sentonscreen'],
        'sentemail': opts['sentemail'],
        'sentsms': opts['sentsms']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationlistmine operation.
     * @callback module:api/DefaultApi~notificationlistmineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the notifications sent to the current user
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.status Specifies the status of the notifications to list. Read, Unread or All.
     * @param {Date} opts.startdate The start date of the period to filter the notifications.
     * @param {Date} opts.enddate The end date of the period to filter the notifications.
     * @param {module:api/DefaultApi~notificationlistmineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationlistmine(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationlistmine");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling notificationlistmine");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling notificationlistmine");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'status': opts['status'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationlistmine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationmarkasread operation.
     * @callback module:api/DefaultApi~notificationmarkasreadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a notification as read
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read.
     * @param {Number} opts.status Specifies the status to filter the notifications. Read, Unread or All.
     * @param {Date} opts.startdate The start date of the period to filter the notifications.
     * @param {Date} opts.enddate The end date of the period to filter the notifications.
     * @param {module:api/DefaultApi~notificationmarkasreadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationmarkasread(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationmarkasread");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': opts['id'],
        'status': opts['status'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationmarkasread', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationmarkasunread operation.
     * @callback module:api/DefaultApi~notificationmarkasunreadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a notification as unread
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread.
     * @param {Number} opts.status Specifies the status to filter the notifications. Read, Unread or All.
     * @param {Date} opts.startdate The start date of the period to filter the notifications.
     * @param {Date} opts.enddate The end date of the period to filter the notifications.
     * @param {module:api/DefaultApi~notificationmarkasunreadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationmarkasunread(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationmarkasunread");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': opts['id'],
        'status': opts['status'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationmarkasunread', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsend operation.
     * @callback module:api/DefaultApi~notificationsendCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send notifications on screen, via email or text to users
     * Allows the user to send notifications to other users through the Send Message link.
     * @param {String} token The authentication token.
     * @param {Boolean} emailenabled Whether send the notification via email.
     * @param {Boolean} onscreenenabled Whether to display the notification on screen.
     * @param {Boolean} smsenabled Whether to send the notification via text message.
     * @param {String} title Notification title.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tousers Comma-separated Ids of users to send the notification.
     * @param {String} opts.togroups Comma-separated Ids of user groups to send the notification.
     * @param {String} opts.onscreenbody Body of the message for on-screen display.
     * @param {String} opts.onscreenclick What to do when the notification is clicked. Valid values: hide, view, url.
     * @param {String} opts.onscreenurl Url to redirect the user, if onscreenclick=url.
     * @param {String} opts.onscreenclass How to display the notification. Valid values: info, success, warning, error
     * @param {Number} opts.onscreenduration Time in seconds to display the notification.
     * @param {Number} opts.showonstation Whether to show the notification in the sign-in station.
     * @param {String} opts.emailfromname Name of the email sender.
     * @param {String} opts.emailfrom Reply-to email.
     * @param {String} opts.emailsubject Subject of the email.
     * @param {String} opts.emailbody Body of the email.
     * @param {String} opts.textmessagebody Message for SMS. Max 160 characters.
     * @param {module:api/DefaultApi~notificationsendCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationsend(token, emailenabled, onscreenenabled, smsenabled, title, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationsend");
      }
      // verify the required parameter 'emailenabled' is set
      if (emailenabled === undefined || emailenabled === null) {
        throw new Error("Missing the required parameter 'emailenabled' when calling notificationsend");
      }
      // verify the required parameter 'onscreenenabled' is set
      if (onscreenenabled === undefined || onscreenenabled === null) {
        throw new Error("Missing the required parameter 'onscreenenabled' when calling notificationsend");
      }
      // verify the required parameter 'smsenabled' is set
      if (smsenabled === undefined || smsenabled === null) {
        throw new Error("Missing the required parameter 'smsenabled' when calling notificationsend");
      }
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling notificationsend");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'tousers': opts['tousers'],
        'togroups': opts['togroups'],
        'emailenabled': emailenabled,
        'onscreenenabled': onscreenenabled,
        'smsenabled': smsenabled,
        'title': title,
        'onscreenbody': opts['onscreenbody'],
        'onscreenclick': opts['onscreenclick'],
        'onscreenurl': opts['onscreenurl'],
        'onscreenclass': opts['onscreenclass'],
        'onscreenduration': opts['onscreenduration'],
        'showonstation': opts['showonstation'],
        'emailfromname': opts['emailfromname'],
        'emailfrom': opts['emailfrom'],
        'emailsubject': opts['emailsubject'],
        'emailbody': opts['emailbody'],
        'textmessagebody': opts['textmessagebody']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationsend', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsendonscreen operation.
     * @callback module:api/DefaultApi~notificationsendonscreenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send on-screen notifications
     * @param {String} token The authentication token.
     * @param {String} notification The ID of the notification to send.
     * @param {module:api/DefaultApi~notificationsendonscreenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationsendonscreen(token, notification, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationsendonscreen");
      }
      // verify the required parameter 'notification' is set
      if (notification === undefined || notification === null) {
        throw new Error("Missing the required parameter 'notification' when calling notificationsendonscreen");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'notification': notification
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationsendonscreen', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationtopicdelete operation.
     * @callback module:api/DefaultApi~notificationtopicdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a notification topic
     * Allows the user to delete an existing notification topic.
     * @param {String} token The authentication token.
     * @param {String} id The id of the notification topic to delete.
     * @param {module:api/DefaultApi~notificationtopicdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationtopicdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationtopicdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling notificationtopicdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationtopicdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationtopicget operation.
     * @callback module:api/DefaultApi~notificationtopicgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a notification topic
     * Allows the user to view an individual notification topic and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the notification topic to get.
     * @param {module:api/DefaultApi~notificationtopicgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationtopicget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationtopicget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling notificationtopicget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationtopicget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationtopiclist operation.
     * @callback module:api/DefaultApi~notificationtopiclistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the notification topics
     * Allows the user to view the list of all notification topics.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~notificationtopiclistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationtopiclist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationtopiclist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling notificationtopiclist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling notificationtopiclist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationtopiclist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationtopiclistsubscribe operation.
     * @callback module:api/DefaultApi~notificationtopiclistsubscribeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the notification topics available to subscribe
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~notificationtopiclistsubscribeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationtopiclistsubscribe(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling notificationtopiclistsubscribe");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationtopiclistsubscribe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationtopicsave operation.
     * @callback module:api/DefaultApi~notificationtopicsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a notification topic
     * Allows the user to create and edit a notification topic.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~notificationtopicsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationtopicsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationtopicsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pushderegister operation.
     * @callback module:api/DefaultApi~pushderegisterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deregisters the current device to receive push notifications
     * @param {String} devicetoken The device token where to send the notification.
     * @param {String} platform Either ios or android
     * @param {module:api/DefaultApi~pushderegisterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pushderegister(devicetoken, platform, callback) {
      let postBody = null;
      // verify the required parameter 'devicetoken' is set
      if (devicetoken === undefined || devicetoken === null) {
        throw new Error("Missing the required parameter 'devicetoken' when calling pushderegister");
      }
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling pushderegister");
      }

      let pathParams = {
      };
      let queryParams = {
        'devicetoken': devicetoken,
        'platform': platform
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/pushderegister', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pushregister operation.
     * @callback module:api/DefaultApi~pushregisterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers the current device to receive push notifications
     * @param {String} devicetoken The device token where to send the notification.
     * @param {String} platform Either ios or android
     * @param {module:api/DefaultApi~pushregisterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pushregister(devicetoken, platform, callback) {
      let postBody = null;
      // verify the required parameter 'devicetoken' is set
      if (devicetoken === undefined || devicetoken === null) {
        throw new Error("Missing the required parameter 'devicetoken' when calling pushregister");
      }
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling pushregister");
      }

      let pathParams = {
      };
      let queryParams = {
        'devicetoken': devicetoken,
        'platform': platform
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/pushregister', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qrlabelsprint operation.
     * @callback module:api/DefaultApi~qrlabelsprintCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print and email QR labels
     * Allows the user to generate a printable PDF of QR labels containing user Card Numbers to be emailed to users and used as attendance tracking for events.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.user The id of the user whose label needs to be printed.
     * @param {String} opts.group The id of the group whose members' labels need to be printed.
     * @param {module:api/DefaultApi~qrlabelsprintCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qrlabelsprint(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling qrlabelsprint");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'user': opts['user'],
        'group': opts['group']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/qrlabelsprint', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qrloginget operation.
     * @callback module:api/DefaultApi~qrlogingetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an image of a QR token
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~qrlogingetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qrloginget(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling qrloginget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/qrloginget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qrloginlogin operation.
     * @callback module:api/DefaultApi~qrloginloginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * @param {String} onetimetoken The token read from the QR code.
     * @param {module:api/DefaultApi~qrloginloginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qrloginlogin(onetimetoken, callback) {
      let postBody = null;
      // verify the required parameter 'onetimetoken' is set
      if (onetimetoken === undefined || onetimetoken === null) {
        throw new Error("Missing the required parameter 'onetimetoken' when calling qrloginlogin");
      }

      let pathParams = {
      };
      let queryParams = {
        'onetimetoken': onetimetoken
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/qrloginlogin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpaneldeletewidget operation.
     * @callback module:api/DefaultApi~quickpaneldeletewidgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a widget from the Quick Panel
     * Allows the user to delete a widget that has been added to the Quick Panel.
     * @param {String} token The authentication token.
     * @param {String} id The id of the widget.
     * @param {module:api/DefaultApi~quickpaneldeletewidgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpaneldeletewidget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling quickpaneldeletewidget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quickpaneldeletewidget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpaneldeletewidget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanelfetchwidget operation.
     * @callback module:api/DefaultApi~quickpanelfetchwidgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the information for a specific widget.
     * @param {String} token The authentication token.
     * @param {String} widgetid The ID of the data to fetch it's data.
     * @param {module:api/DefaultApi~quickpanelfetchwidgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelfetchwidget(token, widgetid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling quickpanelfetchwidget");
      }
      // verify the required parameter 'widgetid' is set
      if (widgetid === undefined || widgetid === null) {
        throw new Error("Missing the required parameter 'widgetid' when calling quickpanelfetchwidget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'widgetid': widgetid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanelfetchwidget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanelgetwidget operation.
     * @callback module:api/DefaultApi~quickpanelgetwidgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a widget included in the Quick Panel
     * Allows the user to view a widget added in as Quick Panel.
     * @param {String} token The authentication token.
     * @param {String} id The id of the widget to get.
     * @param {module:api/DefaultApi~quickpanelgetwidgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelgetwidget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling quickpanelgetwidget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quickpanelgetwidget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanelgetwidget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanelinit operation.
     * @callback module:api/DefaultApi~quickpanelinitCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the initial information required to show the quick panels
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~quickpanelinitCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelinit(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling quickpanelinit");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanelinit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanellistwidgets operation.
     * @callback module:api/DefaultApi~quickpanellistwidgetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the widgets that are added in the Quick Panel
     * Allows the user to view the widgets that have been added to the Quick Panel.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~quickpanellistwidgetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanellistwidgets(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling quickpanellistwidgets");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanellistwidgets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanellistwidgettypes operation.
     * @callback module:api/DefaultApi~quickpanellistwidgettypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the widget types available in the system
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~quickpanellistwidgettypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanellistwidgettypes(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling quickpanellistwidgettypes");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanellistwidgettypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanelreorderwidgets operation.
     * @callback module:api/DefaultApi~quickpanelreorderwidgetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reorders the widgets and moves them to a specific column
     * @param {String} token The authentication token.
     * @param {String} sectionname The section name where to sort the widgets.
     * @param {String} orderids CSV list of the widgets to reorder.
     * @param {module:api/DefaultApi~quickpanelreorderwidgetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelreorderwidgets(token, sectionname, orderids, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling quickpanelreorderwidgets");
      }
      // verify the required parameter 'sectionname' is set
      if (sectionname === undefined || sectionname === null) {
        throw new Error("Missing the required parameter 'sectionname' when calling quickpanelreorderwidgets");
      }
      // verify the required parameter 'orderids' is set
      if (orderids === undefined || orderids === null) {
        throw new Error("Missing the required parameter 'orderids' when calling quickpanelreorderwidgets");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'sectionname': sectionname,
        'orderids': orderids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanelreorderwidgets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanelsavewidget operation.
     * @callback module:api/DefaultApi~quickpanelsavewidgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves a widget for the Quick Panel
     * Allows the user to save a widget to the Quick Panel.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~quickpanelsavewidgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelsavewidget(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanelsavewidget', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportlist operation.
     * @callback module:api/DefaultApi~reportlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of available reports
     * Allows the user to view the complete list of available, canned reports.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~reportlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportlist(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling reportlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reportlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportpermissionsbyuser operation.
     * @callback module:api/DefaultApi~reportpermissionsbyuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permissions by user report
     * Lists all the users in the system including their corresponding permissions.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.params A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
     * @param {module:api/DefaultApi~reportpermissionsbyuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportpermissionsbyuser(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling reportpermissionsbyuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'params': opts['params']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reportpermissionsbyuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportprepare operation.
     * @callback module:api/DefaultApi~reportprepareCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries and loads the specified report, in background.
     * Allows the user to run reports, in background, with the exception of attendance analytics reports.
     * @param {String} token The authentication token.
     * @param {String} reportname The name of the report to execute
     * @param {Object} opts Optional parameters
     * @param {String} opts.params A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
     * @param {String} opts.repformat The format of the resulting report. Json, pdf, csv, ...
     * @param {String} opts.fillgroupid If specified, the result is used to fill the group with the given ID
     * @param {String} opts.groupby How to group the records. In the format 'col1+col2|col3+col4
     * @param {String} opts.refreshgroup The ID of the group to check (and refresh) before processing the report.
     * @param {String} opts.filtertext The user friendly text of the applied filters.
     * @param {module:api/DefaultApi~reportprepareCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportprepare(token, reportname, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling reportprepare");
      }
      // verify the required parameter 'reportname' is set
      if (reportname === undefined || reportname === null) {
        throw new Error("Missing the required parameter 'reportname' when calling reportprepare");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'reportname': reportname,
        'params': opts['params'],
        'repformat': opts['repformat'],
        'fillgroupid': opts['fillgroupid'],
        'groupby': opts['groupby'],
        'refreshgroup': opts['refreshgroup'],
        'filtertext': opts['filtertext']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reportprepare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportquery operation.
     * @callback module:api/DefaultApi~reportqueryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query and load a specified report
     * Allows the user to run reports with the exception of attendance analytics reports.
     * @param {String} token The authentication token.
     * @param {String} reportname The name of the report to execute
     * @param {Object} opts Optional parameters
     * @param {String} opts.params A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
     * @param {module:api/DefaultApi~reportqueryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportquery(token, reportname, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling reportquery");
      }
      // verify the required parameter 'reportname' is set
      if (reportname === undefined || reportname === null) {
        throw new Error("Missing the required parameter 'reportname' when calling reportquery");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'reportname': reportname,
        'params': opts['params']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reportquery', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rolelist operation.
     * @callback module:api/DefaultApi~rolelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show a list of roles
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name of the role.
     * @param {module:api/DefaultApi~rolelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rolelist(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling rolelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rolelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ruledelete operation.
     * @callback module:api/DefaultApi~ruledeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a rule
     * Allows the user to delete an existing rule.
     * @param {String} token The authentication token.
     * @param {String} id The id of the rule to delete.
     * @param {module:api/DefaultApi~ruledeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ruledelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ruledelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ruledelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ruledelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ruleget operation.
     * @callback module:api/DefaultApi~rulegetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a rule
     * Allows the user to view an individual rule and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the rule to get.
     * @param {module:api/DefaultApi~rulegetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ruleget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ruleget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ruleget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ruleget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rulegeteventtype operation.
     * @callback module:api/DefaultApi~rulegeteventtypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a rule event type
     * Allows the user to view the trigger and its available conditions for the rule.
     * @param {String} token The authentication token.
     * @param {String} event The name of the event to refresh.
     * @param {module:api/DefaultApi~rulegeteventtypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rulegeteventtype(token, event, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling rulegeteventtype");
      }
      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling rulegeteventtype");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'event': event
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulegeteventtype', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rulelist operation.
     * @callback module:api/DefaultApi~rulelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of user rules
     * Allows the user to view the list of all rules.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~rulelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rulelist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling rulelist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling rulelist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling rulelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rulelistactions operation.
     * @callback module:api/DefaultApi~rulelistactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of rule actions available
     * Allows the user to view all the available rule actions.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~rulelistactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rulelistactions(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling rulelistactions");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulelistactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rulelisteventtypes operation.
     * @callback module:api/DefaultApi~rulelisteventtypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of rule event types
     * Allows the user to view a list of available triggers for rules.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~rulelisteventtypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rulelisteventtypes(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling rulelisteventtypes");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulelisteventtypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rulelisthttprequests operation.
     * @callback module:api/DefaultApi~rulelisthttprequestsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the http requests sent as a result of a rule
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.failed If true only failed requests will be returned
     * @param {Number} opts.status The http status to filter the requests
     * @param {module:api/DefaultApi~rulelisthttprequestsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rulelisthttprequests(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling rulelisthttprequests");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling rulelisthttprequests");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling rulelisthttprequests");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'failed': opts['failed'],
        'status': opts['status'],
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulelisthttprequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rulesave operation.
     * @callback module:api/DefaultApi~rulesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a rule
     * Allows the user to create or edit a rule.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~rulesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rulesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/DefaultApi~searchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search
     * @param {String} token The authentication token.
     * @param {String} query The query to search for.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Current page to show, zero-based.
     * @param {module:api/DefaultApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    search(token, query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling search");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling search");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'query': query,
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchgetentities operation.
     * @callback module:api/DefaultApi~searchgetentitiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information of the entities that can be searched
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~searchgetentitiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchgetentities(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling searchgetentities");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/searchgetentities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityassesspermission operation.
     * @callback module:api/DefaultApi~securityassesspermissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of users for a specific permission
     * @param {String} token The authentication token.
     * @param {String} commandname Name of the action or command to get the roles.
     * @param {module:api/DefaultApi~securityassesspermissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    securityassesspermission(token, commandname, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling securityassesspermission");
      }
      // verify the required parameter 'commandname' is set
      if (commandname === undefined || commandname === null) {
        throw new Error("Missing the required parameter 'commandname' when calling securityassesspermission");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'commandname': commandname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/securityassesspermission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityassessrole operation.
     * @callback module:api/DefaultApi~securityassessroleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of permissions for a specific role
     * @param {String} token The authentication token.
     * @param {String} roleid Role ID to list the effective permissions.
     * @param {module:api/DefaultApi~securityassessroleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    securityassessrole(token, roleid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling securityassessrole");
      }
      // verify the required parameter 'roleid' is set
      if (roleid === undefined || roleid === null) {
        throw new Error("Missing the required parameter 'roleid' when calling securityassessrole");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'roleid': roleid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/securityassessrole', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityassessscope operation.
     * @callback module:api/DefaultApi~securityassessscopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of users for a specific user
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locationid Location ID to list the users with that scope.
     * @param {module:api/DefaultApi~securityassessscopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    securityassessscope(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling securityassessscope");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'locationid': opts['locationid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/securityassessscope', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityassessuser operation.
     * @callback module:api/DefaultApi~securityassessuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of permissions for a specific user
     * @param {String} token The authentication token.
     * @param {String} userid User ID to list the effective permissions.
     * @param {module:api/DefaultApi~securityassessuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    securityassessuser(token, userid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling securityassessuser");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling securityassessuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/securityassessuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregaddcurrentuser operation.
     * @callback module:api/DefaultApi~sessionregaddcurrentuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register current user to an event session
     * Allows the user to register themselves for an event.
     * @param {String} token The authentication token.
     * @param {String} eventid The id of the event.
     * @param {Date} sessiondate The date and time when the session starts.
     * @param {module:api/DefaultApi~sessionregaddcurrentuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregaddcurrentuser(token, eventid, sessiondate, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionregaddcurrentuser");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionregaddcurrentuser");
      }
      // verify the required parameter 'sessiondate' is set
      if (sessiondate === undefined || sessiondate === null) {
        throw new Error("Missing the required parameter 'sessiondate' when calling sessionregaddcurrentuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'eventid': eventid,
        'sessiondate': sessiondate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionregaddcurrentuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregadduser operation.
     * @callback module:api/DefaultApi~sessionregadduserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register users for events
     * Allows the user to register another user for an upcoming event.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to add.
     * @param {String} eventid The id of the event.
     * @param {Date} sessiondate The date and time when the session starts.
     * @param {module:api/DefaultApi~sessionregadduserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregadduser(token, userid, eventid, sessiondate, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionregadduser");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling sessionregadduser");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionregadduser");
      }
      // verify the required parameter 'sessiondate' is set
      if (sessiondate === undefined || sessiondate === null) {
        throw new Error("Missing the required parameter 'sessiondate' when calling sessionregadduser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'eventid': eventid,
        'sessiondate': sessiondate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionregadduser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionreggetmysessions operation.
     * @callback module:api/DefaultApi~sessionreggetmysessionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all the sessions the logged user is registered to
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {Date} opts._date Start date to filter the sessions.
     * @param {module:api/DefaultApi~sessionreggetmysessionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionreggetmysessions(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionreggetmysessions");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'date': opts['_date']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreggetmysessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionreggetsessions operation.
     * @callback module:api/DefaultApi~sessionreggetsessionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the registrations for a specific user
     * Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
     * @param {String} token The authentication token.
     * @param {String} userid The user id to list sessions.
     * @param {module:api/DefaultApi~sessionreggetsessionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionreggetsessions(token, userid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionreggetsessions");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling sessionreggetsessions");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreggetsessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionreggetsettings operation.
     * @callback module:api/DefaultApi~sessionreggetsettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the settings for session registration
     * Allows the user to view a event's session registration settings.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locationid The id of the location to save settings.
     * @param {String} opts.eventid The id of the event to save settings.
     * @param {Date} opts.sessiondate The date and time when the session starts.
     * @param {Boolean} opts.noinherit True to get the location/event/session specific settings without looking for the more global settings.
     * @param {module:api/DefaultApi~sessionreggetsettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionreggetsettings(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionreggetsettings");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'locationid': opts['locationid'],
        'eventid': opts['eventid'],
        'sessiondate': opts['sessiondate'],
        'noinherit': opts['noinherit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreggetsettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionreggetusers operation.
     * @callback module:api/DefaultApi~sessionreggetusersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the registrations for a specific session
     * Allows the user to view the registration for a specified event session.
     * @param {String} token The authentication token.
     * @param {String} eventid The event id to list sessions.
     * @param {Date} sessiondate The date of the session to find.
     * @param {module:api/DefaultApi~sessionreggetusersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionreggetusers(token, eventid, sessiondate, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionreggetusers");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionreggetusers");
      }
      // verify the required parameter 'sessiondate' is set
      if (sessiondate === undefined || sessiondate === null) {
        throw new Error("Missing the required parameter 'sessiondate' when calling sessionreggetusers");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'eventid': eventid,
        'sessiondate': sessiondate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreggetusers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionreglistsessions operation.
     * @callback module:api/DefaultApi~sessionreglistsessionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the sessions available for a specific event
     * Allows the user to view all the sessions available for a recurring event.
     * @param {String} token The authentication token.
     * @param {String} eventid The event id to list sessions.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.sessiondate The date of the session to find.
     * @param {module:api/DefaultApi~sessionreglistsessionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionreglistsessions(token, eventid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionreglistsessions");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionreglistsessions");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'eventid': eventid,
        'sessiondate': opts['sessiondate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreglistsessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionreglistupcoming operation.
     * @callback module:api/DefaultApi~sessionreglistupcomingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of upcoming event sessions
     * Allows the user to view the full list of upcoming events.
     * @param {String} token The authentication token.
     * @param {Date} _date Only sessions in the week of the specified date will be returned.
     * @param {module:api/DefaultApi~sessionreglistupcomingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionreglistupcoming(token, _date, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionreglistupcoming");
      }
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling sessionreglistupcoming");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'date': _date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreglistupcoming', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionreglistupcomingevent operation.
     * @callback module:api/DefaultApi~sessionreglistupcomingeventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of upcoming sessions of a particular event
     * Allows the user to view the upcoming recurring sessions of a specified event.
     * @param {String} token The authentication token.
     * @param {Date} _date Start date to filter the returned sessions.
     * @param {String} event The id of the event whose sessions will be returned
     * @param {module:api/DefaultApi~sessionreglistupcomingeventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionreglistupcomingevent(token, _date, event, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionreglistupcomingevent");
      }
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling sessionreglistupcomingevent");
      }
      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling sessionreglistupcomingevent");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'date': _date,
        'event': event
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionreglistupcomingevent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregremovecurrentuser operation.
     * @callback module:api/DefaultApi~sessionregremovecurrentuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unregister current user from an event session
     * Allows the user to un-register themselves from an event.
     * @param {String} token The authentication token.
     * @param {String} eventid The id of the event.
     * @param {Date} sessiondate The date and time when the session starts.
     * @param {module:api/DefaultApi~sessionregremovecurrentuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregremovecurrentuser(token, eventid, sessiondate, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionregremovecurrentuser");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionregremovecurrentuser");
      }
      // verify the required parameter 'sessiondate' is set
      if (sessiondate === undefined || sessiondate === null) {
        throw new Error("Missing the required parameter 'sessiondate' when calling sessionregremovecurrentuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'eventid': eventid,
        'sessiondate': sessiondate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionregremovecurrentuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregremoveuser operation.
     * @callback module:api/DefaultApi~sessionregremoveuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user from an event session
     * Allows the user to un-register another user from an event.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to remove.
     * @param {String} eventid The id of the event.
     * @param {Date} sessiondate The date and time when the session starts.
     * @param {module:api/DefaultApi~sessionregremoveuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregremoveuser(token, userid, eventid, sessiondate, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionregremoveuser");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling sessionregremoveuser");
      }
      // verify the required parameter 'eventid' is set
      if (eventid === undefined || eventid === null) {
        throw new Error("Missing the required parameter 'eventid' when calling sessionregremoveuser");
      }
      // verify the required parameter 'sessiondate' is set
      if (sessiondate === undefined || sessiondate === null) {
        throw new Error("Missing the required parameter 'sessiondate' when calling sessionregremoveuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'eventid': eventid,
        'sessiondate': sessiondate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionregremoveuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionregsavesettings operation.
     * @callback module:api/DefaultApi~sessionregsavesettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save the settings for an event's session registration
     * Allows the user to save the settings for an event.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~sessionregsavesettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionregsavesettings(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessionregsavesettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingaddlogo operation.
     * @callback module:api/DefaultApi~settingaddlogoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a logo to the account
     * Allows the user to add the logo for the account, which appears on all pages on the AccuCampus browser version.
     * @param {String} token The authentication token.
     * @param {String} upload Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).
     * @param {String} filename The original filename, needed to process the file.
     * @param {module:api/DefaultApi~settingaddlogoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    settingaddlogo(token, upload, filename, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling settingaddlogo");
      }
      // verify the required parameter 'upload' is set
      if (upload === undefined || upload === null) {
        throw new Error("Missing the required parameter 'upload' when calling settingaddlogo");
      }
      // verify the required parameter 'filename' is set
      if (filename === undefined || filename === null) {
        throw new Error("Missing the required parameter 'filename' when calling settingaddlogo");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'upload': upload,
        'filename': filename
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/settingaddlogo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingget operation.
     * @callback module:api/DefaultApi~settinggetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get settings for the account or the specified scope
     * @param {String} keys The option keys to get values for. Enter multiple separated by comma.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {String} opts.domain The account domain, in case of reading settings annonymously.
     * @param {String} opts.scope The scope of the settings to get.
     * @param {module:api/DefaultApi~settinggetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    settingget(keys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'keys' is set
      if (keys === undefined || keys === null) {
        throw new Error("Missing the required parameter 'keys' when calling settingget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'domain': opts['domain'],
        'keys': keys,
        'scope': opts['scope']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/settingget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsave operation.
     * @callback module:api/DefaultApi~settingsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save settings for the account or the specified scope
     * Allows the user to affect settings that are not specified elsewhere in permissions. This includes Attendance, Appointments, Compass, Media, and Social Activity.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~settingsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    settingsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/settingsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingviewgeneral operation.
     * @callback module:api/DefaultApi~settingviewgeneralCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View general settings for the account
     * Allows the user to view the settings' general section.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~settingviewgeneralCallback} callback The callback function, accepting three arguments: error, data, response
     */
    settingviewgeneral(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling settingviewgeneral");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/settingviewgeneral', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ssogeneratekey operation.
     * @callback module:api/DefaultApi~ssogeneratekeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate/reset single sign on access key.
     * Allows the user to generate or reset the access key for single sign-on.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~ssogeneratekeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ssogeneratekey(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ssogeneratekey");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ssogeneratekey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ssogetsettings operation.
     * @callback module:api/DefaultApi~ssogetsettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View single sign on settings.
     * Allows the user to view settings for single sign-on.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~ssogetsettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ssogetsettings(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling ssogetsettings");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ssogetsettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ssoissuetoken operation.
     * @callback module:api/DefaultApi~ssoissuetokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issue single sign-on token
     * @param {String} key The single sign-on key of the account.
     * @param {String} username The email of the user to sign-on.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.expires Specifies whether the session should expire when inactive.
     * @param {module:api/DefaultApi~ssoissuetokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ssoissuetoken(key, username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling ssoissuetoken");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling ssoissuetoken");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'username': username,
        'expires': opts['expires']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ssoissuetoken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ssosavesettings operation.
     * @callback module:api/DefaultApi~ssosavesettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit single sign-on settings.
     * Allows the user to edit settings for single sign-on.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~ssosavesettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ssosavesettings(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ssosavesettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationdelete operation.
     * @callback module:api/DefaultApi~stationdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a sign-in station
     * Allows the user to delete a sign-in station from the list of existing sign-in stations that they can view based on their scope.
     * @param {String} token The authentication token.
     * @param {String} id The id of the sign-in station to delete.
     * @param {module:api/DefaultApi~stationdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling stationdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stationdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationget operation.
     * @callback module:api/DefaultApi~stationgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a sign-in station
     * Allows the user to view an individual sign-in station and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the sign-in station to get.
     * @param {module:api/DefaultApi~stationgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling stationget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stationget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationgetcurrentterms operation.
     * @callback module:api/DefaultApi~stationgetcurrenttermsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the current terms
     * @param {String} station The id of the sign-in station whose account's current terms have to be retrieved.
     * @param {module:api/DefaultApi~stationgetcurrenttermsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationgetcurrentterms(station, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling stationgetcurrentterms");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationgetcurrentterms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationgetinfo operation.
     * @callback module:api/DefaultApi~stationgetinfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a the info to display in the sign-in station by it's ID.
     * @param {String} id The id of the sign-in station to get.
     * @param {Object} opts Optional parameters
     * @param {String} opts.event The id of the event, to override the one by schedule.
     * @param {module:api/DefaultApi~stationgetinfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationgetinfo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stationgetinfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'event': opts['event']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationgetinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationgetlicense operation.
     * @callback module:api/DefaultApi~stationgetlicenseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current license information
     * @param {String} station The id of the sign-in station whose account's license has to be retrieved.
     * @param {module:api/DefaultApi~stationgetlicenseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationgetlicense(station, callback) {
      let postBody = null;
      // verify the required parameter 'station' is set
      if (station === undefined || station === null) {
        throw new Error("Missing the required parameter 'station' when calling stationgetlicense");
      }

      let pathParams = {
      };
      let queryParams = {
        'station': station
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationgetlicense', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationlist operation.
     * @callback module:api/DefaultApi~stationlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of sign-in stations
     * Allows the user to view the list of sign-in stations, limited to the stations in the locations to which they are scoped.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~stationlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationlist(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling stationlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling stationlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling stationlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationsave operation.
     * @callback module:api/DefaultApi~stationsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a sign-in station
     * Allows the user to create, edit, or install a sign-in station based in an area to which they are scoped.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~stationsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stationunlock operation.
     * @callback module:api/DefaultApi~stationunlockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlocks the sign-in station.
     * @param {String} id The id of the sign-in station to unlock.
     * @param {String} passcode The passcode to unlock the station.
     * @param {String} method The authentication method. Valid values are 'token' and 'cookie'.
     * @param {module:api/DefaultApi~stationunlockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stationunlock(id, passcode, method, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stationunlock");
      }
      // verify the required parameter 'passcode' is set
      if (passcode === undefined || passcode === null) {
        throw new Error("Missing the required parameter 'passcode' when calling stationunlock");
      }
      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling stationunlock");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'passcode': passcode,
        'method': method
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stationunlock', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the swipedelete operation.
     * @callback module:api/DefaultApi~swipedeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a swipe
     * Allows the user to delete an existing attendance swipe.
     * @param {String} token The authentication token.
     * @param {String} id The id of the swipe to delete.
     * @param {module:api/DefaultApi~swipedeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    swipedelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling swipedelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling swipedelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/swipedelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the swipeget operation.
     * @callback module:api/DefaultApi~swipegetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a swipe
     * Allows the user to view an individual attendance swipe.
     * @param {String} token The authentication token.
     * @param {String} id The id of the swipe to get.
     * @param {module:api/DefaultApi~swipegetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    swipeget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling swipeget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling swipeget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/swipeget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the swipelist operation.
     * @callback module:api/DefaultApi~swipelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of swipes
     * Allows the user to view a list of all swipes for the location or locations in which the user is scoped.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {module:api/DefaultApi~swipelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    swipelist(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling swipelist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling swipelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/swipelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the swipesave operation.
     * @callback module:api/DefaultApi~swipesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a swipe, and if possible, save the related attendance log
     * Allows the user to save an attendance swipe, which will also save the attendance log if the information in the swipe is enough.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~swipesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    swipesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/swipesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the swipesaveanonym operation.
     * @callback module:api/DefaultApi~swipesaveanonymCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new swipe from a sign-in station, and if possible, creates the attendance log
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~swipesaveanonymCallback} callback The callback function, accepting three arguments: error, data, response
     */
    swipesaveanonym(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/swipesaveanonym', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagdelete operation.
     * @callback module:api/DefaultApi~tagdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag
     * Allows the user to delete an existing tag.
     * @param {String} token The authentication token.
     * @param {String} id The id of the tag to delete.
     * @param {module:api/DefaultApi~tagdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling tagdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tagdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tagdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagget operation.
     * @callback module:api/DefaultApi~taggetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a specified tag
     * Allows the user to click on and view the settings for a tag.
     * @param {String} token The authentication token.
     * @param {String} id The id of the tag to get.
     * @param {module:api/DefaultApi~taggetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling tagget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tagget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tagget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taglist operation.
     * @callback module:api/DefaultApi~taglistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of tags
     * Allows the user to view the list of tags.
     * @param {String} token The authentication token.
     * @param {String} group The group of the tags to return.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~taglistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    taglist(token, group, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling taglist");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling taglist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling taglist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling taglist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'group': group,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/taglist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taglistgroups operation.
     * @callback module:api/DefaultApi~taglistgroupsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of entities that can be tagged
     * Allows the user to view the list of user roles that can be tagged, according to that tag's settings.
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~taglistgroupsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    taglistgroups(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling taglistgroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/taglistgroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsave operation.
     * @callback module:api/DefaultApi~tagsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a tag
     * Allows the user to create or edit a tag.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~tagsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tagsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsearch operation.
     * @callback module:api/DefaultApi~tagsearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for tags in the account
     * Allows the user to search for tags.
     * @param {String} token The authentication token.
     * @param {String} query The query to search tags. Use group:<group> to search in a specific group (mandatory).
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.allowcreatingnew Specifies whether an option to create a new tag should be retrieved.
     * @param {module:api/DefaultApi~tagsearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagsearch(token, query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling tagsearch");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling tagsearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'query': query,
        'allowcreatingnew': opts['allowcreatingnew']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tagsearch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateaddimage operation.
     * @callback module:api/DefaultApi~templateaddimageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an image to a template
     * Allows the user to add an image to a badge or certificate template.
     * @param {String} token The authentication token.
     * @param {String} template The id of the template where the image has to be added
     * @param {String} upload Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).
     * @param {Object} opts Optional parameters
     * @param {String} opts.filename The local name of the uploaded file. For later reference.
     * @param {module:api/DefaultApi~templateaddimageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templateaddimage(token, template, upload, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling templateaddimage");
      }
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling templateaddimage");
      }
      // verify the required parameter 'upload' is set
      if (upload === undefined || upload === null) {
        throw new Error("Missing the required parameter 'upload' when calling templateaddimage");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'template': template,
        'upload': upload,
        'filename': opts['filename']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templateaddimage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatedelete operation.
     * @callback module:api/DefaultApi~templatedeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a template
     * Allows the user to delete an existing template.
     * @param {String} token The authentication token.
     * @param {String} id The id of the template to delete.
     * @param {module:api/DefaultApi~templatedeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templatedelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling templatedelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling templatedelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templatedelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateemail operation.
     * @callback module:api/DefaultApi~templateemailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send generated templates by email
     * Allows the user to send generated templates via email through AccuCampus.
     * @param {String} token The authentication token.
     * @param {String} jobid The id of the job that is creating the templates.
     * @param {String} emailsubject Args depending on the send-to flag.
     * @param {String} emailbody Args depending on the send-to flag.
     * @param {Object} opts Optional parameters
     * @param {String} opts.templatekind The kind of the template you're sending. It must be included in (badge, certificate).
     * @param {String} opts.emailfrom The name of the sender to be displayed in the receipients inbox
     * @param {String} opts.emailreplyto The reply-to field for the emails.
     * @param {module:api/DefaultApi~templateemailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templateemail(token, jobid, emailsubject, emailbody, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling templateemail");
      }
      // verify the required parameter 'jobid' is set
      if (jobid === undefined || jobid === null) {
        throw new Error("Missing the required parameter 'jobid' when calling templateemail");
      }
      // verify the required parameter 'emailsubject' is set
      if (emailsubject === undefined || emailsubject === null) {
        throw new Error("Missing the required parameter 'emailsubject' when calling templateemail");
      }
      // verify the required parameter 'emailbody' is set
      if (emailbody === undefined || emailbody === null) {
        throw new Error("Missing the required parameter 'emailbody' when calling templateemail");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'jobid': jobid,
        'templatekind': opts['templatekind'],
        'emailfrom': opts['emailfrom'],
        'emailreplyto': opts['emailreplyto'],
        'emailsubject': emailsubject,
        'emailbody': emailbody
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templateemail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templategenerate operation.
     * @callback module:api/DefaultApi~templategenerateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate specified templates
     * Allows the user to generate an existing template as badges or certificates.
     * @param {String} token The authentication token.
     * @param {String} template The id of the template to generate.
     * @param {String} source The source key of the selected template data source.
     * @param {Boolean} singlefile True if all the templates should be placed in the same file, false if each one shoud be in its own file.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userid Only the template for these users is created (and emailed if 'email' is true), enter multiple separated by commas.
     * @param {Boolean} opts.forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading
     * @param {String} opts.role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor
     * @param {String} opts.filters Pipe separated filters for the generation, eg: aaa=val|bbb=val|...
     * @param {module:api/DefaultApi~templategenerateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templategenerate(token, template, source, singlefile, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling templategenerate");
      }
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling templategenerate");
      }
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling templategenerate");
      }
      // verify the required parameter 'singlefile' is set
      if (singlefile === undefined || singlefile === null) {
        throw new Error("Missing the required parameter 'singlefile' when calling templategenerate");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'template': template,
        'source': source,
        'singlefile': singlefile,
        'userid': opts['userid'],
        'forsending': opts['forsending'],
        'role': opts['role'],
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templategenerate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateget operation.
     * @callback module:api/DefaultApi~templategetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a template
     * Allows the user to view a template and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the template to get.
     * @param {module:api/DefaultApi~templategetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templateget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling templateget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling templateget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templateget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templategetgenerated operation.
     * @callback module:api/DefaultApi~templategetgeneratedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View generated templates
     * Allows the user to view templates which have been generated as badges or certificates.
     * @param {String} token The authentication token.
     * @param {String} jobid The id of the job that is creating the templates.
     * @param {module:api/DefaultApi~templategetgeneratedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templategetgenerated(token, jobid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling templategetgenerated");
      }
      // verify the required parameter 'jobid' is set
      if (jobid === undefined || jobid === null) {
        throw new Error("Missing the required parameter 'jobid' when calling templategetgenerated");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'jobid': jobid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templategetgenerated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatelist operation.
     * @callback module:api/DefaultApi~templatelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of defined templates
     * Allows the user to view the full list of created templates.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {String} kind The kind of the templates to return. It must be included in (badge, certificate).
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.designedonly If true then it only returns the templates that were designed. Otherwise, it returns all.
     * @param {module:api/DefaultApi~templatelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templatelist(token, from, count, kind, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling templatelist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling templatelist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling templatelist");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling templatelist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'kind': kind,
        'designedonly': opts['designedonly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templatelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatelistsources operation.
     * @callback module:api/DefaultApi~templatelistsourcesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of templates' data sources
     * Allows the user to see tokens to be used in the template
     * @param {String} token The authentication token.
     * @param {String} kind The kind of the templates to return. It must be included in (badge, certificate).
     * @param {module:api/DefaultApi~templatelistsourcesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templatelistsources(token, kind, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling templatelistsources");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling templatelistsources");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'kind': kind
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templatelistsources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesave operation.
     * @callback module:api/DefaultApi~templatesaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a template
     * Allows the user to create or edit a template.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~templatesaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templatesave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templatesave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesavelayout operation.
     * @callback module:api/DefaultApi~templatesavelayoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save the layout of a template
     * Allows the user to edit a template's layout.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~templatesavelayoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templatesavelayout(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templatesavelayout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the termdelete operation.
     * @callback module:api/DefaultApi~termdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a term
     * Allows the user to delete a term from the existing list.
     * @param {String} token The authentication token.
     * @param {String} id The id of the term to delete.
     * @param {module:api/DefaultApi~termdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    termdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling termdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling termdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/termdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the termget operation.
     * @callback module:api/DefaultApi~termgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a term
     * Allows the user to view a term and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the term to get.
     * @param {module:api/DefaultApi~termgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    termget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling termget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling termget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/termget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the termlist operation.
     * @callback module:api/DefaultApi~termlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of all terms
     * Allows the user to view the full list of existing term.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The first record to return.
     * @param {Number} opts.count The max number of records to return.
     * @param {Boolean} opts.notpast Specifies whether the terms in the past should be returned or not.
     * @param {module:api/DefaultApi~termlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    termlist(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling termlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': opts['from'],
        'count': opts['count'],
        'notpast': opts['notpast']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/termlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the termsave operation.
     * @callback module:api/DefaultApi~termsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create and edit terms
     * Allows the user to create and edit terms.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~termsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    termsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/termsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the textcreditremaining operation.
     * @callback module:api/DefaultApi~textcreditremainingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the remaining text credits for the account
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~textcreditremainingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    textcreditremaining(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling textcreditremaining");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/textcreditremaining', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the texttoimage operation.
     * @callback module:api/DefaultApi~texttoimageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a dynamic image from text
     * @param {String} token The authentication token.
     * @param {String} text The text to convert to an image, use double pipes (||) as a new line.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fontcolor The color of the text, in hex format, without the #.
     * @param {Number} opts.fontsize The size of the text, in points.
     * @param {String} opts.direction Either vertical or horizontal, default horizontal.
     * @param {Number} opts.width The image width in pixels (or height if the direction is vertical).
     * @param {module:api/DefaultApi~texttoimageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    texttoimage(token, text, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling texttoimage");
      }
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling texttoimage");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'text': text,
        'fontcolor': opts['fontcolor'],
        'fontsize': opts['fontsize'],
        'direction': opts['direction'],
        'width': opts['width']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/texttoimage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translationget operation.
     * @callback module:api/DefaultApi~translationgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the translations of the specified values
     * @param {String} token The authentication token.
     * @param {String} universal Pipe separated list of universal text to be translated.
     * @param {module:api/DefaultApi~translationgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    translationget(token, universal, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling translationget");
      }
      // verify the required parameter 'universal' is set
      if (universal === undefined || universal === null) {
        throw new Error("Missing the required parameter 'universal' when calling translationget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'universal': universal
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/translationget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translationgetcachefile operation.
     * @callback module:api/DefaultApi~translationgetcachefileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the file containing the translations
     * @param {Object} opts Optional parameters
     * @param {String} opts.token The authentication token.
     * @param {String} opts.account The id of the account whose translations file has to be retrieved.
     * @param {module:api/DefaultApi~translationgetcachefileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    translationgetcachefile(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'account': opts['account']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/translationgetcachefile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translationlist operation.
     * @callback module:api/DefaultApi~translationlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the available translations in the system
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Text to search/filter translations.
     * @param {Boolean} opts.nondefaultonly If true then it returns only the terms translated. Otherwise, it returns all.
     * @param {Boolean} opts.appdefaultasuniversal If true then it uses the app default translation as the universal term.
     * @param {module:api/DefaultApi~translationlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    translationlist(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling translationlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'filter': opts['filter'],
        'nondefaultonly': opts['nondefaultonly'],
        'appdefaultasuniversal': opts['appdefaultasuniversal']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/translationlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translationsave operation.
     * @callback module:api/DefaultApi~translationsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a translation
     * Allows the user to edit a translation for the entire account.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~translationsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    translationsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/translationsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userchangepwd operation.
     * @callback module:api/DefaultApi~userchangepwdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change user's own password
     * Allows the user to change their own password.
     * @param {String} token The authentication token.
     * @param {String} oldpass The old password of the authenticated user.
     * @param {String} newpass The new password of the authenticated user.
     * @param {module:api/DefaultApi~userchangepwdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userchangepwd(token, oldpass, newpass, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userchangepwd");
      }
      // verify the required parameter 'oldpass' is set
      if (oldpass === undefined || oldpass === null) {
        throw new Error("Missing the required parameter 'oldpass' when calling userchangepwd");
      }
      // verify the required parameter 'newpass' is set
      if (newpass === undefined || newpass === null) {
        throw new Error("Missing the required parameter 'newpass' when calling userchangepwd");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'oldpass': oldpass,
        'newpass': newpass
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userchangepwd', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userchangepwdbyreq operation.
     * @callback module:api/DefaultApi~userchangepwdbyreqCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the user password using a change password request id
     * @param {String} changereq The change password request ID sent by email to the user.
     * @param {String} newpass The new password of the user.
     * @param {module:api/DefaultApi~userchangepwdbyreqCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userchangepwdbyreq(changereq, newpass, callback) {
      let postBody = null;
      // verify the required parameter 'changereq' is set
      if (changereq === undefined || changereq === null) {
        throw new Error("Missing the required parameter 'changereq' when calling userchangepwdbyreq");
      }
      // verify the required parameter 'newpass' is set
      if (newpass === undefined || newpass === null) {
        throw new Error("Missing the required parameter 'newpass' when calling userchangepwdbyreq");
      }

      let pathParams = {
      };
      let queryParams = {
        'changereq': changereq,
        'newpass': newpass
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userchangepwdbyreq', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userdelete operation.
     * @callback module:api/DefaultApi~userdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user
     * Allows the user to delete a user.
     * @param {String} token The authentication token.
     * @param {String} id The id of the user to delete.
     * @param {module:api/DefaultApi~userdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userfindsimilar operation.
     * @callback module:api/DefaultApi~userfindsimilarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds similar users to prevent duplicates
     * Allows the user to be warned if a user they are creating has the same card number as another user.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {String} opts.currentid The id of the current user.
     * @param {String} opts.phonenumber A phone number to search for similar users.
     * @param {String} opts.cardnumber A card number to search for similar users.
     * @param {module:api/DefaultApi~userfindsimilarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userfindsimilar(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userfindsimilar");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'currentid': opts['currentid'],
        'phonenumber': opts['phonenumber'],
        'cardnumber': opts['cardnumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userfindsimilar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userget operation.
     * @callback module:api/DefaultApi~usergetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a user
     * Allows the user to search and view a user and their details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the user to get.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~usergetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userget(token, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergetbycard operation.
     * @callback module:api/DefaultApi~usergetbycardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search user by card number
     * Allows the user to search for a user by their card number.
     * @param {String} token The authentication token.
     * @param {String} card The card number of the user to get.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~usergetbycardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergetbycard(token, card, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergetbycard");
      }
      // verify the required parameter 'card' is set
      if (card === undefined || card === null) {
        throw new Error("Missing the required parameter 'card' when calling usergetbycard");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'card': card,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergetbycard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupaddmember operation.
     * @callback module:api/DefaultApi~usergroupaddmemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a user to a group
     * Allows the user to add a user to a group that they have permission to edit.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to add.
     * @param {String} groupid The id of the group.
     * @param {module:api/DefaultApi~usergroupaddmemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupaddmember(token, userid, groupid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupaddmember");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling usergroupaddmember");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling usergroupaddmember");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'groupid': groupid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroupaddmember', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupdelete operation.
     * @callback module:api/DefaultApi~usergroupdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a group
     * Allows the user to delete a group that they have permission to edit.
     * @param {String} token The authentication token.
     * @param {String} id The id of the group to delete.
     * @param {module:api/DefaultApi~usergroupdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupdelete(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupdelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usergroupdelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroupdelete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupget operation.
     * @callback module:api/DefaultApi~usergroupgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a user group
     * Allows the user to view a user group and its details.
     * @param {String} token The authentication token.
     * @param {String} id The id of the user group to get.
     * @param {module:api/DefaultApi~usergroupgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupget(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupget");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usergroupget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroupget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupgetmembers operation.
     * @callback module:api/DefaultApi~usergroupgetmembersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the members of a user group
     * Allows the user to view the list of users in a group that they have permission to view.
     * @param {String} token The authentication token.
     * @param {String} groupid The id of the user group to get.
     * @param {module:api/DefaultApi~usergroupgetmembersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupgetmembers(token, groupid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupgetmembers");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling usergroupgetmembers");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'groupid': groupid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroupgetmembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupgetuser operation.
     * @callback module:api/DefaultApi~usergroupgetuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the groups which a user is registered to
     * Allows the user to view the groups an individual user is registered to, based on group and user permissions.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to get his groups.
     * @param {module:api/DefaultApi~usergroupgetuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupgetuser(token, userid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupgetuser");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling usergroupgetuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroupgetuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergrouplist operation.
     * @callback module:api/DefaultApi~usergrouplistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of user groups
     * Allows the user to view the list of groups that they have permission to view.
     * @param {String} token The authentication token.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The first record to return.
     * @param {Number} opts.count The max number of records to return.
     * @param {String} opts.type The type of the groups to return. Either 'user', 'dynamic' or any other type of group.
     * @param {module:api/DefaultApi~usergrouplistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergrouplist(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergrouplist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': opts['from'],
        'count': opts['count'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergrouplist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergrouprefresh operation.
     * @callback module:api/DefaultApi~usergrouprefreshCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh the dynamic group
     * Allows the user to refresh a dynamic group that they have permission to edit.
     * @param {String} token The authentication token.
     * @param {String} group The ID of the group to refresh.
     * @param {module:api/DefaultApi~usergrouprefreshCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergrouprefresh(token, group, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergrouprefresh");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling usergrouprefresh");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'group': group
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergrouprefresh', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupremovemember operation.
     * @callback module:api/DefaultApi~usergroupremovememberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user from a group
     * Allows the user to remove a user from a group that they have permission to edit.
     * @param {String} token The authentication token.
     * @param {String} userid The id of the user to remove.
     * @param {String} groupid The id of the group.
     * @param {module:api/DefaultApi~usergroupremovememberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupremovemember(token, userid, groupid, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupremovemember");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling usergroupremovemember");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling usergroupremovemember");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'userid': userid,
        'groupid': groupid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroupremovemember', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupsave operation.
     * @callback module:api/DefaultApi~usergroupsaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a group
     * Allows the user to create a new group or edit a group that they have permission to edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~usergroupsaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupsave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroupsave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userlist operation.
     * @callback module:api/DefaultApi~userlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of users
     * Allows the user to view the full list of users and is based on role permissions.
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.roleid The id of the role to filter users by, or empty to return all users.
     * @param {String} opts.onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/DefaultApi~userlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userlist(token, from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userlist");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling userlist");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling userlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count,
        'roleid': opts['roleid'],
        'onlywithoutcard': opts['onlywithoutcard'],
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userloadphoto operation.
     * @callback module:api/DefaultApi~userloadphotoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a photo for a specific user
     * Allows the user to upload a photo for a user.
     * @param {String} token The authentication token.
     * @param {String} upload Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).
     * @param {Object} opts Optional parameters
     * @param {String} opts.filename The local name of the uploaded file. For later reference.
     * @param {String} opts.userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in 'user.save'.
     * @param {Boolean} opts.automatch Set this to true to find the specific user based on the file name. 
     * @param {module:api/DefaultApi~userloadphotoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userloadphoto(token, upload, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userloadphoto");
      }
      // verify the required parameter 'upload' is set
      if (upload === undefined || upload === null) {
        throw new Error("Missing the required parameter 'upload' when calling userloadphoto");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'upload': upload,
        'filename': opts['filename'],
        'userid': opts['userid'],
        'automatch': opts['automatch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userloadphoto', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usermovedata operation.
     * @callback module:api/DefaultApi~usermovedataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move data between users
     * Allows administrators to move data between users.
     * @param {String} token The authentication token.
     * @param {String} source The id of the user that is the source of the data.
     * @param {String} destination The id of the user that is the destination of the data.
     * @param {module:api/DefaultApi~usermovedataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usermovedata(token, source, destination, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usermovedata");
      }
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling usermovedata");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling usermovedata");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'source': source,
        'destination': destination
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usermovedata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userrequestpwdchange operation.
     * @callback module:api/DefaultApi~userrequestpwdchangeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests a password change
     * @param {String} domain The domain of the account where the user exists.
     * @param {String} email The email of the user.
     * @param {module:api/DefaultApi~userrequestpwdchangeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userrequestpwdchange(domain, email, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling userrequestpwdchange");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling userrequestpwdchange");
      }

      let pathParams = {
      };
      let queryParams = {
        'domain': domain,
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/userrequestpwdchange', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersave operation.
     * @callback module:api/DefaultApi~usersaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a user
     * Allows the user to create or edit a user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~usersaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usersave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersavepwdchange operation.
     * @callback module:api/DefaultApi~usersavepwdchangeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send email to the specified user(s) to set/change their passwords
     * Allows the user to trigger an email to another user asking them to set or change their password.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~usersavepwdchangeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersavepwdchange(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usersavepwdchange', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersettingsget operation.
     * @callback module:api/DefaultApi~usersettingsgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists available user settings
     * @param {String} token The authentication token.
     * @param {String} keys Setting key to get. Can be multiple separated by commas.
     * @param {Object} opts Optional parameters
     * @param {String} opts.user The user id whose settings have to be returned.
     * @param {module:api/DefaultApi~usersettingsgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersettingsget(token, keys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usersettingsget");
      }
      // verify the required parameter 'keys' is set
      if (keys === undefined || keys === null) {
        throw new Error("Missing the required parameter 'keys' when calling usersettingsget");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'keys': keys,
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usersettingsget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersettingsgetmultiple operation.
     * @callback module:api/DefaultApi~usersettingsgetmultipleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get multiple user settings
     * @param {String} token The authentication token.
     * @param {String} keys Setting key to get. Can be multiple separated by commas.
     * @param {Object} opts Optional parameters
     * @param {String} opts.user The user id whose settings have to be returned.
     * @param {module:api/DefaultApi~usersettingsgetmultipleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersettingsgetmultiple(token, keys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usersettingsgetmultiple");
      }
      // verify the required parameter 'keys' is set
      if (keys === undefined || keys === null) {
        throw new Error("Missing the required parameter 'keys' when calling usersettingsgetmultiple");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'keys': keys,
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usersettingsgetmultiple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersettingssave operation.
     * @callback module:api/DefaultApi~usersettingssaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves a user setting
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~usersettingssaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersettingssave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usersettingssave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersettingssavemultiple operation.
     * @callback module:api/DefaultApi~usersettingssavemultipleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save multiple user settings at once
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~usersettingssavemultipleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersettingssavemultiple(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usersettingssavemultiple', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usertaskdeleteplan operation.
     * @callback module:api/DefaultApi~usertaskdeleteplanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a task plan
     * @param {String} token The authentication token.
     * @param {String} id The id of the task plan to delete.
     * @param {module:api/DefaultApi~usertaskdeleteplanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usertaskdeleteplan(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usertaskdeleteplan");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usertaskdeleteplan");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usertaskdeleteplan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usertaskgetmine operation.
     * @callback module:api/DefaultApi~usertaskgetmineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the task plans of the logged user
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~usertaskgetmineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usertaskgetmine(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usertaskgetmine");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usertaskgetmine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usertaskgetplan operation.
     * @callback module:api/DefaultApi~usertaskgetplanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a task plan by Id
     * @param {String} token The authentication token.
     * @param {String} id The id of the task plan to get.
     * @param {module:api/DefaultApi~usertaskgetplanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usertaskgetplan(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usertaskgetplan");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usertaskgetplan");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usertaskgetplan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usertasklistdefs operation.
     * @callback module:api/DefaultApi~usertasklistdefsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists task types or definitions
     * @param {module:api/DefaultApi~usertasklistdefsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usertasklistdefs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usertasklistdefs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usertasklistplan operation.
     * @callback module:api/DefaultApi~usertasklistplanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists task plans
     * @param {String} token The authentication token.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {module:api/DefaultApi~usertasklistplanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usertasklistplan(token, from, count, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usertasklistplan");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling usertasklistplan");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling usertasklistplan");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usertasklistplan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usertasksaveplan operation.
     * @callback module:api/DefaultApi~usertasksaveplanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves a task plan
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/DefaultApi~usertasksaveplanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usertasksaveplan(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usertasksaveplan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the version operation.
     * @callback module:api/DefaultApi~versionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current version information
     * @param {String} token The authentication token.
     * @param {module:api/DefaultApi~versionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    version(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling version");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/version', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
