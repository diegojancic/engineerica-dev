/**
 * AccuTraining OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Quickpanel service.
* @module api/QuickpanelApi
* @version 1.0.0
*/
export default class QuickpanelApi {

    /**
    * Constructs a new QuickpanelApi. 
    * @alias module:api/QuickpanelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the quickpanelDeletewidget operation.
     * @callback module:api/QuickpanelApi~quickpanelDeletewidgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a widget from the Quick Panel
     * Allows the user to delete a widget that has been added to the Quick Panel.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/QuickpanelApi~quickpanelDeletewidgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelDeletewidget(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanel/deletewidget', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanelFetchwidget operation.
     * @callback module:api/QuickpanelApi~quickpanelFetchwidgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the information for a specific widget.
     * @param {String} widgetid The ID of the data to fetch it's data.
     * @param {module:api/QuickpanelApi~quickpanelFetchwidgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelFetchwidget(widgetid, callback) {
      let postBody = null;
      // verify the required parameter 'widgetid' is set
      if (widgetid === undefined || widgetid === null) {
        throw new Error("Missing the required parameter 'widgetid' when calling quickpanelFetchwidget");
      }

      let pathParams = {
      };
      let queryParams = {
        'widgetid': widgetid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanel/fetchwidget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanelGetwidget operation.
     * @callback module:api/QuickpanelApi~quickpanelGetwidgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a widget included in the Quick Panel
     * Allows the user to view a widget added in as Quick Panel.
     * @param {String} id The id of the widget to get.
     * @param {module:api/QuickpanelApi~quickpanelGetwidgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelGetwidget(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quickpanelGetwidget");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanel/getwidget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanelInit operation.
     * @callback module:api/QuickpanelApi~quickpanelInitCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the initial information required to show the quick panels
     * @param {module:api/QuickpanelApi~quickpanelInitCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelInit(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanel/init', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanelListwidgets operation.
     * @callback module:api/QuickpanelApi~quickpanelListwidgetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the widgets that are added in the Quick Panel
     * Allows the user to view the widgets that have been added to the Quick Panel.
     * @param {module:api/QuickpanelApi~quickpanelListwidgetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelListwidgets(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanel/listwidgets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanelListwidgettypes operation.
     * @callback module:api/QuickpanelApi~quickpanelListwidgettypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the widget types available in the system
     * @param {module:api/QuickpanelApi~quickpanelListwidgettypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelListwidgettypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanel/listwidgettypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanelReorderwidgets operation.
     * @callback module:api/QuickpanelApi~quickpanelReorderwidgetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reorders the widgets and moves them to a specific column
     * @param {String} sectionname The section name where to sort the widgets.
     * @param {String} orderids CSV list of the widgets to reorder.
     * @param {module:api/QuickpanelApi~quickpanelReorderwidgetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelReorderwidgets(sectionname, orderids, callback) {
      let postBody = null;
      // verify the required parameter 'sectionname' is set
      if (sectionname === undefined || sectionname === null) {
        throw new Error("Missing the required parameter 'sectionname' when calling quickpanelReorderwidgets");
      }
      // verify the required parameter 'orderids' is set
      if (orderids === undefined || orderids === null) {
        throw new Error("Missing the required parameter 'orderids' when calling quickpanelReorderwidgets");
      }

      let pathParams = {
      };
      let queryParams = {
        'sectionname': sectionname,
        'orderids': orderids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanel/reorderwidgets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickpanelSavewidget operation.
     * @callback module:api/QuickpanelApi~quickpanelSavewidgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves a widget for the Quick Panel
     * Allows the user to save a widget to the Quick Panel.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/QuickpanelApi~quickpanelSavewidgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quickpanelSavewidget(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quickpanel/savewidget', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
