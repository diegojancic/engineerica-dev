/**
 * AccuTraining OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Usersettings service.
* @module api/UsersettingsApi
* @version 1.0.0
*/
export default class UsersettingsApi {

    /**
    * Constructs a new UsersettingsApi. 
    * @alias module:api/UsersettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersettingsGet operation.
     * @callback module:api/UsersettingsApi~usersettingsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists available user settings
     * @param {String} keys Setting key to get. Can be multiple separated by commas.
     * @param {Object} opts Optional parameters
     * @param {String} opts.user The user id whose settings have to be returned.
     * @param {module:api/UsersettingsApi~usersettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersettingsGet(keys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'keys' is set
      if (keys === undefined || keys === null) {
        throw new Error("Missing the required parameter 'keys' when calling usersettingsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'keys': keys,
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usersettings/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersettingsGetmultiple operation.
     * @callback module:api/UsersettingsApi~usersettingsGetmultipleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get multiple user settings
     * @param {String} keys Setting key to get. Can be multiple separated by commas.
     * @param {Object} opts Optional parameters
     * @param {String} opts.user The user id whose settings have to be returned.
     * @param {module:api/UsersettingsApi~usersettingsGetmultipleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersettingsGetmultiple(keys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'keys' is set
      if (keys === undefined || keys === null) {
        throw new Error("Missing the required parameter 'keys' when calling usersettingsGetmultiple");
      }

      let pathParams = {
      };
      let queryParams = {
        'keys': keys,
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usersettings/getmultiple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersettingsSave operation.
     * @callback module:api/UsersettingsApi~usersettingsSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves a user setting
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/UsersettingsApi~usersettingsSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersettingsSave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usersettings/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersettingsSavemultiple operation.
     * @callback module:api/UsersettingsApi~usersettingsSavemultipleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save multiple user settings at once
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/UsersettingsApi~usersettingsSavemultipleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersettingsSavemultiple(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usersettings/savemultiple', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
