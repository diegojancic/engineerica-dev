/**
 * AccuTraining OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Setting service.
* @module api/SettingApi
* @version 1.0.0
*/
export default class SettingApi {

    /**
    * Constructs a new SettingApi. 
    * @alias module:api/SettingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the settingAddlogo operation.
     * @callback module:api/SettingApi~settingAddlogoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a logo to the account
     * Allows the user to add the logo for the account, which appears on all pages on the AccuTraining browser version.
     * @param {String} upload Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).
     * @param {String} filename The original filename, needed to process the file.
     * @param {module:api/SettingApi~settingAddlogoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    settingAddlogo(upload, filename, callback) {
      let postBody = null;
      // verify the required parameter 'upload' is set
      if (upload === undefined || upload === null) {
        throw new Error("Missing the required parameter 'upload' when calling settingAddlogo");
      }
      // verify the required parameter 'filename' is set
      if (filename === undefined || filename === null) {
        throw new Error("Missing the required parameter 'filename' when calling settingAddlogo");
      }

      let pathParams = {
      };
      let queryParams = {
        'upload': upload,
        'filename': filename
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/setting/addlogo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingGet operation.
     * @callback module:api/SettingApi~settingGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get settings for the account or the specified scope
     * @param {String} keys The option keys to get values for. Enter multiple separated by comma.
     * @param {Object} opts Optional parameters
     * @param {String} opts.domain The account domain, in case of reading settings annonymously.
     * @param {String} opts.scope The scope of the settings to get.
     * @param {module:api/SettingApi~settingGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    settingGet(keys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'keys' is set
      if (keys === undefined || keys === null) {
        throw new Error("Missing the required parameter 'keys' when calling settingGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'domain': opts['domain'],
        'keys': keys,
        'scope': opts['scope']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/setting/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingSave operation.
     * @callback module:api/SettingApi~settingSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save settings for the account or the specified scope
     * Allows the user to affect settings that are not specified elsewhere in permissions. This includes Attendance, Appointments, Compass, Media, and Social Activity.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/SettingApi~settingSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    settingSave(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/setting/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingViewgeneral operation.
     * @callback module:api/SettingApi~settingViewgeneralCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View general settings for the account
     * Allows the user to view the settings' general section.
     * @param {module:api/SettingApi~settingViewgeneralCallback} callback The callback function, accepting three arguments: error, data, response
     */
    settingViewgeneral(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/setting/viewgeneral', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
