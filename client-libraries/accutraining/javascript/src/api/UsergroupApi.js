/**
 * AccuTraining OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Usergroup service.
* @module api/UsergroupApi
* @version 1.0.0
*/
export default class UsergroupApi {

    /**
    * Constructs a new UsergroupApi. 
    * @alias module:api/UsergroupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usergroupAddmember operation.
     * @callback module:api/UsergroupApi~usergroupAddmemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a user to a group
     * Allows the user to add a user to a group that they have permission to edit.
     * @param {String} userid The id of the user to add.
     * @param {String} groupid The id of the group.
     * @param {module:api/UsergroupApi~usergroupAddmemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupAddmember(userid, groupid, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling usergroupAddmember");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling usergroupAddmember");
      }

      let pathParams = {
      };
      let queryParams = {
        'userid': userid,
        'groupid': groupid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroup/addmember', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupDelete operation.
     * @callback module:api/UsergroupApi~usergroupDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a group
     * Allows the user to delete a group that they have permission to edit.
     * @param {String} id The id of the group to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnyType} opts.body 
     * @param {module:api/UsergroupApi~usergroupDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usergroupDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroup/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupGet operation.
     * @callback module:api/UsergroupApi~usergroupGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a user group
     * Allows the user to view a user group and its details.
     * @param {String} id The id of the user group to get.
     * @param {module:api/UsergroupApi~usergroupGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usergroupGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroup/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupGetmembers operation.
     * @callback module:api/UsergroupApi~usergroupGetmembersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the members of a user group
     * Allows the user to view the list of users in a group that they have permission to view.
     * @param {String} groupid The id of the user group to get.
     * @param {module:api/UsergroupApi~usergroupGetmembersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupGetmembers(groupid, callback) {
      let postBody = null;
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling usergroupGetmembers");
      }

      let pathParams = {
      };
      let queryParams = {
        'groupid': groupid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroup/getmembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupGetuser operation.
     * @callback module:api/UsergroupApi~usergroupGetuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the groups which a user is registered to
     * Allows the user to view the groups an individual user is registered to, based on group and user permissions.
     * @param {String} userid The id of the user to get his groups.
     * @param {module:api/UsergroupApi~usergroupGetuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupGetuser(userid, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling usergroupGetuser");
      }

      let pathParams = {
      };
      let queryParams = {
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroup/getuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupList operation.
     * @callback module:api/UsergroupApi~usergroupListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of user groups
     * Allows the user to view the list of groups that they have permission to view.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The first record to return.
     * @param {Number} opts.count The max number of records to return.
     * @param {String} opts.type The type of the groups to return. Either 'user', 'dynamic' or any other type of group.
     * @param {module:api/UsergroupApi~usergroupListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'count': opts['count'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroup/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupRefresh operation.
     * @callback module:api/UsergroupApi~usergroupRefreshCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh the dynamic group
     * Allows the user to refresh a dynamic group that they have permission to edit.
     * @param {String} group The ID of the group to refresh.
     * @param {module:api/UsergroupApi~usergroupRefreshCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupRefresh(group, callback) {
      let postBody = null;
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling usergroupRefresh");
      }

      let pathParams = {
      };
      let queryParams = {
        'group': group
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroup/refresh', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupRemovemember operation.
     * @callback module:api/UsergroupApi~usergroupRemovememberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user from a group
     * Allows the user to remove a user from a group that they have permission to edit.
     * @param {String} userid The id of the user to remove.
     * @param {String} groupid The id of the group.
     * @param {module:api/UsergroupApi~usergroupRemovememberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupRemovemember(userid, groupid, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling usergroupRemovemember");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling usergroupRemovemember");
      }

      let pathParams = {
      };
      let queryParams = {
        'userid': userid,
        'groupid': groupid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroup/removemember', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupSave operation.
     * @callback module:api/UsergroupApi~usergroupSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a group
     * Allows the user to create a new group or edit a group that they have permission to edit.
     * @param {String} id The id of the group to save (leave empty to create a new one).
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/UsergroupApi~usergroupSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usergroupSave(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usergroupSave");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usergroup/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
