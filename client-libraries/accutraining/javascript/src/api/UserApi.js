/**
 * AccuTraining OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* User service.
* @module api/UserApi
* @version 1.0.0
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userChangepwd operation.
     * @callback module:api/UserApi~userChangepwdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change user's own password
     * Allows the user to change their own password.
     * @param {String} oldpass The old password of the authenticated user.
     * @param {String} newpass The new password of the authenticated user.
     * @param {module:api/UserApi~userChangepwdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userChangepwd(oldpass, newpass, callback) {
      let postBody = null;
      // verify the required parameter 'oldpass' is set
      if (oldpass === undefined || oldpass === null) {
        throw new Error("Missing the required parameter 'oldpass' when calling userChangepwd");
      }
      // verify the required parameter 'newpass' is set
      if (newpass === undefined || newpass === null) {
        throw new Error("Missing the required parameter 'newpass' when calling userChangepwd");
      }

      let pathParams = {
      };
      let queryParams = {
        'oldpass': oldpass,
        'newpass': newpass
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/changepwd', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userChangepwdbyreq operation.
     * @callback module:api/UserApi~userChangepwdbyreqCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the user password using a change password request id
     * @param {String} changereq The change password request ID sent by email to the user.
     * @param {String} newpass The new password of the user.
     * @param {module:api/UserApi~userChangepwdbyreqCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userChangepwdbyreq(changereq, newpass, callback) {
      let postBody = null;
      // verify the required parameter 'changereq' is set
      if (changereq === undefined || changereq === null) {
        throw new Error("Missing the required parameter 'changereq' when calling userChangepwdbyreq");
      }
      // verify the required parameter 'newpass' is set
      if (newpass === undefined || newpass === null) {
        throw new Error("Missing the required parameter 'newpass' when calling userChangepwdbyreq");
      }

      let pathParams = {
      };
      let queryParams = {
        'changereq': changereq,
        'newpass': newpass
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/changepwdbyreq', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userDelete operation.
     * @callback module:api/UserApi~userDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user
     * Allows the user to delete a user.
     * @param {String} id The id of the user to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnyType} opts.body 
     * @param {module:api/UserApi~userDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userFindsimilar operation.
     * @callback module:api/UserApi~userFindsimilarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds similar users to prevent duplicates
     * Allows the user to be warned if a user they are creating has the same card number as another user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.currentid The id of the current user.
     * @param {String} opts.phonenumber A phone number to search for similar users.
     * @param {String} opts.cardnumber A card number to search for similar users.
     * @param {module:api/UserApi~userFindsimilarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userFindsimilar(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'currentid': opts['currentid'],
        'phonenumber': opts['phonenumber'],
        'cardnumber': opts['cardnumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/findsimilar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGet operation.
     * @callback module:api/UserApi~userGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search and view details of a user
     * Allows the user to search and view a user and their details.
     * @param {String} id The id of the user to get.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/UserApi~userGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetbycard operation.
     * @callback module:api/UserApi~userGetbycardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search user by card number
     * Allows the user to search for a user by their card number.
     * @param {String} card The card number of the user to get.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/UserApi~userGetbycardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userGetbycard(card, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'card' is set
      if (card === undefined || card === null) {
        throw new Error("Missing the required parameter 'card' when calling userGetbycard");
      }

      let pathParams = {
      };
      let queryParams = {
        'card': card,
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/getbycard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userList operation.
     * @callback module:api/UserApi~userListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of users
     * Allows the user to view the full list of users and is based on role permissions.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.roleid The id of the role to filter users by, or empty to return all users.
     * @param {String} opts.onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
     * @param {Number} opts.photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
     * @param {module:api/UserApi~userListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userList(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling userList");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling userList");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count,
        'roleid': opts['roleid'],
        'onlywithoutcard': opts['onlywithoutcard'],
        'photosize': opts['photosize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userLoadphoto operation.
     * @callback module:api/UserApi~userLoadphotoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a photo for a specific user
     * Allows the user to upload a photo for a user.
     * @param {String} upload Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).
     * @param {Object} opts Optional parameters
     * @param {String} opts.filename The local name of the uploaded file. For later reference.
     * @param {String} opts.userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in 'user.save'.
     * @param {Boolean} opts.automatch Set this to true to find the specific user based on the file name. 
     * @param {module:api/UserApi~userLoadphotoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userLoadphoto(upload, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'upload' is set
      if (upload === undefined || upload === null) {
        throw new Error("Missing the required parameter 'upload' when calling userLoadphoto");
      }

      let pathParams = {
      };
      let queryParams = {
        'upload': upload,
        'filename': opts['filename'],
        'userid': opts['userid'],
        'automatch': opts['automatch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/loadphoto', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userMovedata operation.
     * @callback module:api/UserApi~userMovedataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move data between users
     * Allows administrators to move data between users.
     * @param {String} source The id of the user that is the source of the data.
     * @param {String} destination The id of the user that is the destination of the data.
     * @param {module:api/UserApi~userMovedataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userMovedata(source, destination, callback) {
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling userMovedata");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling userMovedata");
      }

      let pathParams = {
      };
      let queryParams = {
        'source': source,
        'destination': destination
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/movedata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userRequestpwdchange operation.
     * @callback module:api/UserApi~userRequestpwdchangeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests a password change
     * @param {String} domain The domain of the account where the user exists.
     * @param {String} email The email of the user.
     * @param {module:api/UserApi~userRequestpwdchangeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userRequestpwdchange(domain, email, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling userRequestpwdchange");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling userRequestpwdchange");
      }

      let pathParams = {
      };
      let queryParams = {
        'domain': domain,
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/requestpwdchange', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userSave operation.
     * @callback module:api/UserApi~userSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a user
     * Allows the user to create or edit a user.
     * @param {String} id The id of the user to save (leave empty to create a new one).
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/UserApi~userSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userSave(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userSave");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userSavepwdchange operation.
     * @callback module:api/UserApi~userSavepwdchangeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send email to the specified user(s) to set/change their passwords
     * Allows the user to trigger an email to another user asking them to set or change their password.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/UserApi~userSavepwdchangeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userSavepwdchange(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/savepwdchange', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
