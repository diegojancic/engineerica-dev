/**
 * AccuTraining OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Template service.
* @module api/TemplateApi
* @version 1.0.0
*/
export default class TemplateApi {

    /**
    * Constructs a new TemplateApi. 
    * @alias module:api/TemplateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the templateAddimage operation.
     * @callback module:api/TemplateApi~templateAddimageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an image to a template
     * Allows the user to add an image to a badge or certificate template.
     * @param {String} template The id of the template where the image has to be added
     * @param {String} upload Set 'file' as value to indicate that a file is being submitted in the body (instead of a JSON object).
     * @param {Object} opts Optional parameters
     * @param {String} opts.filename The local name of the uploaded file. For later reference.
     * @param {module:api/TemplateApi~templateAddimageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templateAddimage(template, upload, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling templateAddimage");
      }
      // verify the required parameter 'upload' is set
      if (upload === undefined || upload === null) {
        throw new Error("Missing the required parameter 'upload' when calling templateAddimage");
      }

      let pathParams = {
      };
      let queryParams = {
        'template': template,
        'upload': upload,
        'filename': opts['filename']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/template/addimage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateDelete operation.
     * @callback module:api/TemplateApi~templateDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a template
     * Allows the user to delete an existing template.
     * @param {String} id The id of the template to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnyType} opts.body 
     * @param {module:api/TemplateApi~templateDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templateDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling templateDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/template/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateEmail operation.
     * @callback module:api/TemplateApi~templateEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send generated templates by email
     * Allows the user to send generated templates via email through AccuTraining.
     * @param {String} jobid The id of the job that is creating the templates.
     * @param {String} emailsubject Args depending on the send-to flag.
     * @param {String} emailbody Args depending on the send-to flag.
     * @param {Object} opts Optional parameters
     * @param {String} opts.templatekind The kind of the template you're sending. It must be included in (badge, certificate).
     * @param {String} opts.emailfrom The name of the sender to be displayed in the receipients inbox
     * @param {String} opts.emailreplyto The reply-to field for the emails.
     * @param {module:api/TemplateApi~templateEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templateEmail(jobid, emailsubject, emailbody, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobid' is set
      if (jobid === undefined || jobid === null) {
        throw new Error("Missing the required parameter 'jobid' when calling templateEmail");
      }
      // verify the required parameter 'emailsubject' is set
      if (emailsubject === undefined || emailsubject === null) {
        throw new Error("Missing the required parameter 'emailsubject' when calling templateEmail");
      }
      // verify the required parameter 'emailbody' is set
      if (emailbody === undefined || emailbody === null) {
        throw new Error("Missing the required parameter 'emailbody' when calling templateEmail");
      }

      let pathParams = {
      };
      let queryParams = {
        'jobid': jobid,
        'templatekind': opts['templatekind'],
        'emailfrom': opts['emailfrom'],
        'emailreplyto': opts['emailreplyto'],
        'emailsubject': emailsubject,
        'emailbody': emailbody
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/template/email', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateGenerate operation.
     * @callback module:api/TemplateApi~templateGenerateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate specified templates
     * Allows the user to generate an existing template as badges or certificates.
     * @param {String} template The id of the template to generate.
     * @param {String} source The source key of the selected template data source.
     * @param {Boolean} singlefile True if all the templates should be placed in the same file, false if each one shoud be in its own file.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userid Only the template for these users is created (and emailed if 'email' is true), enter multiple separated by commas.
     * @param {Boolean} opts.forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading
     * @param {String} opts.role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor
     * @param {String} opts.filters Pipe separated filters for the generation, eg: aaa=val|bbb=val|...
     * @param {module:api/TemplateApi~templateGenerateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templateGenerate(template, source, singlefile, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling templateGenerate");
      }
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling templateGenerate");
      }
      // verify the required parameter 'singlefile' is set
      if (singlefile === undefined || singlefile === null) {
        throw new Error("Missing the required parameter 'singlefile' when calling templateGenerate");
      }

      let pathParams = {
      };
      let queryParams = {
        'template': template,
        'source': source,
        'singlefile': singlefile,
        'userid': opts['userid'],
        'forsending': opts['forsending'],
        'role': opts['role'],
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/template/generate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateGet operation.
     * @callback module:api/TemplateApi~templateGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details of a template
     * Allows the user to view a template and its details.
     * @param {String} id The id of the template to get.
     * @param {module:api/TemplateApi~templateGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templateGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling templateGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/template/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateGetgenerated operation.
     * @callback module:api/TemplateApi~templateGetgeneratedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View generated templates
     * Allows the user to view templates which have been generated as badges or certificates.
     * @param {String} jobid The id of the job that is creating the templates.
     * @param {module:api/TemplateApi~templateGetgeneratedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templateGetgenerated(jobid, callback) {
      let postBody = null;
      // verify the required parameter 'jobid' is set
      if (jobid === undefined || jobid === null) {
        throw new Error("Missing the required parameter 'jobid' when calling templateGetgenerated");
      }

      let pathParams = {
      };
      let queryParams = {
        'jobid': jobid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/template/getgenerated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateList operation.
     * @callback module:api/TemplateApi~templateListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of defined templates
     * Allows the user to view the full list of created templates.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {String} kind The kind of the templates to return. It must be included in (badge, certificate).
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.designedonly If true then it only returns the templates that were designed. Otherwise, it returns all.
     * @param {module:api/TemplateApi~templateListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templateList(from, count, kind, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling templateList");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling templateList");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling templateList");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'count': count,
        'kind': kind,
        'designedonly': opts['designedonly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/template/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateListsources operation.
     * @callback module:api/TemplateApi~templateListsourcesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of templates' data sources
     * Allows the user to see tokens to be used in the template
     * @param {String} kind The kind of the templates to return. It must be included in (badge, certificate).
     * @param {module:api/TemplateApi~templateListsourcesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templateListsources(kind, callback) {
      let postBody = null;
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling templateListsources");
      }

      let pathParams = {
      };
      let queryParams = {
        'kind': kind
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/template/listsources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateSave operation.
     * @callback module:api/TemplateApi~templateSaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a template
     * Allows the user to create or edit a template.
     * @param {String} id The id of the template to save (leave empty to create a new one).
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/TemplateApi~templateSaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templateSave(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling templateSave");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/template/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateSavelayout operation.
     * @callback module:api/TemplateApi~templateSavelayoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save the layout of a template
     * Allows the user to edit a template's layout.
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/TemplateApi~templateSavelayoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    templateSavelayout(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/template/savelayout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
