/**
 * AccuTraining OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Actionlog service.
* @module api/ActionlogApi
* @version 1.0.0
*/
export default class ActionlogApi {

    /**
    * Constructs a new ActionlogApi. 
    * @alias module:api/ActionlogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the actionlogList operation.
     * @callback module:api/ActionlogApi~actionlogListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a list of users action logs
     * Allows the user to view the audit logs for the account.
     * @param {Number} from The first record to return.
     * @param {Number} count The max number of records to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.user The id of the user whose action logs have to be returned.
     * @param {Date} opts.startdate The start date of the period to filter the logs.
     * @param {Date} opts.enddate The end date of the period to filter the logs.
     * @param {String} opts.resource The resource to filter the action logs.
     * @param {String} opts.actionfilter The action to filter the action logs.
     * @param {String} opts.argument The id of the entity that was the argument of the executed action.
     * @param {module:api/ActionlogApi~actionlogListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionlogList(from, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling actionlogList");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling actionlogList");
      }

      let pathParams = {
      };
      let queryParams = {
        'user': opts['user'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate'],
        'resource': opts['resource'],
        'actionfilter': opts['actionfilter'],
        'argument': opts['argument'],
        'from': from,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actionlog/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
