=begin
#AccuCampus OpenAPI 3 Documentation

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::DefaultApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instance of DefaultApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::DefaultApi)
    end
  end

  # unit tests for actionassignmentdelete
  # Remove an action item from an action plan
  # Allows a user to remove an action item from a user&#39;s action plan.
  # @param token The authentication token.
  # @param id The id of the action assignment to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'actionassignmentdelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionassignmentget
  # Search and view details of an action item assigned to a user
  # Allows the user to view an individual action item and its details, minus all the action item&#39;s updates.
  # @param token The authentication token.
  # @param id The id of the action assignment to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'actionassignmentget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionassignmentlist
  # View a list of action items in a user&#39;s plan
  # Allows the user to view the list of all action items for a specified user.
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :assignee The assignee&#39;s id to filter the assignments.
  # @option opts [Integer] :status The status to filter the assignments.
  # @return [nil]
  describe 'actionassignmentlist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionassignmentlisthistory
  # View the history of an action item assigned to a user
  # Allows the user to view an individual action plan and its details, including all the action plan&#39;s updates.
  # @param token The authentication token.
  # @param actionassignment The action assignment&#39;s id whose history the user wants to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'actionassignmentlisthistory test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionassignmentlistmine
  # List public action assignments assigned to the logged user
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :status The status to filter the assignments.
  # @return [nil]
  describe 'actionassignmentlistmine test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionassignmentlistpublichistory
  # List public action assignment history
  # @param token The authentication token.
  # @param actionassignment The action assignment&#39;s id whose history the user wants to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'actionassignmentlistpublichistory test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionassignmentmarkcomplete
  # Bulk complete action items
  # Allows the user to bulk complete action items.
  # @param token The authentication token.
  # @param item The action item to assign.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :assignee The assignee of the item.
  # @option opts [String] :group The group to assing the item.
  # @option opts [String] :notes The assignment&#39;s notes.
  # @return [nil]
  describe 'actionassignmentmarkcomplete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionassignmentsave
  # Add an action item to a user&#39;s action plan
  # Allows the user to edit or assign an action item to a user
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'actionassignmentsave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionassignmentsavehistory
  # Update an action item assigned to a user
  # Allows the user to update or mark an action item as complete.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'actionassignmentsavehistory test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionitemdelete
  # Delete an action item
  # Allows the user to delete an action item.
  # @param token The authentication token.
  # @param id The id of the action item to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'actionitemdelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionitemget
  # Search and view details of an action item
  # Allows the user to view an individual action item and its details.
  # @param token The authentication token.
  # @param id The id of the action item to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'actionitemget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionitemlist
  # View a list of action items
  # Allows the user to view a list of action items
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'actionitemlist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionitemsave
  # Create or edit an action item
  # Allows the user to edit an action item.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'actionitemsave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionloglist
  # View a list of users action logs
  # Allows the user to view the audit logs for the account.
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user The id of the user whose action logs have to be returned.
  # @option opts [DateTime] :startdate The start date of the period to filter the logs.
  # @option opts [DateTime] :enddate The end date of the period to filter the logs.
  # @option opts [String] :resource The resource to filter the action logs.
  # @option opts [String] :actionfilter The action to filter the action logs.
  # @option opts [String] :argument The id of the entity that was the argument of the executed action.
  # @return [nil]
  describe 'actionloglist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionpackassign
  # Assign an action item pack to a user
  # Allows the user to assign an action pack to a user or group of users.
  # @param token The authentication token.
  # @param pack The id of the action pack to assign.
  # @param itemsdata A JSON array containing the action items&#39; data needed to assign them to the assignee (Id, Event, DateDue, DateExpired, NotifyAssigne).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :assignee The assignee of the pack.
  # @option opts [String] :group The group to assign the pack.
  # @option opts [String] :notes The assignment&#39;s notes.
  # @return [nil]
  describe 'actionpackassign test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionpackdelete
  # Delete an action item pack
  # Allows the user to delete an action item pack.
  # @param token The authentication token.
  # @param id The id of the action pack to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'actionpackdelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionpackget
  # View details of an action item pack
  # Allows the user to view an individual action pack and its details.
  # @param token The authentication token.
  # @param id The id of the action pack to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'actionpackget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionpacklist
  # View a list of action item packs
  # Allows the user to view the full list of action item packs.
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'actionpacklist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actionpacksave
  # Create or edit an action item pack
  # Allows the user to edit an action item pack.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'actionpacksave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actiontypedelete
  # Delete an action item type
  # Allows the user to delete an action item type.
  # @param token The authentication token.
  # @param id The id of the action type to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'actiontypedelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actiontypeget
  # View details of an action item type
  # Allows the user to view an individual action item type and its details.
  # @param token The authentication token.
  # @param id The id of the action type to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'actiontypeget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actiontypelist
  # View a list of action item types
  # Allows the user to view the full list of action item types.
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'actiontypelist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for actiontypesave
  # Create or edit an action item type
  # Allows the user to dit an action item type.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'actiontypesave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for advroleaddmissing
  # Adds the missing permissions to a role. Requires access to advrole.save
  # @param token The authentication token.
  # @param roles CSV list of the role ids to check
  # @param permissions CSV list of the permissions to check
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'advroleaddmissing test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for advrolecheckperm
  # Checks the permissions are assigned for the given roles
  # @param token The authentication token.
  # @param roles CSV list of the role ids to check
  # @param permissions CSV list of the permissions to check
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'advrolecheckperm test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for advroledelete
  # Delete a role
  # Allows the user to delete a role from the list of available roles.
  # @param token The authentication token.
  # @param id The id of the location to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'advroledelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for advroledeletemapping
  # Delete a role mapping
  # Allows the user to delete a role from its mapped categories on the &#39;Role Mapping&#39; page.
  # @param token The authentication token.
  # @param map The map name to save the role.
  # @param roleid The id of the role.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'advroledeletemapping test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for advroleget
  # View details of a role
  # Allows the user to view a role and its details.
  # @param token The authentication token.
  # @param id The id of the location to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'advroleget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for advrolelist
  # Lists the roles for the current account
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :includepolicies True to include the policies, defaults to false.
  # @option opts [Boolean] :includeinternal True to include the internal roles too.
  # @option opts [String] :name Filter by name of the role.
  # @return [nil]
  describe 'advrolelist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for advrolelistmaps
  # Lists the maps a roles is mapped to
  # @param token The authentication token.
  # @param roleid The id of the role to list the maps.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'advrolelistmaps test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for advrolelistrolesmapped
  # Lists the roles mappings
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :map List only the roles in the specified map.
  # @return [nil]
  describe 'advrolelistrolesmapped test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for advrolelisttemplates
  # View a list of role templates
  # Allows the user to view the full list of available role templates.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'advrolelisttemplates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for advrolesave
  # Create or edit a role
  # Allows the user to create or edit a role&#39;s permissions.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'advrolesave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for advrolesavemapping
  # Saves a role mapping
  # Allows the user to add a role to a mapped category on the &#39;Role Mapping&#39; page.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'advrolesavemapping test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for advrolesuserlist
  # List users. Alias to user.list, use that one instead.
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :roleid The id of the role to filter users by, or empty to return all users.
  # @option opts [String] :onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
  # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
  # @return [nil]
  describe 'advrolesuserlist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for advroleuserupgrade
  # Upgrade a user to another role (requires permission to edit those roles)
  # Allow the user to add a role to another user, given that he has access to view that other user and edit people with that new role.
  # @param token The authentication token.
  # @param userid Id of the user to upgrade
  # @param roleid Id of the role to add
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'advroleuserupgrade test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appsharegetphone
  # Gets the phone number of the current user
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'appsharegetphone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appsharesendtext
  # Sends an SMS with the link to the app
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :phonenumber Phone number to where to send the link. Leave empty to the number on file.
  # @return [nil]
  describe 'appsharesendtext test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for attendancelogcommentdelete
  # Delete a comment on an attendance log
  # @param token The authentication token.
  # @param id The id of the attendance log comment to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'attendancelogcommentdelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for attendancelogcommentget
  # View a comment on an attendance log
  # @param token The authentication token.
  # @param id The id of the comment to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'attendancelogcommentget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for attendancelogcommentlist
  # View all the comments on a specific attendance log
  # @param attendancelog The id of the attendance log whose comments have to be retrieved.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token The authentication token.
  # @return [nil]
  describe 'attendancelogcommentlist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for attendancelogcommentsave
  # Save a comment on an attendance log
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'attendancelogcommentsave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for attendancelogdelete
  # Delete an attendance log
  # Allows the user to delete an existing attendance log.
  # @param token The authentication token.
  # @param id The id of the attendance log to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'attendancelogdelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for attendancelogget
  # Search and view details of an attendance log
  # Allows the user to view an individual attendance log and its details.
  # @param token The authentication token.
  # @param id The id of the attendance log to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'attendancelogget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for attendanceloggetchangehistory
  # Search and view details of an attendance log&#39;s swipe history
  # Allows the user to view the swipes of an individual attendance logs (sign ins and sign outs).
  # @param token The authentication token.
  # @param id The id of the attendance log to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'attendanceloggetchangehistory test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for attendanceloglist
  # View a list of attendance logs
  # Allows the user to view the list of all attendance logs in the location or locations in which the user is scoped.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token The authentication token.
  # @option opts [String] :filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
  # @option opts [String] :userid The user ID of the user to get the logs.
  # @return [nil]
  describe 'attendanceloglist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for attendanceloglistmine
  # Gets the attendance logs of the current user
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token The authentication token.
  # @option opts [String] :filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
  # @return [nil]
  describe 'attendanceloglistmine test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for attendancelogsave
  # Create or edit an attendance log
  # Allows the user to create or edit an attendance log.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'attendancelogsave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for attendancelogsignout
  # Sign out an attendance log
  # Allows the user to sign out am attendance log from the Who&#39;s In page.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id The id of the attendance log to sign-out.
  # @option opts [String] :location The id of the location to filter the users to sign out.
  # @option opts [String] :event The id of the event to filter the users to sign out.
  # @option opts [DateTime] :datetime Specifies the date and time when the specified logs have to be signed out.
  # @return [nil]
  describe 'attendancelogsignout test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for attendancelogwhosin
  # View who&#39;s in a location
  # Allows the user to view the Who&#39;s In page and view all users who are logged into locations in which the user is scoped.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token The authentication token.
  # @option opts [String] :location The id of the location to search for users that are in.
  # @option opts [String] :event The id of the event to search for users that are in.
  # @option opts [String] :sorting Field to sort by. Either first-name, last-name or sign-in-time.
  # @option opts [String] :roles The comma-separated list of ids of the roles to search for users that are in.
  # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
  # @option opts [String] :extensions A JSON array containing the extension filters (i.e [{name: &#39;nametofilter&#39;, value: &#39;valuetofilter&#39;}]).
  # @option opts [Boolean] :export True to export the results as CSV
  # @return [nil]
  describe 'attendancelogwhosin test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for bgjobgetstatus
  # Get background job status
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :jobid The ID of the job to get the status. 10 most recent will be returned if not specified.
  # @option opts [String] :jobtype The job type to filter by.
  # @return [nil]
  describe 'bgjobgetstatus test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for captchagetchallenge
  # Gets a captcha challenge that the user must complete to do certain requests.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'captchagetchallenge test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for captchagetimage
  # Gets a captcha image that the user must complete to do certain requests.
  # @param captchatoken The captcha token or ID returned by the captcha.getchallenge action
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'captchagetimage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for changelog
  # Get the application change log
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'changelog test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for clientget
  # Get client
  # @param token The authentication token.
  # @param client The unique id of the client.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :clientname The custom name of the client.
  # @return [nil]
  describe 'clientget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for clientlist
  # Gets the clients of the specified conference
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clientlist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for clientsave
  # Saves a client
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'clientsave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for clientsendmessage
  # Send a message to a client
  # @param token The authentication token.
  # @param uniqueclientid The unique id of the client.
  # @param message The body of the message to send.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clientsendmessage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for departmentdelete
  # Delete a college department
  # Allows the user to delete an existing college department.
  # @param token The authentication token.
  # @param id The id of the department to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'departmentdelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for departmentget
  # Search and view details of a college department
  # Allows the user to view an individual college department and its details.
  # @param token The authentication token.
  # @param id The id of the department to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'departmentget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for departmentlist
  # View a list of college departments
  # Allows the user to view the full list of college departments.
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'departmentlist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for departmentsave
  # Create or edit a college department
  # Allows the user to create or edit a college department.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'departmentsave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for doc
  # Get the documentation
  # Retrieves the list of actions available in the system.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :excludeanonymous If true it excludes the anonymous actions from the returned list.
  # @return [nil]
  describe 'doc test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for easyloginaddbgimage
  # Adds background image for the login
  # Allows the user to set the background image that all users will see when logging into an AccuCampus account not using SSO.
  # @param token The authentication token.
  # @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
  # @param filename The original filename, needed to process the file.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'easyloginaddbgimage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventdelete
  # Delete a course
  # Allows the user to delete an existing course.
  # @param token The authentication token.
  # @param id The id of the event to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventdelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventget
  # Search and view details of a course
  # Allows the user to view an individual course and its details.
  # @param token The authentication token.
  # @param id The id of the event to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventgetsessionsbydate
  # View a list of courses by date
  # Allows the user to view a list of courses by date.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :location The location to filter the events.
  # @option opts [DateTime] :date The date to filter the events. Today will be used if this parameter is omitted.
  # @option opts [String] :type Type of event to list.
  # @return [nil]
  describe 'eventgetsessionsbydate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventlist
  # View a list of courses
  # Allows the user to view the full list of courses.
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false.
  # @option opts [String] :termid Id of the term to list the events. Null to list all events.
  # @return [nil]
  describe 'eventlist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventsave
  # Create or edit a course
  # Allows the user to create or edit a course.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'eventsave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventsearchgroup
  # Searches for the available event groups
  # @param token The authentication token.
  # @param query Query to search event groups.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventsearchgroup test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export
  # Export AccuCampus data
  # Allows the user to export data from AccuCampus into a CSV, HTML, or Excel format.
  # @param token The authentication token.
  # @param exporttype What to export.
  # @param exportformat The format of the resulting file. Valid types are CSV, HTML, XLS.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filters Pipe separated filters for the export, eg: aaa&#x3D;val|bbb&#x3D;val|...
  # @return [nil]
  describe 'export test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for exportlisttypes
  # Lists available export types
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'exportlisttypes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for featurelist
  # Lists the available features.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'featurelist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for holidaylist
  # View a list of entered holidays
  # Allows the user to view all holidays entered.
  # @param token The authentication token.
  # @param term The term to get holidays from.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'holidaylist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for holidaysave
  # Create or edit a list of holidays
  # Allows the user to create or edit holidays.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'holidaysave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for holidaysuggest
  # View the holiday suggestions in the given term
  # Allows the user to view the holiday suggestions for each term.
  # @param token The authentication token.
  # @param term The term to get holidays from.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'holidaysuggest test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import
  # Import data into AccuCampus
  # Allows the user to import data into AccuCampus via CSV or flat files either manually or automatically using the import utility.
  # @param token The authentication token.
  # @param importtype The kind of data that is being uploaded.
  # @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filename The local name of the uploaded file. For later reference.
  # @option opts [String] :parameters Import parameters, in a key-value pair JSON-serialized object. Eg {&#39;parameter&#39;:&#39;value&#39;}.
  # @return [nil]
  describe 'import test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importlisttypes
  # Lists available import types
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importlisttypes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for licenseacceptagreement
  # Accept the license agreement
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'licenseacceptagreement test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for licensegetagreementstatus
  # Check if license agreement has been accepted
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'licensegetagreementstatus test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for licensegetcurrent
  # Gets the current license information
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token The authentication token.
  # @return [nil]
  describe 'licensegetcurrent test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for licenserenew
  # Contact Engineerica in order to renew the AccuCampus subscription
  # Allows the user to select the option to contact Engineerica when the AccuCampus account is nearing its renewal date.
  # @param token The authentication token.
  # @param email The e-mail of the user sending the request.
  # @param phonenumber The phone number of the user sending the request.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :jobtitle The job title of the user sending the request.
  # @option opts [String] :institution The institution of the user sending the request.
  # @option opts [String] :comments Comments entered by the user sending the request.
  # @return [nil]
  describe 'licenserenew test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for listtimezones
  # Lists the available timezones
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'listtimezones test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for locationdelete
  # Delete a location
  # Allows the user to delete an existing location.
  # @param token The authentication token.
  # @param id The id of the location to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'locationdelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for locationget
  # Search and view details of a location
  # Allows the user to search and view an individual location and its details.
  # @param token The authentication token.
  # @param id The id of the location to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'locationget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for locationlist
  # View a list of locations
  # Allows the user to view the list of all locations to which they are scoped.
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :locations The comma-separated list containing the ids of the locations to list.
  # @option opts [Boolean] :sortbygroup True to list locations sorted by the &#39;Located In&#39; property. Defaults to false.
  # @return [nil]
  describe 'locationlist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for locationsave
  # Create or edit a location
  # Allows the user to create or edit a location.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'locationsave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for login
  # Login
  # @param domain The account domain to login.
  # @param username The username (email) of the user to login as.
  # @param password The password of the user to login as.
  # @param method The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :rememberme If true then the session will not expire.
  # @return [nil]
  describe 'login test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for logout
  # Logout
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token The authentication token used to login.
  # @return [nil]
  describe 'logout test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for memorizedreportdelete
  # Delete memorized report
  # Allows the user to delete a memorized report that they have created.
  # @param token The authentication token.
  # @param id The id of the report settings to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'memorizedreportdelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for memorizedreportget
  # View details of a memorized report
  # Allows the user to view an individual memorized report and its details.
  # @param token The authentication token.
  # @param id The id of the report configuration to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'memorizedreportget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for memorizedreportlist
  # View a list of all his memorized reports
  # Allows the user to view the list of all memorized reports that they have created.
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :customname If specified filters the memorized reports by custom name.
  # @return [nil]
  describe 'memorizedreportlist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for memorizedreportsave
  # Create or edit a memorized report
  # Allows the user to create or edit a memorized report for themselves.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'memorizedreportsave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for menugetitems
  # Gets the items on the menu
  # @param menuid The Id of the menu to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'menugetitems test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for myaccount
  # Gets the logged in user account.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'myaccount test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for myianatimezone
  # Gets the current time zone&#39;s iana name
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'myianatimezone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for myprofile
  # Gets the logged in user information.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
  # @return [nil]
  describe 'myprofile test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for myrights
  # Gets the list of actions the user can execute.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'myrights test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mysaveprofile
  # Updates logged user&#39;s profile information
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'mysaveprofile test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notificationdelete
  # Delete a notification
  # Allows the user to delete an existing notification.
  # @param token The authentication token.
  # @param id The id of the notification to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'notificationdelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notificationget
  # View a notification
  # @param token The authentication token.
  # @param id The id of the notification to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'notificationget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notificationgetforstation
  # Gets all public (in station) notifications for the specific user
  # @param station The id of the sign-in station to get.
  # @param user The card of the user.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'notificationgetforstation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notificationgetunreadcount
  # Get the number of unread notifications
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'notificationgetunreadcount test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notificationlist
  # View a list of all sent notifications
  # Allows the user to view the list of all sent notifications.
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :recipient The recipient whose notifications have to be listed.
  # @option opts [Integer] :status The status of the notifications to list. Read, Unread or All.
  # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
  # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
  # @option opts [Boolean] :sentonscreen Specifies whether to list the notifications that were sent on-screen or not.
  # @option opts [Boolean] :sentemail Specifies whether to list the notifications that were sent via e-mail or not.
  # @option opts [Boolean] :sentsms Specifies whether to list the notifications that were sent via sms or not.
  # @return [nil]
  describe 'notificationlist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notificationlistmine
  # View all the notifications sent to the current user
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :status Specifies the status of the notifications to list. Read, Unread or All.
  # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
  # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
  # @return [nil]
  describe 'notificationlistmine test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notificationmarkasread
  # Mark a notification as read
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read.
  # @option opts [Integer] :status Specifies the status to filter the notifications. Read, Unread or All.
  # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
  # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
  # @return [nil]
  describe 'notificationmarkasread test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notificationmarkasunread
  # Mark a notification as unread
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread.
  # @option opts [Integer] :status Specifies the status to filter the notifications. Read, Unread or All.
  # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
  # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
  # @return [nil]
  describe 'notificationmarkasunread test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notificationsend
  # Send notifications on screen, via email or text to users
  # Allows the user to send notifications to other users through the Send Message link.
  # @param token The authentication token.
  # @param emailenabled Whether send the notification via email.
  # @param onscreenenabled Whether to display the notification on screen.
  # @param smsenabled Whether to send the notification via text message.
  # @param title Notification title.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :tousers Comma-separated Ids of users to send the notification.
  # @option opts [String] :togroups Comma-separated Ids of user groups to send the notification.
  # @option opts [String] :onscreenbody Body of the message for on-screen display.
  # @option opts [String] :onscreenclick What to do when the notification is clicked. Valid values: hide, view, url.
  # @option opts [String] :onscreenurl Url to redirect the user, if onscreenclick&#x3D;url.
  # @option opts [String] :onscreenclass How to display the notification. Valid values: info, success, warning, error
  # @option opts [Integer] :onscreenduration Time in seconds to display the notification.
  # @option opts [Integer] :showonstation Whether to show the notification in the sign-in station.
  # @option opts [String] :emailfromname Name of the email sender.
  # @option opts [String] :emailfrom Reply-to email.
  # @option opts [String] :emailsubject Subject of the email.
  # @option opts [String] :emailbody Body of the email.
  # @option opts [String] :textmessagebody Message for SMS. Max 160 characters.
  # @return [nil]
  describe 'notificationsend test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notificationsendonscreen
  # Send on-screen notifications
  # @param token The authentication token.
  # @param notification The ID of the notification to send.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'notificationsendonscreen test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notificationtopicdelete
  # Delete a notification topic
  # Allows the user to delete an existing notification topic.
  # @param token The authentication token.
  # @param id The id of the notification topic to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'notificationtopicdelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notificationtopicget
  # Search and view details of a notification topic
  # Allows the user to view an individual notification topic and its details.
  # @param token The authentication token.
  # @param id The id of the notification topic to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'notificationtopicget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notificationtopiclist
  # List all the notification topics
  # Allows the user to view the list of all notification topics.
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'notificationtopiclist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notificationtopiclistsubscribe
  # List all the notification topics available to subscribe
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'notificationtopiclistsubscribe test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notificationtopicsave
  # Create or edit a notification topic
  # Allows the user to create and edit a notification topic.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'notificationtopicsave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pushderegister
  # Deregisters the current device to receive push notifications
  # @param devicetoken The device token where to send the notification.
  # @param platform Either ios or android
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'pushderegister test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pushregister
  # Registers the current device to receive push notifications
  # @param devicetoken The device token where to send the notification.
  # @param platform Either ios or android
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'pushregister test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for qrlabelsprint
  # Print and email QR labels
  # Allows the user to generate a printable PDF of QR labels containing user Card Numbers to be emailed to users and used as attendance tracking for events.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user The id of the user whose label needs to be printed.
  # @option opts [String] :group The id of the group whose members&#39; labels need to be printed.
  # @return [nil]
  describe 'qrlabelsprint test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for qrloginget
  # Gets an image of a QR token
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'qrloginget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for qrloginlogin
  # Login
  # @param onetimetoken The token read from the QR code.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'qrloginlogin test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for quickpaneldeletewidget
  # Deletes a widget from the Quick Panel
  # Allows the user to delete a widget that has been added to the Quick Panel.
  # @param token The authentication token.
  # @param id The id of the widget.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'quickpaneldeletewidget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for quickpanelfetchwidget
  # Fetches the information for a specific widget.
  # @param token The authentication token.
  # @param widgetid The ID of the data to fetch it&#39;s data.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'quickpanelfetchwidget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for quickpanelgetwidget
  # View details of a widget included in the Quick Panel
  # Allows the user to view a widget added in as Quick Panel.
  # @param token The authentication token.
  # @param id The id of the widget to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'quickpanelgetwidget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for quickpanelinit
  # Returns the initial information required to show the quick panels
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'quickpanelinit test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for quickpanellistwidgets
  # Lists all the widgets that are added in the Quick Panel
  # Allows the user to view the widgets that have been added to the Quick Panel.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'quickpanellistwidgets test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for quickpanellistwidgettypes
  # Lists all the widget types available in the system
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'quickpanellistwidgettypes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for quickpanelreorderwidgets
  # Reorders the widgets and moves them to a specific column
  # @param token The authentication token.
  # @param sectionname The section name where to sort the widgets.
  # @param orderids CSV list of the widgets to reorder.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'quickpanelreorderwidgets test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for quickpanelsavewidget
  # Saves a widget for the Quick Panel
  # Allows the user to save a widget to the Quick Panel.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'quickpanelsavewidget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reportlist
  # View a list of available reports
  # Allows the user to view the complete list of available, canned reports.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'reportlist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reportpermissionsbyuser
  # Permissions by user report
  # Lists all the users in the system including their corresponding permissions.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
  # @return [nil]
  describe 'reportpermissionsbyuser test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reportprepare
  # Queries and loads the specified report, in background.
  # Allows the user to run reports, in background, with the exception of attendance analytics reports.
  # @param token The authentication token.
  # @param reportname The name of the report to execute
  # @param [Hash] opts the optional parameters
  # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
  # @option opts [String] :repformat The format of the resulting report. Json, pdf, csv, ...
  # @option opts [String] :fillgroupid If specified, the result is used to fill the group with the given ID
  # @option opts [String] :groupby How to group the records. In the format &#39;col1+col2|col3+col4
  # @option opts [String] :refreshgroup The ID of the group to check (and refresh) before processing the report.
  # @option opts [String] :filtertext The user friendly text of the applied filters.
  # @return [nil]
  describe 'reportprepare test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reportquery
  # Query and load a specified report
  # Allows the user to run reports with the exception of attendance analytics reports.
  # @param token The authentication token.
  # @param reportname The name of the report to execute
  # @param [Hash] opts the optional parameters
  # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
  # @return [nil]
  describe 'reportquery test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rolelist
  # Show a list of roles
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :name Filter by name of the role.
  # @return [nil]
  describe 'rolelist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for ruledelete
  # Delete a rule
  # Allows the user to delete an existing rule.
  # @param token The authentication token.
  # @param id The id of the rule to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'ruledelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for ruleget
  # View details of a rule
  # Allows the user to view an individual rule and its details.
  # @param token The authentication token.
  # @param id The id of the rule to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'ruleget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rulegeteventtype
  # View details of a rule event type
  # Allows the user to view the trigger and its available conditions for the rule.
  # @param token The authentication token.
  # @param event The name of the event to refresh.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'rulegeteventtype test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rulelist
  # View a list of user rules
  # Allows the user to view the list of all rules.
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'rulelist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rulelistactions
  # View a list of rule actions available
  # Allows the user to view all the available rule actions.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'rulelistactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rulelisteventtypes
  # View a list of rule event types
  # Allows the user to view a list of available triggers for rules.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'rulelisteventtypes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rulelisthttprequests
  # View all the http requests sent as a result of a rule
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :failed If true only failed requests will be returned
  # @option opts [Integer] :status The http status to filter the requests
  # @return [nil]
  describe 'rulelisthttprequests test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rulesave
  # Create or edit a rule
  # Allows the user to create or edit a rule.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'rulesave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search
  # Search
  # @param token The authentication token.
  # @param query The query to search for.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Current page to show, zero-based.
  # @return [nil]
  describe 'search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for searchgetentities
  # Get the information of the entities that can be searched
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'searchgetentities test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for securityassesspermission
  # Returns the list of users for a specific permission
  # @param token The authentication token.
  # @param commandname Name of the action or command to get the roles.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'securityassesspermission test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for securityassessrole
  # Returns the list of permissions for a specific role
  # @param token The authentication token.
  # @param roleid Role ID to list the effective permissions.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'securityassessrole test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for securityassessscope
  # Returns the list of users for a specific user
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :locationid Location ID to list the users with that scope.
  # @return [nil]
  describe 'securityassessscope test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for securityassessuser
  # Returns the list of permissions for a specific user
  # @param token The authentication token.
  # @param userid User ID to list the effective permissions.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'securityassessuser test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sessionregaddcurrentuser
  # Register current user to an event session
  # Allows the user to register themselves for an event.
  # @param token The authentication token.
  # @param eventid The id of the event.
  # @param sessiondate The date and time when the session starts.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'sessionregaddcurrentuser test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sessionregadduser
  # Register users for events
  # Allows the user to register another user for an upcoming event.
  # @param token The authentication token.
  # @param userid The id of the user to add.
  # @param eventid The id of the event.
  # @param sessiondate The date and time when the session starts.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'sessionregadduser test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sessionreggetmysessions
  # View all the sessions the logged user is registered to
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :date Start date to filter the sessions.
  # @return [nil]
  describe 'sessionreggetmysessions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sessionreggetsessions
  # Lists the registrations for a specific user
  # Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
  # @param token The authentication token.
  # @param userid The user id to list sessions.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'sessionreggetsessions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sessionreggetsettings
  # Get the settings for session registration
  # Allows the user to view a event&#39;s session registration settings.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :locationid The id of the location to save settings.
  # @option opts [String] :eventid The id of the event to save settings.
  # @option opts [DateTime] :sessiondate The date and time when the session starts.
  # @option opts [Boolean] :noinherit True to get the location/event/session specific settings without looking for the more global settings.
  # @return [nil]
  describe 'sessionreggetsettings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sessionreggetusers
  # Lists the registrations for a specific session
  # Allows the user to view the registration for a specified event session.
  # @param token The authentication token.
  # @param eventid The event id to list sessions.
  # @param sessiondate The date of the session to find.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'sessionreggetusers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sessionreglistsessions
  # List the sessions available for a specific event
  # Allows the user to view all the sessions available for a recurring event.
  # @param token The authentication token.
  # @param eventid The event id to list sessions.
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :sessiondate The date of the session to find.
  # @return [nil]
  describe 'sessionreglistsessions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sessionreglistupcoming
  # View a list of upcoming event sessions
  # Allows the user to view the full list of upcoming events.
  # @param token The authentication token.
  # @param date Only sessions in the week of the specified date will be returned.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'sessionreglistupcoming test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sessionreglistupcomingevent
  # View a list of upcoming sessions of a particular event
  # Allows the user to view the upcoming recurring sessions of a specified event.
  # @param token The authentication token.
  # @param date Start date to filter the returned sessions.
  # @param event The id of the event whose sessions will be returned
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'sessionreglistupcomingevent test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sessionregremovecurrentuser
  # Unregister current user from an event session
  # Allows the user to un-register themselves from an event.
  # @param token The authentication token.
  # @param eventid The id of the event.
  # @param sessiondate The date and time when the session starts.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'sessionregremovecurrentuser test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sessionregremoveuser
  # Removes a user from an event session
  # Allows the user to un-register another user from an event.
  # @param token The authentication token.
  # @param userid The id of the user to remove.
  # @param eventid The id of the event.
  # @param sessiondate The date and time when the session starts.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'sessionregremoveuser test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sessionregsavesettings
  # Save the settings for an event&#39;s session registration
  # Allows the user to save the settings for an event.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'sessionregsavesettings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for settingaddlogo
  # Add a logo to the account
  # Allows the user to add the logo for the account, which appears on all pages on the AccuCampus browser version.
  # @param token The authentication token.
  # @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
  # @param filename The original filename, needed to process the file.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'settingaddlogo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for settingget
  # Get settings for the account or the specified scope
  # @param keys The option keys to get values for. Enter multiple separated by comma.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token The authentication token.
  # @option opts [String] :domain The account domain, in case of reading settings annonymously.
  # @option opts [String] :scope The scope of the settings to get.
  # @return [nil]
  describe 'settingget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for settingsave
  # Save settings for the account or the specified scope
  # Allows the user to affect settings that are not specified elsewhere in permissions. This includes Attendance, Appointments, Compass, Media, and Social Activity.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'settingsave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for settingviewgeneral
  # View general settings for the account
  # Allows the user to view the settings&#39; general section.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'settingviewgeneral test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for ssogeneratekey
  # Generate/reset single sign on access key.
  # Allows the user to generate or reset the access key for single sign-on.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'ssogeneratekey test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for ssogetsettings
  # View single sign on settings.
  # Allows the user to view settings for single sign-on.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'ssogetsettings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for ssoissuetoken
  # Issue single sign-on token
  # @param key The single sign-on key of the account.
  # @param username The email of the user to sign-on.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :expires Specifies whether the session should expire when inactive.
  # @return [nil]
  describe 'ssoissuetoken test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for ssosavesettings
  # Edit single sign-on settings.
  # Allows the user to edit settings for single sign-on.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'ssosavesettings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for stationdelete
  # Delete a sign-in station
  # Allows the user to delete a sign-in station from the list of existing sign-in stations that they can view based on their scope.
  # @param token The authentication token.
  # @param id The id of the sign-in station to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'stationdelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for stationget
  # View details of a sign-in station
  # Allows the user to view an individual sign-in station and its details.
  # @param token The authentication token.
  # @param id The id of the sign-in station to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'stationget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for stationgetcurrentterms
  # Get all the current terms
  # @param station The id of the sign-in station whose account&#39;s current terms have to be retrieved.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'stationgetcurrentterms test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for stationgetinfo
  # Gets a the info to display in the sign-in station by it&#39;s ID.
  # @param id The id of the sign-in station to get.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :event The id of the event, to override the one by schedule.
  # @return [nil]
  describe 'stationgetinfo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for stationgetlicense
  # Gets the current license information
  # @param station The id of the sign-in station whose account&#39;s license has to be retrieved.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'stationgetlicense test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for stationlist
  # View a list of sign-in stations
  # Allows the user to view the list of sign-in stations, limited to the stations in the locations to which they are scoped.
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'stationlist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for stationsave
  # Create or edit a sign-in station
  # Allows the user to create, edit, or install a sign-in station based in an area to which they are scoped.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'stationsave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for stationunlock
  # Unlocks the sign-in station.
  # @param id The id of the sign-in station to unlock.
  # @param passcode The passcode to unlock the station.
  # @param method The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'stationunlock test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for swipedelete
  # Delete a swipe
  # Allows the user to delete an existing attendance swipe.
  # @param token The authentication token.
  # @param id The id of the swipe to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'swipedelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for swipeget
  # Search and view details of a swipe
  # Allows the user to view an individual attendance swipe.
  # @param token The authentication token.
  # @param id The id of the swipe to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'swipeget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for swipelist
  # View a list of swipes
  # Allows the user to view a list of all swipes for the location or locations in which the user is scoped.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token The authentication token.
  # @return [nil]
  describe 'swipelist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for swipesave
  # Create or edit a swipe, and if possible, save the related attendance log
  # Allows the user to save an attendance swipe, which will also save the attendance log if the information in the swipe is enough.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'swipesave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for swipesaveanonym
  # Creates a new swipe from a sign-in station, and if possible, creates the attendance log
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'swipesaveanonym test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for tagdelete
  # Delete a tag
  # Allows the user to delete an existing tag.
  # @param token The authentication token.
  # @param id The id of the tag to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'tagdelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for tagget
  # View details of a specified tag
  # Allows the user to click on and view the settings for a tag.
  # @param token The authentication token.
  # @param id The id of the tag to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'tagget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for taglist
  # View a list of tags
  # Allows the user to view the list of tags.
  # @param token The authentication token.
  # @param group The group of the tags to return.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'taglist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for taglistgroups
  # View a list of entities that can be tagged
  # Allows the user to view the list of user roles that can be tagged, according to that tag&#39;s settings.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'taglistgroups test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for tagsave
  # Create or edit a tag
  # Allows the user to create or edit a tag.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'tagsave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for tagsearch
  # Search for tags in the account
  # Allows the user to search for tags.
  # @param token The authentication token.
  # @param query The query to search tags. Use group:&lt;group&gt; to search in a specific group (mandatory).
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :allowcreatingnew Specifies whether an option to create a new tag should be retrieved.
  # @return [nil]
  describe 'tagsearch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for templateaddimage
  # Add an image to a template
  # Allows the user to add an image to a badge or certificate template.
  # @param token The authentication token.
  # @param template The id of the template where the image has to be added
  # @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filename The local name of the uploaded file. For later reference.
  # @return [nil]
  describe 'templateaddimage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for templatedelete
  # Delete a template
  # Allows the user to delete an existing template.
  # @param token The authentication token.
  # @param id The id of the template to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'templatedelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for templateemail
  # Send generated templates by email
  # Allows the user to send generated templates via email through AccuCampus.
  # @param token The authentication token.
  # @param jobid The id of the job that is creating the templates.
  # @param emailsubject Args depending on the send-to flag.
  # @param emailbody Args depending on the send-to flag.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate).
  # @option opts [String] :emailfrom The name of the sender to be displayed in the receipients inbox
  # @option opts [String] :emailreplyto The reply-to field for the emails.
  # @return [nil]
  describe 'templateemail test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for templategenerate
  # Generate specified templates
  # Allows the user to generate an existing template as badges or certificates.
  # @param token The authentication token.
  # @param template The id of the template to generate.
  # @param source The source key of the selected template data source.
  # @param singlefile True if all the templates should be placed in the same file, false if each one shoud be in its own file.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas.
  # @option opts [Boolean] :forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading
  # @option opts [String] :role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor
  # @option opts [String] :filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|...
  # @return [nil]
  describe 'templategenerate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for templateget
  # View details of a template
  # Allows the user to view a template and its details.
  # @param token The authentication token.
  # @param id The id of the template to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'templateget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for templategetgenerated
  # View generated templates
  # Allows the user to view templates which have been generated as badges or certificates.
  # @param token The authentication token.
  # @param jobid The id of the job that is creating the templates.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'templategetgenerated test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for templatelist
  # View a list of defined templates
  # Allows the user to view the full list of created templates.
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param kind The kind of the templates to return. It must be included in (badge, certificate).
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :designedonly If true then it only returns the templates that were designed. Otherwise, it returns all.
  # @return [nil]
  describe 'templatelist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for templatelistsources
  # View a list of templates&#39; data sources
  # Allows the user to see tokens to be used in the template
  # @param token The authentication token.
  # @param kind The kind of the templates to return. It must be included in (badge, certificate).
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'templatelistsources test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for templatesave
  # Create or edit a template
  # Allows the user to create or edit a template.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'templatesave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for templatesavelayout
  # Save the layout of a template
  # Allows the user to edit a template&#39;s layout.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'templatesavelayout test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for termdelete
  # Delete a term
  # Allows the user to delete a term from the existing list.
  # @param token The authentication token.
  # @param id The id of the term to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'termdelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for termget
  # Search and view details of a term
  # Allows the user to view a term and its details.
  # @param token The authentication token.
  # @param id The id of the term to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'termget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for termlist
  # Search and view details of all terms
  # Allows the user to view the full list of existing term.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :from The first record to return.
  # @option opts [Integer] :count The max number of records to return.
  # @option opts [Boolean] :notpast Specifies whether the terms in the past should be returned or not.
  # @return [nil]
  describe 'termlist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for termsave
  # Create and edit terms
  # Allows the user to create and edit terms.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'termsave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for textcreditremaining
  # Gets the remaining text credits for the account
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'textcreditremaining test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for texttoimage
  # Generates a dynamic image from text
  # @param token The authentication token.
  # @param text The text to convert to an image, use double pipes (||) as a new line.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :fontcolor The color of the text, in hex format, without the #.
  # @option opts [Integer] :fontsize The size of the text, in points.
  # @option opts [String] :direction Either vertical or horizontal, default horizontal.
  # @option opts [Integer] :width The image width in pixels (or height if the direction is vertical).
  # @return [nil]
  describe 'texttoimage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for translationget
  # Gets the translations of the specified values
  # @param token The authentication token.
  # @param universal Pipe separated list of universal text to be translated.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'translationget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for translationgetcachefile
  # Get the file containing the translations
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token The authentication token.
  # @option opts [String] :account The id of the account whose translations file has to be retrieved.
  # @return [nil]
  describe 'translationgetcachefile test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for translationlist
  # Lists all the available translations in the system
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Text to search/filter translations.
  # @option opts [Boolean] :nondefaultonly If true then it returns only the terms translated. Otherwise, it returns all.
  # @option opts [Boolean] :appdefaultasuniversal If true then it uses the app default translation as the universal term.
  # @return [nil]
  describe 'translationlist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for translationsave
  # Edit a translation
  # Allows the user to edit a translation for the entire account.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'translationsave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userchangepwd
  # Change user&#39;s own password
  # Allows the user to change their own password.
  # @param token The authentication token.
  # @param oldpass The old password of the authenticated user.
  # @param newpass The new password of the authenticated user.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'userchangepwd test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userchangepwdbyreq
  # Changes the user password using a change password request id
  # @param changereq The change password request ID sent by email to the user.
  # @param newpass The new password of the user.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'userchangepwdbyreq test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userdelete
  # Delete a user
  # Allows the user to delete a user.
  # @param token The authentication token.
  # @param id The id of the user to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'userdelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userfindsimilar
  # Finds similar users to prevent duplicates
  # Allows the user to be warned if a user they are creating has the same card number as another user.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :currentid The id of the current user.
  # @option opts [String] :phonenumber A phone number to search for similar users.
  # @option opts [String] :cardnumber A card number to search for similar users.
  # @return [nil]
  describe 'userfindsimilar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userget
  # Search and view details of a user
  # Allows the user to search and view a user and their details.
  # @param token The authentication token.
  # @param id The id of the user to get.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
  # @return [nil]
  describe 'userget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergetbycard
  # Search user by card number
  # Allows the user to search for a user by their card number.
  # @param token The authentication token.
  # @param card The card number of the user to get.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
  # @return [nil]
  describe 'usergetbycard test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergroupaddmember
  # Add a user to a group
  # Allows the user to add a user to a group that they have permission to edit.
  # @param token The authentication token.
  # @param userid The id of the user to add.
  # @param groupid The id of the group.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usergroupaddmember test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergroupdelete
  # Delete a group
  # Allows the user to delete a group that they have permission to edit.
  # @param token The authentication token.
  # @param id The id of the group to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usergroupdelete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergroupget
  # Search and view details of a user group
  # Allows the user to view a user group and its details.
  # @param token The authentication token.
  # @param id The id of the user group to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usergroupget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergroupgetmembers
  # View the members of a user group
  # Allows the user to view the list of users in a group that they have permission to view.
  # @param token The authentication token.
  # @param groupid The id of the user group to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usergroupgetmembers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergroupgetuser
  # View the groups which a user is registered to
  # Allows the user to view the groups an individual user is registered to, based on group and user permissions.
  # @param token The authentication token.
  # @param userid The id of the user to get his groups.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usergroupgetuser test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergrouplist
  # View a list of user groups
  # Allows the user to view the list of groups that they have permission to view.
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :from The first record to return.
  # @option opts [Integer] :count The max number of records to return.
  # @option opts [String] :type The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group.
  # @return [nil]
  describe 'usergrouplist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergrouprefresh
  # Refresh the dynamic group
  # Allows the user to refresh a dynamic group that they have permission to edit.
  # @param token The authentication token.
  # @param group The ID of the group to refresh.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usergrouprefresh test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergroupremovemember
  # Remove a user from a group
  # Allows the user to remove a user from a group that they have permission to edit.
  # @param token The authentication token.
  # @param userid The id of the user to remove.
  # @param groupid The id of the group.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usergroupremovemember test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergroupsave
  # Create or edit a group
  # Allows the user to create a new group or edit a group that they have permission to edit.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'usergroupsave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userlist
  # View a list of users
  # Allows the user to view the full list of users and is based on role permissions.
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :roleid The id of the role to filter users by, or empty to return all users.
  # @option opts [String] :onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
  # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
  # @return [nil]
  describe 'userlist test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userloadphoto
  # Upload a photo for a specific user
  # Allows the user to upload a photo for a user.
  # @param token The authentication token.
  # @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filename The local name of the uploaded file. For later reference.
  # @option opts [String] :userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;.
  # @option opts [Boolean] :automatch Set this to true to find the specific user based on the file name. 
  # @return [nil]
  describe 'userloadphoto test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usermovedata
  # Move data between users
  # Allows administrators to move data between users.
  # @param token The authentication token.
  # @param source The id of the user that is the source of the data.
  # @param destination The id of the user that is the destination of the data.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usermovedata test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userrequestpwdchange
  # Requests a password change
  # @param domain The domain of the account where the user exists.
  # @param email The email of the user.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'userrequestpwdchange test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usersave
  # Create or edit a user
  # Allows the user to create or edit a user.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'usersave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usersavepwdchange
  # Send email to the specified user(s) to set/change their passwords
  # Allows the user to trigger an email to another user asking them to set or change their password.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'usersavepwdchange test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usersettingsget
  # Lists available user settings
  # @param token The authentication token.
  # @param keys Setting key to get. Can be multiple separated by commas.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user The user id whose settings have to be returned.
  # @return [nil]
  describe 'usersettingsget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usersettingsgetmultiple
  # Get multiple user settings
  # @param token The authentication token.
  # @param keys Setting key to get. Can be multiple separated by commas.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user The user id whose settings have to be returned.
  # @return [nil]
  describe 'usersettingsgetmultiple test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usersettingssave
  # Saves a user setting
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'usersettingssave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usersettingssavemultiple
  # Save multiple user settings at once
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'usersettingssavemultiple test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usertaskdeleteplan
  # Deletes a task plan
  # @param token The authentication token.
  # @param id The id of the task plan to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usertaskdeleteplan test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usertaskgetmine
  # Lists the task plans of the logged user
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usertaskgetmine test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usertaskgetplan
  # Gets a task plan by Id
  # @param token The authentication token.
  # @param id The id of the task plan to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usertaskgetplan test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usertasklistdefs
  # Lists task types or definitions
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usertasklistdefs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usertasklistplan
  # Lists task plans
  # @param token The authentication token.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usertasklistplan test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usertasksaveplan
  # Saves a task plan
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'usertasksaveplan test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for version
  # Get current version information
  # @param token The authentication token.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
