=begin
#AccuTraining OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::TemplateApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'TemplateApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::TemplateApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TemplateApi' do
    it 'should create an instance of TemplateApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::TemplateApi)
    end
  end

  # unit tests for template_addimage
  # Add an image to a template
  # Allows the user to add an image to a badge or certificate template.
  # @param template The id of the template where the image has to be added
  # @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filename The local name of the uploaded file. For later reference.
  # @return [nil]
  describe 'template_addimage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for template_delete
  # Delete a template
  # Allows the user to delete an existing template.
  # @param id The id of the template to delete.
  # @param [Hash] opts the optional parameters
  # @option opts [AnyType] :body 
  # @return [nil]
  describe 'template_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for template_email
  # Send generated templates by email
  # Allows the user to send generated templates via email through AccuTraining.
  # @param jobid The id of the job that is creating the templates.
  # @param emailsubject Args depending on the send-to flag.
  # @param emailbody Args depending on the send-to flag.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate).
  # @option opts [String] :emailfrom The name of the sender to be displayed in the receipients inbox
  # @option opts [String] :emailreplyto The reply-to field for the emails.
  # @return [nil]
  describe 'template_email test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for template_generate
  # Generate specified templates
  # Allows the user to generate an existing template as badges or certificates.
  # @param template The id of the template to generate.
  # @param source The source key of the selected template data source.
  # @param singlefile True if all the templates should be placed in the same file, false if each one shoud be in its own file.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas.
  # @option opts [Boolean] :forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading
  # @option opts [String] :role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor
  # @option opts [String] :filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|...
  # @return [nil]
  describe 'template_generate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for template_get
  # View details of a template
  # Allows the user to view a template and its details.
  # @param id The id of the template to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'template_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for template_getgenerated
  # View generated templates
  # Allows the user to view templates which have been generated as badges or certificates.
  # @param jobid The id of the job that is creating the templates.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'template_getgenerated test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for template_list
  # View a list of defined templates
  # Allows the user to view the full list of created templates.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param kind The kind of the templates to return. It must be included in (badge, certificate).
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :designedonly If true then it only returns the templates that were designed. Otherwise, it returns all.
  # @return [nil]
  describe 'template_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for template_listsources
  # View a list of templates&#39; data sources
  # Allows the user to see tokens to be used in the template
  # @param kind The kind of the templates to return. It must be included in (badge, certificate).
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'template_listsources test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for template_save
  # Create or edit a template
  # Allows the user to create or edit a template.
  # @param id The id of the template to save (leave empty to create a new one).
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'template_save test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for template_savelayout
  # Save the layout of a template
  # Allows the user to edit a template&#39;s layout.
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'template_savelayout test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
