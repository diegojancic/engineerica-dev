=begin
#AccuTraining OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class AdvroleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adds the missing permissions to a role. Requires access to advrole.save
    # @param roles [String] CSV list of the role ids to check
    # @param permissions [String] CSV list of the permissions to check
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advrole_addmissing(roles, permissions, opts = {})
      advrole_addmissing_with_http_info(roles, permissions, opts)
      nil
    end

    # Adds the missing permissions to a role. Requires access to advrole.save
    # @param roles [String] CSV list of the role ids to check
    # @param permissions [String] CSV list of the permissions to check
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrole_addmissing_with_http_info(roles, permissions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvroleApi.advrole_addmissing ...'
      end
      # verify the required parameter 'roles' is set
      if @api_client.config.client_side_validation && roles.nil?
        fail ArgumentError, "Missing the required parameter 'roles' when calling AdvroleApi.advrole_addmissing"
      end
      # verify the required parameter 'permissions' is set
      if @api_client.config.client_side_validation && permissions.nil?
        fail ArgumentError, "Missing the required parameter 'permissions' when calling AdvroleApi.advrole_addmissing"
      end
      # resource path
      local_var_path = '/advrole/addmissing'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'roles'] = roles
      query_params[:'permissions'] = permissions

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvroleApi#advrole_addmissing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Checks the permissions are assigned for the given roles
    # @param roles [String] CSV list of the role ids to check
    # @param permissions [String] CSV list of the permissions to check
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advrole_checkperm(roles, permissions, opts = {})
      advrole_checkperm_with_http_info(roles, permissions, opts)
      nil
    end

    # Checks the permissions are assigned for the given roles
    # @param roles [String] CSV list of the role ids to check
    # @param permissions [String] CSV list of the permissions to check
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrole_checkperm_with_http_info(roles, permissions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvroleApi.advrole_checkperm ...'
      end
      # verify the required parameter 'roles' is set
      if @api_client.config.client_side_validation && roles.nil?
        fail ArgumentError, "Missing the required parameter 'roles' when calling AdvroleApi.advrole_checkperm"
      end
      # verify the required parameter 'permissions' is set
      if @api_client.config.client_side_validation && permissions.nil?
        fail ArgumentError, "Missing the required parameter 'permissions' when calling AdvroleApi.advrole_checkperm"
      end
      # resource path
      local_var_path = '/advrole/checkperm'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'roles'] = roles
      query_params[:'permissions'] = permissions

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvroleApi#advrole_checkperm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a role
    # Allows the user to delete a role from the list of available roles.
    # @param id [String] The id of the location to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [AnyType] :body 
    # @return [nil]
    def advrole_delete(id, opts = {})
      advrole_delete_with_http_info(id, opts)
      nil
    end

    # Delete a role
    # Allows the user to delete a role from the list of available roles.
    # @param id [String] The id of the location to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [AnyType] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrole_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvroleApi.advrole_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdvroleApi.advrole_delete"
      end
      # resource path
      local_var_path = '/advrole/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvroleApi#advrole_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a role mapping
    # Allows the user to delete a role from its mapped categories on the 'Role Mapping' page.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def advrole_deletemapping(opts = {})
      advrole_deletemapping_with_http_info(opts)
      nil
    end

    # Delete a role mapping
    # Allows the user to delete a role from its mapped categories on the &#39;Role Mapping&#39; page.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrole_deletemapping_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvroleApi.advrole_deletemapping ...'
      end
      # resource path
      local_var_path = '/advrole/deletemapping'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvroleApi#advrole_deletemapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a role
    # Allows the user to view a role and its details.
    # @param id [String] The id of the location to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advrole_get(id, opts = {})
      advrole_get_with_http_info(id, opts)
      nil
    end

    # View details of a role
    # Allows the user to view a role and its details.
    # @param id [String] The id of the location to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrole_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvroleApi.advrole_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdvroleApi.advrole_get"
      end
      # resource path
      local_var_path = '/advrole/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvroleApi#advrole_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the roles for the current account
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :includepolicies True to include the policies, defaults to false.
    # @option opts [Boolean] :includeinternal True to include the internal roles too.
    # @option opts [String] :name Filter by name of the role.
    # @return [nil]
    def advrole_list(opts = {})
      advrole_list_with_http_info(opts)
      nil
    end

    # Lists the roles for the current account
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :includepolicies True to include the policies, defaults to false.
    # @option opts [Boolean] :includeinternal True to include the internal roles too.
    # @option opts [String] :name Filter by name of the role.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrole_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvroleApi.advrole_list ...'
      end
      # resource path
      local_var_path = '/advrole/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includepolicies'] = opts[:'includepolicies'] if !opts[:'includepolicies'].nil?
      query_params[:'includeinternal'] = opts[:'includeinternal'] if !opts[:'includeinternal'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvroleApi#advrole_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the maps a roles is mapped to
    # @param roleid [String] The id of the role to list the maps.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advrole_listmaps(roleid, opts = {})
      advrole_listmaps_with_http_info(roleid, opts)
      nil
    end

    # Lists the maps a roles is mapped to
    # @param roleid [String] The id of the role to list the maps.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrole_listmaps_with_http_info(roleid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvroleApi.advrole_listmaps ...'
      end
      # verify the required parameter 'roleid' is set
      if @api_client.config.client_side_validation && roleid.nil?
        fail ArgumentError, "Missing the required parameter 'roleid' when calling AdvroleApi.advrole_listmaps"
      end
      # resource path
      local_var_path = '/advrole/listmaps'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'roleid'] = roleid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvroleApi#advrole_listmaps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the roles mappings
    # @param [Hash] opts the optional parameters
    # @option opts [String] :map List only the roles in the specified map.
    # @return [nil]
    def advrole_listrolesmapped(opts = {})
      advrole_listrolesmapped_with_http_info(opts)
      nil
    end

    # Lists the roles mappings
    # @param [Hash] opts the optional parameters
    # @option opts [String] :map List only the roles in the specified map.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrole_listrolesmapped_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvroleApi.advrole_listrolesmapped ...'
      end
      # resource path
      local_var_path = '/advrole/listrolesmapped'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'map'] = opts[:'map'] if !opts[:'map'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvroleApi#advrole_listrolesmapped\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of role templates
    # Allows the user to view the full list of available role templates.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advrole_listtemplates(opts = {})
      advrole_listtemplates_with_http_info(opts)
      nil
    end

    # View a list of role templates
    # Allows the user to view the full list of available role templates.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrole_listtemplates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvroleApi.advrole_listtemplates ...'
      end
      # resource path
      local_var_path = '/advrole/listtemplates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvroleApi#advrole_listtemplates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a role
    # Allows the user to create or edit a role's permissions.
    # @param id [String] The id of the role to save (leave empty to create a new one).
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def advrole_save(id, opts = {})
      advrole_save_with_http_info(id, opts)
      nil
    end

    # Create or edit a role
    # Allows the user to create or edit a role&#39;s permissions.
    # @param id [String] The id of the role to save (leave empty to create a new one).
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrole_save_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvroleApi.advrole_save ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdvroleApi.advrole_save"
      end
      # resource path
      local_var_path = '/advrole/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvroleApi#advrole_save\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a role mapping
    # Allows the user to add a role to a mapped category on the 'Role Mapping' page.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def advrole_savemapping(opts = {})
      advrole_savemapping_with_http_info(opts)
      nil
    end

    # Saves a role mapping
    # Allows the user to add a role to a mapped category on the &#39;Role Mapping&#39; page.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrole_savemapping_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvroleApi.advrole_savemapping ...'
      end
      # resource path
      local_var_path = '/advrole/savemapping'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvroleApi#advrole_savemapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upgrade a user to another role (requires permission to edit those roles)
    # Allow the user to add a role to another user, given that he has access to view that other user and edit people with that new role.
    # @param userid [String] Id of the user to upgrade
    # @param roleid [String] Id of the role to add
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advrole_userupgrade(userid, roleid, opts = {})
      advrole_userupgrade_with_http_info(userid, roleid, opts)
      nil
    end

    # Upgrade a user to another role (requires permission to edit those roles)
    # Allow the user to add a role to another user, given that he has access to view that other user and edit people with that new role.
    # @param userid [String] Id of the user to upgrade
    # @param roleid [String] Id of the role to add
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrole_userupgrade_with_http_info(userid, roleid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvroleApi.advrole_userupgrade ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling AdvroleApi.advrole_userupgrade"
      end
      # verify the required parameter 'roleid' is set
      if @api_client.config.client_side_validation && roleid.nil?
        fail ArgumentError, "Missing the required parameter 'roleid' when calling AdvroleApi.advrole_userupgrade"
      end
      # resource path
      local_var_path = '/advrole/userupgrade'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid
      query_params[:'roleid'] = roleid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvroleApi#advrole_userupgrade\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
