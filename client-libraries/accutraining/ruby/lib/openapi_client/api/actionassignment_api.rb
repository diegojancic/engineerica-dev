=begin
#AccuTraining OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class ActionassignmentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Remove an action item from an action plan
    # Allows a user to remove an action item from a user's action plan.
    # @param id [String] The id of the action assignment to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [AnyType] :body 
    # @return [nil]
    def actionassignment_delete(id, opts = {})
      actionassignment_delete_with_http_info(id, opts)
      nil
    end

    # Remove an action item from an action plan
    # Allows a user to remove an action item from a user&#39;s action plan.
    # @param id [String] The id of the action assignment to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [AnyType] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignment_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionassignmentApi.actionassignment_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ActionassignmentApi.actionassignment_delete"
      end
      # resource path
      local_var_path = '/actionassignment/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionassignmentApi#actionassignment_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of an action item assigned to a user
    # Allows the user to view an individual action item and its details, minus all the action item's updates.
    # @param id [String] The id of the action assignment to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actionassignment_get(id, opts = {})
      actionassignment_get_with_http_info(id, opts)
      nil
    end

    # Search and view details of an action item assigned to a user
    # Allows the user to view an individual action item and its details, minus all the action item&#39;s updates.
    # @param id [String] The id of the action assignment to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignment_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionassignmentApi.actionassignment_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ActionassignmentApi.actionassignment_get"
      end
      # resource path
      local_var_path = '/actionassignment/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionassignmentApi#actionassignment_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of action items in a user's plan
    # Allows the user to view the list of all action items for a specified user.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :assignee The assignee&#39;s id to filter the assignments.
    # @option opts [Integer] :status The status to filter the assignments.
    # @return [nil]
    def actionassignment_list(from, count, opts = {})
      actionassignment_list_with_http_info(from, count, opts)
      nil
    end

    # View a list of action items in a user&#39;s plan
    # Allows the user to view the list of all action items for a specified user.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :assignee The assignee&#39;s id to filter the assignments.
    # @option opts [Integer] :status The status to filter the assignments.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignment_list_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionassignmentApi.actionassignment_list ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ActionassignmentApi.actionassignment_list"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling ActionassignmentApi.actionassignment_list"
      end
      # resource path
      local_var_path = '/actionassignment/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'assignee'] = opts[:'assignee'] if !opts[:'assignee'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionassignmentApi#actionassignment_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the history of an action item assigned to a user
    # Allows the user to view an individual action plan and its details, including all the action plan's updates.
    # @param actionassignment [String] The action assignment&#39;s id whose history the user wants to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actionassignment_listhistory(actionassignment, opts = {})
      actionassignment_listhistory_with_http_info(actionassignment, opts)
      nil
    end

    # View the history of an action item assigned to a user
    # Allows the user to view an individual action plan and its details, including all the action plan&#39;s updates.
    # @param actionassignment [String] The action assignment&#39;s id whose history the user wants to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignment_listhistory_with_http_info(actionassignment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionassignmentApi.actionassignment_listhistory ...'
      end
      # verify the required parameter 'actionassignment' is set
      if @api_client.config.client_side_validation && actionassignment.nil?
        fail ArgumentError, "Missing the required parameter 'actionassignment' when calling ActionassignmentApi.actionassignment_listhistory"
      end
      # resource path
      local_var_path = '/actionassignment/listhistory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'actionassignment'] = actionassignment

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionassignmentApi#actionassignment_listhistory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List public action assignments assigned to the logged user
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :status The status to filter the assignments.
    # @return [nil]
    def actionassignment_listmine(from, count, opts = {})
      actionassignment_listmine_with_http_info(from, count, opts)
      nil
    end

    # List public action assignments assigned to the logged user
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :status The status to filter the assignments.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignment_listmine_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionassignmentApi.actionassignment_listmine ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ActionassignmentApi.actionassignment_listmine"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling ActionassignmentApi.actionassignment_listmine"
      end
      # resource path
      local_var_path = '/actionassignment/listmine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionassignmentApi#actionassignment_listmine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List public action assignment history
    # @param actionassignment [String] The action assignment&#39;s id whose history the user wants to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actionassignment_listpublichistory(actionassignment, opts = {})
      actionassignment_listpublichistory_with_http_info(actionassignment, opts)
      nil
    end

    # List public action assignment history
    # @param actionassignment [String] The action assignment&#39;s id whose history the user wants to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignment_listpublichistory_with_http_info(actionassignment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionassignmentApi.actionassignment_listpublichistory ...'
      end
      # verify the required parameter 'actionassignment' is set
      if @api_client.config.client_side_validation && actionassignment.nil?
        fail ArgumentError, "Missing the required parameter 'actionassignment' when calling ActionassignmentApi.actionassignment_listpublichistory"
      end
      # resource path
      local_var_path = '/actionassignment/listpublichistory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'actionassignment'] = actionassignment

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionassignmentApi#actionassignment_listpublichistory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Bulk complete action items
    # Allows the user to bulk complete action items.
    # @param item [String] The action item to assign.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :assignee The assignee of the item.
    # @option opts [String] :group The group to assing the item.
    # @option opts [String] :notes The assignment&#39;s notes.
    # @return [nil]
    def actionassignment_markcomplete(item, opts = {})
      actionassignment_markcomplete_with_http_info(item, opts)
      nil
    end

    # Bulk complete action items
    # Allows the user to bulk complete action items.
    # @param item [String] The action item to assign.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :assignee The assignee of the item.
    # @option opts [String] :group The group to assing the item.
    # @option opts [String] :notes The assignment&#39;s notes.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignment_markcomplete_with_http_info(item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionassignmentApi.actionassignment_markcomplete ...'
      end
      # verify the required parameter 'item' is set
      if @api_client.config.client_side_validation && item.nil?
        fail ArgumentError, "Missing the required parameter 'item' when calling ActionassignmentApi.actionassignment_markcomplete"
      end
      # resource path
      local_var_path = '/actionassignment/markcomplete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'item'] = item
      query_params[:'assignee'] = opts[:'assignee'] if !opts[:'assignee'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'notes'] = opts[:'notes'] if !opts[:'notes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionassignmentApi#actionassignment_markcomplete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an action item to a user's action plan
    # Allows the user to edit or assign an action item to a user
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def actionassignment_save(opts = {})
      actionassignment_save_with_http_info(opts)
      nil
    end

    # Add an action item to a user&#39;s action plan
    # Allows the user to edit or assign an action item to a user
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignment_save_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionassignmentApi.actionassignment_save ...'
      end
      # resource path
      local_var_path = '/actionassignment/save'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionassignmentApi#actionassignment_save\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an action item assigned to a user
    # Allows the user to update or mark an action item as complete.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def actionassignment_savehistory(opts = {})
      actionassignment_savehistory_with_http_info(opts)
      nil
    end

    # Update an action item assigned to a user
    # Allows the user to update or mark an action item as complete.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignment_savehistory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionassignmentApi.actionassignment_savehistory ...'
      end
      # resource path
      local_var_path = '/actionassignment/savehistory'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionassignmentApi#actionassignment_savehistory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
