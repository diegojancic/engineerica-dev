=begin
#AccuTraining OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class SessionregApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Register current user to an event session
    # Allows the user to register themselves for an event.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionreg_addcurrentuser(eventid, sessiondate, opts = {})
      sessionreg_addcurrentuser_with_http_info(eventid, sessiondate, opts)
      nil
    end

    # Register current user to an event session
    # Allows the user to register themselves for an event.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreg_addcurrentuser_with_http_info(eventid, sessiondate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionregApi.sessionreg_addcurrentuser ...'
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling SessionregApi.sessionreg_addcurrentuser"
      end
      # verify the required parameter 'sessiondate' is set
      if @api_client.config.client_side_validation && sessiondate.nil?
        fail ArgumentError, "Missing the required parameter 'sessiondate' when calling SessionregApi.sessionreg_addcurrentuser"
      end
      # resource path
      local_var_path = '/sessionreg/addcurrentuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = sessiondate

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionregApi#sessionreg_addcurrentuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register users for events
    # Allows the user to register another user for an upcoming event.
    # @param userid [String] The id of the user to add.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionreg_adduser(userid, eventid, sessiondate, opts = {})
      sessionreg_adduser_with_http_info(userid, eventid, sessiondate, opts)
      nil
    end

    # Register users for events
    # Allows the user to register another user for an upcoming event.
    # @param userid [String] The id of the user to add.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreg_adduser_with_http_info(userid, eventid, sessiondate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionregApi.sessionreg_adduser ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling SessionregApi.sessionreg_adduser"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling SessionregApi.sessionreg_adduser"
      end
      # verify the required parameter 'sessiondate' is set
      if @api_client.config.client_side_validation && sessiondate.nil?
        fail ArgumentError, "Missing the required parameter 'sessiondate' when calling SessionregApi.sessionreg_adduser"
      end
      # resource path
      local_var_path = '/sessionreg/adduser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = sessiondate

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionregApi#sessionreg_adduser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the sessions the logged user is registered to
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :date Start date to filter the sessions.
    # @return [nil]
    def sessionreg_getmysessions(opts = {})
      sessionreg_getmysessions_with_http_info(opts)
      nil
    end

    # View all the sessions the logged user is registered to
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :date Start date to filter the sessions.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreg_getmysessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionregApi.sessionreg_getmysessions ...'
      end
      # resource path
      local_var_path = '/sessionreg/getmysessions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionregApi#sessionreg_getmysessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the registrations for a specific user
    # Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
    # @param userid [String] The user id to list sessions.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionreg_getsessions(userid, opts = {})
      sessionreg_getsessions_with_http_info(userid, opts)
      nil
    end

    # Lists the registrations for a specific user
    # Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
    # @param userid [String] The user id to list sessions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreg_getsessions_with_http_info(userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionregApi.sessionreg_getsessions ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling SessionregApi.sessionreg_getsessions"
      end
      # resource path
      local_var_path = '/sessionreg/getsessions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionregApi#sessionreg_getsessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the settings for session registration
    # Allows the user to view a event's session registration settings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locationid The id of the location to save settings.
    # @option opts [String] :eventid The id of the event to save settings.
    # @option opts [DateTime] :sessiondate The date and time when the session starts.
    # @option opts [Boolean] :noinherit True to get the location/event/session specific settings without looking for the more global settings.
    # @return [nil]
    def sessionreg_getsettings(opts = {})
      sessionreg_getsettings_with_http_info(opts)
      nil
    end

    # Get the settings for session registration
    # Allows the user to view a event&#39;s session registration settings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locationid The id of the location to save settings.
    # @option opts [String] :eventid The id of the event to save settings.
    # @option opts [DateTime] :sessiondate The date and time when the session starts.
    # @option opts [Boolean] :noinherit True to get the location/event/session specific settings without looking for the more global settings.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreg_getsettings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionregApi.sessionreg_getsettings ...'
      end
      # resource path
      local_var_path = '/sessionreg/getsettings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'locationid'] = opts[:'locationid'] if !opts[:'locationid'].nil?
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'sessiondate'] = opts[:'sessiondate'] if !opts[:'sessiondate'].nil?
      query_params[:'noinherit'] = opts[:'noinherit'] if !opts[:'noinherit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionregApi#sessionreg_getsettings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the registrations for a specific session
    # Allows the user to view the registration for a specified event session.
    # @param eventid [String] The event id to list sessions.
    # @param sessiondate [DateTime] The date of the session to find.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionreg_getusers(eventid, sessiondate, opts = {})
      sessionreg_getusers_with_http_info(eventid, sessiondate, opts)
      nil
    end

    # Lists the registrations for a specific session
    # Allows the user to view the registration for a specified event session.
    # @param eventid [String] The event id to list sessions.
    # @param sessiondate [DateTime] The date of the session to find.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreg_getusers_with_http_info(eventid, sessiondate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionregApi.sessionreg_getusers ...'
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling SessionregApi.sessionreg_getusers"
      end
      # verify the required parameter 'sessiondate' is set
      if @api_client.config.client_side_validation && sessiondate.nil?
        fail ArgumentError, "Missing the required parameter 'sessiondate' when calling SessionregApi.sessionreg_getusers"
      end
      # resource path
      local_var_path = '/sessionreg/getusers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = sessiondate

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionregApi#sessionreg_getusers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the sessions available for a specific event
    # Allows the user to view all the sessions available for a recurring event.
    # @param eventid [String] The event id to list sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :sessiondate The date of the session to find.
    # @return [nil]
    def sessionreg_listsessions(eventid, opts = {})
      sessionreg_listsessions_with_http_info(eventid, opts)
      nil
    end

    # List the sessions available for a specific event
    # Allows the user to view all the sessions available for a recurring event.
    # @param eventid [String] The event id to list sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :sessiondate The date of the session to find.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreg_listsessions_with_http_info(eventid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionregApi.sessionreg_listsessions ...'
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling SessionregApi.sessionreg_listsessions"
      end
      # resource path
      local_var_path = '/sessionreg/listsessions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = opts[:'sessiondate'] if !opts[:'sessiondate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionregApi#sessionreg_listsessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of upcoming event sessions
    # Allows the user to view the full list of upcoming events.
    # @param date [DateTime] Only sessions in the week of the specified date will be returned.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionreg_listupcoming(date, opts = {})
      sessionreg_listupcoming_with_http_info(date, opts)
      nil
    end

    # View a list of upcoming event sessions
    # Allows the user to view the full list of upcoming events.
    # @param date [DateTime] Only sessions in the week of the specified date will be returned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreg_listupcoming_with_http_info(date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionregApi.sessionreg_listupcoming ...'
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling SessionregApi.sessionreg_listupcoming"
      end
      # resource path
      local_var_path = '/sessionreg/listupcoming'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = date

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionregApi#sessionreg_listupcoming\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of upcoming sessions of a particular event
    # Allows the user to view the upcoming recurring sessions of a specified event.
    # @param date [DateTime] Start date to filter the returned sessions.
    # @param event [String] The id of the event whose sessions will be returned
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionreg_listupcomingevent(date, event, opts = {})
      sessionreg_listupcomingevent_with_http_info(date, event, opts)
      nil
    end

    # View a list of upcoming sessions of a particular event
    # Allows the user to view the upcoming recurring sessions of a specified event.
    # @param date [DateTime] Start date to filter the returned sessions.
    # @param event [String] The id of the event whose sessions will be returned
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreg_listupcomingevent_with_http_info(date, event, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionregApi.sessionreg_listupcomingevent ...'
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling SessionregApi.sessionreg_listupcomingevent"
      end
      # verify the required parameter 'event' is set
      if @api_client.config.client_side_validation && event.nil?
        fail ArgumentError, "Missing the required parameter 'event' when calling SessionregApi.sessionreg_listupcomingevent"
      end
      # resource path
      local_var_path = '/sessionreg/listupcomingevent'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = date
      query_params[:'event'] = event

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionregApi#sessionreg_listupcomingevent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unregister current user from an event session
    # Allows the user to un-register themselves from an event.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionreg_removecurrentuser(eventid, sessiondate, opts = {})
      sessionreg_removecurrentuser_with_http_info(eventid, sessiondate, opts)
      nil
    end

    # Unregister current user from an event session
    # Allows the user to un-register themselves from an event.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreg_removecurrentuser_with_http_info(eventid, sessiondate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionregApi.sessionreg_removecurrentuser ...'
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling SessionregApi.sessionreg_removecurrentuser"
      end
      # verify the required parameter 'sessiondate' is set
      if @api_client.config.client_side_validation && sessiondate.nil?
        fail ArgumentError, "Missing the required parameter 'sessiondate' when calling SessionregApi.sessionreg_removecurrentuser"
      end
      # resource path
      local_var_path = '/sessionreg/removecurrentuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = sessiondate

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionregApi#sessionreg_removecurrentuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes a user from an event session
    # Allows the user to un-register another user from an event.
    # @param userid [String] The id of the user to remove.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionreg_removeuser(userid, eventid, sessiondate, opts = {})
      sessionreg_removeuser_with_http_info(userid, eventid, sessiondate, opts)
      nil
    end

    # Removes a user from an event session
    # Allows the user to un-register another user from an event.
    # @param userid [String] The id of the user to remove.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreg_removeuser_with_http_info(userid, eventid, sessiondate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionregApi.sessionreg_removeuser ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling SessionregApi.sessionreg_removeuser"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling SessionregApi.sessionreg_removeuser"
      end
      # verify the required parameter 'sessiondate' is set
      if @api_client.config.client_side_validation && sessiondate.nil?
        fail ArgumentError, "Missing the required parameter 'sessiondate' when calling SessionregApi.sessionreg_removeuser"
      end
      # resource path
      local_var_path = '/sessionreg/removeuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = sessiondate

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionregApi#sessionreg_removeuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save the settings for an event's session registration
    # Allows the user to save the settings for an event.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def sessionreg_savesettings(opts = {})
      sessionreg_savesettings_with_http_info(opts)
      nil
    end

    # Save the settings for an event&#39;s session registration
    # Allows the user to save the settings for an event.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreg_savesettings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionregApi.sessionreg_savesettings ...'
      end
      # resource path
      local_var_path = '/sessionreg/savesettings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionregApi#sessionreg_savesettings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
