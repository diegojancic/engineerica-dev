=begin
#AccuTraining OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class UserApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Change user's own password
    # Allows the user to change their own password.
    # @param oldpass [String] The old password of the authenticated user.
    # @param newpass [String] The new password of the authenticated user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_changepwd(oldpass, newpass, opts = {})
      user_changepwd_with_http_info(oldpass, newpass, opts)
      nil
    end

    # Change user&#39;s own password
    # Allows the user to change their own password.
    # @param oldpass [String] The old password of the authenticated user.
    # @param newpass [String] The new password of the authenticated user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_changepwd_with_http_info(oldpass, newpass, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_changepwd ...'
      end
      # verify the required parameter 'oldpass' is set
      if @api_client.config.client_side_validation && oldpass.nil?
        fail ArgumentError, "Missing the required parameter 'oldpass' when calling UserApi.user_changepwd"
      end
      # verify the required parameter 'newpass' is set
      if @api_client.config.client_side_validation && newpass.nil?
        fail ArgumentError, "Missing the required parameter 'newpass' when calling UserApi.user_changepwd"
      end
      # resource path
      local_var_path = '/user/changepwd'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'oldpass'] = oldpass
      query_params[:'newpass'] = newpass

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_changepwd\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Changes the user password using a change password request id
    # @param changereq [String] The change password request ID sent by email to the user.
    # @param newpass [String] The new password of the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_changepwdbyreq(changereq, newpass, opts = {})
      user_changepwdbyreq_with_http_info(changereq, newpass, opts)
      nil
    end

    # Changes the user password using a change password request id
    # @param changereq [String] The change password request ID sent by email to the user.
    # @param newpass [String] The new password of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_changepwdbyreq_with_http_info(changereq, newpass, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_changepwdbyreq ...'
      end
      # verify the required parameter 'changereq' is set
      if @api_client.config.client_side_validation && changereq.nil?
        fail ArgumentError, "Missing the required parameter 'changereq' when calling UserApi.user_changepwdbyreq"
      end
      # verify the required parameter 'newpass' is set
      if @api_client.config.client_side_validation && newpass.nil?
        fail ArgumentError, "Missing the required parameter 'newpass' when calling UserApi.user_changepwdbyreq"
      end
      # resource path
      local_var_path = '/user/changepwdbyreq'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'changereq'] = changereq
      query_params[:'newpass'] = newpass

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_changepwdbyreq\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a user
    # Allows the user to delete a user.
    # @param id [String] The id of the user to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [AnyType] :body 
    # @return [nil]
    def user_delete(id, opts = {})
      user_delete_with_http_info(id, opts)
      nil
    end

    # Delete a user
    # Allows the user to delete a user.
    # @param id [String] The id of the user to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [AnyType] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.user_delete"
      end
      # resource path
      local_var_path = '/user/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finds similar users to prevent duplicates
    # Allows the user to be warned if a user they are creating has the same card number as another user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currentid The id of the current user.
    # @option opts [String] :phonenumber A phone number to search for similar users.
    # @option opts [String] :cardnumber A card number to search for similar users.
    # @return [nil]
    def user_findsimilar(opts = {})
      user_findsimilar_with_http_info(opts)
      nil
    end

    # Finds similar users to prevent duplicates
    # Allows the user to be warned if a user they are creating has the same card number as another user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currentid The id of the current user.
    # @option opts [String] :phonenumber A phone number to search for similar users.
    # @option opts [String] :cardnumber A card number to search for similar users.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_findsimilar_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_findsimilar ...'
      end
      # resource path
      local_var_path = '/user/findsimilar'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'currentid'] = opts[:'currentid'] if !opts[:'currentid'].nil?
      query_params[:'phonenumber'] = opts[:'phonenumber'] if !opts[:'phonenumber'].nil?
      query_params[:'cardnumber'] = opts[:'cardnumber'] if !opts[:'cardnumber'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_findsimilar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a user
    # Allows the user to search and view a user and their details.
    # @param id [String] The id of the user to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def user_get(id, opts = {})
      user_get_with_http_info(id, opts)
      nil
    end

    # Search and view details of a user
    # Allows the user to search and view a user and their details.
    # @param id [String] The id of the user to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.user_get"
      end
      # resource path
      local_var_path = '/user/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search user by card number
    # Allows the user to search for a user by their card number.
    # @param card [String] The card number of the user to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def user_getbycard(card, opts = {})
      user_getbycard_with_http_info(card, opts)
      nil
    end

    # Search user by card number
    # Allows the user to search for a user by their card number.
    # @param card [String] The card number of the user to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_getbycard_with_http_info(card, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_getbycard ...'
      end
      # verify the required parameter 'card' is set
      if @api_client.config.client_side_validation && card.nil?
        fail ArgumentError, "Missing the required parameter 'card' when calling UserApi.user_getbycard"
      end
      # resource path
      local_var_path = '/user/getbycard'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'card'] = card
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_getbycard\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of users
    # Allows the user to view the full list of users and is based on role permissions.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :roleid The id of the role to filter users by, or empty to return all users.
    # @option opts [String] :onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def user_list(from, count, opts = {})
      user_list_with_http_info(from, count, opts)
      nil
    end

    # View a list of users
    # Allows the user to view the full list of users and is based on role permissions.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :roleid The id of the role to filter users by, or empty to return all users.
    # @option opts [String] :onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_list_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_list ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling UserApi.user_list"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling UserApi.user_list"
      end
      # resource path
      local_var_path = '/user/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'roleid'] = opts[:'roleid'] if !opts[:'roleid'].nil?
      query_params[:'onlywithoutcard'] = opts[:'onlywithoutcard'] if !opts[:'onlywithoutcard'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload a photo for a specific user
    # Allows the user to upload a photo for a user.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @option opts [String] :userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;.
    # @option opts [Boolean] :automatch Set this to true to find the specific user based on the file name. 
    # @return [nil]
    def user_loadphoto(upload, opts = {})
      user_loadphoto_with_http_info(upload, opts)
      nil
    end

    # Upload a photo for a specific user
    # Allows the user to upload a photo for a user.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @option opts [String] :userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;.
    # @option opts [Boolean] :automatch Set this to true to find the specific user based on the file name. 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_loadphoto_with_http_info(upload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_loadphoto ...'
      end
      # verify the required parameter 'upload' is set
      if @api_client.config.client_side_validation && upload.nil?
        fail ArgumentError, "Missing the required parameter 'upload' when calling UserApi.user_loadphoto"
      end
      # resource path
      local_var_path = '/user/loadphoto'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'upload'] = upload
      query_params[:'filename'] = opts[:'filename'] if !opts[:'filename'].nil?
      query_params[:'userid'] = opts[:'userid'] if !opts[:'userid'].nil?
      query_params[:'automatch'] = opts[:'automatch'] if !opts[:'automatch'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_loadphoto\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move data between users
    # Allows administrators to move data between users.
    # @param source [String] The id of the user that is the source of the data.
    # @param destination [String] The id of the user that is the destination of the data.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_movedata(source, destination, opts = {})
      user_movedata_with_http_info(source, destination, opts)
      nil
    end

    # Move data between users
    # Allows administrators to move data between users.
    # @param source [String] The id of the user that is the source of the data.
    # @param destination [String] The id of the user that is the destination of the data.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_movedata_with_http_info(source, destination, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_movedata ...'
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling UserApi.user_movedata"
      end
      # verify the required parameter 'destination' is set
      if @api_client.config.client_side_validation && destination.nil?
        fail ArgumentError, "Missing the required parameter 'destination' when calling UserApi.user_movedata"
      end
      # resource path
      local_var_path = '/user/movedata'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source'] = source
      query_params[:'destination'] = destination

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_movedata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Requests a password change
    # @param domain [String] The domain of the account where the user exists.
    # @param email [String] The email of the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_requestpwdchange(domain, email, opts = {})
      user_requestpwdchange_with_http_info(domain, email, opts)
      nil
    end

    # Requests a password change
    # @param domain [String] The domain of the account where the user exists.
    # @param email [String] The email of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_requestpwdchange_with_http_info(domain, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_requestpwdchange ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling UserApi.user_requestpwdchange"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling UserApi.user_requestpwdchange"
      end
      # resource path
      local_var_path = '/user/requestpwdchange'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'domain'] = domain
      query_params[:'email'] = email

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_requestpwdchange\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a user
    # Allows the user to create or edit a user.
    # @param id [String] The id of the user to save (leave empty to create a new one).
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def user_save(id, opts = {})
      user_save_with_http_info(id, opts)
      nil
    end

    # Create or edit a user
    # Allows the user to create or edit a user.
    # @param id [String] The id of the user to save (leave empty to create a new one).
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_save_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_save ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.user_save"
      end
      # resource path
      local_var_path = '/user/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_save\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send email to the specified user(s) to set/change their passwords
    # Allows the user to trigger an email to another user asking them to set or change their password.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def user_savepwdchange(opts = {})
      user_savepwdchange_with_http_info(opts)
      nil
    end

    # Send email to the specified user(s) to set/change their passwords
    # Allows the user to trigger an email to another user asking them to set or change their password.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_savepwdchange_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_savepwdchange ...'
      end
      # resource path
      local_var_path = '/user/savepwdchange'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_savepwdchange\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
