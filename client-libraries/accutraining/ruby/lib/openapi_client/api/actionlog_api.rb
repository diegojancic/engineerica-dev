=begin
#AccuTraining OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class ActionlogApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # View a list of users action logs
    # Allows the user to view the audit logs for the account.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The id of the user whose action logs have to be returned.
    # @option opts [DateTime] :startdate The start date of the period to filter the logs.
    # @option opts [DateTime] :enddate The end date of the period to filter the logs.
    # @option opts [String] :resource The resource to filter the action logs.
    # @option opts [String] :actionfilter The action to filter the action logs.
    # @option opts [String] :argument The id of the entity that was the argument of the executed action.
    # @return [nil]
    def actionlog_list(from, count, opts = {})
      actionlog_list_with_http_info(from, count, opts)
      nil
    end

    # View a list of users action logs
    # Allows the user to view the audit logs for the account.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The id of the user whose action logs have to be returned.
    # @option opts [DateTime] :startdate The start date of the period to filter the logs.
    # @option opts [DateTime] :enddate The end date of the period to filter the logs.
    # @option opts [String] :resource The resource to filter the action logs.
    # @option opts [String] :actionfilter The action to filter the action logs.
    # @option opts [String] :argument The id of the entity that was the argument of the executed action.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionlog_list_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionlogApi.actionlog_list ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ActionlogApi.actionlog_list"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling ActionlogApi.actionlog_list"
      end
      # resource path
      local_var_path = '/actionlog/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?
      query_params[:'resource'] = opts[:'resource'] if !opts[:'resource'].nil?
      query_params[:'actionfilter'] = opts[:'actionfilter'] if !opts[:'actionfilter'].nil?
      query_params[:'argument'] = opts[:'argument'] if !opts[:'argument'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionlogApi#actionlog_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
