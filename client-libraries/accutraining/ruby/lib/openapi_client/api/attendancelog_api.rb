=begin
#AccuTraining OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class AttendancelogApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete an attendance log
    # Allows the user to delete an existing attendance log.
    # @param id [String] The id of the attendance log to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [AnyType] :body 
    # @return [nil]
    def attendancelog_delete(id, opts = {})
      attendancelog_delete_with_http_info(id, opts)
      nil
    end

    # Delete an attendance log
    # Allows the user to delete an existing attendance log.
    # @param id [String] The id of the attendance log to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [AnyType] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelog_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttendancelogApi.attendancelog_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttendancelogApi.attendancelog_delete"
      end
      # resource path
      local_var_path = '/attendancelog/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttendancelogApi#attendancelog_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of an attendance log
    # Allows the user to view an individual attendance log and its details.
    # @param id [String] The id of the attendance log to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def attendancelog_get(id, opts = {})
      attendancelog_get_with_http_info(id, opts)
      nil
    end

    # Search and view details of an attendance log
    # Allows the user to view an individual attendance log and its details.
    # @param id [String] The id of the attendance log to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelog_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttendancelogApi.attendancelog_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttendancelogApi.attendancelog_get"
      end
      # resource path
      local_var_path = '/attendancelog/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttendancelogApi#attendancelog_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of an attendance log's swipe history
    # Allows the user to view the swipes of an individual attendance logs (sign ins and sign outs).
    # @param id [String] The id of the attendance log to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def attendancelog_getchangehistory(id, opts = {})
      attendancelog_getchangehistory_with_http_info(id, opts)
      nil
    end

    # Search and view details of an attendance log&#39;s swipe history
    # Allows the user to view the swipes of an individual attendance logs (sign ins and sign outs).
    # @param id [String] The id of the attendance log to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelog_getchangehistory_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttendancelogApi.attendancelog_getchangehistory ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttendancelogApi.attendancelog_getchangehistory"
      end
      # resource path
      local_var_path = '/attendancelog/getchangehistory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttendancelogApi#attendancelog_getchangehistory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of attendance logs
    # Allows the user to view the list of all attendance logs in the location or locations in which the user is scoped.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
    # @option opts [String] :userid The user ID of the user to get the logs.
    # @return [nil]
    def attendancelog_list(from, count, opts = {})
      attendancelog_list_with_http_info(from, count, opts)
      nil
    end

    # View a list of attendance logs
    # Allows the user to view the list of all attendance logs in the location or locations in which the user is scoped.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
    # @option opts [String] :userid The user ID of the user to get the logs.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelog_list_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttendancelogApi.attendancelog_list ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling AttendancelogApi.attendancelog_list"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling AttendancelogApi.attendancelog_list"
      end
      # resource path
      local_var_path = '/attendancelog/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'userid'] = opts[:'userid'] if !opts[:'userid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttendancelogApi#attendancelog_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the attendance logs of the current user
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
    # @return [nil]
    def attendancelog_listmine(from, count, opts = {})
      attendancelog_listmine_with_http_info(from, count, opts)
      nil
    end

    # Gets the attendance logs of the current user
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelog_listmine_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttendancelogApi.attendancelog_listmine ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling AttendancelogApi.attendancelog_listmine"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling AttendancelogApi.attendancelog_listmine"
      end
      # resource path
      local_var_path = '/attendancelog/listmine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttendancelogApi#attendancelog_listmine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit an attendance log
    # Allows the user to create or edit an attendance log.
    # @param id [String] The id of the room to save (leave empty to create a new one).
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def attendancelog_save(id, opts = {})
      attendancelog_save_with_http_info(id, opts)
      nil
    end

    # Create or edit an attendance log
    # Allows the user to create or edit an attendance log.
    # @param id [String] The id of the room to save (leave empty to create a new one).
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelog_save_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttendancelogApi.attendancelog_save ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttendancelogApi.attendancelog_save"
      end
      # resource path
      local_var_path = '/attendancelog/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttendancelogApi#attendancelog_save\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sign out an attendance log
    # Allows the user to sign out am attendance log from the Who's In page.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the attendance log to sign-out.
    # @option opts [String] :location The id of the location to filter the users to sign out.
    # @option opts [String] :event The id of the event to filter the users to sign out.
    # @option opts [DateTime] :datetime Specifies the date and time when the specified logs have to be signed out.
    # @return [nil]
    def attendancelog_signout(opts = {})
      attendancelog_signout_with_http_info(opts)
      nil
    end

    # Sign out an attendance log
    # Allows the user to sign out am attendance log from the Who&#39;s In page.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the attendance log to sign-out.
    # @option opts [String] :location The id of the location to filter the users to sign out.
    # @option opts [String] :event The id of the event to filter the users to sign out.
    # @option opts [DateTime] :datetime Specifies the date and time when the specified logs have to be signed out.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelog_signout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttendancelogApi.attendancelog_signout ...'
      end
      # resource path
      local_var_path = '/attendancelog/signout'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?
      query_params[:'datetime'] = opts[:'datetime'] if !opts[:'datetime'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttendancelogApi#attendancelog_signout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View who's in a location
    # Allows the user to view the Who's In page and view all users who are logged into locations in which the user is scoped.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The id of the location to search for users that are in.
    # @option opts [String] :event The id of the event to search for users that are in.
    # @option opts [String] :sorting Field to sort by. Either first-name, last-name or sign-in-time.
    # @option opts [String] :roles The comma-separated list of ids of the roles to search for users that are in.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @option opts [String] :extensions A JSON array containing the extension filters (i.e [{name: &#39;nametofilter&#39;, value: &#39;valuetofilter&#39;}]).
    # @option opts [Boolean] :export True to export the results as CSV
    # @return [nil]
    def attendancelog_whosin(from, count, opts = {})
      attendancelog_whosin_with_http_info(from, count, opts)
      nil
    end

    # View who&#39;s in a location
    # Allows the user to view the Who&#39;s In page and view all users who are logged into locations in which the user is scoped.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The id of the location to search for users that are in.
    # @option opts [String] :event The id of the event to search for users that are in.
    # @option opts [String] :sorting Field to sort by. Either first-name, last-name or sign-in-time.
    # @option opts [String] :roles The comma-separated list of ids of the roles to search for users that are in.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @option opts [String] :extensions A JSON array containing the extension filters (i.e [{name: &#39;nametofilter&#39;, value: &#39;valuetofilter&#39;}]).
    # @option opts [Boolean] :export True to export the results as CSV
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelog_whosin_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttendancelogApi.attendancelog_whosin ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling AttendancelogApi.attendancelog_whosin"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling AttendancelogApi.attendancelog_whosin"
      end
      # resource path
      local_var_path = '/attendancelog/whosin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'roles'] = opts[:'roles'] if !opts[:'roles'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?
      query_params[:'extensions'] = opts[:'extensions'] if !opts[:'extensions'].nil?
      query_params[:'export'] = opts[:'export'] if !opts[:'export'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttendancelogApi#attendancelog_whosin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
