=begin
#AccuTraining OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class LicenseApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Accept the license agreement
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def license_acceptagreement(opts = {})
      license_acceptagreement_with_http_info(opts)
      nil
    end

    # Accept the license agreement
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def license_acceptagreement_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseApi.license_acceptagreement ...'
      end
      # resource path
      local_var_path = '/license/acceptagreement'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseApi#license_acceptagreement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if license agreement has been accepted
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def license_getagreementstatus(opts = {})
      license_getagreementstatus_with_http_info(opts)
      nil
    end

    # Check if license agreement has been accepted
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def license_getagreementstatus_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseApi.license_getagreementstatus ...'
      end
      # resource path
      local_var_path = '/license/getagreementstatus'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseApi#license_getagreementstatus\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the current license information
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def license_getcurrent(opts = {})
      license_getcurrent_with_http_info(opts)
      nil
    end

    # Gets the current license information
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def license_getcurrent_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseApi.license_getcurrent ...'
      end
      # resource path
      local_var_path = '/license/getcurrent'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseApi#license_getcurrent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Contact Engineerica in order to renew the AccuTraining subscription
    # Allows the user to select the option to contact Engineerica when the AccuTraining account is nearing its renewal date.
    # @param email [String] The e-mail of the user sending the request.
    # @param phonenumber [String] The phone number of the user sending the request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :jobtitle The job title of the user sending the request.
    # @option opts [String] :institution The institution of the user sending the request.
    # @option opts [String] :comments Comments entered by the user sending the request.
    # @return [nil]
    def license_renew(email, phonenumber, opts = {})
      license_renew_with_http_info(email, phonenumber, opts)
      nil
    end

    # Contact Engineerica in order to renew the AccuTraining subscription
    # Allows the user to select the option to contact Engineerica when the AccuTraining account is nearing its renewal date.
    # @param email [String] The e-mail of the user sending the request.
    # @param phonenumber [String] The phone number of the user sending the request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :jobtitle The job title of the user sending the request.
    # @option opts [String] :institution The institution of the user sending the request.
    # @option opts [String] :comments Comments entered by the user sending the request.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def license_renew_with_http_info(email, phonenumber, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseApi.license_renew ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling LicenseApi.license_renew"
      end
      # verify the required parameter 'phonenumber' is set
      if @api_client.config.client_side_validation && phonenumber.nil?
        fail ArgumentError, "Missing the required parameter 'phonenumber' when calling LicenseApi.license_renew"
      end
      # resource path
      local_var_path = '/license/renew'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'email'] = email
      query_params[:'phonenumber'] = phonenumber
      query_params[:'jobtitle'] = opts[:'jobtitle'] if !opts[:'jobtitle'].nil?
      query_params[:'institution'] = opts[:'institution'] if !opts[:'institution'].nil?
      query_params[:'comments'] = opts[:'comments'] if !opts[:'comments'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseApi#license_renew\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
