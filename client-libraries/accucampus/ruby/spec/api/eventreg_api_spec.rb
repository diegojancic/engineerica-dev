=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::EventregApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'EventregApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::EventregApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of EventregApi' do
    it 'should create an instance of EventregApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::EventregApi)
    end
  end

  # unit tests for eventreg_addme
  # Register current user to a course
  # Allows the user to make themselves available for individual courses.
  # @param eventid The id of the event.
  # @param listname The name of the list where the user has to be registered.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventreg_addme test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_addmetoall
  # Register current user to all courses
  # Allows the user to make themselves available for all courses.
  # @param listname The name of the list where the user has to be registered.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventreg_addmetoall test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_addmetogroup
  # Register current user to a course group
  # Allows the user to make themselves available for a course group.
  # @param codegroup The code used to group events.
  # @param listname The name of the list where the user has to be registered.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventreg_addmetogroup test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_adduser
  # Register a user to a course for attendance
  # Allows the user to register a user to a course.
  # @param userid The id of the user to add.
  # @param eventid The id of the event.
  # @param listname The name of the list where the user has to be registered.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventreg_adduser test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_addusertoall
  # Register a user to assist with all courses
  # Allows the user to make a staff member available to assist with all courses.
  # @param userid The id of the user to add.
  # @param listname The name of the list where the user has to be registered.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventreg_addusertoall test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_addusertogroup
  # Register a user to an course group
  # Allows the user to make a staff member available for a course group.
  # @param userid The id of the user to add.
  # @param codegroup The code used to group events.
  # @param listname The name of the list where the user has to be registered.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventreg_addusertogroup test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_getevents
  # View course registration by user
  # Allows the user to view all courses a given user is registered to, provided they have permission to view that user.
  # @param userid The user id to list events.
  # @param listname The name of the list where the user is registered.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :termid The term id to list events.
  # @option opts [String] :namefilter The value used to filter the events by name.
  # @return [nil]
  describe 'eventreg_getevents test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_getgroups
  # Lists the course group registrations of a user
  # Allows the user to view the course groups a staff member is available for.
  # @param userid The user id to list events.
  # @param listname The name of the list where the user is registered.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventreg_getgroups test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_getmyevents
  # View the event registrations of the current user
  # @param listname The name of the list where the user is registered.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :termid The term id to list events.
  # @option opts [String] :namefilter The value used to filter the events by name.
  # @return [nil]
  describe 'eventreg_getmyevents test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_getmygroups
  # View all current user registrations to course groups
  # Allows the user to view all his registrations to course groups.
  # @param listname The name of the list where the user is registered.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventreg_getmygroups test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_getusers
  # View course registration
  # Allows the user to view all users registered for an individual course.
  # @param eventid The event id to list users.
  # @param listname The name of the list to get.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
  # @return [nil]
  describe 'eventreg_getusers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_getusersfromgroup
  # Lists the registrations for a course group
  # Allows the user the get the staff members registered to a specific course group
  # @param codegroup The code group to list users.
  # @param listname The name of the list to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventreg_getusersfromgroup test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_getuserstoall
  # View the users that are registered to all courses
  # Allows the user to view all staff members available for all courses.
  # @param listname The name of the list to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventreg_getuserstoall test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_removeme
  # Unregister current user from a course
  # Allows the user to remove themselves from registration to a course.
  # @param eventid The id of the event.
  # @param listname The name of the list where the user is registered.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventreg_removeme test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_removemefromall
  # Remove current user from the registration to all courses
  # Allows the user to remove themselves from availability to all courses.
  # @param listname The name of the list where the user is registered.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventreg_removemefromall test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_removemefromgroup
  # Remove current user from a course group
  # Allows the user to remove themselves from availability to a course group.
  # @param codegroup The code group of the events/courses.
  # @param listname The name of the list where the user is registered.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventreg_removemefromgroup test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_removeuser
  # Remove a user from a course
  # Allows the user to remove a user from a course&#39;s registration.
  # @param userid The id of the user to remove.
  # @param eventid The id of the event.
  # @param listname The name of the list where the user is registered.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventreg_removeuser test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_removeuserfromall
  # Remove a user from the registration to all courses
  # Allows the user to remove a staff member from availability to all courses.
  # @param userid The id of the user to remove.
  # @param listname The name of the list where the user is registered.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventreg_removeuserfromall test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for eventreg_removeuserfromgroup
  # Remove a user from a course group
  # Allows the user to remove a staff member from availability to a course group.
  # @param userid The id of the user to remove.
  # @param codegroup The code group of the events/courses.
  # @param listname The name of the list where the user is registered.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'eventreg_removeuserfromgroup test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
