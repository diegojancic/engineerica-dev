=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::AppointmentApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AppointmentApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::AppointmentApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AppointmentApi' do
    it 'should create an instance of AppointmentApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::AppointmentApi)
    end
  end

  # unit tests for appointment_cancel
  # Cancel an appointment
  # Allows the user to cancel an appointment.
  # @param id The id of the appointment to cancel.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'appointment_cancel test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_checkisvalid
  # Check if an appointment is valid or not
  # @param id The id of the appointment to check.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :editing Specifies whether the check is for a new appointment or an existing one.
  # @return [nil]
  describe 'appointment_checkisvalid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_editanyway
  # Edit an appointment even if it breaks activated rules
  # Allows the user to edit an existing appointment even if it breaks the rules or settings of that location.
  # @param id The id of the appointment to edit.
  # @param attendee The id of the attendee involved in the appointment.
  # @param staff The id of the staff member involved in the appointment.
  # @param location The id of the location where the appointment will take place.
  # @param start The appointment&#39;s start date &amp; time.
  # @param _end The appointment&#39;s end date &amp; time.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :term The id of the term when the appointment takes place.
  # @option opts [String] :event The id of the event of the appointment.
  # @option opts [String] :services Comma-separated string containing the ids of the services of the appointment.
  # @option opts [String] :notes The notes of the appointment.
  # @return [nil]
  describe 'appointment_editanyway test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_editpresence
  # Edit the no-show status of an appointment
  # Allows the user to edit the no-show status of an appointment by marking it as Voided, Restored, or as a Show.
  # @param id The id of the appointment to edit its presence.
  # @param showedup Specifies whether the attendee was showed-up or not in the appointment.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'appointment_editpresence test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_findallstaffslots
  # Finds all staff available slots filtered by service, date, etc
  # Allows the user to view available appointment slots when creating an appointment.
  # @param starttime The start time of the range to look for slots.
  # @param endtime The end time of the range to look for slots.
  # @param serviceids CSV list of the service Ids to filter by.
  # @param locationid The id of the service to filter by.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :eventid The id of the event to filter by.
  # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
  # @return [nil]
  describe 'appointment_findallstaffslots test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_findslots
  # Finds available slots filtered by service, date, staff, etc
  # Allows the user to view available appointment slots when creating an appointment.
  # @param staffid The id of the staff to filter by.
  # @param starttime The start time of the range to look for slots.
  # @param endtime The end time of the range to look for slots.
  # @param serviceids CSV list of the service Ids to filter by.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :eventid The id of the event to filter by.
  # @option opts [String] :locationid The id of the service to filter by.
  # @return [nil]
  describe 'appointment_findslots test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_findstaff
  # Finds staff available by service, date, event, etc
  # Allows the user to view staff availability when creating an appointment.
  # @param serviceids CSV list of the service ids to filter by.
  # @param starttime The start time of the range to look for slots.
  # @param endtime The end time of the range to look for slots.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :eventid The id of the event to filter by.
  # @option opts [String] :locationid The id of the service to filter by.
  # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
  # @return [nil]
  describe 'appointment_findstaff test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_get
  # Search and view details of an appointment
  # Allows the user to view an individual appointment and its details.
  # @param id The id of the appointment to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'appointment_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_getcurrent
  # Get the current appointments for the user that is about to sign-in via the specified sign-in station.
  # @param station The id of the sign-in station to get.
  # @param user The card of the user.
  # @param location The id of the location where the user wants to sign-in.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'appointment_getcurrent test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_getlocations
  # Find locations where a service is available
  # Allows the user to search for appointment availability by location or service.
  # @param serviceid The id of the service to get its locations.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'appointment_getlocations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_list
  # View a list of appointments
  # Allows the user to view all upcoming appointments for the location or locations they are scoped to.
  # @param from The first record to return.
  # @param count The max number of records to return.
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :startdate The start date of the period to filter the appointments.
  # @option opts [DateTime] :enddate The end date of the period to filter the appointments.
  # @option opts [String] :userid The attendee id to filter the appointments.
  # @return [nil]
  describe 'appointment_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_listmine
  # View all my upcoming appointments
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :start If specified, only appointments that start after the specified date will be returned.
  # @option opts [DateTime] :modifiedafter If specified, only appointments modified after the specified date will be returned.
  # @return [nil]
  describe 'appointment_listmine test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_listupcoming
  # Search and view details of all my upcoming appointments
  # Allows the user to view all of their own upcoming appointments.
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :start If specified, only appointments that start after the specified date will be returned.
  # @option opts [DateTime] :modifiedafter If specified, only appointments modified after the specified date will be returned.
  # @return [nil]
  describe 'appointment_listupcoming test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_rescheduleoutlook
  # Reschedule an appointment from MS Outlook.
  # Allows the user to reschedule, edit, or cancel appointments via MS Outlook if the user has the AccuCampus add-on installed on their Outlook.
  # @param id The id of the appointment to edit.
  # @param start The appointment&#39;s start date &amp; time.
  # @param _end The appointment&#39;s end date &amp; time.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'appointment_rescheduleoutlook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_restore
  # Restore an appointment
  # Allows the user to restore a canceled appointment.
  # @param id The id of the appointment to restore.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'appointment_restore test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_restoreanyway
  # Restore an appointment even if it breaks activated rules
  # Allows the user to restore a canceled appointment even if that appointment breaks the rules or settings of that location.
  # @param id The id of the appointment to restore.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'appointment_restoreanyway test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_save
  # Schedule an appointment
  # Allows the user to schedule an appointment within the rules of the location and the availability of staff members.
  # @param id The id of the appointment to save (leave empty to create a new one).
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'appointment_save test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_setasvalid
  # Schedule an appointment even if it breaks activated rules
  # Allows the user to schedule an appointment even if it breaks the rules or settings of that location or if it goes against the availability of the staff member.
  # @param id The id of the appointment to set as valid.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'appointment_setasvalid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_suggestlocations
  # View the locations with most appointments
  # Allows the user to view suggestions for the most popular locations in which to make appointments
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'appointment_suggestlocations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_suggestservices
  # View the services with most appointments
  # Allows the user to view suggestions for the most popular services for which to make appointments.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'appointment_suggestservices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for appointment_void
  # Void an appointment
  # Allows the user to void an appointment that has been marked as a no-show so that it does not count against the student&#39;s restrictions.
  # @param id The id of the appointment to cancel.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'appointment_void test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
