=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::RatingApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'RatingApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::RatingApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of RatingApi' do
    it 'should create an instance of RatingApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::RatingApi)
    end
  end

  # unit tests for rating_flag
  # Flags one rating for moderation
  # @param id The rating to flag.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :comment Comment why should this should be removed.
  # @return [nil]
  describe 'rating_flag test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rating_flagcomment
  # Flags one comment for moderation
  # @param id The comment to flag.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :comment Comment why should this should be removed.
  # @return [nil]
  describe 'rating_flagcomment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rating_get
  # Get rating for one or more entities
  # @param type The entity type to get the rating.
  # @param entityids List of ids to get the ratings.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'rating_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rating_getall
  # Gets the full ratings and comments for a specific entity
  # @param type The entity type to get the rating.
  # @param entityid Id of the entity to get the ratings.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :mostrecentfirst True to show most recent first, otherwise most helpful first.
  # @return [nil]
  describe 'rating_getall test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rating_getcomments
  # Gets all the comments for a rating
  # @param ratingid The ID of the rating to get all comments.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'rating_getcomments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rating_getpending
  # Gets info of pre-saved and pre-approved ratings
  # @param getgroup The ID of the group of pending ratings to get.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :rateid Rate this before returning.
  # @option opts [Integer] :rateval The value used to rate the item specified in rateid.
  # @return [nil]
  describe 'rating_getpending test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rating_getpendingmoderation
  # Shows a list of the ratings and comments that are pending for moderation
  # Allows the user to view the list of pending ratings and comments.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'rating_getpendingmoderation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rating_moderate
  # Allows the user to accept or reject a comment
  # Allows the user to approve or reject a comment or rating.
  # @param type Either &#39;rating&#39; or &#39;comment&#39; depending on what you want to moderate.
  # @param id Id of the rating or comment, as specified in type.
  # @param approve True to approve, false to reject.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'rating_moderate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rating_postcomment
  # Posts a comments for in a rating
  # @param ratingid The ID of the rating to post the comment.
  # @param comment Text of the comment to post.
  # @param annonymous True to post the comment annonymously.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'rating_postcomment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rating_rate
  # Rates one entity
  # @param type The entity type to rate.
  # @param entityid Id of the entity to rate.
  # @param annonymous Whether to post as annonymous.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :value Value from 0 to 100 with the rating.
  # @option opts [String] :comment Comment associated with this review. Comment can be updated later on another request too.
  # @option opts [Boolean] :updatecomment Whether to update the comments. Defaults to true.
  # @return [nil]
  describe 'rating_rate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rating_ratepending
  # Rates a pre-saved and pre-approved entity
  # @param group The ID of the group of with pre-approved ratings.
  # @param annonymous Whether to post as annonymous.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :rateid Rate this before returning.
  # @option opts [Integer] :value Value from 0 to 100 with the rating.
  # @option opts [String] :comment Comment associated with this review. Comment can be updated later on another request too.
  # @option opts [Boolean] :updatecomment Whether to update the comments. Defaults to true.
  # @return [nil]
  describe 'rating_ratepending test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rating_vote
  # Votes up or down a rating
  # @param ratingid The ID of the rating to vote on.
  # @param vote 1 to vote up, -1 to vote down.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'rating_vote test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
