=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::UsergroupApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'UsergroupApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::UsergroupApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UsergroupApi' do
    it 'should create an instance of UsergroupApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::UsergroupApi)
    end
  end

  # unit tests for usergroup_addmember
  # Add a user to a group
  # Allows the user to add a user to a group that they have permission to edit.
  # @param userid The id of the user to add.
  # @param groupid The id of the group.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usergroup_addmember test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergroup_delete
  # Delete a group
  # Allows the user to delete a group that they have permission to edit.
  # @param id The id of the group to delete.
  # @param [Hash] opts the optional parameters
  # @option opts [AnyType] :body 
  # @return [nil]
  describe 'usergroup_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergroup_get
  # Search and view details of a user group
  # Allows the user to view a user group and its details.
  # @param id The id of the user group to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usergroup_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergroup_getmembers
  # View the members of a user group
  # Allows the user to view the list of users in a group that they have permission to view.
  # @param groupid The id of the user group to get.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usergroup_getmembers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergroup_getuser
  # View the groups which a user is registered to
  # Allows the user to view the groups an individual user is registered to, based on group and user permissions.
  # @param userid The id of the user to get his groups.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usergroup_getuser test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergroup_list
  # View a list of user groups
  # Allows the user to view the list of groups that they have permission to view.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :from The first record to return.
  # @option opts [Integer] :count The max number of records to return.
  # @option opts [String] :type The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group.
  # @return [nil]
  describe 'usergroup_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergroup_refresh
  # Refresh the dynamic group
  # Allows the user to refresh a dynamic group that they have permission to edit.
  # @param group The ID of the group to refresh.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usergroup_refresh test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergroup_removemember
  # Remove a user from a group
  # Allows the user to remove a user from a group that they have permission to edit.
  # @param userid The id of the user to remove.
  # @param groupid The id of the group.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'usergroup_removemember test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergroup_save
  # Create or edit a group
  # Allows the user to create a new group or edit a group that they have permission to edit.
  # @param id The id of the group to save (leave empty to create a new one).
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'usergroup_save test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergroup_tagmembers
  # Assign tags to the members of a specified group
  # Allows the user to assign tags to the users of a group that they have permission to edit.
  # @param group The id of the group to save whose members have to be tagged.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :tags The tags to assign to the members of the specified group, in JSON format.
  # @return [nil]
  describe 'usergroup_tagmembers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for usergroup_untagmembers
  # Unassign tags from the members of a specified group
  # Allows the user to unassign tags to the users of a group that they have permission to edit.
  # @param group The id of the group to save whose members have to be untagged.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :tags The tags to unassign from the members of the specified group, in JSON format.
  # @return [nil]
  describe 'usergroup_untagmembers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
