=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::StaffavailApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'StaffavailApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::StaffavailApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of StaffavailApi' do
    it 'should create an instance of StaffavailApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::StaffavailApi)
    end
  end

  # unit tests for staffavail_addmetoallservices
  # Associate current user to all services
  # Allows the user to associate themselves to all services, provided they have a staff role.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'staffavail_addmetoallservices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for staffavail_addmetoservice
  # Associate current user to a service
  # Allows the user to associate themselves to a service, provided they have a staff role.
  # @param serviceid The id of the service.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'staffavail_addmetoservice test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for staffavail_addusertoallservices
  # Associate a staff member to all services
  # Allows the user to make a staff member available for all services.
  # @param userid The id of the user to add.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'staffavail_addusertoallservices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for staffavail_addusertoservice
  # Associate a staff member to a service
  # Allows the user to make a staff member available for a service.
  # @param userid The id of the user to add.
  # @param serviceid The id of the service.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'staffavail_addusertoservice test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for staffavail_getmyservices
  # View the services the current user is available for
  # Allows the user to view a list of services that they are associated with.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'staffavail_getmyservices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for staffavail_getservices
  # View a list of services that a staff member is available for
  # Allows the user to view the list of services that a staff member is available for.
  # @param userid The user id to list services.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'staffavail_getservices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for staffavail_getusersforservice
  # View a list of staff members that are available for a specific service
  # Allows the user to view all staff members who are available for a service.
  # @param serviceid The service id to list users.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'staffavail_getusersforservice test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for staffavail_listtypes
  # View all the availability types
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'staffavail_listtypes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for staffavail_removemefromallservices
  # Remove current user from all services
  # Allows the user to disassociate themselves from all services, provided they have a staff role.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'staffavail_removemefromallservices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for staffavail_removemefromservice
  # Remove current user from a service
  # Allows the user to disassociate themselves from a service, provided they have a staff role.
  # @param serviceid The id of the service.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'staffavail_removemefromservice test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for staffavail_removeuserfromallservices
  # Removes a staff member from the registration to all services
  # Allows the user to remove a staff member&#39;s availability to all services.
  # @param userid The id of the user to remove.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'staffavail_removeuserfromallservices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for staffavail_removeuserfromservice
  # Remove a staff member from a service
  # Allows the user to remove a staff member&#39;s service availability.
  # @param userid The id of the user to remove.
  # @param serviceid The id of the service.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'staffavail_removeuserfromservice test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for staffavail_setavailability
  # Make a staff member available for a specific availability type
  # Allows the user to set a staff member as available for walk ins, appointments, or both.
  # @param userid The id of the user whose specific availability has to be set.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :availablefor Specific availability to set.
  # @return [nil]
  describe 'staffavail_setavailability test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for staffavail_setmyavailability
  # Change current user&#39;s availability type
  # Allows the user to make themselves available for walk ins, appointments, or both.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :availablefor Specific availability to set.
  # @return [nil]
  describe 'staffavail_setmyavailability test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
