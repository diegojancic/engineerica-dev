=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class RatingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Flags one rating for moderation
    # @param id [String] The rating to flag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Comment why should this should be removed.
    # @return [nil]
    def rating_flag(id, opts = {})
      rating_flag_with_http_info(id, opts)
      nil
    end

    # Flags one rating for moderation
    # @param id [String] The rating to flag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Comment why should this should be removed.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rating_flag_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatingApi.rating_flag ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RatingApi.rating_flag"
      end
      # resource path
      local_var_path = '/rating/flag'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatingApi#rating_flag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Flags one comment for moderation
    # @param id [String] The comment to flag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Comment why should this should be removed.
    # @return [nil]
    def rating_flagcomment(id, opts = {})
      rating_flagcomment_with_http_info(id, opts)
      nil
    end

    # Flags one comment for moderation
    # @param id [String] The comment to flag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Comment why should this should be removed.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rating_flagcomment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatingApi.rating_flagcomment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RatingApi.rating_flagcomment"
      end
      # resource path
      local_var_path = '/rating/flagcomment'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatingApi#rating_flagcomment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get rating for one or more entities
    # @param type [String] The entity type to get the rating.
    # @param entityids [String] List of ids to get the ratings.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rating_get(type, entityids, opts = {})
      rating_get_with_http_info(type, entityids, opts)
      nil
    end

    # Get rating for one or more entities
    # @param type [String] The entity type to get the rating.
    # @param entityids [String] List of ids to get the ratings.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rating_get_with_http_info(type, entityids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatingApi.rating_get ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling RatingApi.rating_get"
      end
      # verify the required parameter 'entityids' is set
      if @api_client.config.client_side_validation && entityids.nil?
        fail ArgumentError, "Missing the required parameter 'entityids' when calling RatingApi.rating_get"
      end
      # resource path
      local_var_path = '/rating/get'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type
      query_params[:'entityids'] = entityids

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatingApi#rating_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the full ratings and comments for a specific entity
    # @param type [String] The entity type to get the rating.
    # @param entityid [String] Id of the entity to get the ratings.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :mostrecentfirst True to show most recent first, otherwise most helpful first.
    # @return [nil]
    def rating_getall(type, entityid, opts = {})
      rating_getall_with_http_info(type, entityid, opts)
      nil
    end

    # Gets the full ratings and comments for a specific entity
    # @param type [String] The entity type to get the rating.
    # @param entityid [String] Id of the entity to get the ratings.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :mostrecentfirst True to show most recent first, otherwise most helpful first.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rating_getall_with_http_info(type, entityid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatingApi.rating_getall ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling RatingApi.rating_getall"
      end
      # verify the required parameter 'entityid' is set
      if @api_client.config.client_side_validation && entityid.nil?
        fail ArgumentError, "Missing the required parameter 'entityid' when calling RatingApi.rating_getall"
      end
      # resource path
      local_var_path = '/rating/getall'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type
      query_params[:'entityid'] = entityid
      query_params[:'mostrecentfirst'] = opts[:'mostrecentfirst'] if !opts[:'mostrecentfirst'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatingApi#rating_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all the comments for a rating
    # @param ratingid [String] The ID of the rating to get all comments.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rating_getcomments(ratingid, opts = {})
      rating_getcomments_with_http_info(ratingid, opts)
      nil
    end

    # Gets all the comments for a rating
    # @param ratingid [String] The ID of the rating to get all comments.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rating_getcomments_with_http_info(ratingid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatingApi.rating_getcomments ...'
      end
      # verify the required parameter 'ratingid' is set
      if @api_client.config.client_side_validation && ratingid.nil?
        fail ArgumentError, "Missing the required parameter 'ratingid' when calling RatingApi.rating_getcomments"
      end
      # resource path
      local_var_path = '/rating/getcomments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ratingid'] = ratingid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatingApi#rating_getcomments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets info of pre-saved and pre-approved ratings
    # @param getgroup [String] The ID of the group of pending ratings to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :rateid Rate this before returning.
    # @option opts [Integer] :rateval The value used to rate the item specified in rateid.
    # @return [nil]
    def rating_getpending(getgroup, opts = {})
      rating_getpending_with_http_info(getgroup, opts)
      nil
    end

    # Gets info of pre-saved and pre-approved ratings
    # @param getgroup [String] The ID of the group of pending ratings to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :rateid Rate this before returning.
    # @option opts [Integer] :rateval The value used to rate the item specified in rateid.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rating_getpending_with_http_info(getgroup, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatingApi.rating_getpending ...'
      end
      # verify the required parameter 'getgroup' is set
      if @api_client.config.client_side_validation && getgroup.nil?
        fail ArgumentError, "Missing the required parameter 'getgroup' when calling RatingApi.rating_getpending"
      end
      # resource path
      local_var_path = '/rating/getpending'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'getgroup'] = getgroup
      query_params[:'rateid'] = opts[:'rateid'] if !opts[:'rateid'].nil?
      query_params[:'rateval'] = opts[:'rateval'] if !opts[:'rateval'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatingApi#rating_getpending\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Shows a list of the ratings and comments that are pending for moderation
    # Allows the user to view the list of pending ratings and comments.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rating_getpendingmoderation(opts = {})
      rating_getpendingmoderation_with_http_info(opts)
      nil
    end

    # Shows a list of the ratings and comments that are pending for moderation
    # Allows the user to view the list of pending ratings and comments.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rating_getpendingmoderation_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatingApi.rating_getpendingmoderation ...'
      end
      # resource path
      local_var_path = '/rating/getpendingmoderation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatingApi#rating_getpendingmoderation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Allows the user to accept or reject a comment
    # Allows the user to approve or reject a comment or rating.
    # @param type [String] Either &#39;rating&#39; or &#39;comment&#39; depending on what you want to moderate.
    # @param id [String] Id of the rating or comment, as specified in type.
    # @param approve [Boolean] True to approve, false to reject.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rating_moderate(type, id, approve, opts = {})
      rating_moderate_with_http_info(type, id, approve, opts)
      nil
    end

    # Allows the user to accept or reject a comment
    # Allows the user to approve or reject a comment or rating.
    # @param type [String] Either &#39;rating&#39; or &#39;comment&#39; depending on what you want to moderate.
    # @param id [String] Id of the rating or comment, as specified in type.
    # @param approve [Boolean] True to approve, false to reject.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rating_moderate_with_http_info(type, id, approve, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatingApi.rating_moderate ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling RatingApi.rating_moderate"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RatingApi.rating_moderate"
      end
      # verify the required parameter 'approve' is set
      if @api_client.config.client_side_validation && approve.nil?
        fail ArgumentError, "Missing the required parameter 'approve' when calling RatingApi.rating_moderate"
      end
      # resource path
      local_var_path = '/rating/moderate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type
      query_params[:'id'] = id
      query_params[:'approve'] = approve

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatingApi#rating_moderate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Posts a comments for in a rating
    # @param ratingid [String] The ID of the rating to post the comment.
    # @param comment [String] Text of the comment to post.
    # @param annonymous [Boolean] True to post the comment annonymously.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rating_postcomment(ratingid, comment, annonymous, opts = {})
      rating_postcomment_with_http_info(ratingid, comment, annonymous, opts)
      nil
    end

    # Posts a comments for in a rating
    # @param ratingid [String] The ID of the rating to post the comment.
    # @param comment [String] Text of the comment to post.
    # @param annonymous [Boolean] True to post the comment annonymously.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rating_postcomment_with_http_info(ratingid, comment, annonymous, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatingApi.rating_postcomment ...'
      end
      # verify the required parameter 'ratingid' is set
      if @api_client.config.client_side_validation && ratingid.nil?
        fail ArgumentError, "Missing the required parameter 'ratingid' when calling RatingApi.rating_postcomment"
      end
      # verify the required parameter 'comment' is set
      if @api_client.config.client_side_validation && comment.nil?
        fail ArgumentError, "Missing the required parameter 'comment' when calling RatingApi.rating_postcomment"
      end
      # verify the required parameter 'annonymous' is set
      if @api_client.config.client_side_validation && annonymous.nil?
        fail ArgumentError, "Missing the required parameter 'annonymous' when calling RatingApi.rating_postcomment"
      end
      # resource path
      local_var_path = '/rating/postcomment'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ratingid'] = ratingid
      query_params[:'comment'] = comment
      query_params[:'annonymous'] = annonymous

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatingApi#rating_postcomment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rates one entity
    # @param type [String] The entity type to rate.
    # @param entityid [String] Id of the entity to rate.
    # @param annonymous [Boolean] Whether to post as annonymous.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :value Value from 0 to 100 with the rating.
    # @option opts [String] :comment Comment associated with this review. Comment can be updated later on another request too.
    # @option opts [Boolean] :updatecomment Whether to update the comments. Defaults to true.
    # @return [nil]
    def rating_rate(type, entityid, annonymous, opts = {})
      rating_rate_with_http_info(type, entityid, annonymous, opts)
      nil
    end

    # Rates one entity
    # @param type [String] The entity type to rate.
    # @param entityid [String] Id of the entity to rate.
    # @param annonymous [Boolean] Whether to post as annonymous.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :value Value from 0 to 100 with the rating.
    # @option opts [String] :comment Comment associated with this review. Comment can be updated later on another request too.
    # @option opts [Boolean] :updatecomment Whether to update the comments. Defaults to true.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rating_rate_with_http_info(type, entityid, annonymous, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatingApi.rating_rate ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling RatingApi.rating_rate"
      end
      # verify the required parameter 'entityid' is set
      if @api_client.config.client_side_validation && entityid.nil?
        fail ArgumentError, "Missing the required parameter 'entityid' when calling RatingApi.rating_rate"
      end
      # verify the required parameter 'annonymous' is set
      if @api_client.config.client_side_validation && annonymous.nil?
        fail ArgumentError, "Missing the required parameter 'annonymous' when calling RatingApi.rating_rate"
      end
      # resource path
      local_var_path = '/rating/rate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type
      query_params[:'entityid'] = entityid
      query_params[:'annonymous'] = annonymous
      query_params[:'value'] = opts[:'value'] if !opts[:'value'].nil?
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?
      query_params[:'updatecomment'] = opts[:'updatecomment'] if !opts[:'updatecomment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatingApi#rating_rate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rates a pre-saved and pre-approved entity
    # @param group [String] The ID of the group of with pre-approved ratings.
    # @param annonymous [Boolean] Whether to post as annonymous.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :rateid Rate this before returning.
    # @option opts [Integer] :value Value from 0 to 100 with the rating.
    # @option opts [String] :comment Comment associated with this review. Comment can be updated later on another request too.
    # @option opts [Boolean] :updatecomment Whether to update the comments. Defaults to true.
    # @return [nil]
    def rating_ratepending(group, annonymous, opts = {})
      rating_ratepending_with_http_info(group, annonymous, opts)
      nil
    end

    # Rates a pre-saved and pre-approved entity
    # @param group [String] The ID of the group of with pre-approved ratings.
    # @param annonymous [Boolean] Whether to post as annonymous.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :rateid Rate this before returning.
    # @option opts [Integer] :value Value from 0 to 100 with the rating.
    # @option opts [String] :comment Comment associated with this review. Comment can be updated later on another request too.
    # @option opts [Boolean] :updatecomment Whether to update the comments. Defaults to true.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rating_ratepending_with_http_info(group, annonymous, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatingApi.rating_ratepending ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling RatingApi.rating_ratepending"
      end
      # verify the required parameter 'annonymous' is set
      if @api_client.config.client_side_validation && annonymous.nil?
        fail ArgumentError, "Missing the required parameter 'annonymous' when calling RatingApi.rating_ratepending"
      end
      # resource path
      local_var_path = '/rating/ratepending'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group'] = group
      query_params[:'annonymous'] = annonymous
      query_params[:'rateid'] = opts[:'rateid'] if !opts[:'rateid'].nil?
      query_params[:'value'] = opts[:'value'] if !opts[:'value'].nil?
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?
      query_params[:'updatecomment'] = opts[:'updatecomment'] if !opts[:'updatecomment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatingApi#rating_ratepending\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Votes up or down a rating
    # @param ratingid [String] The ID of the rating to vote on.
    # @param vote [Integer] 1 to vote up, -1 to vote down.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rating_vote(ratingid, vote, opts = {})
      rating_vote_with_http_info(ratingid, vote, opts)
      nil
    end

    # Votes up or down a rating
    # @param ratingid [String] The ID of the rating to vote on.
    # @param vote [Integer] 1 to vote up, -1 to vote down.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rating_vote_with_http_info(ratingid, vote, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatingApi.rating_vote ...'
      end
      # verify the required parameter 'ratingid' is set
      if @api_client.config.client_side_validation && ratingid.nil?
        fail ArgumentError, "Missing the required parameter 'ratingid' when calling RatingApi.rating_vote"
      end
      # verify the required parameter 'vote' is set
      if @api_client.config.client_side_validation && vote.nil?
        fail ArgumentError, "Missing the required parameter 'vote' when calling RatingApi.rating_vote"
      end
      # resource path
      local_var_path = '/rating/vote'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ratingid'] = ratingid
      query_params[:'vote'] = vote

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatingApi#rating_vote\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
