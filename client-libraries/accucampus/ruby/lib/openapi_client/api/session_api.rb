=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class SessionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Bulk update event sessions
    # Allows the user to bulk update event sessions by setting multiple attendees as present, absent, tardy, etc.
    # @param eventid [String] The id of the event to bulk update.
    # @param sessions [String] A JSON-formatted array, with all the sessions to update, create or delete. Each item must contain an action (set/remove) and the session properties.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def session_bulkupdate(eventid, sessions, opts = {})
      session_bulkupdate_with_http_info(eventid, sessions, opts)
      nil
    end

    # Bulk update event sessions
    # Allows the user to bulk update event sessions by setting multiple attendees as present, absent, tardy, etc.
    # @param eventid [String] The id of the event to bulk update.
    # @param sessions [String] A JSON-formatted array, with all the sessions to update, create or delete. Each item must contain an action (set/remove) and the session properties.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def session_bulkupdate_with_http_info(eventid, sessions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionApi.session_bulkupdate ...'
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling SessionApi.session_bulkupdate"
      end
      # verify the required parameter 'sessions' is set
      if @api_client.config.client_side_validation && sessions.nil?
        fail ArgumentError, "Missing the required parameter 'sessions' when calling SessionApi.session_bulkupdate"
      end
      # resource path
      local_var_path = '/session/bulkupdate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eventid'] = eventid
      query_params[:'sessions'] = sessions

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionApi#session_bulkupdate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a session
    # Allows the user to view a session in order to take attendance.
    # @param id [String] The id of the session to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def session_get(id, opts = {})
      session_get_with_http_info(id, opts)
      nil
    end

    # View details of a session
    # Allows the user to view a session in order to take attendance.
    # @param id [String] The id of the session to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def session_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionApi.session_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SessionApi.session_get"
      end
      # resource path
      local_var_path = '/session/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionApi#session_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the schedule for a location, instructor or attendees
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :day The day to return. It will also return the whole week for that day.
    # @option opts [String] :attendee The id of the attendee to get the schedule.
    # @option opts [String] :location The id of the location to get the schedule.
    # @option opts [String] :instructor The id of the instructor to get the schedule.
    # @return [nil]
    def session_getschedule(opts = {})
      session_getschedule_with_http_info(opts)
      nil
    end

    # Gets the schedule for a location, instructor or attendees
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :day The day to return. It will also return the whole week for that day.
    # @option opts [String] :attendee The id of the attendee to get the schedule.
    # @option opts [String] :location The id of the location to get the schedule.
    # @option opts [String] :instructor The id of the instructor to get the schedule.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def session_getschedule_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionApi.session_getschedule ...'
      end
      # resource path
      local_var_path = '/session/getschedule'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'day'] = opts[:'day'] if !opts[:'day'].nil?
      query_params[:'attendee'] = opts[:'attendee'] if !opts[:'attendee'].nil?
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'instructor'] = opts[:'instructor'] if !opts[:'instructor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionApi#session_getschedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all future sessions of the current semester
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :startdate The start date to filter the sessions
    # @option opts [DateTime] :enddate The end date to filter the sessions.
    # @return [nil]
    def session_list(from, count, opts = {})
      session_list_with_http_info(from, count, opts)
      nil
    end

    # Gets all future sessions of the current semester
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :startdate The start date to filter the sessions
    # @option opts [DateTime] :enddate The end date to filter the sessions.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def session_list_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionApi.session_list ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling SessionApi.session_list"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling SessionApi.session_list"
      end
      # resource path
      local_var_path = '/session/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionApi#session_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
