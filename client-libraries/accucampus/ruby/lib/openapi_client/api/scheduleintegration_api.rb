=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class ScheduleintegrationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Clear all third party IDs from specified staff member's schedule items.
    # @param staff [String] The ID of the staff member whose schedule items third party IDs must be cleared.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def scheduleintegration_clearids(staff, opts = {})
      scheduleintegration_clearids_with_http_info(staff, opts)
      nil
    end

    # Clear all third party IDs from specified staff member&#39;s schedule items.
    # @param staff [String] The ID of the staff member whose schedule items third party IDs must be cleared.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduleintegration_clearids_with_http_info(staff, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScheduleintegrationApi.scheduleintegration_clearids ...'
      end
      # verify the required parameter 'staff' is set
      if @api_client.config.client_side_validation && staff.nil?
        fail ArgumentError, "Missing the required parameter 'staff' when calling ScheduleintegrationApi.scheduleintegration_clearids"
      end
      # resource path
      local_var_path = '/scheduleintegration/clearids'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'staff'] = staff

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScheduleintegrationApi#scheduleintegration_clearids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a schedule item looking up by a third party ID
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def scheduleintegration_deleteitem(opts = {})
      scheduleintegration_deleteitem_with_http_info(opts)
      nil
    end

    # Delete a schedule item looking up by a third party ID
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduleintegration_deleteitem_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScheduleintegrationApi.scheduleintegration_deleteitem ...'
      end
      # resource path
      local_var_path = '/scheduleintegration/deleteitem'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScheduleintegrationApi#scheduleintegration_deleteitem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete multiple schedule items looking up by a third party master ID
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def scheduleintegration_deleteitemsbymasterid(opts = {})
      scheduleintegration_deleteitemsbymasterid_with_http_info(opts)
      nil
    end

    # Delete multiple schedule items looking up by a third party master ID
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduleintegration_deleteitemsbymasterid_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScheduleintegrationApi.scheduleintegration_deleteitemsbymasterid ...'
      end
      # resource path
      local_var_path = '/scheduleintegration/deleteitemsbymasterid'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScheduleintegrationApi#scheduleintegration_deleteitemsbymasterid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a schedule item looking up by a third party ID
    # @param thirdpartyid [String] The third party id to search for the schedule item.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def scheduleintegration_getitem(thirdpartyid, opts = {})
      scheduleintegration_getitem_with_http_info(thirdpartyid, opts)
      nil
    end

    # Get a schedule item looking up by a third party ID
    # @param thirdpartyid [String] The third party id to search for the schedule item.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduleintegration_getitem_with_http_info(thirdpartyid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScheduleintegrationApi.scheduleintegration_getitem ...'
      end
      # verify the required parameter 'thirdpartyid' is set
      if @api_client.config.client_side_validation && thirdpartyid.nil?
        fail ArgumentError, "Missing the required parameter 'thirdpartyid' when calling ScheduleintegrationApi.scheduleintegration_getitem"
      end
      # resource path
      local_var_path = '/scheduleintegration/getitem'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'thirdpartyid'] = thirdpartyid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScheduleintegrationApi#scheduleintegration_getitem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save a schedule item looking up by a third party ID
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def scheduleintegration_saveitem(opts = {})
      scheduleintegration_saveitem_with_http_info(opts)
      nil
    end

    # Save a schedule item looking up by a third party ID
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduleintegration_saveitem_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScheduleintegrationApi.scheduleintegration_saveitem ...'
      end
      # resource path
      local_var_path = '/scheduleintegration/saveitem'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScheduleintegrationApi#scheduleintegration_saveitem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set a 3rd party ID on a specific schedule item
    # @param id [String] The id of the schedule block / appointment.
    # @param thirdpartyid [String] The 3rd party ID to set.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :thirdpartymasterid The 3rd party master ID to set (useful to handle recurring items).
    # @return [nil]
    def scheduleintegration_setid(id, thirdpartyid, opts = {})
      scheduleintegration_setid_with_http_info(id, thirdpartyid, opts)
      nil
    end

    # Set a 3rd party ID on a specific schedule item
    # @param id [String] The id of the schedule block / appointment.
    # @param thirdpartyid [String] The 3rd party ID to set.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :thirdpartymasterid The 3rd party master ID to set (useful to handle recurring items).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduleintegration_setid_with_http_info(id, thirdpartyid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScheduleintegrationApi.scheduleintegration_setid ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScheduleintegrationApi.scheduleintegration_setid"
      end
      # verify the required parameter 'thirdpartyid' is set
      if @api_client.config.client_side_validation && thirdpartyid.nil?
        fail ArgumentError, "Missing the required parameter 'thirdpartyid' when calling ScheduleintegrationApi.scheduleintegration_setid"
      end
      # resource path
      local_var_path = '/scheduleintegration/setid'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'thirdpartyid'] = thirdpartyid
      query_params[:'thirdpartymasterid'] = opts[:'thirdpartymasterid'] if !opts[:'thirdpartymasterid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScheduleintegrationApi#scheduleintegration_setid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
