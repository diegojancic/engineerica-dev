=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class EventregApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Register current user to a course
    # Allows the user to make themselves available for individual courses.
    # @param eventid [String] The id of the event.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreg_addme(eventid, listname, opts = {})
      eventreg_addme_with_http_info(eventid, listname, opts)
      nil
    end

    # Register current user to a course
    # Allows the user to make themselves available for individual courses.
    # @param eventid [String] The id of the event.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_addme_with_http_info(eventid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_addme ...'
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling EventregApi.eventreg_addme"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_addme"
      end
      # resource path
      local_var_path = '/eventreg/addme'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eventid'] = eventid
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_addme\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register current user to all courses
    # Allows the user to make themselves available for all courses.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreg_addmetoall(listname, opts = {})
      eventreg_addmetoall_with_http_info(listname, opts)
      nil
    end

    # Register current user to all courses
    # Allows the user to make themselves available for all courses.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_addmetoall_with_http_info(listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_addmetoall ...'
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_addmetoall"
      end
      # resource path
      local_var_path = '/eventreg/addmetoall'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_addmetoall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register current user to a course group
    # Allows the user to make themselves available for a course group.
    # @param codegroup [String] The code used to group events.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreg_addmetogroup(codegroup, listname, opts = {})
      eventreg_addmetogroup_with_http_info(codegroup, listname, opts)
      nil
    end

    # Register current user to a course group
    # Allows the user to make themselves available for a course group.
    # @param codegroup [String] The code used to group events.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_addmetogroup_with_http_info(codegroup, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_addmetogroup ...'
      end
      # verify the required parameter 'codegroup' is set
      if @api_client.config.client_side_validation && codegroup.nil?
        fail ArgumentError, "Missing the required parameter 'codegroup' when calling EventregApi.eventreg_addmetogroup"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_addmetogroup"
      end
      # resource path
      local_var_path = '/eventreg/addmetogroup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'codegroup'] = codegroup
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_addmetogroup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register a user to a course for attendance
    # Allows the user to register a user to a course.
    # @param userid [String] The id of the user to add.
    # @param eventid [String] The id of the event.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreg_adduser(userid, eventid, listname, opts = {})
      eventreg_adduser_with_http_info(userid, eventid, listname, opts)
      nil
    end

    # Register a user to a course for attendance
    # Allows the user to register a user to a course.
    # @param userid [String] The id of the user to add.
    # @param eventid [String] The id of the event.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_adduser_with_http_info(userid, eventid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_adduser ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling EventregApi.eventreg_adduser"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling EventregApi.eventreg_adduser"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_adduser"
      end
      # resource path
      local_var_path = '/eventreg/adduser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid
      query_params[:'eventid'] = eventid
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_adduser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register a user to assist with all courses
    # Allows the user to make a staff member available to assist with all courses.
    # @param userid [String] The id of the user to add.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreg_addusertoall(userid, listname, opts = {})
      eventreg_addusertoall_with_http_info(userid, listname, opts)
      nil
    end

    # Register a user to assist with all courses
    # Allows the user to make a staff member available to assist with all courses.
    # @param userid [String] The id of the user to add.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_addusertoall_with_http_info(userid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_addusertoall ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling EventregApi.eventreg_addusertoall"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_addusertoall"
      end
      # resource path
      local_var_path = '/eventreg/addusertoall'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_addusertoall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register a user to an course group
    # Allows the user to make a staff member available for a course group.
    # @param userid [String] The id of the user to add.
    # @param codegroup [String] The code used to group events.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreg_addusertogroup(userid, codegroup, listname, opts = {})
      eventreg_addusertogroup_with_http_info(userid, codegroup, listname, opts)
      nil
    end

    # Register a user to an course group
    # Allows the user to make a staff member available for a course group.
    # @param userid [String] The id of the user to add.
    # @param codegroup [String] The code used to group events.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_addusertogroup_with_http_info(userid, codegroup, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_addusertogroup ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling EventregApi.eventreg_addusertogroup"
      end
      # verify the required parameter 'codegroup' is set
      if @api_client.config.client_side_validation && codegroup.nil?
        fail ArgumentError, "Missing the required parameter 'codegroup' when calling EventregApi.eventreg_addusertogroup"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_addusertogroup"
      end
      # resource path
      local_var_path = '/eventreg/addusertogroup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid
      query_params[:'codegroup'] = codegroup
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_addusertogroup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View course registration by user
    # Allows the user to view all courses a given user is registered to, provided they have permission to view that user.
    # @param userid [String] The user id to list events.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :termid The term id to list events.
    # @option opts [String] :namefilter The value used to filter the events by name.
    # @return [nil]
    def eventreg_getevents(userid, listname, opts = {})
      eventreg_getevents_with_http_info(userid, listname, opts)
      nil
    end

    # View course registration by user
    # Allows the user to view all courses a given user is registered to, provided they have permission to view that user.
    # @param userid [String] The user id to list events.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :termid The term id to list events.
    # @option opts [String] :namefilter The value used to filter the events by name.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_getevents_with_http_info(userid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_getevents ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling EventregApi.eventreg_getevents"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_getevents"
      end
      # resource path
      local_var_path = '/eventreg/getevents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid
      query_params[:'listname'] = listname
      query_params[:'termid'] = opts[:'termid'] if !opts[:'termid'].nil?
      query_params[:'namefilter'] = opts[:'namefilter'] if !opts[:'namefilter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_getevents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the course group registrations of a user
    # Allows the user to view the course groups a staff member is available for.
    # @param userid [String] The user id to list events.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreg_getgroups(userid, listname, opts = {})
      eventreg_getgroups_with_http_info(userid, listname, opts)
      nil
    end

    # Lists the course group registrations of a user
    # Allows the user to view the course groups a staff member is available for.
    # @param userid [String] The user id to list events.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_getgroups_with_http_info(userid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_getgroups ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling EventregApi.eventreg_getgroups"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_getgroups"
      end
      # resource path
      local_var_path = '/eventreg/getgroups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_getgroups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the event registrations of the current user
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :termid The term id to list events.
    # @option opts [String] :namefilter The value used to filter the events by name.
    # @return [nil]
    def eventreg_getmyevents(listname, opts = {})
      eventreg_getmyevents_with_http_info(listname, opts)
      nil
    end

    # View the event registrations of the current user
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :termid The term id to list events.
    # @option opts [String] :namefilter The value used to filter the events by name.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_getmyevents_with_http_info(listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_getmyevents ...'
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_getmyevents"
      end
      # resource path
      local_var_path = '/eventreg/getmyevents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'listname'] = listname
      query_params[:'termid'] = opts[:'termid'] if !opts[:'termid'].nil?
      query_params[:'namefilter'] = opts[:'namefilter'] if !opts[:'namefilter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_getmyevents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all current user registrations to course groups
    # Allows the user to view all his registrations to course groups.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreg_getmygroups(listname, opts = {})
      eventreg_getmygroups_with_http_info(listname, opts)
      nil
    end

    # View all current user registrations to course groups
    # Allows the user to view all his registrations to course groups.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_getmygroups_with_http_info(listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_getmygroups ...'
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_getmygroups"
      end
      # resource path
      local_var_path = '/eventreg/getmygroups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_getmygroups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View course registration
    # Allows the user to view all users registered for an individual course.
    # @param eventid [String] The event id to list users.
    # @param listname [String] The name of the list to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def eventreg_getusers(eventid, listname, opts = {})
      eventreg_getusers_with_http_info(eventid, listname, opts)
      nil
    end

    # View course registration
    # Allows the user to view all users registered for an individual course.
    # @param eventid [String] The event id to list users.
    # @param listname [String] The name of the list to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_getusers_with_http_info(eventid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_getusers ...'
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling EventregApi.eventreg_getusers"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_getusers"
      end
      # resource path
      local_var_path = '/eventreg/getusers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eventid'] = eventid
      query_params[:'listname'] = listname
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_getusers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the registrations for a course group
    # Allows the user the get the staff members registered to a specific course group
    # @param codegroup [String] The code group to list users.
    # @param listname [String] The name of the list to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreg_getusersfromgroup(codegroup, listname, opts = {})
      eventreg_getusersfromgroup_with_http_info(codegroup, listname, opts)
      nil
    end

    # Lists the registrations for a course group
    # Allows the user the get the staff members registered to a specific course group
    # @param codegroup [String] The code group to list users.
    # @param listname [String] The name of the list to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_getusersfromgroup_with_http_info(codegroup, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_getusersfromgroup ...'
      end
      # verify the required parameter 'codegroup' is set
      if @api_client.config.client_side_validation && codegroup.nil?
        fail ArgumentError, "Missing the required parameter 'codegroup' when calling EventregApi.eventreg_getusersfromgroup"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_getusersfromgroup"
      end
      # resource path
      local_var_path = '/eventreg/getusersfromgroup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'codegroup'] = codegroup
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_getusersfromgroup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the users that are registered to all courses
    # Allows the user to view all staff members available for all courses.
    # @param listname [String] The name of the list to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreg_getuserstoall(listname, opts = {})
      eventreg_getuserstoall_with_http_info(listname, opts)
      nil
    end

    # View the users that are registered to all courses
    # Allows the user to view all staff members available for all courses.
    # @param listname [String] The name of the list to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_getuserstoall_with_http_info(listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_getuserstoall ...'
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_getuserstoall"
      end
      # resource path
      local_var_path = '/eventreg/getuserstoall'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_getuserstoall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unregister current user from a course
    # Allows the user to remove themselves from registration to a course.
    # @param eventid [String] The id of the event.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreg_removeme(eventid, listname, opts = {})
      eventreg_removeme_with_http_info(eventid, listname, opts)
      nil
    end

    # Unregister current user from a course
    # Allows the user to remove themselves from registration to a course.
    # @param eventid [String] The id of the event.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_removeme_with_http_info(eventid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_removeme ...'
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling EventregApi.eventreg_removeme"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_removeme"
      end
      # resource path
      local_var_path = '/eventreg/removeme'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eventid'] = eventid
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_removeme\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove current user from the registration to all courses
    # Allows the user to remove themselves from availability to all courses.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreg_removemefromall(listname, opts = {})
      eventreg_removemefromall_with_http_info(listname, opts)
      nil
    end

    # Remove current user from the registration to all courses
    # Allows the user to remove themselves from availability to all courses.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_removemefromall_with_http_info(listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_removemefromall ...'
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_removemefromall"
      end
      # resource path
      local_var_path = '/eventreg/removemefromall'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_removemefromall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove current user from a course group
    # Allows the user to remove themselves from availability to a course group.
    # @param codegroup [String] The code group of the events/courses.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreg_removemefromgroup(codegroup, listname, opts = {})
      eventreg_removemefromgroup_with_http_info(codegroup, listname, opts)
      nil
    end

    # Remove current user from a course group
    # Allows the user to remove themselves from availability to a course group.
    # @param codegroup [String] The code group of the events/courses.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_removemefromgroup_with_http_info(codegroup, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_removemefromgroup ...'
      end
      # verify the required parameter 'codegroup' is set
      if @api_client.config.client_side_validation && codegroup.nil?
        fail ArgumentError, "Missing the required parameter 'codegroup' when calling EventregApi.eventreg_removemefromgroup"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_removemefromgroup"
      end
      # resource path
      local_var_path = '/eventreg/removemefromgroup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'codegroup'] = codegroup
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_removemefromgroup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a user from a course
    # Allows the user to remove a user from a course's registration.
    # @param userid [String] The id of the user to remove.
    # @param eventid [String] The id of the event.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreg_removeuser(userid, eventid, listname, opts = {})
      eventreg_removeuser_with_http_info(userid, eventid, listname, opts)
      nil
    end

    # Remove a user from a course
    # Allows the user to remove a user from a course&#39;s registration.
    # @param userid [String] The id of the user to remove.
    # @param eventid [String] The id of the event.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_removeuser_with_http_info(userid, eventid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_removeuser ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling EventregApi.eventreg_removeuser"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling EventregApi.eventreg_removeuser"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_removeuser"
      end
      # resource path
      local_var_path = '/eventreg/removeuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid
      query_params[:'eventid'] = eventid
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_removeuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a user from the registration to all courses
    # Allows the user to remove a staff member from availability to all courses.
    # @param userid [String] The id of the user to remove.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreg_removeuserfromall(userid, listname, opts = {})
      eventreg_removeuserfromall_with_http_info(userid, listname, opts)
      nil
    end

    # Remove a user from the registration to all courses
    # Allows the user to remove a staff member from availability to all courses.
    # @param userid [String] The id of the user to remove.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_removeuserfromall_with_http_info(userid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_removeuserfromall ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling EventregApi.eventreg_removeuserfromall"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_removeuserfromall"
      end
      # resource path
      local_var_path = '/eventreg/removeuserfromall'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_removeuserfromall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a user from a course group
    # Allows the user to remove a staff member from availability to a course group.
    # @param userid [String] The id of the user to remove.
    # @param codegroup [String] The code group of the events/courses.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreg_removeuserfromgroup(userid, codegroup, listname, opts = {})
      eventreg_removeuserfromgroup_with_http_info(userid, codegroup, listname, opts)
      nil
    end

    # Remove a user from a course group
    # Allows the user to remove a staff member from availability to a course group.
    # @param userid [String] The id of the user to remove.
    # @param codegroup [String] The code group of the events/courses.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreg_removeuserfromgroup_with_http_info(userid, codegroup, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventregApi.eventreg_removeuserfromgroup ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling EventregApi.eventreg_removeuserfromgroup"
      end
      # verify the required parameter 'codegroup' is set
      if @api_client.config.client_side_validation && codegroup.nil?
        fail ArgumentError, "Missing the required parameter 'codegroup' when calling EventregApi.eventreg_removeuserfromgroup"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling EventregApi.eventreg_removeuserfromgroup"
      end
      # resource path
      local_var_path = '/eventreg/removeuserfromgroup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid
      query_params[:'codegroup'] = codegroup
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventregApi#eventreg_removeuserfromgroup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
