=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class NotificationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a notification
    # Allows the user to delete an existing notification.
    # @param id [String] The id of the notification to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [AnyType] :body 
    # @return [nil]
    def notification_delete(id, opts = {})
      notification_delete_with_http_info(id, opts)
      nil
    end

    # Delete a notification
    # Allows the user to delete an existing notification.
    # @param id [String] The id of the notification to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [AnyType] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notification_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationApi.notification_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NotificationApi.notification_delete"
      end
      # resource path
      local_var_path = '/notification/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationApi#notification_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a notification
    # @param id [String] The id of the notification to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notification_get(id, opts = {})
      notification_get_with_http_info(id, opts)
      nil
    end

    # View a notification
    # @param id [String] The id of the notification to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notification_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationApi.notification_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NotificationApi.notification_get"
      end
      # resource path
      local_var_path = '/notification/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationApi#notification_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all public (in station) notifications for the specific user
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notification_getforstation(station, user, opts = {})
      notification_getforstation_with_http_info(station, user, opts)
      nil
    end

    # Gets all public (in station) notifications for the specific user
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notification_getforstation_with_http_info(station, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationApi.notification_getforstation ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling NotificationApi.notification_getforstation"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling NotificationApi.notification_getforstation"
      end
      # resource path
      local_var_path = '/notification/getforstation'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'user'] = user

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationApi#notification_getforstation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the number of unread notifications
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notification_getunreadcount(opts = {})
      notification_getunreadcount_with_http_info(opts)
      nil
    end

    # Get the number of unread notifications
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notification_getunreadcount_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationApi.notification_getunreadcount ...'
      end
      # resource path
      local_var_path = '/notification/getunreadcount'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationApi#notification_getunreadcount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of all sent notifications
    # Allows the user to view the list of all sent notifications.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :recipient The recipient whose notifications have to be listed.
    # @option opts [Integer] :status The status of the notifications to list. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @option opts [Boolean] :sentonscreen Specifies whether to list the notifications that were sent on-screen or not.
    # @option opts [Boolean] :sentemail Specifies whether to list the notifications that were sent via e-mail or not.
    # @option opts [Boolean] :sentsms Specifies whether to list the notifications that were sent via sms or not.
    # @return [nil]
    def notification_list(from, count, opts = {})
      notification_list_with_http_info(from, count, opts)
      nil
    end

    # View a list of all sent notifications
    # Allows the user to view the list of all sent notifications.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :recipient The recipient whose notifications have to be listed.
    # @option opts [Integer] :status The status of the notifications to list. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @option opts [Boolean] :sentonscreen Specifies whether to list the notifications that were sent on-screen or not.
    # @option opts [Boolean] :sentemail Specifies whether to list the notifications that were sent via e-mail or not.
    # @option opts [Boolean] :sentsms Specifies whether to list the notifications that were sent via sms or not.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notification_list_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationApi.notification_list ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling NotificationApi.notification_list"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling NotificationApi.notification_list"
      end
      # resource path
      local_var_path = '/notification/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'recipient'] = opts[:'recipient'] if !opts[:'recipient'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?
      query_params[:'sentonscreen'] = opts[:'sentonscreen'] if !opts[:'sentonscreen'].nil?
      query_params[:'sentemail'] = opts[:'sentemail'] if !opts[:'sentemail'].nil?
      query_params[:'sentsms'] = opts[:'sentsms'] if !opts[:'sentsms'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationApi#notification_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the notifications sent to the current user
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :status Specifies the status of the notifications to list. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [nil]
    def notification_listmine(from, count, opts = {})
      notification_listmine_with_http_info(from, count, opts)
      nil
    end

    # View all the notifications sent to the current user
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :status Specifies the status of the notifications to list. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notification_listmine_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationApi.notification_listmine ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling NotificationApi.notification_listmine"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling NotificationApi.notification_listmine"
      end
      # resource path
      local_var_path = '/notification/listmine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationApi#notification_listmine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark a notification as read
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read.
    # @option opts [Integer] :status Specifies the status to filter the notifications. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [nil]
    def notification_markasread(opts = {})
      notification_markasread_with_http_info(opts)
      nil
    end

    # Mark a notification as read
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read.
    # @option opts [Integer] :status Specifies the status to filter the notifications. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notification_markasread_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationApi.notification_markasread ...'
      end
      # resource path
      local_var_path = '/notification/markasread'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationApi#notification_markasread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark a notification as unread
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread.
    # @option opts [Integer] :status Specifies the status to filter the notifications. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [nil]
    def notification_markasunread(opts = {})
      notification_markasunread_with_http_info(opts)
      nil
    end

    # Mark a notification as unread
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread.
    # @option opts [Integer] :status Specifies the status to filter the notifications. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notification_markasunread_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationApi.notification_markasunread ...'
      end
      # resource path
      local_var_path = '/notification/markasunread'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationApi#notification_markasunread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send notifications on screen, via email or text to users
    # Allows the user to send notifications to other users through the Send Message link.
    # @param emailenabled [Boolean] Whether send the notification via email.
    # @param onscreenenabled [Boolean] Whether to display the notification on screen.
    # @param smsenabled [Boolean] Whether to send the notification via text message.
    # @param title [String] Notification title.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tousers Comma-separated Ids of users to send the notification.
    # @option opts [String] :togroups Comma-separated Ids of user groups to send the notification.
    # @option opts [String] :onscreenbody Body of the message for on-screen display.
    # @option opts [String] :onscreenclick What to do when the notification is clicked. Valid values: hide, view, url.
    # @option opts [String] :onscreenurl Url to redirect the user, if onscreenclick&#x3D;url.
    # @option opts [String] :onscreenclass How to display the notification. Valid values: info, success, warning, error
    # @option opts [Integer] :onscreenduration Time in seconds to display the notification.
    # @option opts [Integer] :showonstation Whether to show the notification in the sign-in station.
    # @option opts [String] :emailfromname Name of the email sender.
    # @option opts [String] :emailfrom Reply-to email.
    # @option opts [String] :emailsubject Subject of the email.
    # @option opts [String] :emailbody Body of the email.
    # @option opts [String] :textmessagebody Message for SMS. Max 160 characters.
    # @return [nil]
    def notification_send(emailenabled, onscreenenabled, smsenabled, title, opts = {})
      notification_send_with_http_info(emailenabled, onscreenenabled, smsenabled, title, opts)
      nil
    end

    # Send notifications on screen, via email or text to users
    # Allows the user to send notifications to other users through the Send Message link.
    # @param emailenabled [Boolean] Whether send the notification via email.
    # @param onscreenenabled [Boolean] Whether to display the notification on screen.
    # @param smsenabled [Boolean] Whether to send the notification via text message.
    # @param title [String] Notification title.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tousers Comma-separated Ids of users to send the notification.
    # @option opts [String] :togroups Comma-separated Ids of user groups to send the notification.
    # @option opts [String] :onscreenbody Body of the message for on-screen display.
    # @option opts [String] :onscreenclick What to do when the notification is clicked. Valid values: hide, view, url.
    # @option opts [String] :onscreenurl Url to redirect the user, if onscreenclick&#x3D;url.
    # @option opts [String] :onscreenclass How to display the notification. Valid values: info, success, warning, error
    # @option opts [Integer] :onscreenduration Time in seconds to display the notification.
    # @option opts [Integer] :showonstation Whether to show the notification in the sign-in station.
    # @option opts [String] :emailfromname Name of the email sender.
    # @option opts [String] :emailfrom Reply-to email.
    # @option opts [String] :emailsubject Subject of the email.
    # @option opts [String] :emailbody Body of the email.
    # @option opts [String] :textmessagebody Message for SMS. Max 160 characters.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notification_send_with_http_info(emailenabled, onscreenenabled, smsenabled, title, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationApi.notification_send ...'
      end
      # verify the required parameter 'emailenabled' is set
      if @api_client.config.client_side_validation && emailenabled.nil?
        fail ArgumentError, "Missing the required parameter 'emailenabled' when calling NotificationApi.notification_send"
      end
      # verify the required parameter 'onscreenenabled' is set
      if @api_client.config.client_side_validation && onscreenenabled.nil?
        fail ArgumentError, "Missing the required parameter 'onscreenenabled' when calling NotificationApi.notification_send"
      end
      # verify the required parameter 'smsenabled' is set
      if @api_client.config.client_side_validation && smsenabled.nil?
        fail ArgumentError, "Missing the required parameter 'smsenabled' when calling NotificationApi.notification_send"
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling NotificationApi.notification_send"
      end
      # resource path
      local_var_path = '/notification/send'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'emailenabled'] = emailenabled
      query_params[:'onscreenenabled'] = onscreenenabled
      query_params[:'smsenabled'] = smsenabled
      query_params[:'title'] = title
      query_params[:'tousers'] = opts[:'tousers'] if !opts[:'tousers'].nil?
      query_params[:'togroups'] = opts[:'togroups'] if !opts[:'togroups'].nil?
      query_params[:'onscreenbody'] = opts[:'onscreenbody'] if !opts[:'onscreenbody'].nil?
      query_params[:'onscreenclick'] = opts[:'onscreenclick'] if !opts[:'onscreenclick'].nil?
      query_params[:'onscreenurl'] = opts[:'onscreenurl'] if !opts[:'onscreenurl'].nil?
      query_params[:'onscreenclass'] = opts[:'onscreenclass'] if !opts[:'onscreenclass'].nil?
      query_params[:'onscreenduration'] = opts[:'onscreenduration'] if !opts[:'onscreenduration'].nil?
      query_params[:'showonstation'] = opts[:'showonstation'] if !opts[:'showonstation'].nil?
      query_params[:'emailfromname'] = opts[:'emailfromname'] if !opts[:'emailfromname'].nil?
      query_params[:'emailfrom'] = opts[:'emailfrom'] if !opts[:'emailfrom'].nil?
      query_params[:'emailsubject'] = opts[:'emailsubject'] if !opts[:'emailsubject'].nil?
      query_params[:'emailbody'] = opts[:'emailbody'] if !opts[:'emailbody'].nil?
      query_params[:'textmessagebody'] = opts[:'textmessagebody'] if !opts[:'textmessagebody'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationApi#notification_send\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send on-screen notifications
    # @param notification [String] The ID of the notification to send.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notification_sendonscreen(notification, opts = {})
      notification_sendonscreen_with_http_info(notification, opts)
      nil
    end

    # Send on-screen notifications
    # @param notification [String] The ID of the notification to send.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notification_sendonscreen_with_http_info(notification, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationApi.notification_sendonscreen ...'
      end
      # verify the required parameter 'notification' is set
      if @api_client.config.client_side_validation && notification.nil?
        fail ArgumentError, "Missing the required parameter 'notification' when calling NotificationApi.notification_sendonscreen"
      end
      # resource path
      local_var_path = '/notification/sendonscreen'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'notification'] = notification

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationApi#notification_sendonscreen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
