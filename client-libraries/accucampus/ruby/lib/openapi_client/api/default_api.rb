=begin
#AccuCampus OpenAPI 3 Documentation

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Remove an action item from an action plan
    # Allows a user to remove an action item from a user's action plan.
    # @param token [String] The authentication token.
    # @param id [String] The id of the action assignment to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actionassignmentdelete(token, id, opts = {})
      actionassignmentdelete_with_http_info(token, id, opts)
      nil
    end

    # Remove an action item from an action plan
    # Allows a user to remove an action item from a user&#39;s action plan.
    # @param token [String] The authentication token.
    # @param id [String] The id of the action assignment to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignmentdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionassignmentdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actionassignmentdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.actionassignmentdelete"
      end
      # resource path
      local_var_path = '/actionassignmentdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionassignmentdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of an action item assigned to a user
    # Allows the user to view an individual action item and its details, minus all the action item's updates.
    # @param token [String] The authentication token.
    # @param id [String] The id of the action assignment to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actionassignmentget(token, id, opts = {})
      actionassignmentget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of an action item assigned to a user
    # Allows the user to view an individual action item and its details, minus all the action item&#39;s updates.
    # @param token [String] The authentication token.
    # @param id [String] The id of the action assignment to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignmentget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionassignmentget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actionassignmentget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.actionassignmentget"
      end
      # resource path
      local_var_path = '/actionassignmentget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionassignmentget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of action items in a user's plan
    # Allows the user to view the list of all action items for a specified user.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :assignee The assignee&#39;s id to filter the assignments.
    # @option opts [Integer] :status The status to filter the assignments.
    # @return [nil]
    def actionassignmentlist(token, from, count, opts = {})
      actionassignmentlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of action items in a user&#39;s plan
    # Allows the user to view the list of all action items for a specified user.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :assignee The assignee&#39;s id to filter the assignments.
    # @option opts [Integer] :status The status to filter the assignments.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignmentlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionassignmentlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actionassignmentlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.actionassignmentlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.actionassignmentlist"
      end
      # resource path
      local_var_path = '/actionassignmentlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'assignee'] = opts[:'assignee'] if !opts[:'assignee'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionassignmentlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the history of an action item assigned to a user
    # Allows the user to view an individual action plan and its details, including all the action plan's updates.
    # @param token [String] The authentication token.
    # @param actionassignment [String] The action assignment&#39;s id whose history the user wants to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actionassignmentlisthistory(token, actionassignment, opts = {})
      actionassignmentlisthistory_with_http_info(token, actionassignment, opts)
      nil
    end

    # View the history of an action item assigned to a user
    # Allows the user to view an individual action plan and its details, including all the action plan&#39;s updates.
    # @param token [String] The authentication token.
    # @param actionassignment [String] The action assignment&#39;s id whose history the user wants to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignmentlisthistory_with_http_info(token, actionassignment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionassignmentlisthistory ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actionassignmentlisthistory"
      end
      # verify the required parameter 'actionassignment' is set
      if @api_client.config.client_side_validation && actionassignment.nil?
        fail ArgumentError, "Missing the required parameter 'actionassignment' when calling DefaultApi.actionassignmentlisthistory"
      end
      # resource path
      local_var_path = '/actionassignmentlisthistory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'actionassignment'] = actionassignment

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionassignmentlisthistory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List public action assignments assigned to the logged user
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :status The status to filter the assignments.
    # @return [nil]
    def actionassignmentlistmine(token, from, count, opts = {})
      actionassignmentlistmine_with_http_info(token, from, count, opts)
      nil
    end

    # List public action assignments assigned to the logged user
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :status The status to filter the assignments.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignmentlistmine_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionassignmentlistmine ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actionassignmentlistmine"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.actionassignmentlistmine"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.actionassignmentlistmine"
      end
      # resource path
      local_var_path = '/actionassignmentlistmine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionassignmentlistmine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List public action assignment history
    # @param token [String] The authentication token.
    # @param actionassignment [String] The action assignment&#39;s id whose history the user wants to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actionassignmentlistpublichistory(token, actionassignment, opts = {})
      actionassignmentlistpublichistory_with_http_info(token, actionassignment, opts)
      nil
    end

    # List public action assignment history
    # @param token [String] The authentication token.
    # @param actionassignment [String] The action assignment&#39;s id whose history the user wants to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignmentlistpublichistory_with_http_info(token, actionassignment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionassignmentlistpublichistory ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actionassignmentlistpublichistory"
      end
      # verify the required parameter 'actionassignment' is set
      if @api_client.config.client_side_validation && actionassignment.nil?
        fail ArgumentError, "Missing the required parameter 'actionassignment' when calling DefaultApi.actionassignmentlistpublichistory"
      end
      # resource path
      local_var_path = '/actionassignmentlistpublichistory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'actionassignment'] = actionassignment

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionassignmentlistpublichistory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Bulk complete action items
    # Allows the user to bulk complete action items.
    # @param token [String] The authentication token.
    # @param item [String] The action item to assign.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :assignee The assignee of the item.
    # @option opts [String] :group The group to assing the item.
    # @option opts [String] :notes The assignment&#39;s notes.
    # @return [nil]
    def actionassignmentmarkcomplete(token, item, opts = {})
      actionassignmentmarkcomplete_with_http_info(token, item, opts)
      nil
    end

    # Bulk complete action items
    # Allows the user to bulk complete action items.
    # @param token [String] The authentication token.
    # @param item [String] The action item to assign.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :assignee The assignee of the item.
    # @option opts [String] :group The group to assing the item.
    # @option opts [String] :notes The assignment&#39;s notes.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignmentmarkcomplete_with_http_info(token, item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionassignmentmarkcomplete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actionassignmentmarkcomplete"
      end
      # verify the required parameter 'item' is set
      if @api_client.config.client_side_validation && item.nil?
        fail ArgumentError, "Missing the required parameter 'item' when calling DefaultApi.actionassignmentmarkcomplete"
      end
      # resource path
      local_var_path = '/actionassignmentmarkcomplete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'item'] = item
      query_params[:'assignee'] = opts[:'assignee'] if !opts[:'assignee'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'notes'] = opts[:'notes'] if !opts[:'notes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionassignmentmarkcomplete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an action item to a user's action plan
    # Allows the user to edit or assign an action item to a user
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def actionassignmentsave(opts = {})
      actionassignmentsave_with_http_info(opts)
      nil
    end

    # Add an action item to a user&#39;s action plan
    # Allows the user to edit or assign an action item to a user
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignmentsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionassignmentsave ...'
      end
      # resource path
      local_var_path = '/actionassignmentsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionassignmentsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an action item assigned to a user
    # Allows the user to update or mark an action item as complete.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def actionassignmentsavehistory(opts = {})
      actionassignmentsavehistory_with_http_info(opts)
      nil
    end

    # Update an action item assigned to a user
    # Allows the user to update or mark an action item as complete.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionassignmentsavehistory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionassignmentsavehistory ...'
      end
      # resource path
      local_var_path = '/actionassignmentsavehistory'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionassignmentsavehistory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an action item
    # Allows the user to delete an action item.
    # @param token [String] The authentication token.
    # @param id [String] The id of the action item to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actionitemdelete(token, id, opts = {})
      actionitemdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete an action item
    # Allows the user to delete an action item.
    # @param token [String] The authentication token.
    # @param id [String] The id of the action item to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionitemdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionitemdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actionitemdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.actionitemdelete"
      end
      # resource path
      local_var_path = '/actionitemdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionitemdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of an action item
    # Allows the user to view an individual action item and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the action item to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actionitemget(token, id, opts = {})
      actionitemget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of an action item
    # Allows the user to view an individual action item and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the action item to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionitemget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionitemget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actionitemget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.actionitemget"
      end
      # resource path
      local_var_path = '/actionitemget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionitemget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of action items
    # Allows the user to view a list of action items
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actionitemlist(token, from, count, opts = {})
      actionitemlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of action items
    # Allows the user to view a list of action items
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionitemlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionitemlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actionitemlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.actionitemlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.actionitemlist"
      end
      # resource path
      local_var_path = '/actionitemlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionitemlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit an action item
    # Allows the user to edit an action item.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def actionitemsave(opts = {})
      actionitemsave_with_http_info(opts)
      nil
    end

    # Create or edit an action item
    # Allows the user to edit an action item.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionitemsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionitemsave ...'
      end
      # resource path
      local_var_path = '/actionitemsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionitemsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of users action logs
    # Allows the user to view the audit logs for the account.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The id of the user whose action logs have to be returned.
    # @option opts [DateTime] :startdate The start date of the period to filter the logs.
    # @option opts [DateTime] :enddate The end date of the period to filter the logs.
    # @option opts [String] :resource The resource to filter the action logs.
    # @option opts [String] :actionfilter The action to filter the action logs.
    # @option opts [String] :argument The id of the entity that was the argument of the executed action.
    # @return [nil]
    def actionloglist(token, from, count, opts = {})
      actionloglist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of users action logs
    # Allows the user to view the audit logs for the account.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The id of the user whose action logs have to be returned.
    # @option opts [DateTime] :startdate The start date of the period to filter the logs.
    # @option opts [DateTime] :enddate The end date of the period to filter the logs.
    # @option opts [String] :resource The resource to filter the action logs.
    # @option opts [String] :actionfilter The action to filter the action logs.
    # @option opts [String] :argument The id of the entity that was the argument of the executed action.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionloglist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionloglist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actionloglist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.actionloglist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.actionloglist"
      end
      # resource path
      local_var_path = '/actionloglist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?
      query_params[:'resource'] = opts[:'resource'] if !opts[:'resource'].nil?
      query_params[:'actionfilter'] = opts[:'actionfilter'] if !opts[:'actionfilter'].nil?
      query_params[:'argument'] = opts[:'argument'] if !opts[:'argument'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionloglist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign an action item pack to a user
    # Allows the user to assign an action pack to a user or group of users.
    # @param token [String] The authentication token.
    # @param pack [String] The id of the action pack to assign.
    # @param itemsdata [Boolean] A JSON array containing the action items&#39; data needed to assign them to the assignee (Id, Event, DateDue, DateExpired, NotifyAssigne).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :assignee The assignee of the pack.
    # @option opts [String] :group The group to assign the pack.
    # @option opts [String] :notes The assignment&#39;s notes.
    # @return [nil]
    def actionpackassign(token, pack, itemsdata, opts = {})
      actionpackassign_with_http_info(token, pack, itemsdata, opts)
      nil
    end

    # Assign an action item pack to a user
    # Allows the user to assign an action pack to a user or group of users.
    # @param token [String] The authentication token.
    # @param pack [String] The id of the action pack to assign.
    # @param itemsdata [Boolean] A JSON array containing the action items&#39; data needed to assign them to the assignee (Id, Event, DateDue, DateExpired, NotifyAssigne).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :assignee The assignee of the pack.
    # @option opts [String] :group The group to assign the pack.
    # @option opts [String] :notes The assignment&#39;s notes.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionpackassign_with_http_info(token, pack, itemsdata, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionpackassign ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actionpackassign"
      end
      # verify the required parameter 'pack' is set
      if @api_client.config.client_side_validation && pack.nil?
        fail ArgumentError, "Missing the required parameter 'pack' when calling DefaultApi.actionpackassign"
      end
      # verify the required parameter 'itemsdata' is set
      if @api_client.config.client_side_validation && itemsdata.nil?
        fail ArgumentError, "Missing the required parameter 'itemsdata' when calling DefaultApi.actionpackassign"
      end
      # resource path
      local_var_path = '/actionpackassign'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'pack'] = pack
      query_params[:'itemsdata'] = itemsdata
      query_params[:'assignee'] = opts[:'assignee'] if !opts[:'assignee'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'notes'] = opts[:'notes'] if !opts[:'notes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionpackassign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an action item pack
    # Allows the user to delete an action item pack.
    # @param token [String] The authentication token.
    # @param id [String] The id of the action pack to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actionpackdelete(token, id, opts = {})
      actionpackdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete an action item pack
    # Allows the user to delete an action item pack.
    # @param token [String] The authentication token.
    # @param id [String] The id of the action pack to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionpackdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionpackdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actionpackdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.actionpackdelete"
      end
      # resource path
      local_var_path = '/actionpackdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionpackdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of an action item pack
    # Allows the user to view an individual action pack and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the action pack to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actionpackget(token, id, opts = {})
      actionpackget_with_http_info(token, id, opts)
      nil
    end

    # View details of an action item pack
    # Allows the user to view an individual action pack and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the action pack to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionpackget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionpackget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actionpackget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.actionpackget"
      end
      # resource path
      local_var_path = '/actionpackget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionpackget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of action item packs
    # Allows the user to view the full list of action item packs.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actionpacklist(token, from, count, opts = {})
      actionpacklist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of action item packs
    # Allows the user to view the full list of action item packs.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionpacklist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionpacklist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actionpacklist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.actionpacklist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.actionpacklist"
      end
      # resource path
      local_var_path = '/actionpacklist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionpacklist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit an action item pack
    # Allows the user to edit an action item pack.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def actionpacksave(opts = {})
      actionpacksave_with_http_info(opts)
      nil
    end

    # Create or edit an action item pack
    # Allows the user to edit an action item pack.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actionpacksave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actionpacksave ...'
      end
      # resource path
      local_var_path = '/actionpacksave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actionpacksave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an action item type
    # Allows the user to delete an action item type.
    # @param token [String] The authentication token.
    # @param id [String] The id of the action type to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actiontypedelete(token, id, opts = {})
      actiontypedelete_with_http_info(token, id, opts)
      nil
    end

    # Delete an action item type
    # Allows the user to delete an action item type.
    # @param token [String] The authentication token.
    # @param id [String] The id of the action type to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actiontypedelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actiontypedelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actiontypedelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.actiontypedelete"
      end
      # resource path
      local_var_path = '/actiontypedelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actiontypedelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of an action item type
    # Allows the user to view an individual action item type and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the action type to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actiontypeget(token, id, opts = {})
      actiontypeget_with_http_info(token, id, opts)
      nil
    end

    # View details of an action item type
    # Allows the user to view an individual action item type and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the action type to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actiontypeget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actiontypeget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actiontypeget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.actiontypeget"
      end
      # resource path
      local_var_path = '/actiontypeget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actiontypeget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of action item types
    # Allows the user to view the full list of action item types.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actiontypelist(token, from, count, opts = {})
      actiontypelist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of action item types
    # Allows the user to view the full list of action item types.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actiontypelist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actiontypelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.actiontypelist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.actiontypelist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.actiontypelist"
      end
      # resource path
      local_var_path = '/actiontypelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actiontypelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit an action item type
    # Allows the user to dit an action item type.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def actiontypesave(opts = {})
      actiontypesave_with_http_info(opts)
      nil
    end

    # Create or edit an action item type
    # Allows the user to dit an action item type.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actiontypesave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.actiontypesave ...'
      end
      # resource path
      local_var_path = '/actiontypesave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#actiontypesave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check the status of an ad hoc query execution
    # Allows the user to check whether a query has executed, viewable on the query's execution page.
    # @param token [String] The authentication token.
    # @param id [String] The id of the ad hoc query execution to be checked.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def adhocquerycheckexecution(token, id, opts = {})
      adhocquerycheckexecution_with_http_info(token, id, opts)
      nil
    end

    # Check the status of an ad hoc query execution
    # Allows the user to check whether a query has executed, viewable on the query&#39;s execution page.
    # @param token [String] The authentication token.
    # @param id [String] The id of the ad hoc query execution to be checked.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def adhocquerycheckexecution_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.adhocquerycheckexecution ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.adhocquerycheckexecution"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.adhocquerycheckexecution"
      end
      # resource path
      local_var_path = '/adhocquerycheckexecution'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#adhocquerycheckexecution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an ad hoc query
    # Allows the user to delete a previously created ad hoc query.
    # @param token [String] The authentication token.
    # @param id [String] The id of the ad hoc query to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def adhocquerydelete(token, id, opts = {})
      adhocquerydelete_with_http_info(token, id, opts)
      nil
    end

    # Delete an ad hoc query
    # Allows the user to delete a previously created ad hoc query.
    # @param token [String] The authentication token.
    # @param id [String] The id of the ad hoc query to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def adhocquerydelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.adhocquerydelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.adhocquerydelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.adhocquerydelete"
      end
      # resource path
      local_var_path = '/adhocquerydelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#adhocquerydelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Execute an ad hoc query
    # Allows the user to execute an ad hoc query.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the query to execute.
    # @option opts [String] :query The query to execute.
    # @return [nil]
    def adhocqueryexecute(token, opts = {})
      adhocqueryexecute_with_http_info(token, opts)
      nil
    end

    # Execute an ad hoc query
    # Allows the user to execute an ad hoc query.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the query to execute.
    # @option opts [String] :query The query to execute.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def adhocqueryexecute_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.adhocqueryexecute ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.adhocqueryexecute"
      end
      # resource path
      local_var_path = '/adhocqueryexecute'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#adhocqueryexecute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of an ad hoc query
    # Allows the user to view an individual ad hoc query with its settings.
    # @param token [String] The authentication token.
    # @param id [String] The id of the query to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def adhocqueryget(token, id, opts = {})
      adhocqueryget_with_http_info(token, id, opts)
      nil
    end

    # View details of an ad hoc query
    # Allows the user to view an individual ad hoc query with its settings.
    # @param token [String] The authentication token.
    # @param id [String] The id of the query to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def adhocqueryget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.adhocqueryget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.adhocqueryget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.adhocqueryget"
      end
      # resource path
      local_var_path = '/adhocqueryget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#adhocqueryget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the database schema for making ad hoc queries
    # Allows the user to view the list of schema for ad hoc queries.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def adhocquerygetschema(token, opts = {})
      adhocquerygetschema_with_http_info(token, opts)
      nil
    end

    # View the database schema for making ad hoc queries
    # Allows the user to view the list of schema for ad hoc queries.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def adhocquerygetschema_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.adhocquerygetschema ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.adhocquerygetschema"
      end
      # resource path
      local_var_path = '/adhocquerygetschema'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#adhocquerygetschema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of saved ad hoc queries
    # Allows the user to view the full list of saved queries.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def adhocquerylist(token, from, count, opts = {})
      adhocquerylist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of saved ad hoc queries
    # Allows the user to view the full list of saved queries.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def adhocquerylist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.adhocquerylist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.adhocquerylist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.adhocquerylist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.adhocquerylist"
      end
      # resource path
      local_var_path = '/adhocquerylist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#adhocquerylist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of ad hoc queries executions
    # Allows the user to view the full list of past query executions.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query The first record to return.
    # @return [nil]
    def adhocquerylistexecutions(token, from, count, opts = {})
      adhocquerylistexecutions_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of ad hoc queries executions
    # Allows the user to view the full list of past query executions.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query The first record to return.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def adhocquerylistexecutions_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.adhocquerylistexecutions ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.adhocquerylistexecutions"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.adhocquerylistexecutions"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.adhocquerylistexecutions"
      end
      # resource path
      local_var_path = '/adhocquerylistexecutions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#adhocquerylistexecutions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit an ad hoc query
    # Allows the user to edit an ad hoc query.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def adhocquerysave(opts = {})
      adhocquerysave_with_http_info(opts)
      nil
    end

    # Create or edit an ad hoc query
    # Allows the user to edit an ad hoc query.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def adhocquerysave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.adhocquerysave ...'
      end
      # resource path
      local_var_path = '/adhocquerysave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#adhocquerysave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stops the execution of an ad hoc query
    # Allows the user to halt the execution of a query that is currently being executed.
    # @param token [String] The authentication token.
    # @param id [String] The id of the ad hoc query execution to be stopped.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def adhocquerystopexecution(token, id, opts = {})
      adhocquerystopexecution_with_http_info(token, id, opts)
      nil
    end

    # Stops the execution of an ad hoc query
    # Allows the user to halt the execution of a query that is currently being executed.
    # @param token [String] The authentication token.
    # @param id [String] The id of the ad hoc query execution to be stopped.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def adhocquerystopexecution_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.adhocquerystopexecution ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.adhocquerystopexecution"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.adhocquerystopexecution"
      end
      # resource path
      local_var_path = '/adhocquerystopexecution'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#adhocquerystopexecution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request access to the ad-hoc reports
    # Allows the user to request access to the ad-hoc reports by clicking, 'Request Access' under Institutional Research -> Ad-hoc Reports
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def adhocreportsreqaccess(token, opts = {})
      adhocreportsreqaccess_with_http_info(token, opts)
      nil
    end

    # Request access to the ad-hoc reports
    # Allows the user to request access to the ad-hoc reports by clicking, &#39;Request Access&#39; under Institutional Research -&gt; Ad-hoc Reports
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def adhocreportsreqaccess_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.adhocreportsreqaccess ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.adhocreportsreqaccess"
      end
      # resource path
      local_var_path = '/adhocreportsreqaccess'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#adhocreportsreqaccess\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check whether the user is known by the system.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param location [String] The id of the location the user picked.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advancedstationcheckunknownuser(station, user, location, opts = {})
      advancedstationcheckunknownuser_with_http_info(station, user, location, opts)
      nil
    end

    # Check whether the user is known by the system.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param location [String] The id of the location the user picked.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstationcheckunknownuser_with_http_info(station, user, location, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advancedstationcheckunknownuser ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.advancedstationcheckunknownuser"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.advancedstationcheckunknownuser"
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling DefaultApi.advancedstationcheckunknownuser"
      end
      # resource path
      local_var_path = '/advancedstationcheckunknownuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'user'] = user
      query_params[:'location'] = location

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advancedstationcheckunknownuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check whether the user is a staff member, an attendee or both.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param location [String] The id of the location the user picked.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advancedstationcheckuserrole(station, user, location, opts = {})
      advancedstationcheckuserrole_with_http_info(station, user, location, opts)
      nil
    end

    # Check whether the user is a staff member, an attendee or both.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param location [String] The id of the location the user picked.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstationcheckuserrole_with_http_info(station, user, location, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advancedstationcheckuserrole ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.advancedstationcheckuserrole"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.advancedstationcheckuserrole"
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling DefaultApi.advancedstationcheckuserrole"
      end
      # resource path
      local_var_path = '/advancedstationcheckuserrole'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'user'] = user
      query_params[:'location'] = location

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advancedstationcheckuserrole\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a user via a sign-in station.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user to create.
    # @param location [String] The id of the location the user picked.
    # @param firstname [String] The first name of the user to create.
    # @param lastname [String] The last name of the user to create.
    # @param email [String] The email of the user to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :middlename The middle name of the user to create.
    # @return [nil]
    def advancedstationcreateuser(station, user, location, firstname, lastname, email, opts = {})
      advancedstationcreateuser_with_http_info(station, user, location, firstname, lastname, email, opts)
      nil
    end

    # Creates a user via a sign-in station.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user to create.
    # @param location [String] The id of the location the user picked.
    # @param firstname [String] The first name of the user to create.
    # @param lastname [String] The last name of the user to create.
    # @param email [String] The email of the user to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :middlename The middle name of the user to create.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstationcreateuser_with_http_info(station, user, location, firstname, lastname, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advancedstationcreateuser ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.advancedstationcreateuser"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.advancedstationcreateuser"
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling DefaultApi.advancedstationcreateuser"
      end
      # verify the required parameter 'firstname' is set
      if @api_client.config.client_side_validation && firstname.nil?
        fail ArgumentError, "Missing the required parameter 'firstname' when calling DefaultApi.advancedstationcreateuser"
      end
      # verify the required parameter 'lastname' is set
      if @api_client.config.client_side_validation && lastname.nil?
        fail ArgumentError, "Missing the required parameter 'lastname' when calling DefaultApi.advancedstationcreateuser"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling DefaultApi.advancedstationcreateuser"
      end
      # resource path
      local_var_path = '/advancedstationcreateuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'user'] = user
      query_params[:'location'] = location
      query_params[:'firstname'] = firstname
      query_params[:'lastname'] = lastname
      query_params[:'email'] = email
      query_params[:'middlename'] = opts[:'middlename'] if !opts[:'middlename'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advancedstationcreateuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the courses available for a specific location and a specific student.
    # @param station [String] The id of the sign-in station to get.
    # @param location [String] The id of the location the student picked.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advancedstationgetevents(station, location, user, opts = {})
      advancedstationgetevents_with_http_info(station, location, user, opts)
      nil
    end

    # Gets the courses available for a specific location and a specific student.
    # @param station [String] The id of the sign-in station to get.
    # @param location [String] The id of the location the student picked.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstationgetevents_with_http_info(station, location, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advancedstationgetevents ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.advancedstationgetevents"
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling DefaultApi.advancedstationgetevents"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.advancedstationgetevents"
      end
      # resource path
      local_var_path = '/advancedstationgetevents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'location'] = location
      query_params[:'user'] = user

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advancedstationgetevents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the info to display in the sign-in station by it's ID.
    # @param id [String] The id of the sign-in station to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :event The id of the event (or session), to override the scheduled one.
    # @return [nil]
    def advancedstationgetinfo(id, opts = {})
      advancedstationgetinfo_with_http_info(id, opts)
      nil
    end

    # Gets the info to display in the sign-in station by it&#39;s ID.
    # @param id [String] The id of the sign-in station to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :event The id of the event (or session), to override the scheduled one.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstationgetinfo_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advancedstationgetinfo ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.advancedstationgetinfo"
      end
      # resource path
      local_var_path = '/advancedstationgetinfo'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advancedstationgetinfo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the locations available in a sign-in station.
    # @param station [String] The id of the sign-in station whose locations have to be returned.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advancedstationgetlocations(station, user, opts = {})
      advancedstationgetlocations_with_http_info(station, user, opts)
      nil
    end

    # Gets the locations available in a sign-in station.
    # @param station [String] The id of the sign-in station whose locations have to be returned.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstationgetlocations_with_http_info(station, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advancedstationgetlocations ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.advancedstationgetlocations"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.advancedstationgetlocations"
      end
      # resource path
      local_var_path = '/advancedstationgetlocations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'user'] = user

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advancedstationgetlocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the staff/tutors available filtered by the location, course and services of the given attendance log.
    # @param station [String] The id of the sign-in station to get.
    # @param attendancelog [String] The id of the attendance log to filter the staff members.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def advancedstationgetlogstaff(station, attendancelog, opts = {})
      advancedstationgetlogstaff_with_http_info(station, attendancelog, opts)
      nil
    end

    # Gets the staff/tutors available filtered by the location, course and services of the given attendance log.
    # @param station [String] The id of the sign-in station to get.
    # @param attendancelog [String] The id of the attendance log to filter the staff members.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstationgetlogstaff_with_http_info(station, attendancelog, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advancedstationgetlogstaff ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.advancedstationgetlogstaff"
      end
      # verify the required parameter 'attendancelog' is set
      if @api_client.config.client_side_validation && attendancelog.nil?
        fail ArgumentError, "Missing the required parameter 'attendancelog' when calling DefaultApi.advancedstationgetlogstaff"
      end
      # resource path
      local_var_path = '/advancedstationgetlogstaff'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'attendancelog'] = attendancelog
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advancedstationgetlogstaff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the user roles of the user trying to sign-in.
    # @param station [String] The id of the sign-in station to get.
    # @param signinrole [String] Specifies how the user is signing-in.
    # @param user [String] The card of the user.
    # @param location [String] The id of the location the user picked.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advancedstationgetroles(station, signinrole, user, location, opts = {})
      advancedstationgetroles_with_http_info(station, signinrole, user, location, opts)
      nil
    end

    # Gets the user roles of the user trying to sign-in.
    # @param station [String] The id of the sign-in station to get.
    # @param signinrole [String] Specifies how the user is signing-in.
    # @param user [String] The card of the user.
    # @param location [String] The id of the location the user picked.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstationgetroles_with_http_info(station, signinrole, user, location, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advancedstationgetroles ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.advancedstationgetroles"
      end
      # verify the required parameter 'signinrole' is set
      if @api_client.config.client_side_validation && signinrole.nil?
        fail ArgumentError, "Missing the required parameter 'signinrole' when calling DefaultApi.advancedstationgetroles"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.advancedstationgetroles"
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling DefaultApi.advancedstationgetroles"
      end
      # resource path
      local_var_path = '/advancedstationgetroles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'signinrole'] = signinrole
      query_params[:'user'] = user
      query_params[:'location'] = location

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advancedstationgetroles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the services available for a specific location.
    # @param station [String] The id of the sign-in station to get.
    # @param location [String] The id of the location the student picked.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advancedstationgetservices(station, location, user, opts = {})
      advancedstationgetservices_with_http_info(station, location, user, opts)
      nil
    end

    # Gets the services available for a specific location.
    # @param station [String] The id of the sign-in station to get.
    # @param location [String] The id of the location the student picked.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstationgetservices_with_http_info(station, location, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advancedstationgetservices ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.advancedstationgetservices"
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling DefaultApi.advancedstationgetservices"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.advancedstationgetservices"
      end
      # resource path
      local_var_path = '/advancedstationgetservices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'location'] = location
      query_params[:'user'] = user

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advancedstationgetservices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the staff/tutors available for a specific location, course and service.
    # @param station [String] The id of the sign-in station to get.
    # @param locationid [String] The id of the location the student picked.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :services The list of services selected by the user, in JSON format.
    # @option opts [String] :eventid The ID of the event selected.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def advancedstationgetstaff(station, locationid, user, opts = {})
      advancedstationgetstaff_with_http_info(station, locationid, user, opts)
      nil
    end

    # Gets the staff/tutors available for a specific location, course and service.
    # @param station [String] The id of the sign-in station to get.
    # @param locationid [String] The id of the location the student picked.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :services The list of services selected by the user, in JSON format.
    # @option opts [String] :eventid The ID of the event selected.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstationgetstaff_with_http_info(station, locationid, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advancedstationgetstaff ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.advancedstationgetstaff"
      end
      # verify the required parameter 'locationid' is set
      if @api_client.config.client_side_validation && locationid.nil?
        fail ArgumentError, "Missing the required parameter 'locationid' when calling DefaultApi.advancedstationgetstaff"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.advancedstationgetstaff"
      end
      # resource path
      local_var_path = '/advancedstationgetstaff'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'locationid'] = locationid
      query_params[:'user'] = user
      query_params[:'services'] = opts[:'services'] if !opts[:'services'].nil?
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advancedstationgetstaff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets whether a user is signed-in or not.
    # @param station [String] The id of the sign-in station to get.
    # @param time [DateTime] The date and time of the swipe.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The id of the location the user picked.
    # @return [nil]
    def advancedstationissignedin(station, time, user, opts = {})
      advancedstationissignedin_with_http_info(station, time, user, opts)
      nil
    end

    # Gets whether a user is signed-in or not.
    # @param station [String] The id of the sign-in station to get.
    # @param time [DateTime] The date and time of the swipe.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The id of the location the user picked.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstationissignedin_with_http_info(station, time, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advancedstationissignedin ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.advancedstationissignedin"
      end
      # verify the required parameter 'time' is set
      if @api_client.config.client_side_validation && time.nil?
        fail ArgumentError, "Missing the required parameter 'time' when calling DefaultApi.advancedstationissignedin"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.advancedstationissignedin"
      end
      # resource path
      local_var_path = '/advancedstationissignedin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'time'] = time
      query_params[:'user'] = user
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advancedstationissignedin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds the missing permissions to a role. Requires access to advrole.save
    # @param token [String] The authentication token.
    # @param roles [String] CSV list of the role ids to check
    # @param permissions [String] CSV list of the permissions to check
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advroleaddmissing(token, roles, permissions, opts = {})
      advroleaddmissing_with_http_info(token, roles, permissions, opts)
      nil
    end

    # Adds the missing permissions to a role. Requires access to advrole.save
    # @param token [String] The authentication token.
    # @param roles [String] CSV list of the role ids to check
    # @param permissions [String] CSV list of the permissions to check
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advroleaddmissing_with_http_info(token, roles, permissions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advroleaddmissing ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advroleaddmissing"
      end
      # verify the required parameter 'roles' is set
      if @api_client.config.client_side_validation && roles.nil?
        fail ArgumentError, "Missing the required parameter 'roles' when calling DefaultApi.advroleaddmissing"
      end
      # verify the required parameter 'permissions' is set
      if @api_client.config.client_side_validation && permissions.nil?
        fail ArgumentError, "Missing the required parameter 'permissions' when calling DefaultApi.advroleaddmissing"
      end
      # resource path
      local_var_path = '/advroleaddmissing'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'roles'] = roles
      query_params[:'permissions'] = permissions

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advroleaddmissing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Checks the permissions are assigned for the given roles
    # @param token [String] The authentication token.
    # @param roles [String] CSV list of the role ids to check
    # @param permissions [String] CSV list of the permissions to check
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advrolecheckperm(token, roles, permissions, opts = {})
      advrolecheckperm_with_http_info(token, roles, permissions, opts)
      nil
    end

    # Checks the permissions are assigned for the given roles
    # @param token [String] The authentication token.
    # @param roles [String] CSV list of the role ids to check
    # @param permissions [String] CSV list of the permissions to check
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrolecheckperm_with_http_info(token, roles, permissions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advrolecheckperm ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advrolecheckperm"
      end
      # verify the required parameter 'roles' is set
      if @api_client.config.client_side_validation && roles.nil?
        fail ArgumentError, "Missing the required parameter 'roles' when calling DefaultApi.advrolecheckperm"
      end
      # verify the required parameter 'permissions' is set
      if @api_client.config.client_side_validation && permissions.nil?
        fail ArgumentError, "Missing the required parameter 'permissions' when calling DefaultApi.advrolecheckperm"
      end
      # resource path
      local_var_path = '/advrolecheckperm'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'roles'] = roles
      query_params[:'permissions'] = permissions

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advrolecheckperm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a role
    # Allows the user to delete a role from the list of available roles.
    # @param token [String] The authentication token.
    # @param id [String] The id of the location to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advroledelete(token, id, opts = {})
      advroledelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a role
    # Allows the user to delete a role from the list of available roles.
    # @param token [String] The authentication token.
    # @param id [String] The id of the location to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advroledelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advroledelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advroledelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.advroledelete"
      end
      # resource path
      local_var_path = '/advroledelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advroledelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a role mapping
    # Allows the user to delete a role from its mapped categories on the 'Role Mapping' page.
    # @param token [String] The authentication token.
    # @param map [String] The map name to save the role.
    # @param roleid [String] The id of the role.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advroledeletemapping(token, map, roleid, opts = {})
      advroledeletemapping_with_http_info(token, map, roleid, opts)
      nil
    end

    # Delete a role mapping
    # Allows the user to delete a role from its mapped categories on the &#39;Role Mapping&#39; page.
    # @param token [String] The authentication token.
    # @param map [String] The map name to save the role.
    # @param roleid [String] The id of the role.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advroledeletemapping_with_http_info(token, map, roleid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advroledeletemapping ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advroledeletemapping"
      end
      # verify the required parameter 'map' is set
      if @api_client.config.client_side_validation && map.nil?
        fail ArgumentError, "Missing the required parameter 'map' when calling DefaultApi.advroledeletemapping"
      end
      # verify the required parameter 'roleid' is set
      if @api_client.config.client_side_validation && roleid.nil?
        fail ArgumentError, "Missing the required parameter 'roleid' when calling DefaultApi.advroledeletemapping"
      end
      # resource path
      local_var_path = '/advroledeletemapping'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'map'] = map
      query_params[:'roleid'] = roleid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advroledeletemapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a role
    # Allows the user to view a role and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the location to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advroleget(token, id, opts = {})
      advroleget_with_http_info(token, id, opts)
      nil
    end

    # View details of a role
    # Allows the user to view a role and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the location to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advroleget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advroleget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advroleget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.advroleget"
      end
      # resource path
      local_var_path = '/advroleget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advroleget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the roles for the current account
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :includepolicies True to include the policies, defaults to false.
    # @option opts [Boolean] :includeinternal True to include the internal roles too.
    # @option opts [String] :name Filter by name of the role.
    # @return [nil]
    def advrolelist(token, opts = {})
      advrolelist_with_http_info(token, opts)
      nil
    end

    # Lists the roles for the current account
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :includepolicies True to include the policies, defaults to false.
    # @option opts [Boolean] :includeinternal True to include the internal roles too.
    # @option opts [String] :name Filter by name of the role.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrolelist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advrolelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advrolelist"
      end
      # resource path
      local_var_path = '/advrolelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'includepolicies'] = opts[:'includepolicies'] if !opts[:'includepolicies'].nil?
      query_params[:'includeinternal'] = opts[:'includeinternal'] if !opts[:'includeinternal'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advrolelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the maps a roles is mapped to
    # @param token [String] The authentication token.
    # @param roleid [String] The id of the role to list the maps.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advrolelistmaps(token, roleid, opts = {})
      advrolelistmaps_with_http_info(token, roleid, opts)
      nil
    end

    # Lists the maps a roles is mapped to
    # @param token [String] The authentication token.
    # @param roleid [String] The id of the role to list the maps.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrolelistmaps_with_http_info(token, roleid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advrolelistmaps ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advrolelistmaps"
      end
      # verify the required parameter 'roleid' is set
      if @api_client.config.client_side_validation && roleid.nil?
        fail ArgumentError, "Missing the required parameter 'roleid' when calling DefaultApi.advrolelistmaps"
      end
      # resource path
      local_var_path = '/advrolelistmaps'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'roleid'] = roleid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advrolelistmaps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the roles mappings
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :map List only the roles in the specified map.
    # @return [nil]
    def advrolelistrolesmapped(token, opts = {})
      advrolelistrolesmapped_with_http_info(token, opts)
      nil
    end

    # Lists the roles mappings
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :map List only the roles in the specified map.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrolelistrolesmapped_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advrolelistrolesmapped ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advrolelistrolesmapped"
      end
      # resource path
      local_var_path = '/advrolelistrolesmapped'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'map'] = opts[:'map'] if !opts[:'map'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advrolelistrolesmapped\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of role templates
    # Allows the user to view the full list of available role templates.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advrolelisttemplates(token, opts = {})
      advrolelisttemplates_with_http_info(token, opts)
      nil
    end

    # View a list of role templates
    # Allows the user to view the full list of available role templates.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrolelisttemplates_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advrolelisttemplates ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advrolelisttemplates"
      end
      # resource path
      local_var_path = '/advrolelisttemplates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advrolelisttemplates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a role
    # Allows the user to create or edit a role's permissions.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def advrolesave(opts = {})
      advrolesave_with_http_info(opts)
      nil
    end

    # Create or edit a role
    # Allows the user to create or edit a role&#39;s permissions.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrolesave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advrolesave ...'
      end
      # resource path
      local_var_path = '/advrolesave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advrolesave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a role mapping
    # Allows the user to add a role to a mapped category on the 'Role Mapping' page.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def advrolesavemapping(opts = {})
      advrolesavemapping_with_http_info(opts)
      nil
    end

    # Saves a role mapping
    # Allows the user to add a role to a mapped category on the &#39;Role Mapping&#39; page.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrolesavemapping_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advrolesavemapping ...'
      end
      # resource path
      local_var_path = '/advrolesavemapping'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advrolesavemapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List users. Alias to user.list, use that one instead.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :roleid The id of the role to filter users by, or empty to return all users.
    # @option opts [String] :onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def advrolesuserlist(token, from, count, opts = {})
      advrolesuserlist_with_http_info(token, from, count, opts)
      nil
    end

    # List users. Alias to user.list, use that one instead.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :roleid The id of the role to filter users by, or empty to return all users.
    # @option opts [String] :onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advrolesuserlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advrolesuserlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advrolesuserlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.advrolesuserlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.advrolesuserlist"
      end
      # resource path
      local_var_path = '/advrolesuserlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'roleid'] = opts[:'roleid'] if !opts[:'roleid'].nil?
      query_params[:'onlywithoutcard'] = opts[:'onlywithoutcard'] if !opts[:'onlywithoutcard'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advrolesuserlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upgrade a user to another role (requires permission to edit those roles)
    # Allow the user to add a role to another user, given that he has access to view that other user and edit people with that new role.
    # @param token [String] The authentication token.
    # @param userid [String] Id of the user to upgrade
    # @param roleid [String] Id of the role to add
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advroleuserupgrade(token, userid, roleid, opts = {})
      advroleuserupgrade_with_http_info(token, userid, roleid, opts)
      nil
    end

    # Upgrade a user to another role (requires permission to edit those roles)
    # Allow the user to add a role to another user, given that he has access to view that other user and edit people with that new role.
    # @param token [String] The authentication token.
    # @param userid [String] Id of the user to upgrade
    # @param roleid [String] Id of the role to add
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advroleuserupgrade_with_http_info(token, userid, roleid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.advroleuserupgrade ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.advroleuserupgrade"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.advroleuserupgrade"
      end
      # verify the required parameter 'roleid' is set
      if @api_client.config.client_side_validation && roleid.nil?
        fail ArgumentError, "Missing the required parameter 'roleid' when calling DefaultApi.advroleuserupgrade"
      end
      # resource path
      local_var_path = '/advroleuserupgrade'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'roleid'] = roleid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#advroleuserupgrade\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel an appointment
    # Allows the user to cancel an appointment.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to cancel.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointmentcancel(token, id, opts = {})
      appointmentcancel_with_http_info(token, id, opts)
      nil
    end

    # Cancel an appointment
    # Allows the user to cancel an appointment.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to cancel.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentcancel_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentcancel ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmentcancel"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.appointmentcancel"
      end
      # resource path
      local_var_path = '/appointmentcancel'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentcancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if an appointment is valid or not
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to check.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :editing Specifies whether the check is for a new appointment or an existing one.
    # @return [nil]
    def appointmentcheckisvalid(token, id, opts = {})
      appointmentcheckisvalid_with_http_info(token, id, opts)
      nil
    end

    # Check if an appointment is valid or not
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to check.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :editing Specifies whether the check is for a new appointment or an existing one.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentcheckisvalid_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentcheckisvalid ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmentcheckisvalid"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.appointmentcheckisvalid"
      end
      # resource path
      local_var_path = '/appointmentcheckisvalid'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'editing'] = opts[:'editing'] if !opts[:'editing'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentcheckisvalid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit an appointment even if it breaks activated rules
    # Allows the user to edit an existing appointment even if it breaks the rules or settings of that location.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to edit.
    # @param attendee [String] The id of the attendee involved in the appointment.
    # @param staff [String] The id of the staff member involved in the appointment.
    # @param location [String] The id of the location where the appointment will take place.
    # @param start [DateTime] The appointment&#39;s start date &amp; time.
    # @param _end [DateTime] The appointment&#39;s end date &amp; time.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :term The id of the term when the appointment takes place.
    # @option opts [String] :event The id of the event of the appointment.
    # @option opts [String] :services Comma-separated string containing the ids of the services of the appointment.
    # @option opts [String] :notes The notes of the appointment.
    # @return [nil]
    def appointmenteditanyway(token, id, attendee, staff, location, start, _end, opts = {})
      appointmenteditanyway_with_http_info(token, id, attendee, staff, location, start, _end, opts)
      nil
    end

    # Edit an appointment even if it breaks activated rules
    # Allows the user to edit an existing appointment even if it breaks the rules or settings of that location.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to edit.
    # @param attendee [String] The id of the attendee involved in the appointment.
    # @param staff [String] The id of the staff member involved in the appointment.
    # @param location [String] The id of the location where the appointment will take place.
    # @param start [DateTime] The appointment&#39;s start date &amp; time.
    # @param _end [DateTime] The appointment&#39;s end date &amp; time.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :term The id of the term when the appointment takes place.
    # @option opts [String] :event The id of the event of the appointment.
    # @option opts [String] :services Comma-separated string containing the ids of the services of the appointment.
    # @option opts [String] :notes The notes of the appointment.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmenteditanyway_with_http_info(token, id, attendee, staff, location, start, _end, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmenteditanyway ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmenteditanyway"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.appointmenteditanyway"
      end
      # verify the required parameter 'attendee' is set
      if @api_client.config.client_side_validation && attendee.nil?
        fail ArgumentError, "Missing the required parameter 'attendee' when calling DefaultApi.appointmenteditanyway"
      end
      # verify the required parameter 'staff' is set
      if @api_client.config.client_side_validation && staff.nil?
        fail ArgumentError, "Missing the required parameter 'staff' when calling DefaultApi.appointmenteditanyway"
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling DefaultApi.appointmenteditanyway"
      end
      # verify the required parameter 'start' is set
      if @api_client.config.client_side_validation && start.nil?
        fail ArgumentError, "Missing the required parameter 'start' when calling DefaultApi.appointmenteditanyway"
      end
      # verify the required parameter '_end' is set
      if @api_client.config.client_side_validation && _end.nil?
        fail ArgumentError, "Missing the required parameter '_end' when calling DefaultApi.appointmenteditanyway"
      end
      # resource path
      local_var_path = '/appointmenteditanyway'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'attendee'] = attendee
      query_params[:'staff'] = staff
      query_params[:'location'] = location
      query_params[:'start'] = start
      query_params[:'end'] = _end
      query_params[:'term'] = opts[:'term'] if !opts[:'term'].nil?
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?
      query_params[:'services'] = opts[:'services'] if !opts[:'services'].nil?
      query_params[:'notes'] = opts[:'notes'] if !opts[:'notes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmenteditanyway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit the no-show status of an appointment
    # Allows the user to edit the no-show status of an appointment by marking it as Voided, Restored, or as a Show.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to edit its presence.
    # @param showedup [Boolean] Specifies whether the attendee was showed-up or not in the appointment.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointmenteditpresence(token, id, showedup, opts = {})
      appointmenteditpresence_with_http_info(token, id, showedup, opts)
      nil
    end

    # Edit the no-show status of an appointment
    # Allows the user to edit the no-show status of an appointment by marking it as Voided, Restored, or as a Show.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to edit its presence.
    # @param showedup [Boolean] Specifies whether the attendee was showed-up or not in the appointment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmenteditpresence_with_http_info(token, id, showedup, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmenteditpresence ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmenteditpresence"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.appointmenteditpresence"
      end
      # verify the required parameter 'showedup' is set
      if @api_client.config.client_side_validation && showedup.nil?
        fail ArgumentError, "Missing the required parameter 'showedup' when calling DefaultApi.appointmenteditpresence"
      end
      # resource path
      local_var_path = '/appointmenteditpresence'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'showedup'] = showedup

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmenteditpresence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finds all staff available slots filtered by service, date, etc
    # Allows the user to view available appointment slots when creating an appointment.
    # @param token [String] The authentication token.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param serviceids [String] CSV list of the service Ids to filter by.
    # @param locationid [String] The id of the service to filter by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def appointmentfindallstaffslots(token, starttime, endtime, serviceids, locationid, opts = {})
      appointmentfindallstaffslots_with_http_info(token, starttime, endtime, serviceids, locationid, opts)
      nil
    end

    # Finds all staff available slots filtered by service, date, etc
    # Allows the user to view available appointment slots when creating an appointment.
    # @param token [String] The authentication token.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param serviceids [String] CSV list of the service Ids to filter by.
    # @param locationid [String] The id of the service to filter by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentfindallstaffslots_with_http_info(token, starttime, endtime, serviceids, locationid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentfindallstaffslots ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmentfindallstaffslots"
      end
      # verify the required parameter 'starttime' is set
      if @api_client.config.client_side_validation && starttime.nil?
        fail ArgumentError, "Missing the required parameter 'starttime' when calling DefaultApi.appointmentfindallstaffslots"
      end
      # verify the required parameter 'endtime' is set
      if @api_client.config.client_side_validation && endtime.nil?
        fail ArgumentError, "Missing the required parameter 'endtime' when calling DefaultApi.appointmentfindallstaffslots"
      end
      # verify the required parameter 'serviceids' is set
      if @api_client.config.client_side_validation && serviceids.nil?
        fail ArgumentError, "Missing the required parameter 'serviceids' when calling DefaultApi.appointmentfindallstaffslots"
      end
      # verify the required parameter 'locationid' is set
      if @api_client.config.client_side_validation && locationid.nil?
        fail ArgumentError, "Missing the required parameter 'locationid' when calling DefaultApi.appointmentfindallstaffslots"
      end
      # resource path
      local_var_path = '/appointmentfindallstaffslots'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'starttime'] = starttime
      query_params[:'endtime'] = endtime
      query_params[:'serviceids'] = serviceids
      query_params[:'locationid'] = locationid
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentfindallstaffslots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finds available slots filtered by service, date, staff, etc
    # Allows the user to view available appointment slots when creating an appointment.
    # @param token [String] The authentication token.
    # @param staffid [String] The id of the staff to filter by.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param serviceids [String] CSV list of the service Ids to filter by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [String] :locationid The id of the service to filter by.
    # @return [nil]
    def appointmentfindslots(token, staffid, starttime, endtime, serviceids, opts = {})
      appointmentfindslots_with_http_info(token, staffid, starttime, endtime, serviceids, opts)
      nil
    end

    # Finds available slots filtered by service, date, staff, etc
    # Allows the user to view available appointment slots when creating an appointment.
    # @param token [String] The authentication token.
    # @param staffid [String] The id of the staff to filter by.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param serviceids [String] CSV list of the service Ids to filter by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [String] :locationid The id of the service to filter by.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentfindslots_with_http_info(token, staffid, starttime, endtime, serviceids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentfindslots ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmentfindslots"
      end
      # verify the required parameter 'staffid' is set
      if @api_client.config.client_side_validation && staffid.nil?
        fail ArgumentError, "Missing the required parameter 'staffid' when calling DefaultApi.appointmentfindslots"
      end
      # verify the required parameter 'starttime' is set
      if @api_client.config.client_side_validation && starttime.nil?
        fail ArgumentError, "Missing the required parameter 'starttime' when calling DefaultApi.appointmentfindslots"
      end
      # verify the required parameter 'endtime' is set
      if @api_client.config.client_side_validation && endtime.nil?
        fail ArgumentError, "Missing the required parameter 'endtime' when calling DefaultApi.appointmentfindslots"
      end
      # verify the required parameter 'serviceids' is set
      if @api_client.config.client_side_validation && serviceids.nil?
        fail ArgumentError, "Missing the required parameter 'serviceids' when calling DefaultApi.appointmentfindslots"
      end
      # resource path
      local_var_path = '/appointmentfindslots'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'staffid'] = staffid
      query_params[:'starttime'] = starttime
      query_params[:'endtime'] = endtime
      query_params[:'serviceids'] = serviceids
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'locationid'] = opts[:'locationid'] if !opts[:'locationid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentfindslots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finds staff available by service, date, event, etc
    # Allows the user to view staff availability when creating an appointment.
    # @param token [String] The authentication token.
    # @param serviceids [String] CSV list of the service ids to filter by.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [String] :locationid The id of the service to filter by.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def appointmentfindstaff(token, serviceids, starttime, endtime, opts = {})
      appointmentfindstaff_with_http_info(token, serviceids, starttime, endtime, opts)
      nil
    end

    # Finds staff available by service, date, event, etc
    # Allows the user to view staff availability when creating an appointment.
    # @param token [String] The authentication token.
    # @param serviceids [String] CSV list of the service ids to filter by.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [String] :locationid The id of the service to filter by.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentfindstaff_with_http_info(token, serviceids, starttime, endtime, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentfindstaff ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmentfindstaff"
      end
      # verify the required parameter 'serviceids' is set
      if @api_client.config.client_side_validation && serviceids.nil?
        fail ArgumentError, "Missing the required parameter 'serviceids' when calling DefaultApi.appointmentfindstaff"
      end
      # verify the required parameter 'starttime' is set
      if @api_client.config.client_side_validation && starttime.nil?
        fail ArgumentError, "Missing the required parameter 'starttime' when calling DefaultApi.appointmentfindstaff"
      end
      # verify the required parameter 'endtime' is set
      if @api_client.config.client_side_validation && endtime.nil?
        fail ArgumentError, "Missing the required parameter 'endtime' when calling DefaultApi.appointmentfindstaff"
      end
      # resource path
      local_var_path = '/appointmentfindstaff'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'serviceids'] = serviceids
      query_params[:'starttime'] = starttime
      query_params[:'endtime'] = endtime
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'locationid'] = opts[:'locationid'] if !opts[:'locationid'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentfindstaff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of an appointment
    # Allows the user to view an individual appointment and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointmentget(token, id, opts = {})
      appointmentget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of an appointment
    # Allows the user to view an individual appointment and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmentget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.appointmentget"
      end
      # resource path
      local_var_path = '/appointmentget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the current appointments for the user that is about to sign-in via the specified sign-in station.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param location [String] The id of the location where the user wants to sign-in.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointmentgetcurrent(station, user, location, opts = {})
      appointmentgetcurrent_with_http_info(station, user, location, opts)
      nil
    end

    # Get the current appointments for the user that is about to sign-in via the specified sign-in station.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param location [String] The id of the location where the user wants to sign-in.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentgetcurrent_with_http_info(station, user, location, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentgetcurrent ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.appointmentgetcurrent"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.appointmentgetcurrent"
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling DefaultApi.appointmentgetcurrent"
      end
      # resource path
      local_var_path = '/appointmentgetcurrent'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'user'] = user
      query_params[:'location'] = location

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentgetcurrent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find locations where a service is available
    # Allows the user to search for appointment availability by location or service.
    # @param token [String] The authentication token.
    # @param serviceid [String] The id of the service to get its locations.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointmentgetlocations(token, serviceid, opts = {})
      appointmentgetlocations_with_http_info(token, serviceid, opts)
      nil
    end

    # Find locations where a service is available
    # Allows the user to search for appointment availability by location or service.
    # @param token [String] The authentication token.
    # @param serviceid [String] The id of the service to get its locations.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentgetlocations_with_http_info(token, serviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentgetlocations ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmentgetlocations"
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling DefaultApi.appointmentgetlocations"
      end
      # resource path
      local_var_path = '/appointmentgetlocations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'serviceid'] = serviceid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentgetlocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of appointments
    # Allows the user to view all upcoming appointments for the location or locations they are scoped to.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :startdate The start date of the period to filter the appointments.
    # @option opts [DateTime] :enddate The end date of the period to filter the appointments.
    # @option opts [String] :userid The attendee id to filter the appointments.
    # @return [nil]
    def appointmentlist(token, from, count, opts = {})
      appointmentlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of appointments
    # Allows the user to view all upcoming appointments for the location or locations they are scoped to.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :startdate The start date of the period to filter the appointments.
    # @option opts [DateTime] :enddate The end date of the period to filter the appointments.
    # @option opts [String] :userid The attendee id to filter the appointments.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmentlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.appointmentlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.appointmentlist"
      end
      # resource path
      local_var_path = '/appointmentlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?
      query_params[:'userid'] = opts[:'userid'] if !opts[:'userid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all my upcoming appointments
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :start If specified, only appointments that start after the specified date will be returned.
    # @option opts [DateTime] :modifiedafter If specified, only appointments modified after the specified date will be returned.
    # @return [nil]
    def appointmentlistmine(token, opts = {})
      appointmentlistmine_with_http_info(token, opts)
      nil
    end

    # View all my upcoming appointments
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :start If specified, only appointments that start after the specified date will be returned.
    # @option opts [DateTime] :modifiedafter If specified, only appointments modified after the specified date will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentlistmine_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentlistmine ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmentlistmine"
      end
      # resource path
      local_var_path = '/appointmentlistmine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'modifiedafter'] = opts[:'modifiedafter'] if !opts[:'modifiedafter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentlistmine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of all my upcoming appointments
    # Allows the user to view all of their own upcoming appointments.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :start If specified, only appointments that start after the specified date will be returned.
    # @option opts [DateTime] :modifiedafter If specified, only appointments modified after the specified date will be returned.
    # @return [nil]
    def appointmentlistupcoming(token, opts = {})
      appointmentlistupcoming_with_http_info(token, opts)
      nil
    end

    # Search and view details of all my upcoming appointments
    # Allows the user to view all of their own upcoming appointments.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :start If specified, only appointments that start after the specified date will be returned.
    # @option opts [DateTime] :modifiedafter If specified, only appointments modified after the specified date will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentlistupcoming_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentlistupcoming ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmentlistupcoming"
      end
      # resource path
      local_var_path = '/appointmentlistupcoming'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'modifiedafter'] = opts[:'modifiedafter'] if !opts[:'modifiedafter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentlistupcoming\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reschedule an appointment from MS Outlook.
    # Allows the user to reschedule, edit, or cancel appointments via MS Outlook if the user has the AccuCampus add-on installed on their Outlook.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to edit.
    # @param start [DateTime] The appointment&#39;s start date &amp; time.
    # @param _end [DateTime] The appointment&#39;s end date &amp; time.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointmentrescheduleoutlook(token, id, start, _end, opts = {})
      appointmentrescheduleoutlook_with_http_info(token, id, start, _end, opts)
      nil
    end

    # Reschedule an appointment from MS Outlook.
    # Allows the user to reschedule, edit, or cancel appointments via MS Outlook if the user has the AccuCampus add-on installed on their Outlook.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to edit.
    # @param start [DateTime] The appointment&#39;s start date &amp; time.
    # @param _end [DateTime] The appointment&#39;s end date &amp; time.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentrescheduleoutlook_with_http_info(token, id, start, _end, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentrescheduleoutlook ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmentrescheduleoutlook"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.appointmentrescheduleoutlook"
      end
      # verify the required parameter 'start' is set
      if @api_client.config.client_side_validation && start.nil?
        fail ArgumentError, "Missing the required parameter 'start' when calling DefaultApi.appointmentrescheduleoutlook"
      end
      # verify the required parameter '_end' is set
      if @api_client.config.client_side_validation && _end.nil?
        fail ArgumentError, "Missing the required parameter '_end' when calling DefaultApi.appointmentrescheduleoutlook"
      end
      # resource path
      local_var_path = '/appointmentrescheduleoutlook'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'start'] = start
      query_params[:'end'] = _end

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentrescheduleoutlook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restore an appointment
    # Allows the user to restore a canceled appointment.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to restore.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointmentrestore(token, id, opts = {})
      appointmentrestore_with_http_info(token, id, opts)
      nil
    end

    # Restore an appointment
    # Allows the user to restore a canceled appointment.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to restore.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentrestore_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentrestore ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmentrestore"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.appointmentrestore"
      end
      # resource path
      local_var_path = '/appointmentrestore'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentrestore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restore an appointment even if it breaks activated rules
    # Allows the user to restore a canceled appointment even if that appointment breaks the rules or settings of that location.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to restore.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointmentrestoreanyway(token, id, opts = {})
      appointmentrestoreanyway_with_http_info(token, id, opts)
      nil
    end

    # Restore an appointment even if it breaks activated rules
    # Allows the user to restore a canceled appointment even if that appointment breaks the rules or settings of that location.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to restore.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentrestoreanyway_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentrestoreanyway ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmentrestoreanyway"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.appointmentrestoreanyway"
      end
      # resource path
      local_var_path = '/appointmentrestoreanyway'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentrestoreanyway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Schedule an appointment
    # Allows the user to schedule an appointment within the rules of the location and the availability of staff members.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def appointmentsave(opts = {})
      appointmentsave_with_http_info(opts)
      nil
    end

    # Schedule an appointment
    # Allows the user to schedule an appointment within the rules of the location and the availability of staff members.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentsave ...'
      end
      # resource path
      local_var_path = '/appointmentsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Schedule an appointment even if it breaks activated rules
    # Allows the user to schedule an appointment even if it breaks the rules or settings of that location or if it goes against the availability of the staff member.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to set as valid.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointmentsetasvalid(token, id, opts = {})
      appointmentsetasvalid_with_http_info(token, id, opts)
      nil
    end

    # Schedule an appointment even if it breaks activated rules
    # Allows the user to schedule an appointment even if it breaks the rules or settings of that location or if it goes against the availability of the staff member.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to set as valid.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentsetasvalid_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentsetasvalid ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmentsetasvalid"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.appointmentsetasvalid"
      end
      # resource path
      local_var_path = '/appointmentsetasvalid'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentsetasvalid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the locations with most appointments
    # Allows the user to view suggestions for the most popular locations in which to make appointments
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointmentsuggestlocations(token, opts = {})
      appointmentsuggestlocations_with_http_info(token, opts)
      nil
    end

    # View the locations with most appointments
    # Allows the user to view suggestions for the most popular locations in which to make appointments
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentsuggestlocations_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentsuggestlocations ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmentsuggestlocations"
      end
      # resource path
      local_var_path = '/appointmentsuggestlocations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentsuggestlocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the services with most appointments
    # Allows the user to view suggestions for the most popular services for which to make appointments.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointmentsuggestservices(token, opts = {})
      appointmentsuggestservices_with_http_info(token, opts)
      nil
    end

    # View the services with most appointments
    # Allows the user to view suggestions for the most popular services for which to make appointments.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentsuggestservices_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentsuggestservices ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmentsuggestservices"
      end
      # resource path
      local_var_path = '/appointmentsuggestservices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentsuggestservices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Void an appointment
    # Allows the user to void an appointment that has been marked as a no-show so that it does not count against the student's restrictions.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to cancel.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointmentvoid(token, id, opts = {})
      appointmentvoid_with_http_info(token, id, opts)
      nil
    end

    # Void an appointment
    # Allows the user to void an appointment that has been marked as a no-show so that it does not count against the student&#39;s restrictions.
    # @param token [String] The authentication token.
    # @param id [String] The id of the appointment to cancel.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointmentvoid_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appointmentvoid ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appointmentvoid"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.appointmentvoid"
      end
      # resource path
      local_var_path = '/appointmentvoid'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appointmentvoid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the phone number of the current user
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appsharegetphone(token, opts = {})
      appsharegetphone_with_http_info(token, opts)
      nil
    end

    # Gets the phone number of the current user
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appsharegetphone_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appsharegetphone ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appsharegetphone"
      end
      # resource path
      local_var_path = '/appsharegetphone'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appsharegetphone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sends an SMS with the link to the app
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phonenumber Phone number to where to send the link. Leave empty to the number on file.
    # @return [nil]
    def appsharesendtext(token, opts = {})
      appsharesendtext_with_http_info(token, opts)
      nil
    end

    # Sends an SMS with the link to the app
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phonenumber Phone number to where to send the link. Leave empty to the number on file.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appsharesendtext_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.appsharesendtext ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.appsharesendtext"
      end
      # resource path
      local_var_path = '/appsharesendtext'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'phonenumber'] = opts[:'phonenumber'] if !opts[:'phonenumber'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#appsharesendtext\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a comment on an attendance log
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log comment to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def attendancelogcommentdelete(token, id, opts = {})
      attendancelogcommentdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a comment on an attendance log
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log comment to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogcommentdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogcommentdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.attendancelogcommentdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.attendancelogcommentdelete"
      end
      # resource path
      local_var_path = '/attendancelogcommentdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogcommentdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a comment on an attendance log
    # @param token [String] The authentication token.
    # @param id [String] The id of the comment to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def attendancelogcommentget(token, id, opts = {})
      attendancelogcommentget_with_http_info(token, id, opts)
      nil
    end

    # View a comment on an attendance log
    # @param token [String] The authentication token.
    # @param id [String] The id of the comment to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogcommentget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogcommentget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.attendancelogcommentget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.attendancelogcommentget"
      end
      # resource path
      local_var_path = '/attendancelogcommentget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogcommentget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the comments on a specific attendance log
    # @param attendancelog [String] The id of the attendance log whose comments have to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [nil]
    def attendancelogcommentlist(attendancelog, opts = {})
      attendancelogcommentlist_with_http_info(attendancelog, opts)
      nil
    end

    # View all the comments on a specific attendance log
    # @param attendancelog [String] The id of the attendance log whose comments have to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogcommentlist_with_http_info(attendancelog, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogcommentlist ...'
      end
      # verify the required parameter 'attendancelog' is set
      if @api_client.config.client_side_validation && attendancelog.nil?
        fail ArgumentError, "Missing the required parameter 'attendancelog' when calling DefaultApi.attendancelogcommentlist"
      end
      # resource path
      local_var_path = '/attendancelogcommentlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'attendancelog'] = attendancelog
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogcommentlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save a comment on an attendance log
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def attendancelogcommentsave(opts = {})
      attendancelogcommentsave_with_http_info(opts)
      nil
    end

    # Save a comment on an attendance log
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogcommentsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogcommentsave ...'
      end
      # resource path
      local_var_path = '/attendancelogcommentsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogcommentsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an attendance log
    # Allows the user to delete an existing attendance log.
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def attendancelogdelete(token, id, opts = {})
      attendancelogdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete an attendance log
    # Allows the user to delete an existing attendance log.
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.attendancelogdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.attendancelogdelete"
      end
      # resource path
      local_var_path = '/attendancelogdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of an attendance log
    # Allows the user to view an individual attendance log and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def attendancelogget(token, id, opts = {})
      attendancelogget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of an attendance log
    # Allows the user to view an individual attendance log and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.attendancelogget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.attendancelogget"
      end
      # resource path
      local_var_path = '/attendancelogget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of an attendance log's swipe history
    # Allows the user to view the swipes of an individual attendance logs (sign ins and sign outs).
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def attendanceloggetchangehistory(token, id, opts = {})
      attendanceloggetchangehistory_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of an attendance log&#39;s swipe history
    # Allows the user to view the swipes of an individual attendance logs (sign ins and sign outs).
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendanceloggetchangehistory_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendanceloggetchangehistory ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.attendanceloggetchangehistory"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.attendanceloggetchangehistory"
      end
      # resource path
      local_var_path = '/attendanceloggetchangehistory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendanceloggetchangehistory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of attendance logs
    # Allows the user to view the list of all attendance logs in the location or locations in which the user is scoped.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
    # @option opts [String] :userid The user ID of the user to get the logs.
    # @return [nil]
    def attendanceloglist(from, count, opts = {})
      attendanceloglist_with_http_info(from, count, opts)
      nil
    end

    # View a list of attendance logs
    # Allows the user to view the list of all attendance logs in the location or locations in which the user is scoped.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
    # @option opts [String] :userid The user ID of the user to get the logs.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendanceloglist_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendanceloglist ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.attendanceloglist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.attendanceloglist"
      end
      # resource path
      local_var_path = '/attendanceloglist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'userid'] = opts[:'userid'] if !opts[:'userid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendanceloglist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the attendance logs of the current user
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
    # @return [nil]
    def attendanceloglistmine(from, count, opts = {})
      attendanceloglistmine_with_http_info(from, count, opts)
      nil
    end

    # Gets the attendance logs of the current user
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendanceloglistmine_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendanceloglistmine ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.attendanceloglistmine"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.attendanceloglistmine"
      end
      # resource path
      local_var_path = '/attendanceloglistmine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendanceloglistmine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the attendance logs that the current user is involved in as staff
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
    # @return [nil]
    def attendancelogliststaff(from, count, opts = {})
      attendancelogliststaff_with_http_info(from, count, opts)
      nil
    end

    # Gets the attendance logs that the current user is involved in as staff
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :filter Filter the logs, valid values are: invalid, not-signed-in, not-signed-out, stayed-less-than-required, out-of-event, valid.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogliststaff_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogliststaff ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.attendancelogliststaff"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.attendancelogliststaff"
      end
      # resource path
      local_var_path = '/attendancelogliststaff'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogliststaff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit an attendance log
    # Allows the user to create or edit an attendance log.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def attendancelogsave(opts = {})
      attendancelogsave_with_http_info(opts)
      nil
    end

    # Create or edit an attendance log
    # Allows the user to create or edit an attendance log.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogsave ...'
      end
      # resource path
      local_var_path = '/attendancelogsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sign out an attendance log
    # Allows the user to sign out am attendance log from the Who's In page.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the attendance log to sign-out.
    # @option opts [String] :location The id of the location to filter the users to sign out.
    # @option opts [String] :event The id of the event to filter the users to sign out.
    # @option opts [DateTime] :datetime Specifies the date and time when the specified logs have to be signed out.
    # @return [nil]
    def attendancelogsignout(token, opts = {})
      attendancelogsignout_with_http_info(token, opts)
      nil
    end

    # Sign out an attendance log
    # Allows the user to sign out am attendance log from the Who&#39;s In page.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the attendance log to sign-out.
    # @option opts [String] :location The id of the location to filter the users to sign out.
    # @option opts [String] :event The id of the event to filter the users to sign out.
    # @option opts [DateTime] :datetime Specifies the date and time when the specified logs have to be signed out.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogsignout_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogsignout ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.attendancelogsignout"
      end
      # resource path
      local_var_path = '/attendancelogsignout'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?
      query_params[:'datetime'] = opts[:'datetime'] if !opts[:'datetime'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogsignout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View who's in a location
    # Allows the user to view the Who's In page and view all users who are logged into locations in which the user is scoped.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :location The id of the location to search for users that are in.
    # @option opts [String] :event The id of the event to search for users that are in.
    # @option opts [String] :sorting Field to sort by. Either first-name, last-name or sign-in-time.
    # @option opts [String] :roles The comma-separated list of ids of the roles to search for users that are in.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @option opts [String] :extensions A JSON array containing the extension filters (i.e [{name: &#39;nametofilter&#39;, value: &#39;valuetofilter&#39;}]).
    # @option opts [Boolean] :export True to export the results as CSV
    # @return [nil]
    def attendancelogwhosin(from, count, opts = {})
      attendancelogwhosin_with_http_info(from, count, opts)
      nil
    end

    # View who&#39;s in a location
    # Allows the user to view the Who&#39;s In page and view all users who are logged into locations in which the user is scoped.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :location The id of the location to search for users that are in.
    # @option opts [String] :event The id of the event to search for users that are in.
    # @option opts [String] :sorting Field to sort by. Either first-name, last-name or sign-in-time.
    # @option opts [String] :roles The comma-separated list of ids of the roles to search for users that are in.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @option opts [String] :extensions A JSON array containing the extension filters (i.e [{name: &#39;nametofilter&#39;, value: &#39;valuetofilter&#39;}]).
    # @option opts [Boolean] :export True to export the results as CSV
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancelogwhosin_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancelogwhosin ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.attendancelogwhosin"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.attendancelogwhosin"
      end
      # resource path
      local_var_path = '/attendancelogwhosin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'roles'] = opts[:'roles'] if !opts[:'roles'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?
      query_params[:'extensions'] = opts[:'extensions'] if !opts[:'extensions'].nil?
      query_params[:'export'] = opts[:'export'] if !opts[:'export'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancelogwhosin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an attendance restriction
    # Allows the user to delete an existing attendance restriction.
    # @param token [String] The authentication token.
    # @param id [String] The id of the restriction to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def attendancerestrictiondelete(token, id, opts = {})
      attendancerestrictiondelete_with_http_info(token, id, opts)
      nil
    end

    # Delete an attendance restriction
    # Allows the user to delete an existing attendance restriction.
    # @param token [String] The authentication token.
    # @param id [String] The id of the restriction to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancerestrictiondelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancerestrictiondelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.attendancerestrictiondelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.attendancerestrictiondelete"
      end
      # resource path
      local_var_path = '/attendancerestrictiondelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancerestrictiondelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of an attendance restriction
    # Allows the user to view an individual attendance restriction and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the restriction to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def attendancerestrictionget(token, id, opts = {})
      attendancerestrictionget_with_http_info(token, id, opts)
      nil
    end

    # View details of an attendance restriction
    # Allows the user to view an individual attendance restriction and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the restriction to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancerestrictionget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancerestrictionget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.attendancerestrictionget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.attendancerestrictionget"
      end
      # resource path
      local_var_path = '/attendancerestrictionget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancerestrictionget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of attendance restrictions
    # Allows the user to view the list of all attendance restrictions.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def attendancerestrictionlist(token, from, count, opts = {})
      attendancerestrictionlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of attendance restrictions
    # Allows the user to view the list of all attendance restrictions.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancerestrictionlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancerestrictionlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.attendancerestrictionlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.attendancerestrictionlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.attendancerestrictionlist"
      end
      # resource path
      local_var_path = '/attendancerestrictionlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancerestrictionlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit an attendance restriction
    # Allows the user to create or edit an attendance restriction.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def attendancerestrictionsave(opts = {})
      attendancerestrictionsave_with_http_info(opts)
      nil
    end

    # Create or edit an attendance restriction
    # Allows the user to create or edit an attendance restriction.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def attendancerestrictionsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.attendancerestrictionsave ...'
      end
      # resource path
      local_var_path = '/attendancerestrictionsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#attendancerestrictionsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a beacon profile
    # Allows the user to delete an existing beacon profile.
    # @param token [String] The authentication token.
    # @param id [String] The id of the beacon to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def beacondelete(token, id, opts = {})
      beacondelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a beacon profile
    # Allows the user to delete an existing beacon profile.
    # @param token [String] The authentication token.
    # @param id [String] The id of the beacon to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def beacondelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.beacondelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.beacondelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.beacondelete"
      end
      # resource path
      local_var_path = '/beacondelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#beacondelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable beacon support account wide
    # Allows the user to enable or disable beacon usage account wide.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def beacondisable(token, opts = {})
      beacondisable_with_http_info(token, opts)
      nil
    end

    # Disable beacon support account wide
    # Allows the user to enable or disable beacon usage account wide.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def beacondisable_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.beacondisable ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.beacondisable"
      end
      # resource path
      local_var_path = '/beacondisable'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#beacondisable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a beacon profile
    # Allows the user to view an individual beacon profile and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the beacon to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def beaconget(token, id, opts = {})
      beaconget_with_http_info(token, id, opts)
      nil
    end

    # View details of a beacon profile
    # Allows the user to view an individual beacon profile and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the beacon to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def beaconget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.beaconget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.beaconget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.beaconget"
      end
      # resource path
      local_var_path = '/beaconget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#beaconget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the sign-in stations assigned to specific beacons.
    # @param token [String] The authentication token.
    # @param beacons [String] A JSON array containg the beacons data (region, minor and major) values.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def beacongetlocations(token, beacons, opts = {})
      beacongetlocations_with_http_info(token, beacons, opts)
      nil
    end

    # Get the sign-in stations assigned to specific beacons.
    # @param token [String] The authentication token.
    # @param beacons [String] A JSON array containg the beacons data (region, minor and major) values.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def beacongetlocations_with_http_info(token, beacons, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.beacongetlocations ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.beacongetlocations"
      end
      # verify the required parameter 'beacons' is set
      if @api_client.config.client_side_validation && beacons.nil?
        fail ArgumentError, "Missing the required parameter 'beacons' when calling DefaultApi.beacongetlocations"
      end
      # resource path
      local_var_path = '/beacongetlocations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'beacons'] = beacons

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#beacongetlocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the location settings in the specified sign-in station.
    # @param token [String] The authentication token.
    # @param station [String] The id of the sign-in station whose location information has to be retrieved.
    # @param location [String] The id of the location whose information has to be retrieved.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def beacongetstationlocation(token, station, location, opts = {})
      beacongetstationlocation_with_http_info(token, station, location, opts)
      nil
    end

    # Get the location settings in the specified sign-in station.
    # @param token [String] The authentication token.
    # @param station [String] The id of the sign-in station whose location information has to be retrieved.
    # @param location [String] The id of the location whose information has to be retrieved.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def beacongetstationlocation_with_http_info(token, station, location, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.beacongetstationlocation ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.beacongetstationlocation"
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.beacongetstationlocation"
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling DefaultApi.beacongetstationlocation"
      end
      # resource path
      local_var_path = '/beacongetstationlocation'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'station'] = station
      query_params[:'location'] = location

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#beacongetstationlocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the identifier for the account's beacon region (for sign-in stations).
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def beacongetuuid(token, opts = {})
      beacongetuuid_with_http_info(token, opts)
      nil
    end

    # View the identifier for the account&#39;s beacon region (for sign-in stations).
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def beacongetuuid_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.beacongetuuid ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.beacongetuuid"
      end
      # resource path
      local_var_path = '/beacongetuuid'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#beacongetuuid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of beacon profiles
    # Allows the user to view the list of all beacon profiles without their basic details.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def beaconlist(token, from, count, opts = {})
      beaconlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of beacon profiles
    # Allows the user to view the list of all beacon profiles without their basic details.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def beaconlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.beaconlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.beaconlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.beaconlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.beaconlist"
      end
      # resource path
      local_var_path = '/beaconlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#beaconlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of beacon profiles with their characteristics
    # Allows the user to view the list of all beacon profiles with their basic details.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def beaconlistprofiles(token, opts = {})
      beaconlistprofiles_with_http_info(token, opts)
      nil
    end

    # View a list of beacon profiles with their characteristics
    # Allows the user to view the list of all beacon profiles with their basic details.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def beaconlistprofiles_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.beaconlistprofiles ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.beaconlistprofiles"
      end
      # resource path
      local_var_path = '/beaconlistprofiles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#beaconlistprofiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate or reset the identifier for the account's beacon region.
    # Allows the user to reset the identifier for the beacon region, generally not necessary.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def beaconresetuuid(token, opts = {})
      beaconresetuuid_with_http_info(token, opts)
      nil
    end

    # Generate or reset the identifier for the account&#39;s beacon region.
    # Allows the user to reset the identifier for the beacon region, generally not necessary.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def beaconresetuuid_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.beaconresetuuid ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.beaconresetuuid"
      end
      # resource path
      local_var_path = '/beaconresetuuid'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#beaconresetuuid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a beacon profile
    # Allows the user to create or edit a beacon profile.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def beaconsave(opts = {})
      beaconsave_with_http_info(opts)
      nil
    end

    # Create or edit a beacon profile
    # Allows the user to create or edit a beacon profile.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def beaconsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.beaconsave ...'
      end
      # resource path
      local_var_path = '/beaconsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#beaconsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if there's location available to sign-in / out.
    # @param token [String] The authentication token.
    # @param beacons [String] A JSON array containg the beacons data (region, minor and major) values.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def beaconscanlocations(token, beacons, opts = {})
      beaconscanlocations_with_http_info(token, beacons, opts)
      nil
    end

    # Check if there&#39;s location available to sign-in / out.
    # @param token [String] The authentication token.
    # @param beacons [String] A JSON array containg the beacons data (region, minor and major) values.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def beaconscanlocations_with_http_info(token, beacons, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.beaconscanlocations ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.beaconscanlocations"
      end
      # verify the required parameter 'beacons' is set
      if @api_client.config.client_side_validation && beacons.nil?
        fail ArgumentError, "Missing the required parameter 'beacons' when calling DefaultApi.beaconscanlocations"
      end
      # resource path
      local_var_path = '/beaconscanlocations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'beacons'] = beacons

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#beaconscanlocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the identifier for the account's beacon region (for sign-in stations).
    # Allows the user to set the identifier for the account's beacon regions for sign-in stations, generally not necessary as each sign-in station profile generates its own region.
    # @param token [String] The authentication token.
    # @param id [String] The custom region UUID.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def beaconsetuuid(token, id, opts = {})
      beaconsetuuid_with_http_info(token, id, opts)
      nil
    end

    # Set the identifier for the account&#39;s beacon region (for sign-in stations).
    # Allows the user to set the identifier for the account&#39;s beacon regions for sign-in stations, generally not necessary as each sign-in station profile generates its own region.
    # @param token [String] The authentication token.
    # @param id [String] The custom region UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def beaconsetuuid_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.beaconsetuuid ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.beaconsetuuid"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.beaconsetuuid"
      end
      # resource path
      local_var_path = '/beaconsetuuid'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#beaconsetuuid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the beacon regions defined for silent tracking
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def beaconsilentregions(token, opts = {})
      beaconsilentregions_with_http_info(token, opts)
      nil
    end

    # View all the beacon regions defined for silent tracking
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def beaconsilentregions_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.beaconsilentregions ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.beaconsilentregions"
      end
      # resource path
      local_var_path = '/beaconsilentregions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#beaconsilentregions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sign-in silently from the location specified by a beacon
    # @param token [String] The authentication token.
    # @param uuid [String] The id of the region the user is in.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def beaconsilentsignin(token, uuid, opts = {})
      beaconsilentsignin_with_http_info(token, uuid, opts)
      nil
    end

    # Sign-in silently from the location specified by a beacon
    # @param token [String] The authentication token.
    # @param uuid [String] The id of the region the user is in.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def beaconsilentsignin_with_http_info(token, uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.beaconsilentsignin ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.beaconsilentsignin"
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.beaconsilentsignin"
      end
      # resource path
      local_var_path = '/beaconsilentsignin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'uuid'] = uuid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#beaconsilentsignin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sign-out silently from the location specified by a beacon
    # @param token [String] The authentication token.
    # @param uuid [String] The id of the region the user has left.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def beaconsilentsignout(token, uuid, opts = {})
      beaconsilentsignout_with_http_info(token, uuid, opts)
      nil
    end

    # Sign-out silently from the location specified by a beacon
    # @param token [String] The authentication token.
    # @param uuid [String] The id of the region the user has left.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def beaconsilentsignout_with_http_info(token, uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.beaconsilentsignout ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.beaconsilentsignout"
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.beaconsilentsignout"
      end
      # resource path
      local_var_path = '/beaconsilentsignout'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'uuid'] = uuid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#beaconsilentsignout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get background job status
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :jobid The ID of the job to get the status. 10 most recent will be returned if not specified.
    # @option opts [String] :jobtype The job type to filter by.
    # @return [nil]
    def bgjobgetstatus(token, opts = {})
      bgjobgetstatus_with_http_info(token, opts)
      nil
    end

    # Get background job status
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :jobid The ID of the job to get the status. 10 most recent will be returned if not specified.
    # @option opts [String] :jobtype The job type to filter by.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def bgjobgetstatus_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.bgjobgetstatus ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.bgjobgetstatus"
      end
      # resource path
      local_var_path = '/bgjobgetstatus'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'jobid'] = opts[:'jobid'] if !opts[:'jobid'].nil?
      query_params[:'jobtype'] = opts[:'jobtype'] if !opts[:'jobtype'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#bgjobgetstatus\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a captcha challenge that the user must complete to do certain requests.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def captchagetchallenge(opts = {})
      captchagetchallenge_with_http_info(opts)
      nil
    end

    # Gets a captcha challenge that the user must complete to do certain requests.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def captchagetchallenge_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.captchagetchallenge ...'
      end
      # resource path
      local_var_path = '/captchagetchallenge'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#captchagetchallenge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a captcha image that the user must complete to do certain requests.
    # @param captchatoken [String] The captcha token or ID returned by the captcha.getchallenge action
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def captchagetimage(captchatoken, opts = {})
      captchagetimage_with_http_info(captchatoken, opts)
      nil
    end

    # Gets a captcha image that the user must complete to do certain requests.
    # @param captchatoken [String] The captcha token or ID returned by the captcha.getchallenge action
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def captchagetimage_with_http_info(captchatoken, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.captchagetimage ...'
      end
      # verify the required parameter 'captchatoken' is set
      if @api_client.config.client_side_validation && captchatoken.nil?
        fail ArgumentError, "Missing the required parameter 'captchatoken' when calling DefaultApi.captchagetimage"
      end
      # resource path
      local_var_path = '/captchagetimage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'captchatoken'] = captchatoken

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#captchagetimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the application change log
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def changelog(token, opts = {})
      changelog_with_http_info(token, opts)
      nil
    end

    # Get the application change log
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def changelog_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.changelog ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.changelog"
      end
      # resource path
      local_var_path = '/changelog'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#changelog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get client
    # @param token [String] The authentication token.
    # @param client [String] The unique id of the client.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clientname The custom name of the client.
    # @return [nil]
    def clientget(token, client, opts = {})
      clientget_with_http_info(token, client, opts)
      nil
    end

    # Get client
    # @param token [String] The authentication token.
    # @param client [String] The unique id of the client.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clientname The custom name of the client.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clientget_with_http_info(token, client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.clientget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.clientget"
      end
      # verify the required parameter 'client' is set
      if @api_client.config.client_side_validation && client.nil?
        fail ArgumentError, "Missing the required parameter 'client' when calling DefaultApi.clientget"
      end
      # resource path
      local_var_path = '/clientget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'client'] = client
      query_params[:'clientname'] = opts[:'clientname'] if !opts[:'clientname'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#clientget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the clients of the specified conference
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clientlist(token, from, count, opts = {})
      clientlist_with_http_info(token, from, count, opts)
      nil
    end

    # Gets the clients of the specified conference
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clientlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.clientlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.clientlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.clientlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.clientlist"
      end
      # resource path
      local_var_path = '/clientlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#clientlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a client
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def clientsave(opts = {})
      clientsave_with_http_info(opts)
      nil
    end

    # Saves a client
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clientsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.clientsave ...'
      end
      # resource path
      local_var_path = '/clientsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#clientsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a message to a client
    # @param token [String] The authentication token.
    # @param uniqueclientid [String] The unique id of the client.
    # @param message [String] The body of the message to send.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clientsendmessage(token, uniqueclientid, message, opts = {})
      clientsendmessage_with_http_info(token, uniqueclientid, message, opts)
      nil
    end

    # Send a message to a client
    # @param token [String] The authentication token.
    # @param uniqueclientid [String] The unique id of the client.
    # @param message [String] The body of the message to send.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clientsendmessage_with_http_info(token, uniqueclientid, message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.clientsendmessage ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.clientsendmessage"
      end
      # verify the required parameter 'uniqueclientid' is set
      if @api_client.config.client_side_validation && uniqueclientid.nil?
        fail ArgumentError, "Missing the required parameter 'uniqueclientid' when calling DefaultApi.clientsendmessage"
      end
      # verify the required parameter 'message' is set
      if @api_client.config.client_side_validation && message.nil?
        fail ArgumentError, "Missing the required parameter 'message' when calling DefaultApi.clientsendmessage"
      end
      # resource path
      local_var_path = '/clientsendmessage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'uniqueclientid'] = uniqueclientid
      query_params[:'message'] = message

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#clientsendmessage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sends an invitation to everyone to AccuCampus Communities
    # Allows the user to invite all other users to the AccuCampus Communities.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def communityinvite(token, opts = {})
      communityinvite_with_http_info(token, opts)
      nil
    end

    # Sends an invitation to everyone to AccuCampus Communities
    # Allows the user to invite all other users to the AccuCampus Communities.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def communityinvite_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.communityinvite ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.communityinvite"
      end
      # resource path
      local_var_path = '/communityinvite'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#communityinvite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sends an invitation for myself to AccuCampus Communities
    # Allows the user to access the AccuCampus Communities.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def communityjoin(token, opts = {})
      communityjoin_with_http_info(token, opts)
      nil
    end

    # Sends an invitation for myself to AccuCampus Communities
    # Allows the user to access the AccuCampus Communities.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def communityjoin_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.communityjoin ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.communityjoin"
      end
      # resource path
      local_var_path = '/communityjoin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#communityjoin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a compass category
    # Allows the user to delete an existing compass category.
    # @param token [String] The authentication token.
    # @param id [String] The id of the category to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def compasscategorydelete(token, id, opts = {})
      compasscategorydelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a compass category
    # Allows the user to delete an existing compass category.
    # @param token [String] The authentication token.
    # @param id [String] The id of the category to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def compasscategorydelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.compasscategorydelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.compasscategorydelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.compasscategorydelete"
      end
      # resource path
      local_var_path = '/compasscategorydelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#compasscategorydelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a compass category
    # Allows the user to view an indvidiaul compass category and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the category to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def compasscategoryget(token, id, opts = {})
      compasscategoryget_with_http_info(token, id, opts)
      nil
    end

    # View details of a compass category
    # Allows the user to view an indvidiaul compass category and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the category to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def compasscategoryget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.compasscategoryget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.compasscategoryget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.compasscategoryget"
      end
      # resource path
      local_var_path = '/compasscategoryget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#compasscategoryget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of compass categories
    # Allows the user to view the full list of compass categories.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from The first record to return.
    # @option opts [Integer] :count The max number of records to return.
    # @option opts [Boolean] :onlywithservices Specified whether only categories with services are returned or all.
    # @return [nil]
    def compasscategorylist(token, opts = {})
      compasscategorylist_with_http_info(token, opts)
      nil
    end

    # View a list of compass categories
    # Allows the user to view the full list of compass categories.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from The first record to return.
    # @option opts [Integer] :count The max number of records to return.
    # @option opts [Boolean] :onlywithservices Specified whether only categories with services are returned or all.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def compasscategorylist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.compasscategorylist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.compasscategorylist"
      end
      # resource path
      local_var_path = '/compasscategorylist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'onlywithservices'] = opts[:'onlywithservices'] if !opts[:'onlywithservices'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#compasscategorylist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a compass category
    # Allows the user to create or edit a compass category.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def compasscategorysave(opts = {})
      compasscategorysave_with_http_info(opts)
      nil
    end

    # Create or edit a compass category
    # Allows the user to create or edit a compass category.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def compasscategorysave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.compasscategorysave ...'
      end
      # resource path
      local_var_path = '/compasscategorysave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#compasscategorysave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the services added to the compass
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category The id of the category to filter the services.
    # @return [nil]
    def compassservicelist(token, opts = {})
      compassservicelist_with_http_info(token, opts)
      nil
    end

    # View all the services added to the compass
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category The id of the category to filter the services.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def compassservicelist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.compassservicelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.compassservicelist"
      end
      # resource path
      local_var_path = '/compassservicelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#compassservicelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the locations where a service added to the compass is available
    # @param token [String] The authentication token.
    # @param serviceid [String] The id of the service to get its locations.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def compassservicelistlocations(token, serviceid, opts = {})
      compassservicelistlocations_with_http_info(token, serviceid, opts)
      nil
    end

    # View all the locations where a service added to the compass is available
    # @param token [String] The authentication token.
    # @param serviceid [String] The id of the service to get its locations.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def compassservicelistlocations_with_http_info(token, serviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.compassservicelistlocations ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.compassservicelistlocations"
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling DefaultApi.compassservicelistlocations"
      end
      # resource path
      local_var_path = '/compassservicelistlocations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'serviceid'] = serviceid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#compassservicelistlocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a computer
    # Allows the user to delete an existing computer.
    # @param token [String] The authentication token.
    # @param id [String] The unique device id of the computer to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def computerlabdeletecomputer(token, id, opts = {})
      computerlabdeletecomputer_with_http_info(token, id, opts)
      nil
    end

    # Delete a computer
    # Allows the user to delete an existing computer.
    # @param token [String] The authentication token.
    # @param id [String] The unique device id of the computer to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def computerlabdeletecomputer_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.computerlabdeletecomputer ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.computerlabdeletecomputer"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.computerlabdeletecomputer"
      end
      # resource path
      local_var_path = '/computerlabdeletecomputer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#computerlabdeletecomputer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a computer
    # Allows the user to search and view an individual computer and its details.
    # @param token [String] The authentication token.
    # @param id [String] The unique device id of the computer to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def computerlabgetcomputer(token, id, opts = {})
      computerlabgetcomputer_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a computer
    # Allows the user to search and view an individual computer and its details.
    # @param token [String] The authentication token.
    # @param id [String] The unique device id of the computer to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def computerlabgetcomputer_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.computerlabgetcomputer ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.computerlabgetcomputer"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.computerlabgetcomputer"
      end
      # resource path
      local_var_path = '/computerlabgetcomputer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#computerlabgetcomputer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Loads the settings for a computer lab
    # Loads the settings for a computer lab.
    # @param id [String] The id of the computer lab/location.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def computerlabgetsettings(id, opts = {})
      computerlabgetsettings_with_http_info(id, opts)
      nil
    end

    # Loads the settings for a computer lab
    # Loads the settings for a computer lab.
    # @param id [String] The id of the computer lab/location.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def computerlabgetsettings_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.computerlabgetsettings ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.computerlabgetsettings"
      end
      # resource path
      local_var_path = '/computerlabgetsettings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#computerlabgetsettings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets whether a user is signed-in or not.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def computerlabissignedin(station, user, opts = {})
      computerlabissignedin_with_http_info(station, user, opts)
      nil
    end

    # Gets whether a user is signed-in or not.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def computerlabissignedin_with_http_info(station, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.computerlabissignedin ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.computerlabissignedin"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.computerlabissignedin"
      end
      # resource path
      local_var_path = '/computerlabissignedin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'user'] = user

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#computerlabissignedin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of computers
    # Allows the user to view the list of all computers.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The id of the location whose computers have to be returned.
    # @option opts [Boolean] :freeonly If true, only free computers will be returned.
    # @return [nil]
    def computerlablistcomputers(token, from, count, opts = {})
      computerlablistcomputers_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of computers
    # Allows the user to view the list of all computers.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The id of the location whose computers have to be returned.
    # @option opts [Boolean] :freeonly If true, only free computers will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def computerlablistcomputers_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.computerlablistcomputers ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.computerlablistcomputers"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.computerlablistcomputers"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.computerlablistcomputers"
      end
      # resource path
      local_var_path = '/computerlablistcomputers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'freeonly'] = opts[:'freeonly'] if !opts[:'freeonly'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#computerlablistcomputers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of the locations that use the Computer Lab add-on
    # Allows the user to view the list of all labs.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def computerlablistlabs(token, opts = {})
      computerlablistlabs_with_http_info(token, opts)
      nil
    end

    # View a list of the locations that use the Computer Lab add-on
    # Allows the user to view the list of all labs.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def computerlablistlabs_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.computerlablistlabs ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.computerlablistlabs"
      end
      # resource path
      local_var_path = '/computerlablistlabs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#computerlablistlabs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of sign-in stations available for computer labs.
    # Allows the user to view the list of sign-in stations that are available for computer labs.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def computerlabliststations(token, opts = {})
      computerlabliststations_with_http_info(token, opts)
      nil
    end

    # View a list of sign-in stations available for computer labs.
    # Allows the user to view the list of sign-in stations that are available for computer labs.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def computerlabliststations_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.computerlabliststations ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.computerlabliststations"
      end
      # resource path
      local_var_path = '/computerlabliststations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#computerlabliststations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a computer
    # Allows the user to create or edit a computer.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def computerlabsavecomputer(opts = {})
      computerlabsavecomputer_with_http_info(opts)
      nil
    end

    # Create or edit a computer
    # Allows the user to create or edit a computer.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def computerlabsavecomputer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.computerlabsavecomputer ...'
      end
      # resource path
      local_var_path = '/computerlabsavecomputer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#computerlabsavecomputer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves the settings for a computer lab
    # Saves the settings for a computer lab.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def computerlabsavesettings(opts = {})
      computerlabsavesettings_with_http_info(opts)
      nil
    end

    # Saves the settings for a computer lab
    # Saves the settings for a computer lab.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def computerlabsavesettings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.computerlabsavesettings ...'
      end
      # resource path
      local_var_path = '/computerlabsavesettings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#computerlabsavesettings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save a new swipe from a computer in a computer lab.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def computerlabsaveswipe(opts = {})
      computerlabsaveswipe_with_http_info(opts)
      nil
    end

    # Save a new swipe from a computer in a computer lab.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def computerlabsaveswipe_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.computerlabsaveswipe ...'
      end
      # resource path
      local_var_path = '/computerlabsaveswipe'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#computerlabsaveswipe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a dead-end record group
    # Allows the user to delete a dead end record group.
    # @param token [String] The authentication token.
    # @param hierarchykey [String] The hierarchy key of the record to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deadendrecordingdelete(token, hierarchykey, opts = {})
      deadendrecordingdelete_with_http_info(token, hierarchykey, opts)
      nil
    end

    # Deletes a dead-end record group
    # Allows the user to delete a dead end record group.
    # @param token [String] The authentication token.
    # @param hierarchykey [String] The hierarchy key of the record to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def deadendrecordingdelete_with_http_info(token, hierarchykey, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.deadendrecordingdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.deadendrecordingdelete"
      end
      # verify the required parameter 'hierarchykey' is set
      if @api_client.config.client_side_validation && hierarchykey.nil?
        fail ArgumentError, "Missing the required parameter 'hierarchykey' when calling DefaultApi.deadendrecordingdelete"
      end
      # resource path
      local_var_path = '/deadendrecordingdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'hierarchykey'] = hierarchykey

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#deadendrecordingdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the recorded dead ends, if enabled
    # Allows the user to view the list of dead ends, provided dead end recording is enabled for the account.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deadendrecordinglist(token, opts = {})
      deadendrecordinglist_with_http_info(token, opts)
      nil
    end

    # Lists the recorded dead ends, if enabled
    # Allows the user to view the list of dead ends, provided dead end recording is enabled for the account.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def deadendrecordinglist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.deadendrecordinglist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.deadendrecordinglist"
      end
      # resource path
      local_var_path = '/deadendrecordinglist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#deadendrecordinglist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the comments for a specific dead end
    # Allows the user to view the comments made on dead end sessions.
    # @param token [String] The authentication token.
    # @param hierarchykey [String] The hierarchy key of the record to get the feedback.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deadendrecordinglistcomments(token, hierarchykey, opts = {})
      deadendrecordinglistcomments_with_http_info(token, hierarchykey, opts)
      nil
    end

    # Lists the comments for a specific dead end
    # Allows the user to view the comments made on dead end sessions.
    # @param token [String] The authentication token.
    # @param hierarchykey [String] The hierarchy key of the record to get the feedback.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def deadendrecordinglistcomments_with_http_info(token, hierarchykey, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.deadendrecordinglistcomments ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.deadendrecordinglistcomments"
      end
      # verify the required parameter 'hierarchykey' is set
      if @api_client.config.client_side_validation && hierarchykey.nil?
        fail ArgumentError, "Missing the required parameter 'hierarchykey' when calling DefaultApi.deadendrecordinglistcomments"
      end
      # resource path
      local_var_path = '/deadendrecordinglistcomments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'hierarchykey'] = hierarchykey

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#deadendrecordinglistcomments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a dead-end record
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def deadendrecordingsave(opts = {})
      deadendrecordingsave_with_http_info(opts)
      nil
    end

    # Saves a dead-end record
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def deadendrecordingsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.deadendrecordingsave ...'
      end
      # resource path
      local_var_path = '/deadendrecordingsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#deadendrecordingsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a college department
    # Allows the user to delete an existing college department.
    # @param token [String] The authentication token.
    # @param id [String] The id of the department to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def departmentdelete(token, id, opts = {})
      departmentdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a college department
    # Allows the user to delete an existing college department.
    # @param token [String] The authentication token.
    # @param id [String] The id of the department to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def departmentdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.departmentdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.departmentdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.departmentdelete"
      end
      # resource path
      local_var_path = '/departmentdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#departmentdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a college department
    # Allows the user to view an individual college department and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the department to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def departmentget(token, id, opts = {})
      departmentget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a college department
    # Allows the user to view an individual college department and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the department to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def departmentget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.departmentget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.departmentget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.departmentget"
      end
      # resource path
      local_var_path = '/departmentget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#departmentget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of college departments
    # Allows the user to view the full list of college departments.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def departmentlist(token, from, count, opts = {})
      departmentlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of college departments
    # Allows the user to view the full list of college departments.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def departmentlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.departmentlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.departmentlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.departmentlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.departmentlist"
      end
      # resource path
      local_var_path = '/departmentlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#departmentlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a college department
    # Allows the user to create or edit a college department.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def departmentsave(opts = {})
      departmentsave_with_http_info(opts)
      nil
    end

    # Create or edit a college department
    # Allows the user to create or edit a college department.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def departmentsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.departmentsave ...'
      end
      # resource path
      local_var_path = '/departmentsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#departmentsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the documentation
    # Retrieves the list of actions available in the system.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :excludeanonymous If true it excludes the anonymous actions from the returned list.
    # @return [nil]
    def doc(opts = {})
      doc_with_http_info(opts)
      nil
    end

    # Get the documentation
    # Retrieves the list of actions available in the system.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :excludeanonymous If true it excludes the anonymous actions from the returned list.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def doc_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.doc ...'
      end
      # resource path
      local_var_path = '/doc'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'excludeanonymous'] = opts[:'excludeanonymous'] if !opts[:'excludeanonymous'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#doc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds background image for the login
    # Allows the user to set the background image that all users will see when logging into an AccuCampus account not using SSO.
    # @param token [String] The authentication token.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param filename [String] The original filename, needed to process the file.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def easyloginaddbgimage(token, upload, filename, opts = {})
      easyloginaddbgimage_with_http_info(token, upload, filename, opts)
      nil
    end

    # Adds background image for the login
    # Allows the user to set the background image that all users will see when logging into an AccuCampus account not using SSO.
    # @param token [String] The authentication token.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param filename [String] The original filename, needed to process the file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def easyloginaddbgimage_with_http_info(token, upload, filename, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.easyloginaddbgimage ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.easyloginaddbgimage"
      end
      # verify the required parameter 'upload' is set
      if @api_client.config.client_side_validation && upload.nil?
        fail ArgumentError, "Missing the required parameter 'upload' when calling DefaultApi.easyloginaddbgimage"
      end
      # verify the required parameter 'filename' is set
      if @api_client.config.client_side_validation && filename.nil?
        fail ArgumentError, "Missing the required parameter 'filename' when calling DefaultApi.easyloginaddbgimage"
      end
      # resource path
      local_var_path = '/easyloginaddbgimage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'upload'] = upload
      query_params[:'filename'] = filename

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#easyloginaddbgimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit an event's sessions according to their schedule
    # Allows the user to edit event sessions.
    # @param token [String] The authentication token.
    # @param eventid [String] The id of the event to check.
    # @param autorepair [Boolean] True to automatically fix the invalid sessions.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventchecksessions(token, eventid, autorepair, opts = {})
      eventchecksessions_with_http_info(token, eventid, autorepair, opts)
      nil
    end

    # Edit an event&#39;s sessions according to their schedule
    # Allows the user to edit event sessions.
    # @param token [String] The authentication token.
    # @param eventid [String] The id of the event to check.
    # @param autorepair [Boolean] True to automatically fix the invalid sessions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventchecksessions_with_http_info(token, eventid, autorepair, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventchecksessions ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventchecksessions"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.eventchecksessions"
      end
      # verify the required parameter 'autorepair' is set
      if @api_client.config.client_side_validation && autorepair.nil?
        fail ArgumentError, "Missing the required parameter 'autorepair' when calling DefaultApi.eventchecksessions"
      end
      # resource path
      local_var_path = '/eventchecksessions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'eventid'] = eventid
      query_params[:'autorepair'] = autorepair

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventchecksessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a course
    # Allows the user to delete an existing course.
    # @param token [String] The authentication token.
    # @param id [String] The id of the event to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventdelete(token, id, opts = {})
      eventdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a course
    # Allows the user to delete an existing course.
    # @param token [String] The authentication token.
    # @param id [String] The id of the event to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.eventdelete"
      end
      # resource path
      local_var_path = '/eventdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a course
    # Allows the user to view an individual course and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the event to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventget(token, id, opts = {})
      eventget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a course
    # Allows the user to view an individual course and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the event to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.eventget"
      end
      # resource path
      local_var_path = '/eventget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of courses by date
    # Allows the user to view a list of courses by date.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The location to filter the events.
    # @option opts [DateTime] :date The date to filter the events. Today will be used if this parameter is omitted.
    # @option opts [String] :type Type of event to list.
    # @return [nil]
    def eventgetsessionsbydate(token, opts = {})
      eventgetsessionsbydate_with_http_info(token, opts)
      nil
    end

    # View a list of courses by date
    # Allows the user to view a list of courses by date.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The location to filter the events.
    # @option opts [DateTime] :date The date to filter the events. Today will be used if this parameter is omitted.
    # @option opts [String] :type Type of event to list.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventgetsessionsbydate_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventgetsessionsbydate ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventgetsessionsbydate"
      end
      # resource path
      local_var_path = '/eventgetsessionsbydate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventgetsessionsbydate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of courses
    # Allows the user to view the full list of courses.
    # @param token [String] The authentication token.
    # @param from [String] The first record to return.
    # @param count [String] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false.
    # @option opts [String] :termid Id of the term to list the events. Null to list all events.
    # @return [nil]
    def eventlist(token, from, count, opts = {})
      eventlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of courses
    # Allows the user to view the full list of courses.
    # @param token [String] The authentication token.
    # @param from [String] The first record to return.
    # @param count [String] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false.
    # @option opts [String] :termid Id of the term to list the events. Null to list all events.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.eventlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.eventlist"
      end
      # resource path
      local_var_path = '/eventlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'summaryonly'] = opts[:'summaryonly'] if !opts[:'summaryonly'].nil?
      query_params[:'termid'] = opts[:'termid'] if !opts[:'termid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of courses I am registered to
    # Allows the user to view the courses they are registered to.
    # @param token [String] The authentication token.
    # @param from [String] The first record to return.
    # @param count [String] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false.
    # @option opts [String] :termid Id of the term to list the events. Null to list all events.
    # @return [nil]
    def eventlistregistered(token, from, count, opts = {})
      eventlistregistered_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of courses I am registered to
    # Allows the user to view the courses they are registered to.
    # @param token [String] The authentication token.
    # @param from [String] The first record to return.
    # @param count [String] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false.
    # @option opts [String] :termid Id of the term to list the events. Null to list all events.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventlistregistered_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventlistregistered ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventlistregistered"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.eventlistregistered"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.eventlistregistered"
      end
      # resource path
      local_var_path = '/eventlistregistered'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'summaryonly'] = opts[:'summaryonly'] if !opts[:'summaryonly'].nil?
      query_params[:'termid'] = opts[:'termid'] if !opts[:'termid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventlistregistered\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register current user to a course
    # Allows the user to make themselves available for individual courses.
    # @param token [String] The authentication token.
    # @param eventid [String] The id of the event.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventregaddme(token, eventid, listname, opts = {})
      eventregaddme_with_http_info(token, eventid, listname, opts)
      nil
    end

    # Register current user to a course
    # Allows the user to make themselves available for individual courses.
    # @param token [String] The authentication token.
    # @param eventid [String] The id of the event.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventregaddme_with_http_info(token, eventid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventregaddme ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventregaddme"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.eventregaddme"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventregaddme"
      end
      # resource path
      local_var_path = '/eventregaddme'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'eventid'] = eventid
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventregaddme\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register current user to all courses
    # Allows the user to make themselves available for all courses.
    # @param token [String] The authentication token.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventregaddmetoall(token, listname, opts = {})
      eventregaddmetoall_with_http_info(token, listname, opts)
      nil
    end

    # Register current user to all courses
    # Allows the user to make themselves available for all courses.
    # @param token [String] The authentication token.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventregaddmetoall_with_http_info(token, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventregaddmetoall ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventregaddmetoall"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventregaddmetoall"
      end
      # resource path
      local_var_path = '/eventregaddmetoall'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventregaddmetoall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register current user to a course group
    # Allows the user to make themselves available for a course group.
    # @param token [String] The authentication token.
    # @param codegroup [String] The code used to group events.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventregaddmetogroup(token, codegroup, listname, opts = {})
      eventregaddmetogroup_with_http_info(token, codegroup, listname, opts)
      nil
    end

    # Register current user to a course group
    # Allows the user to make themselves available for a course group.
    # @param token [String] The authentication token.
    # @param codegroup [String] The code used to group events.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventregaddmetogroup_with_http_info(token, codegroup, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventregaddmetogroup ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventregaddmetogroup"
      end
      # verify the required parameter 'codegroup' is set
      if @api_client.config.client_side_validation && codegroup.nil?
        fail ArgumentError, "Missing the required parameter 'codegroup' when calling DefaultApi.eventregaddmetogroup"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventregaddmetogroup"
      end
      # resource path
      local_var_path = '/eventregaddmetogroup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'codegroup'] = codegroup
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventregaddmetogroup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register a user to a course for attendance
    # Allows the user to register a user to a course.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param eventid [String] The id of the event.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventregadduser(token, userid, eventid, listname, opts = {})
      eventregadduser_with_http_info(token, userid, eventid, listname, opts)
      nil
    end

    # Register a user to a course for attendance
    # Allows the user to register a user to a course.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param eventid [String] The id of the event.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventregadduser_with_http_info(token, userid, eventid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventregadduser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventregadduser"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.eventregadduser"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.eventregadduser"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventregadduser"
      end
      # resource path
      local_var_path = '/eventregadduser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'eventid'] = eventid
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventregadduser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register a user to assist with all courses
    # Allows the user to make a staff member available to assist with all courses.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventregaddusertoall(token, userid, listname, opts = {})
      eventregaddusertoall_with_http_info(token, userid, listname, opts)
      nil
    end

    # Register a user to assist with all courses
    # Allows the user to make a staff member available to assist with all courses.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventregaddusertoall_with_http_info(token, userid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventregaddusertoall ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventregaddusertoall"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.eventregaddusertoall"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventregaddusertoall"
      end
      # resource path
      local_var_path = '/eventregaddusertoall'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventregaddusertoall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register a user to an course group
    # Allows the user to make a staff member available for a course group.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param codegroup [String] The code used to group events.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventregaddusertogroup(token, userid, codegroup, listname, opts = {})
      eventregaddusertogroup_with_http_info(token, userid, codegroup, listname, opts)
      nil
    end

    # Register a user to an course group
    # Allows the user to make a staff member available for a course group.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param codegroup [String] The code used to group events.
    # @param listname [String] The name of the list where the user has to be registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventregaddusertogroup_with_http_info(token, userid, codegroup, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventregaddusertogroup ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventregaddusertogroup"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.eventregaddusertogroup"
      end
      # verify the required parameter 'codegroup' is set
      if @api_client.config.client_side_validation && codegroup.nil?
        fail ArgumentError, "Missing the required parameter 'codegroup' when calling DefaultApi.eventregaddusertogroup"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventregaddusertogroup"
      end
      # resource path
      local_var_path = '/eventregaddusertogroup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'codegroup'] = codegroup
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventregaddusertogroup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View course registration by user
    # Allows the user to view all courses a given user is registered to, provided they have permission to view that user.
    # @param token [String] The authentication token.
    # @param userid [String] The user id to list events.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :termid The term id to list events.
    # @option opts [String] :namefilter The value used to filter the events by name.
    # @return [nil]
    def eventreggetevents(token, userid, listname, opts = {})
      eventreggetevents_with_http_info(token, userid, listname, opts)
      nil
    end

    # View course registration by user
    # Allows the user to view all courses a given user is registered to, provided they have permission to view that user.
    # @param token [String] The authentication token.
    # @param userid [String] The user id to list events.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :termid The term id to list events.
    # @option opts [String] :namefilter The value used to filter the events by name.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreggetevents_with_http_info(token, userid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventreggetevents ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventreggetevents"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.eventreggetevents"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventreggetevents"
      end
      # resource path
      local_var_path = '/eventreggetevents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'listname'] = listname
      query_params[:'termid'] = opts[:'termid'] if !opts[:'termid'].nil?
      query_params[:'namefilter'] = opts[:'namefilter'] if !opts[:'namefilter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventreggetevents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the course group registrations of a user
    # Allows the user to view the course groups a staff member is available for.
    # @param token [String] The authentication token.
    # @param userid [String] The user id to list events.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreggetgroups(token, userid, listname, opts = {})
      eventreggetgroups_with_http_info(token, userid, listname, opts)
      nil
    end

    # Lists the course group registrations of a user
    # Allows the user to view the course groups a staff member is available for.
    # @param token [String] The authentication token.
    # @param userid [String] The user id to list events.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreggetgroups_with_http_info(token, userid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventreggetgroups ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventreggetgroups"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.eventreggetgroups"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventreggetgroups"
      end
      # resource path
      local_var_path = '/eventreggetgroups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventreggetgroups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the event registrations of the current user
    # @param token [String] The authentication token.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :termid The term id to list events.
    # @option opts [String] :namefilter The value used to filter the events by name.
    # @return [nil]
    def eventreggetmyevents(token, listname, opts = {})
      eventreggetmyevents_with_http_info(token, listname, opts)
      nil
    end

    # View the event registrations of the current user
    # @param token [String] The authentication token.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :termid The term id to list events.
    # @option opts [String] :namefilter The value used to filter the events by name.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreggetmyevents_with_http_info(token, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventreggetmyevents ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventreggetmyevents"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventreggetmyevents"
      end
      # resource path
      local_var_path = '/eventreggetmyevents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'listname'] = listname
      query_params[:'termid'] = opts[:'termid'] if !opts[:'termid'].nil?
      query_params[:'namefilter'] = opts[:'namefilter'] if !opts[:'namefilter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventreggetmyevents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all current user registrations to course groups
    # Allows the user to view all his registrations to course groups.
    # @param token [String] The authentication token.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreggetmygroups(token, listname, opts = {})
      eventreggetmygroups_with_http_info(token, listname, opts)
      nil
    end

    # View all current user registrations to course groups
    # Allows the user to view all his registrations to course groups.
    # @param token [String] The authentication token.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreggetmygroups_with_http_info(token, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventreggetmygroups ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventreggetmygroups"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventreggetmygroups"
      end
      # resource path
      local_var_path = '/eventreggetmygroups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventreggetmygroups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View course registration
    # Allows the user to view all users registered for an individual course.
    # @param token [String] The authentication token.
    # @param eventid [String] The event id to list users.
    # @param listname [String] The name of the list to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def eventreggetusers(token, eventid, listname, opts = {})
      eventreggetusers_with_http_info(token, eventid, listname, opts)
      nil
    end

    # View course registration
    # Allows the user to view all users registered for an individual course.
    # @param token [String] The authentication token.
    # @param eventid [String] The event id to list users.
    # @param listname [String] The name of the list to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreggetusers_with_http_info(token, eventid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventreggetusers ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventreggetusers"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.eventreggetusers"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventreggetusers"
      end
      # resource path
      local_var_path = '/eventreggetusers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'eventid'] = eventid
      query_params[:'listname'] = listname
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventreggetusers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the registrations for a course group
    # Allows the user the get the staff members registered to a specific course group
    # @param token [String] The authentication token.
    # @param codegroup [String] The code group to list users.
    # @param listname [String] The name of the list to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreggetusersfromgroup(token, codegroup, listname, opts = {})
      eventreggetusersfromgroup_with_http_info(token, codegroup, listname, opts)
      nil
    end

    # Lists the registrations for a course group
    # Allows the user the get the staff members registered to a specific course group
    # @param token [String] The authentication token.
    # @param codegroup [String] The code group to list users.
    # @param listname [String] The name of the list to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreggetusersfromgroup_with_http_info(token, codegroup, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventreggetusersfromgroup ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventreggetusersfromgroup"
      end
      # verify the required parameter 'codegroup' is set
      if @api_client.config.client_side_validation && codegroup.nil?
        fail ArgumentError, "Missing the required parameter 'codegroup' when calling DefaultApi.eventreggetusersfromgroup"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventreggetusersfromgroup"
      end
      # resource path
      local_var_path = '/eventreggetusersfromgroup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'codegroup'] = codegroup
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventreggetusersfromgroup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the users that are registered to all courses
    # Allows the user to view all staff members available for all courses.
    # @param token [String] The authentication token.
    # @param listname [String] The name of the list to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventreggetuserstoall(token, listname, opts = {})
      eventreggetuserstoall_with_http_info(token, listname, opts)
      nil
    end

    # View the users that are registered to all courses
    # Allows the user to view all staff members available for all courses.
    # @param token [String] The authentication token.
    # @param listname [String] The name of the list to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventreggetuserstoall_with_http_info(token, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventreggetuserstoall ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventreggetuserstoall"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventreggetuserstoall"
      end
      # resource path
      local_var_path = '/eventreggetuserstoall'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventreggetuserstoall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unregister current user from a course
    # Allows the user to remove themselves from registration to a course.
    # @param token [String] The authentication token.
    # @param eventid [String] The id of the event.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventregremoveme(token, eventid, listname, opts = {})
      eventregremoveme_with_http_info(token, eventid, listname, opts)
      nil
    end

    # Unregister current user from a course
    # Allows the user to remove themselves from registration to a course.
    # @param token [String] The authentication token.
    # @param eventid [String] The id of the event.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventregremoveme_with_http_info(token, eventid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventregremoveme ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventregremoveme"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.eventregremoveme"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventregremoveme"
      end
      # resource path
      local_var_path = '/eventregremoveme'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'eventid'] = eventid
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventregremoveme\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove current user from the registration to all courses
    # Allows the user to remove themselves from availability to all courses.
    # @param token [String] The authentication token.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventregremovemefromall(token, listname, opts = {})
      eventregremovemefromall_with_http_info(token, listname, opts)
      nil
    end

    # Remove current user from the registration to all courses
    # Allows the user to remove themselves from availability to all courses.
    # @param token [String] The authentication token.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventregremovemefromall_with_http_info(token, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventregremovemefromall ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventregremovemefromall"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventregremovemefromall"
      end
      # resource path
      local_var_path = '/eventregremovemefromall'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventregremovemefromall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove current user from a course group
    # Allows the user to remove themselves from availability to a course group.
    # @param token [String] The authentication token.
    # @param codegroup [String] The code group of the events/courses.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventregremovemefromgroup(token, codegroup, listname, opts = {})
      eventregremovemefromgroup_with_http_info(token, codegroup, listname, opts)
      nil
    end

    # Remove current user from a course group
    # Allows the user to remove themselves from availability to a course group.
    # @param token [String] The authentication token.
    # @param codegroup [String] The code group of the events/courses.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventregremovemefromgroup_with_http_info(token, codegroup, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventregremovemefromgroup ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventregremovemefromgroup"
      end
      # verify the required parameter 'codegroup' is set
      if @api_client.config.client_side_validation && codegroup.nil?
        fail ArgumentError, "Missing the required parameter 'codegroup' when calling DefaultApi.eventregremovemefromgroup"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventregremovemefromgroup"
      end
      # resource path
      local_var_path = '/eventregremovemefromgroup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'codegroup'] = codegroup
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventregremovemefromgroup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a user from a course
    # Allows the user to remove a user from a course's registration.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param eventid [String] The id of the event.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventregremoveuser(token, userid, eventid, listname, opts = {})
      eventregremoveuser_with_http_info(token, userid, eventid, listname, opts)
      nil
    end

    # Remove a user from a course
    # Allows the user to remove a user from a course&#39;s registration.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param eventid [String] The id of the event.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventregremoveuser_with_http_info(token, userid, eventid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventregremoveuser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventregremoveuser"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.eventregremoveuser"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.eventregremoveuser"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventregremoveuser"
      end
      # resource path
      local_var_path = '/eventregremoveuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'eventid'] = eventid
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventregremoveuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a user from the registration to all courses
    # Allows the user to remove a staff member from availability to all courses.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventregremoveuserfromall(token, userid, listname, opts = {})
      eventregremoveuserfromall_with_http_info(token, userid, listname, opts)
      nil
    end

    # Remove a user from the registration to all courses
    # Allows the user to remove a staff member from availability to all courses.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventregremoveuserfromall_with_http_info(token, userid, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventregremoveuserfromall ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventregremoveuserfromall"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.eventregremoveuserfromall"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventregremoveuserfromall"
      end
      # resource path
      local_var_path = '/eventregremoveuserfromall'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventregremoveuserfromall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a user from a course group
    # Allows the user to remove a staff member from availability to a course group.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param codegroup [String] The code group of the events/courses.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventregremoveuserfromgroup(token, userid, codegroup, listname, opts = {})
      eventregremoveuserfromgroup_with_http_info(token, userid, codegroup, listname, opts)
      nil
    end

    # Remove a user from a course group
    # Allows the user to remove a staff member from availability to a course group.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param codegroup [String] The code group of the events/courses.
    # @param listname [String] The name of the list where the user is registered.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventregremoveuserfromgroup_with_http_info(token, userid, codegroup, listname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventregremoveuserfromgroup ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventregremoveuserfromgroup"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.eventregremoveuserfromgroup"
      end
      # verify the required parameter 'codegroup' is set
      if @api_client.config.client_side_validation && codegroup.nil?
        fail ArgumentError, "Missing the required parameter 'codegroup' when calling DefaultApi.eventregremoveuserfromgroup"
      end
      # verify the required parameter 'listname' is set
      if @api_client.config.client_side_validation && listname.nil?
        fail ArgumentError, "Missing the required parameter 'listname' when calling DefaultApi.eventregremoveuserfromgroup"
      end
      # resource path
      local_var_path = '/eventregremoveuserfromgroup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'codegroup'] = codegroup
      query_params[:'listname'] = listname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventregremoveuserfromgroup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a course
    # Allows the user to create or edit a course.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def eventsave(opts = {})
      eventsave_with_http_info(opts)
      nil
    end

    # Create or edit a course
    # Allows the user to create or edit a course.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventsave ...'
      end
      # resource path
      local_var_path = '/eventsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Searches for the available event groups
    # @param token [String] The authentication token.
    # @param query [String] Query to search event groups.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def eventsearchgroup(token, query, opts = {})
      eventsearchgroup_with_http_info(token, query, opts)
      nil
    end

    # Searches for the available event groups
    # @param token [String] The authentication token.
    # @param query [String] Query to search event groups.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def eventsearchgroup_with_http_info(token, query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.eventsearchgroup ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.eventsearchgroup"
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.eventsearchgroup"
      end
      # resource path
      local_var_path = '/eventsearchgroup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'query'] = query

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#eventsearchgroup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export AccuCampus data
    # Allows the user to export data from AccuCampus into a CSV, HTML, or Excel format.
    # @param token [String] The authentication token.
    # @param exporttype [String] What to export.
    # @param exportformat [String] The format of the resulting file. Valid types are CSV, HTML, XLS.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters Pipe separated filters for the export, eg: aaa&#x3D;val|bbb&#x3D;val|...
    # @return [nil]
    def export(token, exporttype, exportformat, opts = {})
      export_with_http_info(token, exporttype, exportformat, opts)
      nil
    end

    # Export AccuCampus data
    # Allows the user to export data from AccuCampus into a CSV, HTML, or Excel format.
    # @param token [String] The authentication token.
    # @param exporttype [String] What to export.
    # @param exportformat [String] The format of the resulting file. Valid types are CSV, HTML, XLS.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters Pipe separated filters for the export, eg: aaa&#x3D;val|bbb&#x3D;val|...
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def export_with_http_info(token, exporttype, exportformat, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.export ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.export"
      end
      # verify the required parameter 'exporttype' is set
      if @api_client.config.client_side_validation && exporttype.nil?
        fail ArgumentError, "Missing the required parameter 'exporttype' when calling DefaultApi.export"
      end
      # verify the required parameter 'exportformat' is set
      if @api_client.config.client_side_validation && exportformat.nil?
        fail ArgumentError, "Missing the required parameter 'exportformat' when calling DefaultApi.export"
      end
      # resource path
      local_var_path = '/export'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'exporttype'] = exporttype
      query_params[:'exportformat'] = exportformat
      query_params[:'filters'] = opts[:'filters'] if !opts[:'filters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#export\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists available export types
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def exportlisttypes(token, opts = {})
      exportlisttypes_with_http_info(token, opts)
      nil
    end

    # Lists available export types
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def exportlisttypes_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.exportlisttypes ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.exportlisttypes"
      end
      # resource path
      local_var_path = '/exportlisttypes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#exportlisttypes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the available features.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def featurelist(token, opts = {})
      featurelist_with_http_info(token, opts)
      nil
    end

    # Lists the available features.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def featurelist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.featurelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.featurelist"
      end
      # resource path
      local_var_path = '/featurelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#featurelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of entered holidays
    # Allows the user to view all holidays entered.
    # @param token [String] The authentication token.
    # @param term [String] The term to get holidays from.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def holidaylist(token, term, opts = {})
      holidaylist_with_http_info(token, term, opts)
      nil
    end

    # View a list of entered holidays
    # Allows the user to view all holidays entered.
    # @param token [String] The authentication token.
    # @param term [String] The term to get holidays from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def holidaylist_with_http_info(token, term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.holidaylist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.holidaylist"
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling DefaultApi.holidaylist"
      end
      # resource path
      local_var_path = '/holidaylist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'term'] = term

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#holidaylist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a list of holidays
    # Allows the user to create or edit holidays.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def holidaysave(opts = {})
      holidaysave_with_http_info(opts)
      nil
    end

    # Create or edit a list of holidays
    # Allows the user to create or edit holidays.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def holidaysave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.holidaysave ...'
      end
      # resource path
      local_var_path = '/holidaysave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#holidaysave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the holiday suggestions in the given term
    # Allows the user to view the holiday suggestions for each term.
    # @param token [String] The authentication token.
    # @param term [String] The term to get holidays from.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def holidaysuggest(token, term, opts = {})
      holidaysuggest_with_http_info(token, term, opts)
      nil
    end

    # View the holiday suggestions in the given term
    # Allows the user to view the holiday suggestions for each term.
    # @param token [String] The authentication token.
    # @param term [String] The term to get holidays from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def holidaysuggest_with_http_info(token, term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.holidaysuggest ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.holidaysuggest"
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling DefaultApi.holidaysuggest"
      end
      # resource path
      local_var_path = '/holidaysuggest'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'term'] = term

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#holidaysuggest\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import data into AccuCampus
    # Allows the user to import data into AccuCampus via CSV or flat files either manually or automatically using the import utility.
    # @param token [String] The authentication token.
    # @param importtype [String] The kind of data that is being uploaded.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @option opts [String] :parameters Import parameters, in a key-value pair JSON-serialized object. Eg {&#39;parameter&#39;:&#39;value&#39;}.
    # @return [nil]
    def import(token, importtype, upload, opts = {})
      import_with_http_info(token, importtype, upload, opts)
      nil
    end

    # Import data into AccuCampus
    # Allows the user to import data into AccuCampus via CSV or flat files either manually or automatically using the import utility.
    # @param token [String] The authentication token.
    # @param importtype [String] The kind of data that is being uploaded.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @option opts [String] :parameters Import parameters, in a key-value pair JSON-serialized object. Eg {&#39;parameter&#39;:&#39;value&#39;}.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def import_with_http_info(token, importtype, upload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.import ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.import"
      end
      # verify the required parameter 'importtype' is set
      if @api_client.config.client_side_validation && importtype.nil?
        fail ArgumentError, "Missing the required parameter 'importtype' when calling DefaultApi.import"
      end
      # verify the required parameter 'upload' is set
      if @api_client.config.client_side_validation && upload.nil?
        fail ArgumentError, "Missing the required parameter 'upload' when calling DefaultApi.import"
      end
      # resource path
      local_var_path = '/import'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'importtype'] = importtype
      query_params[:'upload'] = upload
      query_params[:'filename'] = opts[:'filename'] if !opts[:'filename'].nil?
      query_params[:'parameters'] = opts[:'parameters'] if !opts[:'parameters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists available import types
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importlisttypes(token, opts = {})
      importlisttypes_with_http_info(token, opts)
      nil
    end

    # Lists available import types
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def importlisttypes_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.importlisttypes ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.importlisttypes"
      end
      # resource path
      local_var_path = '/importlisttypes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#importlisttypes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an interaction
    # @param token [String] The authentication token.
    # @param id [String] The id of the interaction to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def interactiondelete(token, id, opts = {})
      interactiondelete_with_http_info(token, id, opts)
      nil
    end

    # Delete an interaction
    # @param token [String] The authentication token.
    # @param id [String] The id of the interaction to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def interactiondelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.interactiondelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.interactiondelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.interactiondelete"
      end
      # resource path
      local_var_path = '/interactiondelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#interactiondelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the interactions feed
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :startdate If set, only interactions that happened after this date are returned.
    # @option opts [Boolean] :public Specifies whether to return public or private interactions.
    # @option opts [String] :contexttype The type of the context of the interactions to return.
    # @option opts [String] :contextid The id of the context of the interactions to return.
    # @option opts [String] :types The  comma separated types of the interactions to return.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @option opts [Boolean] :showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.
    # @option opts [Boolean] :orderdescending If true, last interactions will be shown first. Otherwise, interactions will be ordered ascendantly.
    # @return [nil]
    def interactionfeed(token, from, count, opts = {})
      interactionfeed_with_http_info(token, from, count, opts)
      nil
    end

    # Get the interactions feed
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :startdate If set, only interactions that happened after this date are returned.
    # @option opts [Boolean] :public Specifies whether to return public or private interactions.
    # @option opts [String] :contexttype The type of the context of the interactions to return.
    # @option opts [String] :contextid The id of the context of the interactions to return.
    # @option opts [String] :types The  comma separated types of the interactions to return.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @option opts [Boolean] :showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.
    # @option opts [Boolean] :orderdescending If true, last interactions will be shown first. Otherwise, interactions will be ordered ascendantly.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def interactionfeed_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.interactionfeed ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.interactionfeed"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.interactionfeed"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.interactionfeed"
      end
      # resource path
      local_var_path = '/interactionfeed'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'public'] = opts[:'public'] if !opts[:'public'].nil?
      query_params[:'contexttype'] = opts[:'contexttype'] if !opts[:'contexttype'].nil?
      query_params[:'contextid'] = opts[:'contextid'] if !opts[:'contextid'].nil?
      query_params[:'types'] = opts[:'types'] if !opts[:'types'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?
      query_params[:'showdefaultphoto'] = opts[:'showdefaultphoto'] if !opts[:'showdefaultphoto'].nil?
      query_params[:'orderdescending'] = opts[:'orderdescending'] if !opts[:'orderdescending'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#interactionfeed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View an interaction
    # @param token [String] The authentication token.
    # @param id [String] The id of the interaction.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :thumbnailmediasize The size in pixels of the thumbnail media URLs returned. Defaults to 680. If the size specified is not available, a similar one will be returned.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def interactionget(token, id, opts = {})
      interactionget_with_http_info(token, id, opts)
      nil
    end

    # View an interaction
    # @param token [String] The authentication token.
    # @param id [String] The id of the interaction.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :thumbnailmediasize The size in pixels of the thumbnail media URLs returned. Defaults to 680. If the size specified is not available, a similar one will be returned.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def interactionget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.interactionget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.interactionget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.interactionget"
      end
      # resource path
      local_var_path = '/interactionget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'thumbnailmediasize'] = opts[:'thumbnailmediasize'] if !opts[:'thumbnailmediasize'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#interactionget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get current user's latest private interactions
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @option opts [Boolean] :showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.
    # @return [nil]
    def interactionlistprivatesummary(token, opts = {})
      interactionlistprivatesummary_with_http_info(token, opts)
      nil
    end

    # Get current user&#39;s latest private interactions
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @option opts [Boolean] :showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def interactionlistprivatesummary_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.interactionlistprivatesummary ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.interactionlistprivatesummary"
      end
      # resource path
      local_var_path = '/interactionlistprivatesummary'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?
      query_params[:'showdefaultphoto'] = opts[:'showdefaultphoto'] if !opts[:'showdefaultphoto'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#interactionlistprivatesummary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save an interaction
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def interactionsave(opts = {})
      interactionsave_with_http_info(opts)
      nil
    end

    # Save an interaction
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def interactionsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.interactionsave ...'
      end
      # resource path
      local_var_path = '/interactionsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#interactionsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Accept the license agreement
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def licenseacceptagreement(token, opts = {})
      licenseacceptagreement_with_http_info(token, opts)
      nil
    end

    # Accept the license agreement
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def licenseacceptagreement_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.licenseacceptagreement ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.licenseacceptagreement"
      end
      # resource path
      local_var_path = '/licenseacceptagreement'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#licenseacceptagreement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if license agreement has been accepted
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def licensegetagreementstatus(token, opts = {})
      licensegetagreementstatus_with_http_info(token, opts)
      nil
    end

    # Check if license agreement has been accepted
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def licensegetagreementstatus_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.licensegetagreementstatus ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.licensegetagreementstatus"
      end
      # resource path
      local_var_path = '/licensegetagreementstatus'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#licensegetagreementstatus\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the current license information
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [nil]
    def licensegetcurrent(opts = {})
      licensegetcurrent_with_http_info(opts)
      nil
    end

    # Gets the current license information
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def licensegetcurrent_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.licensegetcurrent ...'
      end
      # resource path
      local_var_path = '/licensegetcurrent'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#licensegetcurrent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Contact Engineerica in order to renew the AccuCampus subscription
    # Allows the user to select the option to contact Engineerica when the AccuCampus account is nearing its renewal date.
    # @param token [String] The authentication token.
    # @param email [String] The e-mail of the user sending the request.
    # @param phonenumber [String] The phone number of the user sending the request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :jobtitle The job title of the user sending the request.
    # @option opts [String] :institution The institution of the user sending the request.
    # @option opts [String] :comments Comments entered by the user sending the request.
    # @return [nil]
    def licenserenew(token, email, phonenumber, opts = {})
      licenserenew_with_http_info(token, email, phonenumber, opts)
      nil
    end

    # Contact Engineerica in order to renew the AccuCampus subscription
    # Allows the user to select the option to contact Engineerica when the AccuCampus account is nearing its renewal date.
    # @param token [String] The authentication token.
    # @param email [String] The e-mail of the user sending the request.
    # @param phonenumber [String] The phone number of the user sending the request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :jobtitle The job title of the user sending the request.
    # @option opts [String] :institution The institution of the user sending the request.
    # @option opts [String] :comments Comments entered by the user sending the request.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def licenserenew_with_http_info(token, email, phonenumber, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.licenserenew ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.licenserenew"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling DefaultApi.licenserenew"
      end
      # verify the required parameter 'phonenumber' is set
      if @api_client.config.client_side_validation && phonenumber.nil?
        fail ArgumentError, "Missing the required parameter 'phonenumber' when calling DefaultApi.licenserenew"
      end
      # resource path
      local_var_path = '/licenserenew'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'email'] = email
      query_params[:'phonenumber'] = phonenumber
      query_params[:'jobtitle'] = opts[:'jobtitle'] if !opts[:'jobtitle'].nil?
      query_params[:'institution'] = opts[:'institution'] if !opts[:'institution'].nil?
      query_params[:'comments'] = opts[:'comments'] if !opts[:'comments'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#licenserenew\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a like
    # @param token [String] The authentication token.
    # @param interactionid [String] The id of the interaction to unlike.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def likedelete(token, interactionid, opts = {})
      likedelete_with_http_info(token, interactionid, opts)
      nil
    end

    # Delete a like
    # @param token [String] The authentication token.
    # @param interactionid [String] The id of the interaction to unlike.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def likedelete_with_http_info(token, interactionid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.likedelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.likedelete"
      end
      # verify the required parameter 'interactionid' is set
      if @api_client.config.client_side_validation && interactionid.nil?
        fail ArgumentError, "Missing the required parameter 'interactionid' when calling DefaultApi.likedelete"
      end
      # resource path
      local_var_path = '/likedelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'interactionid'] = interactionid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#likedelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the likes associated to a target
    # @param token [String] The authentication token.
    # @param interactionid [String] The id of the interaction to unlike.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def likelist(token, interactionid, opts = {})
      likelist_with_http_info(token, interactionid, opts)
      nil
    end

    # View all the likes associated to a target
    # @param token [String] The authentication token.
    # @param interactionid [String] The id of the interaction to unlike.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def likelist_with_http_info(token, interactionid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.likelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.likelist"
      end
      # verify the required parameter 'interactionid' is set
      if @api_client.config.client_side_validation && interactionid.nil?
        fail ArgumentError, "Missing the required parameter 'interactionid' when calling DefaultApi.likelist"
      end
      # resource path
      local_var_path = '/likelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'interactionid'] = interactionid
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#likelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save a like
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def likesave(opts = {})
      likesave_with_http_info(opts)
      nil
    end

    # Save a like
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def likesave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.likesave ...'
      end
      # resource path
      local_var_path = '/likesave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#likesave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the available timezones
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def listtimezones(opts = {})
      listtimezones_with_http_info(opts)
      nil
    end

    # Lists the available timezones
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def listtimezones_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.listtimezones ...'
      end
      # resource path
      local_var_path = '/listtimezones'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#listtimezones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a location
    # Allows the user to delete an existing location.
    # @param token [String] The authentication token.
    # @param id [String] The id of the location to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def locationdelete(token, id, opts = {})
      locationdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a location
    # Allows the user to delete an existing location.
    # @param token [String] The authentication token.
    # @param id [String] The id of the location to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def locationdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.locationdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.locationdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.locationdelete"
      end
      # resource path
      local_var_path = '/locationdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#locationdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a location
    # Allows the user to search and view an individual location and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the location to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def locationget(token, id, opts = {})
      locationget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a location
    # Allows the user to search and view an individual location and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the location to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def locationget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.locationget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.locationget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.locationget"
      end
      # resource path
      local_var_path = '/locationget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#locationget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of locations
    # Allows the user to view the list of all locations to which they are scoped.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locations The comma-separated list containing the ids of the locations to list.
    # @option opts [Boolean] :sortbygroup True to list locations sorted by the &#39;Located In&#39; property. Defaults to false.
    # @return [nil]
    def locationlist(token, from, count, opts = {})
      locationlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of locations
    # Allows the user to view the list of all locations to which they are scoped.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locations The comma-separated list containing the ids of the locations to list.
    # @option opts [Boolean] :sortbygroup True to list locations sorted by the &#39;Located In&#39; property. Defaults to false.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def locationlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.locationlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.locationlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.locationlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.locationlist"
      end
      # resource path
      local_var_path = '/locationlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'locations'] = opts[:'locations'] if !opts[:'locations'].nil?
      query_params[:'sortbygroup'] = opts[:'sortbygroup'] if !opts[:'sortbygroup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#locationlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a location
    # Allows the user to create or edit a location.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def locationsave(opts = {})
      locationsave_with_http_info(opts)
      nil
    end

    # Create or edit a location
    # Allows the user to create or edit a location.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def locationsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.locationsave ...'
      end
      # resource path
      local_var_path = '/locationsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#locationsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Login
    # @param domain [String] The account domain to login.
    # @param username [String] The username (email) of the user to login as.
    # @param password [String] The password of the user to login as.
    # @param method [String] The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :rememberme If true then the session will not expire.
    # @return [nil]
    def login(domain, username, password, method, opts = {})
      login_with_http_info(domain, username, password, method, opts)
      nil
    end

    # Login
    # @param domain [String] The account domain to login.
    # @param username [String] The username (email) of the user to login as.
    # @param password [String] The password of the user to login as.
    # @param method [String] The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :rememberme If true then the session will not expire.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def login_with_http_info(domain, username, password, method, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.login ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling DefaultApi.login"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.login"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling DefaultApi.login"
      end
      # verify the required parameter 'method' is set
      if @api_client.config.client_side_validation && method.nil?
        fail ArgumentError, "Missing the required parameter 'method' when calling DefaultApi.login"
      end
      # resource path
      local_var_path = '/login'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'domain'] = domain
      query_params[:'username'] = username
      query_params[:'password'] = password
      query_params[:'method'] = method
      query_params[:'rememberme'] = opts[:'rememberme'] if !opts[:'rememberme'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Logout
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token used to login.
    # @return [nil]
    def logout(opts = {})
      logout_with_http_info(opts)
      nil
    end

    # Logout
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token used to login.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.logout ...'
      end
      # resource path
      local_var_path = '/logout'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#logout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check in media item
    # Allows the user to check in a media item.
    # @param token [String] The authentication token.
    # @param media [String] The id of the media item to checkin.
    # @param checkindate [DateTime] The checkout date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :notes The notes of the checkout.
    # @return [nil]
    def mediacheckin(token, media, checkindate, opts = {})
      mediacheckin_with_http_info(token, media, checkindate, opts)
      nil
    end

    # Check in media item
    # Allows the user to check in a media item.
    # @param token [String] The authentication token.
    # @param media [String] The id of the media item to checkin.
    # @param checkindate [DateTime] The checkout date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :notes The notes of the checkout.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mediacheckin_with_http_info(token, media, checkindate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mediacheckin ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.mediacheckin"
      end
      # verify the required parameter 'media' is set
      if @api_client.config.client_side_validation && media.nil?
        fail ArgumentError, "Missing the required parameter 'media' when calling DefaultApi.mediacheckin"
      end
      # verify the required parameter 'checkindate' is set
      if @api_client.config.client_side_validation && checkindate.nil?
        fail ArgumentError, "Missing the required parameter 'checkindate' when calling DefaultApi.mediacheckin"
      end
      # resource path
      local_var_path = '/mediacheckin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'media'] = media
      query_params[:'checkindate'] = checkindate
      query_params[:'notes'] = opts[:'notes'] if !opts[:'notes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mediacheckin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check out media item
    # Allows the user to check out a media item.
    # @param token [String] The authentication token.
    # @param media [String] The id of the media item to checkout.
    # @param user [String] The id of the user that is checking the item out.
    # @param checkoutdate [DateTime] The checkout date.
    # @param duedate [DateTime] The date when the checkout is due.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :staff The id of the staff member related to the checkout.
    # @option opts [String] :event The id of the event related to the checkout.
    # @option opts [String] :notes The notes of the checkout.
    # @return [nil]
    def mediacheckout(token, media, user, checkoutdate, duedate, opts = {})
      mediacheckout_with_http_info(token, media, user, checkoutdate, duedate, opts)
      nil
    end

    # Check out media item
    # Allows the user to check out a media item.
    # @param token [String] The authentication token.
    # @param media [String] The id of the media item to checkout.
    # @param user [String] The id of the user that is checking the item out.
    # @param checkoutdate [DateTime] The checkout date.
    # @param duedate [DateTime] The date when the checkout is due.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :staff The id of the staff member related to the checkout.
    # @option opts [String] :event The id of the event related to the checkout.
    # @option opts [String] :notes The notes of the checkout.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mediacheckout_with_http_info(token, media, user, checkoutdate, duedate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mediacheckout ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.mediacheckout"
      end
      # verify the required parameter 'media' is set
      if @api_client.config.client_side_validation && media.nil?
        fail ArgumentError, "Missing the required parameter 'media' when calling DefaultApi.mediacheckout"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.mediacheckout"
      end
      # verify the required parameter 'checkoutdate' is set
      if @api_client.config.client_side_validation && checkoutdate.nil?
        fail ArgumentError, "Missing the required parameter 'checkoutdate' when calling DefaultApi.mediacheckout"
      end
      # verify the required parameter 'duedate' is set
      if @api_client.config.client_side_validation && duedate.nil?
        fail ArgumentError, "Missing the required parameter 'duedate' when calling DefaultApi.mediacheckout"
      end
      # resource path
      local_var_path = '/mediacheckout'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'media'] = media
      query_params[:'user'] = user
      query_params[:'checkoutdate'] = checkoutdate
      query_params[:'duedate'] = duedate
      query_params[:'staff'] = opts[:'staff'] if !opts[:'staff'].nil?
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?
      query_params[:'notes'] = opts[:'notes'] if !opts[:'notes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mediacheckout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of past media checkouts
    # Allows the user to view a list of all past checkouts
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :media Used to filter the checkouts of a specific media item.
    # @option opts [String] :user Used to filter the checkouts made by a specific user.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def mediacheckoutlist(token, from, count, opts = {})
      mediacheckoutlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of past media checkouts
    # Allows the user to view a list of all past checkouts
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :media Used to filter the checkouts of a specific media item.
    # @option opts [String] :user Used to filter the checkouts made by a specific user.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mediacheckoutlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mediacheckoutlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.mediacheckoutlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.mediacheckoutlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.mediacheckoutlist"
      end
      # resource path
      local_var_path = '/mediacheckoutlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'media'] = opts[:'media'] if !opts[:'media'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mediacheckoutlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a media item
    # Allows the user to delete an existing media item.
    # @param token [String] The authentication token.
    # @param id [String] The id of the media item to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mediadelete(token, id, opts = {})
      mediadelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a media item
    # Allows the user to delete an existing media item.
    # @param token [String] The authentication token.
    # @param id [String] The id of the media item to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mediadelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mediadelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.mediadelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.mediadelete"
      end
      # resource path
      local_var_path = '/mediadelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mediadelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a media checkout log
    # Allows the user to delete a media item's checkout log.
    # @param token [String] The authentication token.
    # @param id [String] The id of the checkout log to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mediadeletecheckoutlog(token, id, opts = {})
      mediadeletecheckoutlog_with_http_info(token, id, opts)
      nil
    end

    # Delete a media checkout log
    # Allows the user to delete a media item&#39;s checkout log.
    # @param token [String] The authentication token.
    # @param id [String] The id of the checkout log to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mediadeletecheckoutlog_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mediadeletecheckoutlog ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.mediadeletecheckoutlog"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.mediadeletecheckoutlog"
      end
      # resource path
      local_var_path = '/mediadeletecheckoutlog'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mediadeletecheckoutlog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a media item
    # Allows the user to view an individual media item and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the media item to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mediaget(token, id, opts = {})
      mediaget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a media item
    # Allows the user to view an individual media item and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the media item to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mediaget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mediaget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.mediaget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.mediaget"
      end
      # resource path
      local_var_path = '/mediaget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mediaget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search media item by unique code
    # Allows the user to search for media items by their unique code.
    # @param token [String] The authentication token.
    # @param code [String] The code of the media item to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The location where to look for the media item.
    # @return [nil]
    def mediagetbycode(token, code, opts = {})
      mediagetbycode_with_http_info(token, code, opts)
      nil
    end

    # Search media item by unique code
    # Allows the user to search for media items by their unique code.
    # @param token [String] The authentication token.
    # @param code [String] The code of the media item to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The location where to look for the media item.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mediagetbycode_with_http_info(token, code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mediagetbycode ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.mediagetbycode"
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling DefaultApi.mediagetbycode"
      end
      # resource path
      local_var_path = '/mediagetbycode'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'code'] = code
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mediagetbycode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a media item checkout information
    # Allows the user to view a media item's checkout information.
    # @param token [String] The authentication token.
    # @param id [String] The id of the media item whose checkout information has to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def mediagetcheckout(token, id, opts = {})
      mediagetcheckout_with_http_info(token, id, opts)
      nil
    end

    # View details of a media item checkout information
    # Allows the user to view a media item&#39;s checkout information.
    # @param token [String] The authentication token.
    # @param id [String] The id of the media item whose checkout information has to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mediagetcheckout_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mediagetcheckout ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.mediagetcheckout"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.mediagetcheckout"
      end
      # resource path
      local_var_path = '/mediagetcheckout'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mediagetcheckout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a media checkout log
    # Allows the user to view a media item's checkout history.
    # @param token [String] The authentication token.
    # @param id [String] The id of the media item whose checkout information has to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def mediagetcheckoutlog(token, id, opts = {})
      mediagetcheckoutlog_with_http_info(token, id, opts)
      nil
    end

    # View details of a media checkout log
    # Allows the user to view a media item&#39;s checkout history.
    # @param token [String] The authentication token.
    # @param id [String] The id of the media item whose checkout information has to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mediagetcheckoutlog_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mediagetcheckoutlog ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.mediagetcheckoutlog"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.mediagetcheckoutlog"
      end
      # resource path
      local_var_path = '/mediagetcheckoutlog'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mediagetcheckoutlog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of media items
    # Allows the user to view the list of all media items tied to locations in which the user is scoped.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :status Used to filter the media items by their checkout status (0 &#x3D; CheckedIn, 1 &#x3D; CheckedOut, Unspecified &#x3D; All).
    # @option opts [String] :user Used to filter the media items that are checked-out by a specific user.
    # @return [nil]
    def medialist(token, from, count, opts = {})
      medialist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of media items
    # Allows the user to view the list of all media items tied to locations in which the user is scoped.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :status Used to filter the media items by their checkout status (0 &#x3D; CheckedIn, 1 &#x3D; CheckedOut, Unspecified &#x3D; All).
    # @option opts [String] :user Used to filter the media items that are checked-out by a specific user.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def medialist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.medialist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.medialist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.medialist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.medialist"
      end
      # resource path
      local_var_path = '/medialist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#medialist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a media item
    # Allows the user to create or edit a media item.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def mediasave(opts = {})
      mediasave_with_http_info(opts)
      nil
    end

    # Create or edit a media item
    # Allows the user to create or edit a media item.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mediasave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mediasave ...'
      end
      # resource path
      local_var_path = '/mediasave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mediasave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a media type
    # Allows the user to delete an existing media type.
    # @param token [String] The authentication token.
    # @param id [String] The id of the media type to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mediatypedelete(token, id, opts = {})
      mediatypedelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a media type
    # Allows the user to delete an existing media type.
    # @param token [String] The authentication token.
    # @param id [String] The id of the media type to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mediatypedelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mediatypedelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.mediatypedelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.mediatypedelete"
      end
      # resource path
      local_var_path = '/mediatypedelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mediatypedelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a media type
    # Allows the user to view a media type and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the media type to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mediatypeget(token, id, opts = {})
      mediatypeget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a media type
    # Allows the user to view a media type and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the media type to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mediatypeget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mediatypeget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.mediatypeget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.mediatypeget"
      end
      # resource path
      local_var_path = '/mediatypeget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mediatypeget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of media types
    # Allows the user to view the list of all media types.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mediatypelist(token, from, count, opts = {})
      mediatypelist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of media types
    # Allows the user to view the list of all media types.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mediatypelist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mediatypelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.mediatypelist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.mediatypelist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.mediatypelist"
      end
      # resource path
      local_var_path = '/mediatypelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mediatypelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a media type
    # Allows the user to create or edit a media type.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def mediatypesave(opts = {})
      mediatypesave_with_http_info(opts)
      nil
    end

    # Create or edit a media type
    # Allows the user to create or edit a media type.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mediatypesave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mediatypesave ...'
      end
      # resource path
      local_var_path = '/mediatypesave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mediatypesave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete memorized report
    # Allows the user to delete a memorized report that they have created.
    # @param token [String] The authentication token.
    # @param id [String] The id of the report settings to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def memorizedreportdelete(token, id, opts = {})
      memorizedreportdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete memorized report
    # Allows the user to delete a memorized report that they have created.
    # @param token [String] The authentication token.
    # @param id [String] The id of the report settings to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def memorizedreportdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.memorizedreportdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.memorizedreportdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.memorizedreportdelete"
      end
      # resource path
      local_var_path = '/memorizedreportdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#memorizedreportdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a memorized report
    # Allows the user to view an individual memorized report and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the report configuration to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def memorizedreportget(token, id, opts = {})
      memorizedreportget_with_http_info(token, id, opts)
      nil
    end

    # View details of a memorized report
    # Allows the user to view an individual memorized report and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the report configuration to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def memorizedreportget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.memorizedreportget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.memorizedreportget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.memorizedreportget"
      end
      # resource path
      local_var_path = '/memorizedreportget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#memorizedreportget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of all his memorized reports
    # Allows the user to view the list of all memorized reports that they have created.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customname If specified filters the memorized reports by custom name.
    # @return [nil]
    def memorizedreportlist(token, from, count, opts = {})
      memorizedreportlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of all his memorized reports
    # Allows the user to view the list of all memorized reports that they have created.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customname If specified filters the memorized reports by custom name.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def memorizedreportlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.memorizedreportlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.memorizedreportlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.memorizedreportlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.memorizedreportlist"
      end
      # resource path
      local_var_path = '/memorizedreportlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'customname'] = opts[:'customname'] if !opts[:'customname'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#memorizedreportlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a memorized report
    # Allows the user to create or edit a memorized report for themselves.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def memorizedreportsave(opts = {})
      memorizedreportsave_with_http_info(opts)
      nil
    end

    # Create or edit a memorized report
    # Allows the user to create or edit a memorized report for themselves.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def memorizedreportsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.memorizedreportsave ...'
      end
      # resource path
      local_var_path = '/memorizedreportsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#memorizedreportsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the items on the menu
    # @param menuid [String] The Id of the menu to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def menugetitems(menuid, opts = {})
      menugetitems_with_http_info(menuid, opts)
      nil
    end

    # Gets the items on the menu
    # @param menuid [String] The Id of the menu to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def menugetitems_with_http_info(menuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.menugetitems ...'
      end
      # verify the required parameter 'menuid' is set
      if @api_client.config.client_side_validation && menuid.nil?
        fail ArgumentError, "Missing the required parameter 'menuid' when calling DefaultApi.menugetitems"
      end
      # resource path
      local_var_path = '/menugetitems'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'menuid'] = menuid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#menugetitems\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the logged in user account.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def myaccount(token, opts = {})
      myaccount_with_http_info(token, opts)
      nil
    end

    # Gets the logged in user account.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def myaccount_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.myaccount ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.myaccount"
      end
      # resource path
      local_var_path = '/myaccount'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#myaccount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the current time zone's iana name
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def myianatimezone(token, opts = {})
      myianatimezone_with_http_info(token, opts)
      nil
    end

    # Gets the current time zone&#39;s iana name
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def myianatimezone_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.myianatimezone ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.myianatimezone"
      end
      # resource path
      local_var_path = '/myianatimezone'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#myianatimezone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the logged in user information.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def myprofile(token, opts = {})
      myprofile_with_http_info(token, opts)
      nil
    end

    # Gets the logged in user information.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def myprofile_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.myprofile ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.myprofile"
      end
      # resource path
      local_var_path = '/myprofile'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#myprofile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the list of actions the user can execute.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def myrights(token, opts = {})
      myrights_with_http_info(token, opts)
      nil
    end

    # Gets the list of actions the user can execute.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def myrights_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.myrights ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.myrights"
      end
      # resource path
      local_var_path = '/myrights'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#myrights\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates logged user's profile information
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def mysaveprofile(opts = {})
      mysaveprofile_with_http_info(opts)
      nil
    end

    # Updates logged user&#39;s profile information
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mysaveprofile_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mysaveprofile ...'
      end
      # resource path
      local_var_path = '/mysaveprofile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mysaveprofile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a notification
    # Allows the user to delete an existing notification.
    # @param token [String] The authentication token.
    # @param id [String] The id of the notification to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationdelete(token, id, opts = {})
      notificationdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a notification
    # Allows the user to delete an existing notification.
    # @param token [String] The authentication token.
    # @param id [String] The id of the notification to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.notificationdelete"
      end
      # resource path
      local_var_path = '/notificationdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a notification
    # @param token [String] The authentication token.
    # @param id [String] The id of the notification to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationget(token, id, opts = {})
      notificationget_with_http_info(token, id, opts)
      nil
    end

    # View a notification
    # @param token [String] The authentication token.
    # @param id [String] The id of the notification to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.notificationget"
      end
      # resource path
      local_var_path = '/notificationget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all public (in station) notifications for the specific user
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationgetforstation(station, user, opts = {})
      notificationgetforstation_with_http_info(station, user, opts)
      nil
    end

    # Gets all public (in station) notifications for the specific user
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationgetforstation_with_http_info(station, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationgetforstation ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.notificationgetforstation"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.notificationgetforstation"
      end
      # resource path
      local_var_path = '/notificationgetforstation'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'user'] = user

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationgetforstation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the number of unread notifications
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationgetunreadcount(token, opts = {})
      notificationgetunreadcount_with_http_info(token, opts)
      nil
    end

    # Get the number of unread notifications
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationgetunreadcount_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationgetunreadcount ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationgetunreadcount"
      end
      # resource path
      local_var_path = '/notificationgetunreadcount'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationgetunreadcount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of all sent notifications
    # Allows the user to view the list of all sent notifications.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :recipient The recipient whose notifications have to be listed.
    # @option opts [Integer] :status The status of the notifications to list. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @option opts [Boolean] :sentonscreen Specifies whether to list the notifications that were sent on-screen or not.
    # @option opts [Boolean] :sentemail Specifies whether to list the notifications that were sent via e-mail or not.
    # @option opts [Boolean] :sentsms Specifies whether to list the notifications that were sent via sms or not.
    # @return [nil]
    def notificationlist(token, from, count, opts = {})
      notificationlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of all sent notifications
    # Allows the user to view the list of all sent notifications.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :recipient The recipient whose notifications have to be listed.
    # @option opts [Integer] :status The status of the notifications to list. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @option opts [Boolean] :sentonscreen Specifies whether to list the notifications that were sent on-screen or not.
    # @option opts [Boolean] :sentemail Specifies whether to list the notifications that were sent via e-mail or not.
    # @option opts [Boolean] :sentsms Specifies whether to list the notifications that were sent via sms or not.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.notificationlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.notificationlist"
      end
      # resource path
      local_var_path = '/notificationlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'recipient'] = opts[:'recipient'] if !opts[:'recipient'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?
      query_params[:'sentonscreen'] = opts[:'sentonscreen'] if !opts[:'sentonscreen'].nil?
      query_params[:'sentemail'] = opts[:'sentemail'] if !opts[:'sentemail'].nil?
      query_params[:'sentsms'] = opts[:'sentsms'] if !opts[:'sentsms'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the notifications sent to the current user
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :status Specifies the status of the notifications to list. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [nil]
    def notificationlistmine(token, from, count, opts = {})
      notificationlistmine_with_http_info(token, from, count, opts)
      nil
    end

    # View all the notifications sent to the current user
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :status Specifies the status of the notifications to list. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationlistmine_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationlistmine ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationlistmine"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.notificationlistmine"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.notificationlistmine"
      end
      # resource path
      local_var_path = '/notificationlistmine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationlistmine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark a notification as read
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read.
    # @option opts [Integer] :status Specifies the status to filter the notifications. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [nil]
    def notificationmarkasread(token, opts = {})
      notificationmarkasread_with_http_info(token, opts)
      nil
    end

    # Mark a notification as read
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the notification to mark as read. If not specified all notifications of the logged user will be marked as read.
    # @option opts [Integer] :status Specifies the status to filter the notifications. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationmarkasread_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationmarkasread ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationmarkasread"
      end
      # resource path
      local_var_path = '/notificationmarkasread'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationmarkasread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark a notification as unread
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread.
    # @option opts [Integer] :status Specifies the status to filter the notifications. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [nil]
    def notificationmarkasunread(token, opts = {})
      notificationmarkasunread_with_http_info(token, opts)
      nil
    end

    # Mark a notification as unread
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the notification to mark as unread. If not specified all notifications of the logged user will be marked as unread.
    # @option opts [Integer] :status Specifies the status to filter the notifications. Read, Unread or All.
    # @option opts [DateTime] :startdate The start date of the period to filter the notifications.
    # @option opts [DateTime] :enddate The end date of the period to filter the notifications.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationmarkasunread_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationmarkasunread ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationmarkasunread"
      end
      # resource path
      local_var_path = '/notificationmarkasunread'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationmarkasunread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send notifications on screen, via email or text to users
    # Allows the user to send notifications to other users through the Send Message link.
    # @param token [String] The authentication token.
    # @param emailenabled [Boolean] Whether send the notification via email.
    # @param onscreenenabled [Boolean] Whether to display the notification on screen.
    # @param smsenabled [Boolean] Whether to send the notification via text message.
    # @param title [String] Notification title.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tousers Comma-separated Ids of users to send the notification.
    # @option opts [String] :togroups Comma-separated Ids of user groups to send the notification.
    # @option opts [String] :onscreenbody Body of the message for on-screen display.
    # @option opts [String] :onscreenclick What to do when the notification is clicked. Valid values: hide, view, url.
    # @option opts [String] :onscreenurl Url to redirect the user, if onscreenclick&#x3D;url.
    # @option opts [String] :onscreenclass How to display the notification. Valid values: info, success, warning, error
    # @option opts [Integer] :onscreenduration Time in seconds to display the notification.
    # @option opts [Integer] :showonstation Whether to show the notification in the sign-in station.
    # @option opts [String] :emailfromname Name of the email sender.
    # @option opts [String] :emailfrom Reply-to email.
    # @option opts [String] :emailsubject Subject of the email.
    # @option opts [String] :emailbody Body of the email.
    # @option opts [String] :textmessagebody Message for SMS. Max 160 characters.
    # @return [nil]
    def notificationsend(token, emailenabled, onscreenenabled, smsenabled, title, opts = {})
      notificationsend_with_http_info(token, emailenabled, onscreenenabled, smsenabled, title, opts)
      nil
    end

    # Send notifications on screen, via email or text to users
    # Allows the user to send notifications to other users through the Send Message link.
    # @param token [String] The authentication token.
    # @param emailenabled [Boolean] Whether send the notification via email.
    # @param onscreenenabled [Boolean] Whether to display the notification on screen.
    # @param smsenabled [Boolean] Whether to send the notification via text message.
    # @param title [String] Notification title.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tousers Comma-separated Ids of users to send the notification.
    # @option opts [String] :togroups Comma-separated Ids of user groups to send the notification.
    # @option opts [String] :onscreenbody Body of the message for on-screen display.
    # @option opts [String] :onscreenclick What to do when the notification is clicked. Valid values: hide, view, url.
    # @option opts [String] :onscreenurl Url to redirect the user, if onscreenclick&#x3D;url.
    # @option opts [String] :onscreenclass How to display the notification. Valid values: info, success, warning, error
    # @option opts [Integer] :onscreenduration Time in seconds to display the notification.
    # @option opts [Integer] :showonstation Whether to show the notification in the sign-in station.
    # @option opts [String] :emailfromname Name of the email sender.
    # @option opts [String] :emailfrom Reply-to email.
    # @option opts [String] :emailsubject Subject of the email.
    # @option opts [String] :emailbody Body of the email.
    # @option opts [String] :textmessagebody Message for SMS. Max 160 characters.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationsend_with_http_info(token, emailenabled, onscreenenabled, smsenabled, title, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationsend ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationsend"
      end
      # verify the required parameter 'emailenabled' is set
      if @api_client.config.client_side_validation && emailenabled.nil?
        fail ArgumentError, "Missing the required parameter 'emailenabled' when calling DefaultApi.notificationsend"
      end
      # verify the required parameter 'onscreenenabled' is set
      if @api_client.config.client_side_validation && onscreenenabled.nil?
        fail ArgumentError, "Missing the required parameter 'onscreenenabled' when calling DefaultApi.notificationsend"
      end
      # verify the required parameter 'smsenabled' is set
      if @api_client.config.client_side_validation && smsenabled.nil?
        fail ArgumentError, "Missing the required parameter 'smsenabled' when calling DefaultApi.notificationsend"
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling DefaultApi.notificationsend"
      end
      # resource path
      local_var_path = '/notificationsend'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'emailenabled'] = emailenabled
      query_params[:'onscreenenabled'] = onscreenenabled
      query_params[:'smsenabled'] = smsenabled
      query_params[:'title'] = title
      query_params[:'tousers'] = opts[:'tousers'] if !opts[:'tousers'].nil?
      query_params[:'togroups'] = opts[:'togroups'] if !opts[:'togroups'].nil?
      query_params[:'onscreenbody'] = opts[:'onscreenbody'] if !opts[:'onscreenbody'].nil?
      query_params[:'onscreenclick'] = opts[:'onscreenclick'] if !opts[:'onscreenclick'].nil?
      query_params[:'onscreenurl'] = opts[:'onscreenurl'] if !opts[:'onscreenurl'].nil?
      query_params[:'onscreenclass'] = opts[:'onscreenclass'] if !opts[:'onscreenclass'].nil?
      query_params[:'onscreenduration'] = opts[:'onscreenduration'] if !opts[:'onscreenduration'].nil?
      query_params[:'showonstation'] = opts[:'showonstation'] if !opts[:'showonstation'].nil?
      query_params[:'emailfromname'] = opts[:'emailfromname'] if !opts[:'emailfromname'].nil?
      query_params[:'emailfrom'] = opts[:'emailfrom'] if !opts[:'emailfrom'].nil?
      query_params[:'emailsubject'] = opts[:'emailsubject'] if !opts[:'emailsubject'].nil?
      query_params[:'emailbody'] = opts[:'emailbody'] if !opts[:'emailbody'].nil?
      query_params[:'textmessagebody'] = opts[:'textmessagebody'] if !opts[:'textmessagebody'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationsend\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send on-screen notifications
    # @param token [String] The authentication token.
    # @param notification [String] The ID of the notification to send.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationsendonscreen(token, notification, opts = {})
      notificationsendonscreen_with_http_info(token, notification, opts)
      nil
    end

    # Send on-screen notifications
    # @param token [String] The authentication token.
    # @param notification [String] The ID of the notification to send.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationsendonscreen_with_http_info(token, notification, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationsendonscreen ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationsendonscreen"
      end
      # verify the required parameter 'notification' is set
      if @api_client.config.client_side_validation && notification.nil?
        fail ArgumentError, "Missing the required parameter 'notification' when calling DefaultApi.notificationsendonscreen"
      end
      # resource path
      local_var_path = '/notificationsendonscreen'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'notification'] = notification

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationsendonscreen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a notification topic
    # Allows the user to delete an existing notification topic.
    # @param token [String] The authentication token.
    # @param id [String] The id of the notification topic to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationtopicdelete(token, id, opts = {})
      notificationtopicdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a notification topic
    # Allows the user to delete an existing notification topic.
    # @param token [String] The authentication token.
    # @param id [String] The id of the notification topic to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationtopicdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationtopicdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationtopicdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.notificationtopicdelete"
      end
      # resource path
      local_var_path = '/notificationtopicdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationtopicdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a notification topic
    # Allows the user to view an individual notification topic and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the notification topic to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationtopicget(token, id, opts = {})
      notificationtopicget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a notification topic
    # Allows the user to view an individual notification topic and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the notification topic to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationtopicget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationtopicget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationtopicget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.notificationtopicget"
      end
      # resource path
      local_var_path = '/notificationtopicget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationtopicget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all the notification topics
    # Allows the user to view the list of all notification topics.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationtopiclist(token, from, count, opts = {})
      notificationtopiclist_with_http_info(token, from, count, opts)
      nil
    end

    # List all the notification topics
    # Allows the user to view the list of all notification topics.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationtopiclist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationtopiclist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationtopiclist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.notificationtopiclist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.notificationtopiclist"
      end
      # resource path
      local_var_path = '/notificationtopiclist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationtopiclist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all the notification topics available to subscribe
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notificationtopiclistsubscribe(token, opts = {})
      notificationtopiclistsubscribe_with_http_info(token, opts)
      nil
    end

    # List all the notification topics available to subscribe
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationtopiclistsubscribe_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationtopiclistsubscribe ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.notificationtopiclistsubscribe"
      end
      # resource path
      local_var_path = '/notificationtopiclistsubscribe'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationtopiclistsubscribe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a notification topic
    # Allows the user to create and edit a notification topic.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def notificationtopicsave(opts = {})
      notificationtopicsave_with_http_info(opts)
      nil
    end

    # Create or edit a notification topic
    # Allows the user to create and edit a notification topic.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def notificationtopicsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.notificationtopicsave ...'
      end
      # resource path
      local_var_path = '/notificationtopicsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#notificationtopicsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deregisters the current device to receive push notifications
    # @param devicetoken [String] The device token where to send the notification.
    # @param platform [String] Either ios or android
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def pushderegister(devicetoken, platform, opts = {})
      pushderegister_with_http_info(devicetoken, platform, opts)
      nil
    end

    # Deregisters the current device to receive push notifications
    # @param devicetoken [String] The device token where to send the notification.
    # @param platform [String] Either ios or android
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def pushderegister_with_http_info(devicetoken, platform, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pushderegister ...'
      end
      # verify the required parameter 'devicetoken' is set
      if @api_client.config.client_side_validation && devicetoken.nil?
        fail ArgumentError, "Missing the required parameter 'devicetoken' when calling DefaultApi.pushderegister"
      end
      # verify the required parameter 'platform' is set
      if @api_client.config.client_side_validation && platform.nil?
        fail ArgumentError, "Missing the required parameter 'platform' when calling DefaultApi.pushderegister"
      end
      # resource path
      local_var_path = '/pushderegister'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'devicetoken'] = devicetoken
      query_params[:'platform'] = platform

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pushderegister\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Registers the current device to receive push notifications
    # @param devicetoken [String] The device token where to send the notification.
    # @param platform [String] Either ios or android
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def pushregister(devicetoken, platform, opts = {})
      pushregister_with_http_info(devicetoken, platform, opts)
      nil
    end

    # Registers the current device to receive push notifications
    # @param devicetoken [String] The device token where to send the notification.
    # @param platform [String] Either ios or android
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def pushregister_with_http_info(devicetoken, platform, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pushregister ...'
      end
      # verify the required parameter 'devicetoken' is set
      if @api_client.config.client_side_validation && devicetoken.nil?
        fail ArgumentError, "Missing the required parameter 'devicetoken' when calling DefaultApi.pushregister"
      end
      # verify the required parameter 'platform' is set
      if @api_client.config.client_side_validation && platform.nil?
        fail ArgumentError, "Missing the required parameter 'platform' when calling DefaultApi.pushregister"
      end
      # resource path
      local_var_path = '/pushregister'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'devicetoken'] = devicetoken
      query_params[:'platform'] = platform

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pushregister\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Print and email QR labels
    # Allows the user to generate a printable PDF of QR labels containing user Card Numbers to be emailed to users and used as attendance tracking for events.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The id of the user whose label needs to be printed.
    # @option opts [String] :group The id of the group whose members&#39; labels need to be printed.
    # @return [nil]
    def qrlabelsprint(token, opts = {})
      qrlabelsprint_with_http_info(token, opts)
      nil
    end

    # Print and email QR labels
    # Allows the user to generate a printable PDF of QR labels containing user Card Numbers to be emailed to users and used as attendance tracking for events.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The id of the user whose label needs to be printed.
    # @option opts [String] :group The id of the group whose members&#39; labels need to be printed.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def qrlabelsprint_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.qrlabelsprint ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.qrlabelsprint"
      end
      # resource path
      local_var_path = '/qrlabelsprint'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#qrlabelsprint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets an image of a QR token
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def qrloginget(token, opts = {})
      qrloginget_with_http_info(token, opts)
      nil
    end

    # Gets an image of a QR token
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def qrloginget_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.qrloginget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.qrloginget"
      end
      # resource path
      local_var_path = '/qrloginget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#qrloginget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Login
    # @param onetimetoken [String] The token read from the QR code.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def qrloginlogin(onetimetoken, opts = {})
      qrloginlogin_with_http_info(onetimetoken, opts)
      nil
    end

    # Login
    # @param onetimetoken [String] The token read from the QR code.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def qrloginlogin_with_http_info(onetimetoken, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.qrloginlogin ...'
      end
      # verify the required parameter 'onetimetoken' is set
      if @api_client.config.client_side_validation && onetimetoken.nil?
        fail ArgumentError, "Missing the required parameter 'onetimetoken' when calling DefaultApi.qrloginlogin"
      end
      # resource path
      local_var_path = '/qrloginlogin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'onetimetoken'] = onetimetoken

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#qrloginlogin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a widget from the Quick Panel
    # Allows the user to delete a widget that has been added to the Quick Panel.
    # @param token [String] The authentication token.
    # @param id [String] The id of the widget.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpaneldeletewidget(token, id, opts = {})
      quickpaneldeletewidget_with_http_info(token, id, opts)
      nil
    end

    # Deletes a widget from the Quick Panel
    # Allows the user to delete a widget that has been added to the Quick Panel.
    # @param token [String] The authentication token.
    # @param id [String] The id of the widget.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpaneldeletewidget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quickpaneldeletewidget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.quickpaneldeletewidget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.quickpaneldeletewidget"
      end
      # resource path
      local_var_path = '/quickpaneldeletewidget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quickpaneldeletewidget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetches the information for a specific widget.
    # @param token [String] The authentication token.
    # @param widgetid [String] The ID of the data to fetch it&#39;s data.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanelfetchwidget(token, widgetid, opts = {})
      quickpanelfetchwidget_with_http_info(token, widgetid, opts)
      nil
    end

    # Fetches the information for a specific widget.
    # @param token [String] The authentication token.
    # @param widgetid [String] The ID of the data to fetch it&#39;s data.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanelfetchwidget_with_http_info(token, widgetid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quickpanelfetchwidget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.quickpanelfetchwidget"
      end
      # verify the required parameter 'widgetid' is set
      if @api_client.config.client_side_validation && widgetid.nil?
        fail ArgumentError, "Missing the required parameter 'widgetid' when calling DefaultApi.quickpanelfetchwidget"
      end
      # resource path
      local_var_path = '/quickpanelfetchwidget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'widgetid'] = widgetid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quickpanelfetchwidget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a widget included in the Quick Panel
    # Allows the user to view a widget added in as Quick Panel.
    # @param token [String] The authentication token.
    # @param id [String] The id of the widget to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanelgetwidget(token, id, opts = {})
      quickpanelgetwidget_with_http_info(token, id, opts)
      nil
    end

    # View details of a widget included in the Quick Panel
    # Allows the user to view a widget added in as Quick Panel.
    # @param token [String] The authentication token.
    # @param id [String] The id of the widget to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanelgetwidget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quickpanelgetwidget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.quickpanelgetwidget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.quickpanelgetwidget"
      end
      # resource path
      local_var_path = '/quickpanelgetwidget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quickpanelgetwidget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the initial information required to show the quick panels
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanelinit(token, opts = {})
      quickpanelinit_with_http_info(token, opts)
      nil
    end

    # Returns the initial information required to show the quick panels
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanelinit_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quickpanelinit ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.quickpanelinit"
      end
      # resource path
      local_var_path = '/quickpanelinit'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quickpanelinit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all the widgets that are added in the Quick Panel
    # Allows the user to view the widgets that have been added to the Quick Panel.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanellistwidgets(token, opts = {})
      quickpanellistwidgets_with_http_info(token, opts)
      nil
    end

    # Lists all the widgets that are added in the Quick Panel
    # Allows the user to view the widgets that have been added to the Quick Panel.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanellistwidgets_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quickpanellistwidgets ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.quickpanellistwidgets"
      end
      # resource path
      local_var_path = '/quickpanellistwidgets'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quickpanellistwidgets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all the widget types available in the system
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanellistwidgettypes(token, opts = {})
      quickpanellistwidgettypes_with_http_info(token, opts)
      nil
    end

    # Lists all the widget types available in the system
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanellistwidgettypes_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quickpanellistwidgettypes ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.quickpanellistwidgettypes"
      end
      # resource path
      local_var_path = '/quickpanellistwidgettypes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quickpanellistwidgettypes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reorders the widgets and moves them to a specific column
    # @param token [String] The authentication token.
    # @param sectionname [String] The section name where to sort the widgets.
    # @param orderids [String] CSV list of the widgets to reorder.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quickpanelreorderwidgets(token, sectionname, orderids, opts = {})
      quickpanelreorderwidgets_with_http_info(token, sectionname, orderids, opts)
      nil
    end

    # Reorders the widgets and moves them to a specific column
    # @param token [String] The authentication token.
    # @param sectionname [String] The section name where to sort the widgets.
    # @param orderids [String] CSV list of the widgets to reorder.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanelreorderwidgets_with_http_info(token, sectionname, orderids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quickpanelreorderwidgets ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.quickpanelreorderwidgets"
      end
      # verify the required parameter 'sectionname' is set
      if @api_client.config.client_side_validation && sectionname.nil?
        fail ArgumentError, "Missing the required parameter 'sectionname' when calling DefaultApi.quickpanelreorderwidgets"
      end
      # verify the required parameter 'orderids' is set
      if @api_client.config.client_side_validation && orderids.nil?
        fail ArgumentError, "Missing the required parameter 'orderids' when calling DefaultApi.quickpanelreorderwidgets"
      end
      # resource path
      local_var_path = '/quickpanelreorderwidgets'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'sectionname'] = sectionname
      query_params[:'orderids'] = orderids

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quickpanelreorderwidgets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a widget for the Quick Panel
    # Allows the user to save a widget to the Quick Panel.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def quickpanelsavewidget(opts = {})
      quickpanelsavewidget_with_http_info(opts)
      nil
    end

    # Saves a widget for the Quick Panel
    # Allows the user to save a widget to the Quick Panel.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def quickpanelsavewidget_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quickpanelsavewidget ...'
      end
      # resource path
      local_var_path = '/quickpanelsavewidget'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quickpanelsavewidget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Flags one rating for moderation
    # @param token [String] The authentication token.
    # @param id [String] The rating to flag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Comment why should this should be removed.
    # @return [nil]
    def ratingflag(token, id, opts = {})
      ratingflag_with_http_info(token, id, opts)
      nil
    end

    # Flags one rating for moderation
    # @param token [String] The authentication token.
    # @param id [String] The rating to flag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Comment why should this should be removed.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ratingflag_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ratingflag ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ratingflag"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.ratingflag"
      end
      # resource path
      local_var_path = '/ratingflag'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ratingflag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Flags one comment for moderation
    # @param token [String] The authentication token.
    # @param id [String] The comment to flag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Comment why should this should be removed.
    # @return [nil]
    def ratingflagcomment(token, id, opts = {})
      ratingflagcomment_with_http_info(token, id, opts)
      nil
    end

    # Flags one comment for moderation
    # @param token [String] The authentication token.
    # @param id [String] The comment to flag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Comment why should this should be removed.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ratingflagcomment_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ratingflagcomment ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ratingflagcomment"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.ratingflagcomment"
      end
      # resource path
      local_var_path = '/ratingflagcomment'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ratingflagcomment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get rating for one or more entities
    # @param token [String] The authentication token.
    # @param type [String] The entity type to get the rating.
    # @param entityids [String] List of ids to get the ratings.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ratingget(token, type, entityids, opts = {})
      ratingget_with_http_info(token, type, entityids, opts)
      nil
    end

    # Get rating for one or more entities
    # @param token [String] The authentication token.
    # @param type [String] The entity type to get the rating.
    # @param entityids [String] List of ids to get the ratings.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ratingget_with_http_info(token, type, entityids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ratingget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ratingget"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DefaultApi.ratingget"
      end
      # verify the required parameter 'entityids' is set
      if @api_client.config.client_side_validation && entityids.nil?
        fail ArgumentError, "Missing the required parameter 'entityids' when calling DefaultApi.ratingget"
      end
      # resource path
      local_var_path = '/ratingget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'type'] = type
      query_params[:'entityids'] = entityids

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ratingget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the full ratings and comments for a specific entity
    # @param token [String] The authentication token.
    # @param type [String] The entity type to get the rating.
    # @param entityid [String] Id of the entity to get the ratings.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :mostrecentfirst True to show most recent first, otherwise most helpful first.
    # @return [nil]
    def ratinggetall(token, type, entityid, opts = {})
      ratinggetall_with_http_info(token, type, entityid, opts)
      nil
    end

    # Gets the full ratings and comments for a specific entity
    # @param token [String] The authentication token.
    # @param type [String] The entity type to get the rating.
    # @param entityid [String] Id of the entity to get the ratings.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :mostrecentfirst True to show most recent first, otherwise most helpful first.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ratinggetall_with_http_info(token, type, entityid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ratinggetall ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ratinggetall"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DefaultApi.ratinggetall"
      end
      # verify the required parameter 'entityid' is set
      if @api_client.config.client_side_validation && entityid.nil?
        fail ArgumentError, "Missing the required parameter 'entityid' when calling DefaultApi.ratinggetall"
      end
      # resource path
      local_var_path = '/ratinggetall'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'type'] = type
      query_params[:'entityid'] = entityid
      query_params[:'mostrecentfirst'] = opts[:'mostrecentfirst'] if !opts[:'mostrecentfirst'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ratinggetall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all the comments for a rating
    # @param token [String] The authentication token.
    # @param ratingid [String] The ID of the rating to get all comments.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ratinggetcomments(token, ratingid, opts = {})
      ratinggetcomments_with_http_info(token, ratingid, opts)
      nil
    end

    # Gets all the comments for a rating
    # @param token [String] The authentication token.
    # @param ratingid [String] The ID of the rating to get all comments.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ratinggetcomments_with_http_info(token, ratingid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ratinggetcomments ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ratinggetcomments"
      end
      # verify the required parameter 'ratingid' is set
      if @api_client.config.client_side_validation && ratingid.nil?
        fail ArgumentError, "Missing the required parameter 'ratingid' when calling DefaultApi.ratinggetcomments"
      end
      # resource path
      local_var_path = '/ratinggetcomments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'ratingid'] = ratingid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ratinggetcomments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets info of pre-saved and pre-approved ratings
    # @param getgroup [String] The ID of the group of pending ratings to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :rateid Rate this before returning.
    # @option opts [Integer] :rateval The value used to rate the item specified in rateid.
    # @return [nil]
    def ratinggetpending(getgroup, opts = {})
      ratinggetpending_with_http_info(getgroup, opts)
      nil
    end

    # Gets info of pre-saved and pre-approved ratings
    # @param getgroup [String] The ID of the group of pending ratings to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :rateid Rate this before returning.
    # @option opts [Integer] :rateval The value used to rate the item specified in rateid.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ratinggetpending_with_http_info(getgroup, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ratinggetpending ...'
      end
      # verify the required parameter 'getgroup' is set
      if @api_client.config.client_side_validation && getgroup.nil?
        fail ArgumentError, "Missing the required parameter 'getgroup' when calling DefaultApi.ratinggetpending"
      end
      # resource path
      local_var_path = '/ratinggetpending'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'getgroup'] = getgroup
      query_params[:'rateid'] = opts[:'rateid'] if !opts[:'rateid'].nil?
      query_params[:'rateval'] = opts[:'rateval'] if !opts[:'rateval'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ratinggetpending\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Shows a list of the ratings and comments that are pending for moderation
    # Allows the user to view the list of pending ratings and comments.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ratinggetpendingmoderation(token, opts = {})
      ratinggetpendingmoderation_with_http_info(token, opts)
      nil
    end

    # Shows a list of the ratings and comments that are pending for moderation
    # Allows the user to view the list of pending ratings and comments.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ratinggetpendingmoderation_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ratinggetpendingmoderation ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ratinggetpendingmoderation"
      end
      # resource path
      local_var_path = '/ratinggetpendingmoderation'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ratinggetpendingmoderation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Allows the user to accept or reject a comment
    # Allows the user to approve or reject a comment or rating.
    # @param token [String] The authentication token.
    # @param type [String] Either &#39;rating&#39; or &#39;comment&#39; depending on what you want to moderate.
    # @param id [String] Id of the rating or comment, as specified in type.
    # @param approve [Boolean] True to approve, false to reject.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ratingmoderate(token, type, id, approve, opts = {})
      ratingmoderate_with_http_info(token, type, id, approve, opts)
      nil
    end

    # Allows the user to accept or reject a comment
    # Allows the user to approve or reject a comment or rating.
    # @param token [String] The authentication token.
    # @param type [String] Either &#39;rating&#39; or &#39;comment&#39; depending on what you want to moderate.
    # @param id [String] Id of the rating or comment, as specified in type.
    # @param approve [Boolean] True to approve, false to reject.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ratingmoderate_with_http_info(token, type, id, approve, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ratingmoderate ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ratingmoderate"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DefaultApi.ratingmoderate"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.ratingmoderate"
      end
      # verify the required parameter 'approve' is set
      if @api_client.config.client_side_validation && approve.nil?
        fail ArgumentError, "Missing the required parameter 'approve' when calling DefaultApi.ratingmoderate"
      end
      # resource path
      local_var_path = '/ratingmoderate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'type'] = type
      query_params[:'id'] = id
      query_params[:'approve'] = approve

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ratingmoderate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Posts a comments for in a rating
    # @param token [String] The authentication token.
    # @param ratingid [String] The ID of the rating to post the comment.
    # @param comment [String] Text of the comment to post.
    # @param annonymous [Boolean] True to post the comment annonymously.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ratingpostcomment(token, ratingid, comment, annonymous, opts = {})
      ratingpostcomment_with_http_info(token, ratingid, comment, annonymous, opts)
      nil
    end

    # Posts a comments for in a rating
    # @param token [String] The authentication token.
    # @param ratingid [String] The ID of the rating to post the comment.
    # @param comment [String] Text of the comment to post.
    # @param annonymous [Boolean] True to post the comment annonymously.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ratingpostcomment_with_http_info(token, ratingid, comment, annonymous, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ratingpostcomment ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ratingpostcomment"
      end
      # verify the required parameter 'ratingid' is set
      if @api_client.config.client_side_validation && ratingid.nil?
        fail ArgumentError, "Missing the required parameter 'ratingid' when calling DefaultApi.ratingpostcomment"
      end
      # verify the required parameter 'comment' is set
      if @api_client.config.client_side_validation && comment.nil?
        fail ArgumentError, "Missing the required parameter 'comment' when calling DefaultApi.ratingpostcomment"
      end
      # verify the required parameter 'annonymous' is set
      if @api_client.config.client_side_validation && annonymous.nil?
        fail ArgumentError, "Missing the required parameter 'annonymous' when calling DefaultApi.ratingpostcomment"
      end
      # resource path
      local_var_path = '/ratingpostcomment'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'ratingid'] = ratingid
      query_params[:'comment'] = comment
      query_params[:'annonymous'] = annonymous

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ratingpostcomment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rates one entity
    # @param token [String] The authentication token.
    # @param type [String] The entity type to rate.
    # @param entityid [String] Id of the entity to rate.
    # @param annonymous [Boolean] Whether to post as annonymous.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :value Value from 0 to 100 with the rating.
    # @option opts [String] :comment Comment associated with this review. Comment can be updated later on another request too.
    # @option opts [Boolean] :updatecomment Whether to update the comments. Defaults to true.
    # @return [nil]
    def ratingrate(token, type, entityid, annonymous, opts = {})
      ratingrate_with_http_info(token, type, entityid, annonymous, opts)
      nil
    end

    # Rates one entity
    # @param token [String] The authentication token.
    # @param type [String] The entity type to rate.
    # @param entityid [String] Id of the entity to rate.
    # @param annonymous [Boolean] Whether to post as annonymous.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :value Value from 0 to 100 with the rating.
    # @option opts [String] :comment Comment associated with this review. Comment can be updated later on another request too.
    # @option opts [Boolean] :updatecomment Whether to update the comments. Defaults to true.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ratingrate_with_http_info(token, type, entityid, annonymous, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ratingrate ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ratingrate"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DefaultApi.ratingrate"
      end
      # verify the required parameter 'entityid' is set
      if @api_client.config.client_side_validation && entityid.nil?
        fail ArgumentError, "Missing the required parameter 'entityid' when calling DefaultApi.ratingrate"
      end
      # verify the required parameter 'annonymous' is set
      if @api_client.config.client_side_validation && annonymous.nil?
        fail ArgumentError, "Missing the required parameter 'annonymous' when calling DefaultApi.ratingrate"
      end
      # resource path
      local_var_path = '/ratingrate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'type'] = type
      query_params[:'entityid'] = entityid
      query_params[:'annonymous'] = annonymous
      query_params[:'value'] = opts[:'value'] if !opts[:'value'].nil?
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?
      query_params[:'updatecomment'] = opts[:'updatecomment'] if !opts[:'updatecomment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ratingrate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rates a pre-saved and pre-approved entity
    # @param group [String] The ID of the group of with pre-approved ratings.
    # @param annonymous [Boolean] Whether to post as annonymous.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :rateid Rate this before returning.
    # @option opts [Integer] :value Value from 0 to 100 with the rating.
    # @option opts [String] :comment Comment associated with this review. Comment can be updated later on another request too.
    # @option opts [Boolean] :updatecomment Whether to update the comments. Defaults to true.
    # @return [nil]
    def ratingratepending(group, annonymous, opts = {})
      ratingratepending_with_http_info(group, annonymous, opts)
      nil
    end

    # Rates a pre-saved and pre-approved entity
    # @param group [String] The ID of the group of with pre-approved ratings.
    # @param annonymous [Boolean] Whether to post as annonymous.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :rateid Rate this before returning.
    # @option opts [Integer] :value Value from 0 to 100 with the rating.
    # @option opts [String] :comment Comment associated with this review. Comment can be updated later on another request too.
    # @option opts [Boolean] :updatecomment Whether to update the comments. Defaults to true.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ratingratepending_with_http_info(group, annonymous, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ratingratepending ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling DefaultApi.ratingratepending"
      end
      # verify the required parameter 'annonymous' is set
      if @api_client.config.client_side_validation && annonymous.nil?
        fail ArgumentError, "Missing the required parameter 'annonymous' when calling DefaultApi.ratingratepending"
      end
      # resource path
      local_var_path = '/ratingratepending'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group'] = group
      query_params[:'annonymous'] = annonymous
      query_params[:'rateid'] = opts[:'rateid'] if !opts[:'rateid'].nil?
      query_params[:'value'] = opts[:'value'] if !opts[:'value'].nil?
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?
      query_params[:'updatecomment'] = opts[:'updatecomment'] if !opts[:'updatecomment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ratingratepending\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Votes up or down a rating
    # @param token [String] The authentication token.
    # @param ratingid [String] The ID of the rating to vote on.
    # @param vote [Integer] 1 to vote up, -1 to vote down.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ratingvote(token, ratingid, vote, opts = {})
      ratingvote_with_http_info(token, ratingid, vote, opts)
      nil
    end

    # Votes up or down a rating
    # @param token [String] The authentication token.
    # @param ratingid [String] The ID of the rating to vote on.
    # @param vote [Integer] 1 to vote up, -1 to vote down.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ratingvote_with_http_info(token, ratingid, vote, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ratingvote ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ratingvote"
      end
      # verify the required parameter 'ratingid' is set
      if @api_client.config.client_side_validation && ratingid.nil?
        fail ArgumentError, "Missing the required parameter 'ratingid' when calling DefaultApi.ratingvote"
      end
      # verify the required parameter 'vote' is set
      if @api_client.config.client_side_validation && vote.nil?
        fail ArgumentError, "Missing the required parameter 'vote' when calling DefaultApi.ratingvote"
      end
      # resource path
      local_var_path = '/ratingvote'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'ratingid'] = ratingid
      query_params[:'vote'] = vote

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ratingvote\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query and load an attendance analytics report
    # Allows the user to query and load attendance analytics reports.
    # @param token [String] The authentication token.
    # @param reportname [String] The name of the report to execute
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @option opts [String] :refreshgroup The ID of the group to check (and refresh) before processing the report.
    # @return [nil]
    def reportattanalyticsprepare(token, reportname, opts = {})
      reportattanalyticsprepare_with_http_info(token, reportname, opts)
      nil
    end

    # Query and load an attendance analytics report
    # Allows the user to query and load attendance analytics reports.
    # @param token [String] The authentication token.
    # @param reportname [String] The name of the report to execute
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @option opts [String] :refreshgroup The ID of the group to check (and refresh) before processing the report.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reportattanalyticsprepare_with_http_info(token, reportname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reportattanalyticsprepare ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.reportattanalyticsprepare"
      end
      # verify the required parameter 'reportname' is set
      if @api_client.config.client_side_validation && reportname.nil?
        fail ArgumentError, "Missing the required parameter 'reportname' when calling DefaultApi.reportattanalyticsprepare"
      end
      # resource path
      local_var_path = '/reportattanalyticsprepare'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'reportname'] = reportname
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'refreshgroup'] = opts[:'refreshgroup'] if !opts[:'refreshgroup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reportattanalyticsprepare\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of available reports
    # Allows the user to view the complete list of available, canned reports.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reportlist(token, opts = {})
      reportlist_with_http_info(token, opts)
      nil
    end

    # View a list of available reports
    # Allows the user to view the complete list of available, canned reports.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reportlist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reportlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.reportlist"
      end
      # resource path
      local_var_path = '/reportlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reportlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Permissions by user report
    # Lists all the users in the system including their corresponding permissions.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @return [nil]
    def reportpermissionsbyuser(token, opts = {})
      reportpermissionsbyuser_with_http_info(token, opts)
      nil
    end

    # Permissions by user report
    # Lists all the users in the system including their corresponding permissions.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reportpermissionsbyuser_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reportpermissionsbyuser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.reportpermissionsbyuser"
      end
      # resource path
      local_var_path = '/reportpermissionsbyuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reportpermissionsbyuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Queries and loads the specified report, in background.
    # Allows the user to run reports, in background, with the exception of attendance analytics reports.
    # @param token [String] The authentication token.
    # @param reportname [String] The name of the report to execute
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @option opts [String] :repformat The format of the resulting report. Json, pdf, csv, ...
    # @option opts [String] :fillgroupid If specified, the result is used to fill the group with the given ID
    # @option opts [String] :groupby How to group the records. In the format &#39;col1+col2|col3+col4
    # @option opts [String] :refreshgroup The ID of the group to check (and refresh) before processing the report.
    # @option opts [String] :filtertext The user friendly text of the applied filters.
    # @return [nil]
    def reportprepare(token, reportname, opts = {})
      reportprepare_with_http_info(token, reportname, opts)
      nil
    end

    # Queries and loads the specified report, in background.
    # Allows the user to run reports, in background, with the exception of attendance analytics reports.
    # @param token [String] The authentication token.
    # @param reportname [String] The name of the report to execute
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @option opts [String] :repformat The format of the resulting report. Json, pdf, csv, ...
    # @option opts [String] :fillgroupid If specified, the result is used to fill the group with the given ID
    # @option opts [String] :groupby How to group the records. In the format &#39;col1+col2|col3+col4
    # @option opts [String] :refreshgroup The ID of the group to check (and refresh) before processing the report.
    # @option opts [String] :filtertext The user friendly text of the applied filters.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reportprepare_with_http_info(token, reportname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reportprepare ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.reportprepare"
      end
      # verify the required parameter 'reportname' is set
      if @api_client.config.client_side_validation && reportname.nil?
        fail ArgumentError, "Missing the required parameter 'reportname' when calling DefaultApi.reportprepare"
      end
      # resource path
      local_var_path = '/reportprepare'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'reportname'] = reportname
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'repformat'] = opts[:'repformat'] if !opts[:'repformat'].nil?
      query_params[:'fillgroupid'] = opts[:'fillgroupid'] if !opts[:'fillgroupid'].nil?
      query_params[:'groupby'] = opts[:'groupby'] if !opts[:'groupby'].nil?
      query_params[:'refreshgroup'] = opts[:'refreshgroup'] if !opts[:'refreshgroup'].nil?
      query_params[:'filtertext'] = opts[:'filtertext'] if !opts[:'filtertext'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reportprepare\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query and load a specified report
    # Allows the user to run reports with the exception of attendance analytics reports.
    # @param token [String] The authentication token.
    # @param reportname [String] The name of the report to execute
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @return [nil]
    def reportquery(token, reportname, opts = {})
      reportquery_with_http_info(token, reportname, opts)
      nil
    end

    # Query and load a specified report
    # Allows the user to run reports with the exception of attendance analytics reports.
    # @param token [String] The authentication token.
    # @param reportname [String] The name of the report to execute
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reportquery_with_http_info(token, reportname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reportquery ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.reportquery"
      end
      # verify the required parameter 'reportname' is set
      if @api_client.config.client_side_validation && reportname.nil?
        fail ArgumentError, "Missing the required parameter 'reportname' when calling DefaultApi.reportquery"
      end
      # resource path
      local_var_path = '/reportquery'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'reportname'] = reportname
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reportquery\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a report schedule
    # Allows the user to delete a scheduled report that they created.
    # @param token [String] The authentication token.
    # @param id [String] The id of the report schedule to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reportscheduledelete(token, id, opts = {})
      reportscheduledelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a report schedule
    # Allows the user to delete a scheduled report that they created.
    # @param token [String] The authentication token.
    # @param id [String] The id of the report schedule to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reportscheduledelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reportscheduledelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.reportscheduledelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.reportscheduledelete"
      end
      # resource path
      local_var_path = '/reportscheduledelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reportscheduledelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a report schedule
    # Allows the user to view the list of reports that they scheduled.
    # @param token [String] The authentication token.
    # @param id [String] The id of the schedule to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reportscheduleget(token, id, opts = {})
      reportscheduleget_with_http_info(token, id, opts)
      nil
    end

    # Get a report schedule
    # Allows the user to view the list of reports that they scheduled.
    # @param token [String] The authentication token.
    # @param id [String] The id of the schedule to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reportscheduleget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reportscheduleget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.reportscheduleget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.reportscheduleget"
      end
      # resource path
      local_var_path = '/reportscheduleget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reportscheduleget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of the scheduled reports
    # Allows the user to view a list of the scheduled reports.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reportschedulelist(token, from, count, opts = {})
      reportschedulelist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of the scheduled reports
    # Allows the user to view a list of the scheduled reports.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reportschedulelist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reportschedulelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.reportschedulelist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.reportschedulelist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.reportschedulelist"
      end
      # resource path
      local_var_path = '/reportschedulelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reportschedulelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a report schedule
    # Allows the user to create or edit a scheduled report.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def reportschedulesave(opts = {})
      reportschedulesave_with_http_info(opts)
      nil
    end

    # Create or edit a report schedule
    # Allows the user to create or edit a scheduled report.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reportschedulesave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reportschedulesave ...'
      end
      # resource path
      local_var_path = '/reportschedulesave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reportschedulesave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Queries and loads a report in background and assigns (or unassigns) the specified tags to (from) the resulting users.
    # Allows the user to use a report to assign or unassign tags.
    # @param token [String] The authentication token.
    # @param reportname [String] The name of the report to execute
    # @param assign [Boolean] Specify whether the specified tags have to be assigned or unassigned.
    # @param tags [String] The tags to assign (or unassign) to the resulting users in the report, in JSON format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @return [nil]
    def reporttagresults(token, reportname, assign, tags, opts = {})
      reporttagresults_with_http_info(token, reportname, assign, tags, opts)
      nil
    end

    # Queries and loads a report in background and assigns (or unassigns) the specified tags to (from) the resulting users.
    # Allows the user to use a report to assign or unassign tags.
    # @param token [String] The authentication token.
    # @param reportname [String] The name of the report to execute
    # @param assign [Boolean] Specify whether the specified tags have to be assigned or unassigned.
    # @param tags [String] The tags to assign (or unassign) to the resulting users in the report, in JSON format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reporttagresults_with_http_info(token, reportname, assign, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reporttagresults ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.reporttagresults"
      end
      # verify the required parameter 'reportname' is set
      if @api_client.config.client_side_validation && reportname.nil?
        fail ArgumentError, "Missing the required parameter 'reportname' when calling DefaultApi.reporttagresults"
      end
      # verify the required parameter 'assign' is set
      if @api_client.config.client_side_validation && assign.nil?
        fail ArgumentError, "Missing the required parameter 'assign' when calling DefaultApi.reporttagresults"
      end
      # verify the required parameter 'tags' is set
      if @api_client.config.client_side_validation && tags.nil?
        fail ArgumentError, "Missing the required parameter 'tags' when calling DefaultApi.reporttagresults"
      end
      # resource path
      local_var_path = '/reporttagresults'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'reportname'] = reportname
      query_params[:'assign'] = assign
      query_params[:'tags'] = tags
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reporttagresults\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check the status of the analysis of a specified risk assessment model
    # Allows the user to check the status of a risk assessment model as it is being processed.
    # @param token [String] The authentication token.
    # @param id [String] The id of the risk assessment model whose analysis status has to be returned.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def riskmodelcheckanalysis(token, id, opts = {})
      riskmodelcheckanalysis_with_http_info(token, id, opts)
      nil
    end

    # Check the status of the analysis of a specified risk assessment model
    # Allows the user to check the status of a risk assessment model as it is being processed.
    # @param token [String] The authentication token.
    # @param id [String] The id of the risk assessment model whose analysis status has to be returned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def riskmodelcheckanalysis_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.riskmodelcheckanalysis ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.riskmodelcheckanalysis"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.riskmodelcheckanalysis"
      end
      # resource path
      local_var_path = '/riskmodelcheckanalysis'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#riskmodelcheckanalysis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a risk assessment model
    # Allows the user to delete a previously created risk assessment model.
    # @param token [String] The authentication token.
    # @param id [String] The id of the risk assessment model to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def riskmodeldelete(token, id, opts = {})
      riskmodeldelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a risk assessment model
    # Allows the user to delete a previously created risk assessment model.
    # @param token [String] The authentication token.
    # @param id [String] The id of the risk assessment model to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def riskmodeldelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.riskmodeldelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.riskmodeldelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.riskmodeldelete"
      end
      # resource path
      local_var_path = '/riskmodeldelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#riskmodeldelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a risk assessment model
    # Allows the user to view an individual risk assessment model and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the risk assessment model to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def riskmodelget(token, id, opts = {})
      riskmodelget_with_http_info(token, id, opts)
      nil
    end

    # View details of a risk assessment model
    # Allows the user to view an individual risk assessment model and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the risk assessment model to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def riskmodelget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.riskmodelget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.riskmodelget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.riskmodelget"
      end
      # resource path
      local_var_path = '/riskmodelget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#riskmodelget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the risk score for a specific user
    # Allows the user to view the risk score of another user.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to get the risk score.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def riskmodelgetscore(token, userid, opts = {})
      riskmodelgetscore_with_http_info(token, userid, opts)
      nil
    end

    # View the risk score for a specific user
    # Allows the user to view the risk score of another user.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to get the risk score.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def riskmodelgetscore_with_http_info(token, userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.riskmodelgetscore ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.riskmodelgetscore"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.riskmodelgetscore"
      end
      # resource path
      local_var_path = '/riskmodelgetscore'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#riskmodelgetscore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of risk assessment models
    # Allows the user to view the full list of risk assessment models.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def riskmodellist(token, from, count, opts = {})
      riskmodellist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of risk assessment models
    # Allows the user to view the full list of risk assessment models.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def riskmodellist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.riskmodellist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.riskmodellist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.riskmodellist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.riskmodellist"
      end
      # resource path
      local_var_path = '/riskmodellist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#riskmodellist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Predict risk based on an assessment model
    # Allows a user to process a risk prediction from a risk assessment model that has processed.
    # @param token [String] The authentication token.
    # @param id [String] The id of the assessment model to use in order to predict risk.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def riskmodelpredict(token, id, opts = {})
      riskmodelpredict_with_http_info(token, id, opts)
      nil
    end

    # Predict risk based on an assessment model
    # Allows a user to process a risk prediction from a risk assessment model that has processed.
    # @param token [String] The authentication token.
    # @param id [String] The id of the assessment model to use in order to predict risk.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def riskmodelpredict_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.riskmodelpredict ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.riskmodelpredict"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.riskmodelpredict"
      end
      # resource path
      local_var_path = '/riskmodelpredict'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#riskmodelpredict\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Process a risk assessment model
    # Allows the user to process a risk assessment model once it has been created.
    # @param token [String] The authentication token.
    # @param id [String] The id of the risk assessment model to process.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def riskmodelprocess(token, id, opts = {})
      riskmodelprocess_with_http_info(token, id, opts)
      nil
    end

    # Process a risk assessment model
    # Allows the user to process a risk assessment model once it has been created.
    # @param token [String] The authentication token.
    # @param id [String] The id of the risk assessment model to process.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def riskmodelprocess_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.riskmodelprocess ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.riskmodelprocess"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.riskmodelprocess"
      end
      # resource path
      local_var_path = '/riskmodelprocess'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#riskmodelprocess\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh the information used in a risk assessment model
    # Allows the user to refresh a risk assessment model.
    # @param token [String] The authentication token.
    # @param id [String] The id of the risk assessment model whose information has to be refreshed.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def riskmodelrefresh(token, id, opts = {})
      riskmodelrefresh_with_http_info(token, id, opts)
      nil
    end

    # Refresh the information used in a risk assessment model
    # Allows the user to refresh a risk assessment model.
    # @param token [String] The authentication token.
    # @param id [String] The id of the risk assessment model whose information has to be refreshed.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def riskmodelrefresh_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.riskmodelrefresh ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.riskmodelrefresh"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.riskmodelrefresh"
      end
      # resource path
      local_var_path = '/riskmodelrefresh'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#riskmodelrefresh\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a risk assessment model
    # Allows the user to create or edit a risk assessment model.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def riskmodelsave(opts = {})
      riskmodelsave_with_http_info(opts)
      nil
    end

    # Create or edit a risk assessment model
    # Allows the user to create or edit a risk assessment model.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def riskmodelsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.riskmodelsave ...'
      end
      # resource path
      local_var_path = '/riskmodelsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#riskmodelsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all default term precedences
    # Allows the user to view the default term precedences used in a model.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def riskmodeltermprecedences(token, opts = {})
      riskmodeltermprecedences_with_http_info(token, opts)
      nil
    end

    # View all default term precedences
    # Allows the user to view the default term precedences used in a model.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def riskmodeltermprecedences_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.riskmodeltermprecedences ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.riskmodeltermprecedences"
      end
      # resource path
      local_var_path = '/riskmodeltermprecedences'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#riskmodeltermprecedences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show a list of roles
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Filter by name of the role.
    # @return [nil]
    def rolelist(token, opts = {})
      rolelist_with_http_info(token, opts)
      nil
    end

    # Show a list of roles
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Filter by name of the role.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rolelist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.rolelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.rolelist"
      end
      # resource path
      local_var_path = '/rolelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#rolelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a rule
    # Allows the user to delete an existing rule.
    # @param token [String] The authentication token.
    # @param id [String] The id of the rule to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ruledelete(token, id, opts = {})
      ruledelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a rule
    # Allows the user to delete an existing rule.
    # @param token [String] The authentication token.
    # @param id [String] The id of the rule to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ruledelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ruledelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ruledelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.ruledelete"
      end
      # resource path
      local_var_path = '/ruledelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ruledelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a rule
    # Allows the user to view an individual rule and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the rule to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ruleget(token, id, opts = {})
      ruleget_with_http_info(token, id, opts)
      nil
    end

    # View details of a rule
    # Allows the user to view an individual rule and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the rule to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ruleget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ruleget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ruleget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.ruleget"
      end
      # resource path
      local_var_path = '/ruleget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ruleget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a rule event type
    # Allows the user to view the trigger and its available conditions for the rule.
    # @param token [String] The authentication token.
    # @param event [String] The name of the event to refresh.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rulegeteventtype(token, event, opts = {})
      rulegeteventtype_with_http_info(token, event, opts)
      nil
    end

    # View details of a rule event type
    # Allows the user to view the trigger and its available conditions for the rule.
    # @param token [String] The authentication token.
    # @param event [String] The name of the event to refresh.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rulegeteventtype_with_http_info(token, event, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.rulegeteventtype ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.rulegeteventtype"
      end
      # verify the required parameter 'event' is set
      if @api_client.config.client_side_validation && event.nil?
        fail ArgumentError, "Missing the required parameter 'event' when calling DefaultApi.rulegeteventtype"
      end
      # resource path
      local_var_path = '/rulegeteventtype'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'event'] = event

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#rulegeteventtype\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of user rules
    # Allows the user to view the list of all rules.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rulelist(token, from, count, opts = {})
      rulelist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of user rules
    # Allows the user to view the list of all rules.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rulelist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.rulelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.rulelist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.rulelist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.rulelist"
      end
      # resource path
      local_var_path = '/rulelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#rulelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of rule actions available
    # Allows the user to view all the available rule actions.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rulelistactions(token, opts = {})
      rulelistactions_with_http_info(token, opts)
      nil
    end

    # View a list of rule actions available
    # Allows the user to view all the available rule actions.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rulelistactions_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.rulelistactions ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.rulelistactions"
      end
      # resource path
      local_var_path = '/rulelistactions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#rulelistactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of rule event types
    # Allows the user to view a list of available triggers for rules.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rulelisteventtypes(token, opts = {})
      rulelisteventtypes_with_http_info(token, opts)
      nil
    end

    # View a list of rule event types
    # Allows the user to view a list of available triggers for rules.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rulelisteventtypes_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.rulelisteventtypes ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.rulelisteventtypes"
      end
      # resource path
      local_var_path = '/rulelisteventtypes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#rulelisteventtypes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the http requests sent as a result of a rule
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :failed If true only failed requests will be returned
    # @option opts [Integer] :status The http status to filter the requests
    # @return [nil]
    def rulelisthttprequests(token, from, count, opts = {})
      rulelisthttprequests_with_http_info(token, from, count, opts)
      nil
    end

    # View all the http requests sent as a result of a rule
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :failed If true only failed requests will be returned
    # @option opts [Integer] :status The http status to filter the requests
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rulelisthttprequests_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.rulelisthttprequests ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.rulelisthttprequests"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.rulelisthttprequests"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.rulelisthttprequests"
      end
      # resource path
      local_var_path = '/rulelisthttprequests'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'failed'] = opts[:'failed'] if !opts[:'failed'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#rulelisthttprequests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a rule
    # Allows the user to create or edit a rule.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def rulesave(opts = {})
      rulesave_with_http_info(opts)
      nil
    end

    # Create or edit a rule
    # Allows the user to create or edit a rule.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rulesave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.rulesave ...'
      end
      # resource path
      local_var_path = '/rulesave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#rulesave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a schedule slot
    # Allows the user to delete a schedule slot from another user.
    # @param token [String] The authentication token.
    # @param scheduleid [String] The id of the schedule.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def scheduledelete(token, scheduleid, opts = {})
      scheduledelete_with_http_info(token, scheduleid, opts)
      nil
    end

    # Delete a schedule slot
    # Allows the user to delete a schedule slot from another user.
    # @param token [String] The authentication token.
    # @param scheduleid [String] The id of the schedule.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduledelete_with_http_info(token, scheduleid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scheduledelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.scheduledelete"
      end
      # verify the required parameter 'scheduleid' is set
      if @api_client.config.client_side_validation && scheduleid.nil?
        fail ArgumentError, "Missing the required parameter 'scheduleid' when calling DefaultApi.scheduledelete"
      end
      # resource path
      local_var_path = '/scheduledelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'scheduleid'] = scheduleid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scheduledelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific block from a user's own schedule
    # Allows the user to delete a schedule block from their own availability.
    # @param token [String] The authentication token.
    # @param scheduleid [String] The id of the schedule.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def scheduledeletemine(token, scheduleid, opts = {})
      scheduledeletemine_with_http_info(token, scheduleid, opts)
      nil
    end

    # Delete a specific block from a user&#39;s own schedule
    # Allows the user to delete a schedule block from their own availability.
    # @param token [String] The authentication token.
    # @param scheduleid [String] The id of the schedule.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduledeletemine_with_http_info(token, scheduleid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scheduledeletemine ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.scheduledeletemine"
      end
      # verify the required parameter 'scheduleid' is set
      if @api_client.config.client_side_validation && scheduleid.nil?
        fail ArgumentError, "Missing the required parameter 'scheduleid' when calling DefaultApi.scheduledeletemine"
      end
      # resource path
      local_var_path = '/scheduledeletemine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'scheduleid'] = scheduleid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scheduledeletemine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable or disable the schedule for a specific person
    # Allows the user to enable or disable a schedule for another user.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to enable or disable the schedule.
    # @param enable [Boolean] True to enable schedules, false to disable.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def scheduleenable(token, userid, enable, opts = {})
      scheduleenable_with_http_info(token, userid, enable, opts)
      nil
    end

    # Enable or disable the schedule for a specific person
    # Allows the user to enable or disable a schedule for another user.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to enable or disable the schedule.
    # @param enable [Boolean] True to enable schedules, false to disable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduleenable_with_http_info(token, userid, enable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scheduleenable ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.scheduleenable"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.scheduleenable"
      end
      # verify the required parameter 'enable' is set
      if @api_client.config.client_side_validation && enable.nil?
        fail ArgumentError, "Missing the required parameter 'enable' when calling DefaultApi.scheduleenable"
      end
      # resource path
      local_var_path = '/scheduleenable'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'enable'] = enable

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scheduleenable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable or disable current user's schedule
    # Allows the user to enable or disable a schedule for himself.
    # @param token [String] The authentication token.
    # @param enable [Boolean] True to enable schedules, false to disable.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def scheduleenablemine(token, enable, opts = {})
      scheduleenablemine_with_http_info(token, enable, opts)
      nil
    end

    # Enable or disable current user&#39;s schedule
    # Allows the user to enable or disable a schedule for himself.
    # @param token [String] The authentication token.
    # @param enable [Boolean] True to enable schedules, false to disable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduleenablemine_with_http_info(token, enable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scheduleenablemine ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.scheduleenablemine"
      end
      # verify the required parameter 'enable' is set
      if @api_client.config.client_side_validation && enable.nil?
        fail ArgumentError, "Missing the required parameter 'enable' when calling DefaultApi.scheduleenablemine"
      end
      # resource path
      local_var_path = '/scheduleenablemine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'enable'] = enable

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scheduleenablemine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search available schedule slots by service, event, date
    # Allows users to search available slots.
    # @param token [String] The authentication token.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :staffid The id of the staff to filter by.
    # @option opts [String] :serviceids CSV list of the service Ids to filter by.
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [String] :locationid The id of the location to filter by.
    # @option opts [String] :staffroleids CSV list of the staff member role ids to filter by.
    # @option opts [String] :availablefor The specific availability type to filter by.
    # @return [nil]
    def schedulefindallstaffslots(token, starttime, endtime, opts = {})
      schedulefindallstaffslots_with_http_info(token, starttime, endtime, opts)
      nil
    end

    # Search available schedule slots by service, event, date
    # Allows users to search available slots.
    # @param token [String] The authentication token.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :staffid The id of the staff to filter by.
    # @option opts [String] :serviceids CSV list of the service Ids to filter by.
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [String] :locationid The id of the location to filter by.
    # @option opts [String] :staffroleids CSV list of the staff member role ids to filter by.
    # @option opts [String] :availablefor The specific availability type to filter by.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def schedulefindallstaffslots_with_http_info(token, starttime, endtime, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.schedulefindallstaffslots ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.schedulefindallstaffslots"
      end
      # verify the required parameter 'starttime' is set
      if @api_client.config.client_side_validation && starttime.nil?
        fail ArgumentError, "Missing the required parameter 'starttime' when calling DefaultApi.schedulefindallstaffslots"
      end
      # verify the required parameter 'endtime' is set
      if @api_client.config.client_side_validation && endtime.nil?
        fail ArgumentError, "Missing the required parameter 'endtime' when calling DefaultApi.schedulefindallstaffslots"
      end
      # resource path
      local_var_path = '/schedulefindallstaffslots'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'starttime'] = starttime
      query_params[:'endtime'] = endtime
      query_params[:'staffid'] = opts[:'staffid'] if !opts[:'staffid'].nil?
      query_params[:'serviceids'] = opts[:'serviceids'] if !opts[:'serviceids'].nil?
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'locationid'] = opts[:'locationid'] if !opts[:'locationid'].nil?
      query_params[:'staffroleids'] = opts[:'staffroleids'] if !opts[:'staffroleids'].nil?
      query_params[:'availablefor'] = opts[:'availablefor'] if !opts[:'availablefor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#schedulefindallstaffslots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search available schedule slots by service, event, date and/or staff
    # Allows users to search available slots when making appointments.
    # @param token [String] The authentication token.
    # @param staffid [String] The id of the staff to filter by.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :serviceids CSV list of the service Ids to filter by.
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [String] :locationid The id of the service to filter by.
    # @option opts [String] :availablefor The specific availability type to filter by.
    # @return [nil]
    def schedulefindslots(token, staffid, starttime, endtime, opts = {})
      schedulefindslots_with_http_info(token, staffid, starttime, endtime, opts)
      nil
    end

    # Search available schedule slots by service, event, date and/or staff
    # Allows users to search available slots when making appointments.
    # @param token [String] The authentication token.
    # @param staffid [String] The id of the staff to filter by.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :serviceids CSV list of the service Ids to filter by.
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [String] :locationid The id of the service to filter by.
    # @option opts [String] :availablefor The specific availability type to filter by.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def schedulefindslots_with_http_info(token, staffid, starttime, endtime, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.schedulefindslots ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.schedulefindslots"
      end
      # verify the required parameter 'staffid' is set
      if @api_client.config.client_side_validation && staffid.nil?
        fail ArgumentError, "Missing the required parameter 'staffid' when calling DefaultApi.schedulefindslots"
      end
      # verify the required parameter 'starttime' is set
      if @api_client.config.client_side_validation && starttime.nil?
        fail ArgumentError, "Missing the required parameter 'starttime' when calling DefaultApi.schedulefindslots"
      end
      # verify the required parameter 'endtime' is set
      if @api_client.config.client_side_validation && endtime.nil?
        fail ArgumentError, "Missing the required parameter 'endtime' when calling DefaultApi.schedulefindslots"
      end
      # resource path
      local_var_path = '/schedulefindslots'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'staffid'] = staffid
      query_params[:'starttime'] = starttime
      query_params[:'endtime'] = endtime
      query_params[:'serviceids'] = opts[:'serviceids'] if !opts[:'serviceids'].nil?
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'locationid'] = opts[:'locationid'] if !opts[:'locationid'].nil?
      query_params[:'availablefor'] = opts[:'availablefor'] if !opts[:'availablefor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#schedulefindslots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search available staff members slots by service, event, and/or date
    # Allows users to search available staff.
    # @param token [String] The authentication token.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :serviceids CSV list of the service ids to filter by.
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [String] :locationid The id of the service to filter by.
    # @option opts [String] :staffroleids CSV list of the staff member role ids to filter by.
    # @option opts [String] :availablefor Filter slots by a specific availability type.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def schedulefindstaffavail(token, starttime, endtime, opts = {})
      schedulefindstaffavail_with_http_info(token, starttime, endtime, opts)
      nil
    end

    # Search available staff members slots by service, event, and/or date
    # Allows users to search available staff.
    # @param token [String] The authentication token.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :serviceids CSV list of the service ids to filter by.
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [String] :locationid The id of the service to filter by.
    # @option opts [String] :staffroleids CSV list of the staff member role ids to filter by.
    # @option opts [String] :availablefor Filter slots by a specific availability type.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def schedulefindstaffavail_with_http_info(token, starttime, endtime, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.schedulefindstaffavail ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.schedulefindstaffavail"
      end
      # verify the required parameter 'starttime' is set
      if @api_client.config.client_side_validation && starttime.nil?
        fail ArgumentError, "Missing the required parameter 'starttime' when calling DefaultApi.schedulefindstaffavail"
      end
      # verify the required parameter 'endtime' is set
      if @api_client.config.client_side_validation && endtime.nil?
        fail ArgumentError, "Missing the required parameter 'endtime' when calling DefaultApi.schedulefindstaffavail"
      end
      # resource path
      local_var_path = '/schedulefindstaffavail'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'starttime'] = starttime
      query_params[:'endtime'] = endtime
      query_params[:'serviceids'] = opts[:'serviceids'] if !opts[:'serviceids'].nil?
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'locationid'] = opts[:'locationid'] if !opts[:'locationid'].nil?
      query_params[:'staffroleids'] = opts[:'staffroleids'] if !opts[:'staffroleids'].nil?
      query_params[:'availablefor'] = opts[:'availablefor'] if !opts[:'availablefor'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#schedulefindstaffavail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a specific schedule slot
    # Allows the user to view the details of schedule shifts for any user role that the user has permission to view.
    # @param token [String] The authentication token.
    # @param scheduleid [String] The id of the schedule.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def scheduleget(token, scheduleid, opts = {})
      scheduleget_with_http_info(token, scheduleid, opts)
      nil
    end

    # Search and view details of a specific schedule slot
    # Allows the user to view the details of schedule shifts for any user role that the user has permission to view.
    # @param token [String] The authentication token.
    # @param scheduleid [String] The id of the schedule.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduleget_with_http_info(token, scheduleid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scheduleget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.scheduleget"
      end
      # verify the required parameter 'scheduleid' is set
      if @api_client.config.client_side_validation && scheduleid.nil?
        fail ArgumentError, "Missing the required parameter 'scheduleid' when calling DefaultApi.scheduleget"
      end
      # resource path
      local_var_path = '/scheduleget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'scheduleid'] = scheduleid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scheduleget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a specific schedule block, for current user
    # Allows the user to view the details of their own schedule shifts.
    # @param token [String] The authentication token.
    # @param scheduleid [String] The id of the schedule.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def schedulegetmine(token, scheduleid, opts = {})
      schedulegetmine_with_http_info(token, scheduleid, opts)
      nil
    end

    # View details of a specific schedule block, for current user
    # Allows the user to view the details of their own schedule shifts.
    # @param token [String] The authentication token.
    # @param scheduleid [String] The id of the schedule.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def schedulegetmine_with_http_info(token, scheduleid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.schedulegetmine ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.schedulegetmine"
      end
      # verify the required parameter 'scheduleid' is set
      if @api_client.config.client_side_validation && scheduleid.nil?
        fail ArgumentError, "Missing the required parameter 'scheduleid' when calling DefaultApi.schedulegetmine"
      end
      # resource path
      local_var_path = '/schedulegetmine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'scheduleid'] = scheduleid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#schedulegetmine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of schedule information of a specified person
    # Allows the user to view the schedule shifts for user roles that the user has permission to access.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to get info.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def schedulegetstaff(token, userid, opts = {})
      schedulegetstaff_with_http_info(token, userid, opts)
      nil
    end

    # View a list of schedule information of a specified person
    # Allows the user to view the schedule shifts for user roles that the user has permission to access.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to get info.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def schedulegetstaff_with_http_info(token, userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.schedulegetstaff ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.schedulegetstaff"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.schedulegetstaff"
      end
      # resource path
      local_var_path = '/schedulegetstaff'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#schedulegetstaff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View current user's schedule information
    # Allows the user to view their own schedule.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def schedulegetstaffmine(token, opts = {})
      schedulegetstaffmine_with_http_info(token, opts)
      nil
    end

    # View current user&#39;s schedule information
    # Allows the user to view their own schedule.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def schedulegetstaffmine_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.schedulegetstaffmine ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.schedulegetstaffmine"
      end
      # resource path
      local_var_path = '/schedulegetstaffmine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#schedulegetstaffmine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a schedule item looking up by a third party ID
    # @param token [String] The authentication token.
    # @param thirdpartyid [String] The third party id to search the schedule block / appointment.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def scheduleintegrationdeleteitem(token, thirdpartyid, opts = {})
      scheduleintegrationdeleteitem_with_http_info(token, thirdpartyid, opts)
      nil
    end

    # Delete a schedule item looking up by a third party ID
    # @param token [String] The authentication token.
    # @param thirdpartyid [String] The third party id to search the schedule block / appointment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduleintegrationdeleteitem_with_http_info(token, thirdpartyid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scheduleintegrationdeleteitem ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.scheduleintegrationdeleteitem"
      end
      # verify the required parameter 'thirdpartyid' is set
      if @api_client.config.client_side_validation && thirdpartyid.nil?
        fail ArgumentError, "Missing the required parameter 'thirdpartyid' when calling DefaultApi.scheduleintegrationdeleteitem"
      end
      # resource path
      local_var_path = '/scheduleintegrationdeleteitem'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'thirdpartyid'] = thirdpartyid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scheduleintegrationdeleteitem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete multiple schedule items looking up by a third party master ID
    # @param token [String] The authentication token.
    # @param thirdpartymasterid [String] The third party master id to search the schedule items.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def scheduleintegrationdeleteitemsbymasterid(token, thirdpartymasterid, opts = {})
      scheduleintegrationdeleteitemsbymasterid_with_http_info(token, thirdpartymasterid, opts)
      nil
    end

    # Delete multiple schedule items looking up by a third party master ID
    # @param token [String] The authentication token.
    # @param thirdpartymasterid [String] The third party master id to search the schedule items.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduleintegrationdeleteitemsbymasterid_with_http_info(token, thirdpartymasterid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scheduleintegrationdeleteitemsbymasterid ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.scheduleintegrationdeleteitemsbymasterid"
      end
      # verify the required parameter 'thirdpartymasterid' is set
      if @api_client.config.client_side_validation && thirdpartymasterid.nil?
        fail ArgumentError, "Missing the required parameter 'thirdpartymasterid' when calling DefaultApi.scheduleintegrationdeleteitemsbymasterid"
      end
      # resource path
      local_var_path = '/scheduleintegrationdeleteitemsbymasterid'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'thirdpartymasterid'] = thirdpartymasterid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scheduleintegrationdeleteitemsbymasterid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a schedule item looking up by a third party ID
    # @param token [String] The authentication token.
    # @param thirdpartyid [String] The third party id to search for the schedule item.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def scheduleintegrationgetitem(token, thirdpartyid, opts = {})
      scheduleintegrationgetitem_with_http_info(token, thirdpartyid, opts)
      nil
    end

    # Get a schedule item looking up by a third party ID
    # @param token [String] The authentication token.
    # @param thirdpartyid [String] The third party id to search for the schedule item.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduleintegrationgetitem_with_http_info(token, thirdpartyid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scheduleintegrationgetitem ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.scheduleintegrationgetitem"
      end
      # verify the required parameter 'thirdpartyid' is set
      if @api_client.config.client_side_validation && thirdpartyid.nil?
        fail ArgumentError, "Missing the required parameter 'thirdpartyid' when calling DefaultApi.scheduleintegrationgetitem"
      end
      # resource path
      local_var_path = '/scheduleintegrationgetitem'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'thirdpartyid'] = thirdpartyid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scheduleintegrationgetitem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save a schedule item looking up by a third party ID
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def scheduleintegrationsaveitem(opts = {})
      scheduleintegrationsaveitem_with_http_info(opts)
      nil
    end

    # Save a schedule item looking up by a third party ID
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduleintegrationsaveitem_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scheduleintegrationsaveitem ...'
      end
      # resource path
      local_var_path = '/scheduleintegrationsaveitem'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scheduleintegrationsaveitem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set a 3rd party ID on a specific schedule item
    # @param token [String] The authentication token.
    # @param id [String] The id of the schedule block / appointment.
    # @param thirdpartyid [String] The 3rd party ID to set.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :thirdpartymasterid The 3rd party master ID to set (useful to handle recurring items).
    # @return [nil]
    def scheduleintegrationsetid(token, id, thirdpartyid, opts = {})
      scheduleintegrationsetid_with_http_info(token, id, thirdpartyid, opts)
      nil
    end

    # Set a 3rd party ID on a specific schedule item
    # @param token [String] The authentication token.
    # @param id [String] The id of the schedule block / appointment.
    # @param thirdpartyid [String] The 3rd party ID to set.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :thirdpartymasterid The 3rd party master ID to set (useful to handle recurring items).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduleintegrationsetid_with_http_info(token, id, thirdpartyid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.scheduleintegrationsetid ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.scheduleintegrationsetid"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.scheduleintegrationsetid"
      end
      # verify the required parameter 'thirdpartyid' is set
      if @api_client.config.client_side_validation && thirdpartyid.nil?
        fail ArgumentError, "Missing the required parameter 'thirdpartyid' when calling DefaultApi.scheduleintegrationsetid"
      end
      # resource path
      local_var_path = '/scheduleintegrationsetid'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'thirdpartyid'] = thirdpartyid
      query_params[:'thirdpartymasterid'] = opts[:'thirdpartymasterid'] if !opts[:'thirdpartymasterid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#scheduleintegrationsetid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View current user's schedule exceptions
    # Allows the user to view their own schedule exceptions.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :includedeleted If true the deleted offtimes are also returned.
    # @option opts [Boolean] :onlyupcoming If true then only upcoming offtimes are returned.
    # @option opts [DateTime] :modifiedafter If specified, only offtimes modified after the specified date will be returned.
    # @return [nil]
    def schedulemyofftimes(token, opts = {})
      schedulemyofftimes_with_http_info(token, opts)
      nil
    end

    # View current user&#39;s schedule exceptions
    # Allows the user to view their own schedule exceptions.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :includedeleted If true the deleted offtimes are also returned.
    # @option opts [Boolean] :onlyupcoming If true then only upcoming offtimes are returned.
    # @option opts [DateTime] :modifiedafter If specified, only offtimes modified after the specified date will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def schedulemyofftimes_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.schedulemyofftimes ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.schedulemyofftimes"
      end
      # resource path
      local_var_path = '/schedulemyofftimes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'includedeleted'] = opts[:'includedeleted'] if !opts[:'includedeleted'].nil?
      query_params[:'onlyupcoming'] = opts[:'onlyupcoming'] if !opts[:'onlyupcoming'].nil?
      query_params[:'modifiedafter'] = opts[:'modifiedafter'] if !opts[:'modifiedafter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#schedulemyofftimes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a schedule slot
    # Allows the user to create or edit a schedule slot of another user.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def schedulesave(opts = {})
      schedulesave_with_http_info(opts)
      nil
    end

    # Create or edit a schedule slot
    # Allows the user to create or edit a schedule slot of another user.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def schedulesave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.schedulesave ...'
      end
      # resource path
      local_var_path = '/schedulesave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#schedulesave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a block in current user's schedule
    # Allows the user to create or edit a schedule shift in their own availability.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def schedulesavemine(opts = {})
      schedulesavemine_with_http_info(opts)
      nil
    end

    # Create or edit a block in current user&#39;s schedule
    # Allows the user to create or edit a schedule shift in their own availability.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def schedulesavemine_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.schedulesavemine ...'
      end
      # resource path
      local_var_path = '/schedulesavemine'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#schedulesavemine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search
    # @param token [String] The authentication token.
    # @param query [String] The query to search for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Current page to show, zero-based.
    # @return [nil]
    def search(token, query, opts = {})
      search_with_http_info(token, query, opts)
      nil
    end

    # Search
    # @param token [String] The authentication token.
    # @param query [String] The query to search for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Current page to show, zero-based.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def search_with_http_info(token, query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.search"
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.search"
      end
      # resource path
      local_var_path = '/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'query'] = query
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the information of the entities that can be searched
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def searchgetentities(token, opts = {})
      searchgetentities_with_http_info(token, opts)
      nil
    end

    # Get the information of the entities that can be searched
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def searchgetentities_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.searchgetentities ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.searchgetentities"
      end
      # resource path
      local_var_path = '/searchgetentities'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#searchgetentities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the list of users for a specific permission
    # @param token [String] The authentication token.
    # @param commandname [String] Name of the action or command to get the roles.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def securityassesspermission(token, commandname, opts = {})
      securityassesspermission_with_http_info(token, commandname, opts)
      nil
    end

    # Returns the list of users for a specific permission
    # @param token [String] The authentication token.
    # @param commandname [String] Name of the action or command to get the roles.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def securityassesspermission_with_http_info(token, commandname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.securityassesspermission ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.securityassesspermission"
      end
      # verify the required parameter 'commandname' is set
      if @api_client.config.client_side_validation && commandname.nil?
        fail ArgumentError, "Missing the required parameter 'commandname' when calling DefaultApi.securityassesspermission"
      end
      # resource path
      local_var_path = '/securityassesspermission'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'commandname'] = commandname

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#securityassesspermission\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the list of permissions for a specific role
    # @param token [String] The authentication token.
    # @param roleid [String] Role ID to list the effective permissions.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def securityassessrole(token, roleid, opts = {})
      securityassessrole_with_http_info(token, roleid, opts)
      nil
    end

    # Returns the list of permissions for a specific role
    # @param token [String] The authentication token.
    # @param roleid [String] Role ID to list the effective permissions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def securityassessrole_with_http_info(token, roleid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.securityassessrole ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.securityassessrole"
      end
      # verify the required parameter 'roleid' is set
      if @api_client.config.client_side_validation && roleid.nil?
        fail ArgumentError, "Missing the required parameter 'roleid' when calling DefaultApi.securityassessrole"
      end
      # resource path
      local_var_path = '/securityassessrole'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'roleid'] = roleid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#securityassessrole\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the list of users for a specific user
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locationid Location ID to list the users with that scope.
    # @return [nil]
    def securityassessscope(token, opts = {})
      securityassessscope_with_http_info(token, opts)
      nil
    end

    # Returns the list of users for a specific user
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locationid Location ID to list the users with that scope.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def securityassessscope_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.securityassessscope ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.securityassessscope"
      end
      # resource path
      local_var_path = '/securityassessscope'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'locationid'] = opts[:'locationid'] if !opts[:'locationid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#securityassessscope\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the list of permissions for a specific user
    # @param token [String] The authentication token.
    # @param userid [String] User ID to list the effective permissions.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def securityassessuser(token, userid, opts = {})
      securityassessuser_with_http_info(token, userid, opts)
      nil
    end

    # Returns the list of permissions for a specific user
    # @param token [String] The authentication token.
    # @param userid [String] User ID to list the effective permissions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def securityassessuser_with_http_info(token, userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.securityassessuser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.securityassessuser"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.securityassessuser"
      end
      # resource path
      local_var_path = '/securityassessuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#securityassessuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an event
    # Allows the user to delete an existing event.
    # @param token [String] The authentication token.
    # @param id [String] The id of the seminar to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def seminardelete(token, id, opts = {})
      seminardelete_with_http_info(token, id, opts)
      nil
    end

    # Delete an event
    # Allows the user to delete an existing event.
    # @param token [String] The authentication token.
    # @param id [String] The id of the seminar to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def seminardelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.seminardelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.seminardelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.seminardelete"
      end
      # resource path
      local_var_path = '/seminardelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#seminardelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a event
    # Allows the user to view a event and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the seminar to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def seminarget(token, id, opts = {})
      seminarget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a event
    # Allows the user to view a event and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the seminar to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def seminarget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.seminarget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.seminarget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.seminarget"
      end
      # resource path
      local_var_path = '/seminarget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#seminarget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of events
    # Allows the user to view the full list of events in the past, present, and future.
    # @param token [String] The authentication token.
    # @param from [String] The first record to return.
    # @param count [String] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false.
    # @option opts [String] :termid Id of the term to list the events. Null to list all events.
    # @return [nil]
    def seminarlist(token, from, count, opts = {})
      seminarlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of events
    # Allows the user to view the full list of events in the past, present, and future.
    # @param token [String] The authentication token.
    # @param from [String] The first record to return.
    # @param count [String] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :summaryonly True to return only the event information and not the associated schedule, dept, etc. Defaults to false.
    # @option opts [String] :termid Id of the term to list the events. Null to list all events.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def seminarlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.seminarlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.seminarlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.seminarlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.seminarlist"
      end
      # resource path
      local_var_path = '/seminarlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'summaryonly'] = opts[:'summaryonly'] if !opts[:'summaryonly'].nil?
      query_params[:'termid'] = opts[:'termid'] if !opts[:'termid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#seminarlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a event
    # Allows the user to create or edit a event.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def seminarsave(opts = {})
      seminarsave_with_http_info(opts)
      nil
    end

    # Create or edit a event
    # Allows the user to create or edit a event.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def seminarsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.seminarsave ...'
      end
      # resource path
      local_var_path = '/seminarsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#seminarsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable a service in a specific location
    # Allows the user to enable a service in a location to which they are scoped.
    # @param token [String] The authentication token.
    # @param serviceid [String] The id of the service to add.
    # @param locationid [String] The id of the location.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def serviceassignmentaddservice(token, serviceid, locationid, opts = {})
      serviceassignmentaddservice_with_http_info(token, serviceid, locationid, opts)
      nil
    end

    # Enable a service in a specific location
    # Allows the user to enable a service in a location to which they are scoped.
    # @param token [String] The authentication token.
    # @param serviceid [String] The id of the service to add.
    # @param locationid [String] The id of the location.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def serviceassignmentaddservice_with_http_info(token, serviceid, locationid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.serviceassignmentaddservice ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.serviceassignmentaddservice"
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling DefaultApi.serviceassignmentaddservice"
      end
      # verify the required parameter 'locationid' is set
      if @api_client.config.client_side_validation && locationid.nil?
        fail ArgumentError, "Missing the required parameter 'locationid' when calling DefaultApi.serviceassignmentaddservice"
      end
      # resource path
      local_var_path = '/serviceassignmentaddservice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'serviceid'] = serviceid
      query_params[:'locationid'] = locationid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#serviceassignmentaddservice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of services enabled for a specific location
    # Allows the user to view a list of services available in a location to which they are scoped.
    # @param token [String] The authentication token.
    # @param locationid [String] The id of the location to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :includegloballyavailable Specifies whether the services available globally must be returned or not.
    # @option opts [Boolean] :namefilter Filters the name of the services to return.
    # @option opts [Integer] :count The max number of services to return.
    # @return [nil]
    def serviceassignmentgetlocation(token, locationid, opts = {})
      serviceassignmentgetlocation_with_http_info(token, locationid, opts)
      nil
    end

    # View a list of services enabled for a specific location
    # Allows the user to view a list of services available in a location to which they are scoped.
    # @param token [String] The authentication token.
    # @param locationid [String] The id of the location to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :includegloballyavailable Specifies whether the services available globally must be returned or not.
    # @option opts [Boolean] :namefilter Filters the name of the services to return.
    # @option opts [Integer] :count The max number of services to return.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def serviceassignmentgetlocation_with_http_info(token, locationid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.serviceassignmentgetlocation ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.serviceassignmentgetlocation"
      end
      # verify the required parameter 'locationid' is set
      if @api_client.config.client_side_validation && locationid.nil?
        fail ArgumentError, "Missing the required parameter 'locationid' when calling DefaultApi.serviceassignmentgetlocation"
      end
      # resource path
      local_var_path = '/serviceassignmentgetlocation'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'locationid'] = locationid
      query_params[:'includegloballyavailable'] = opts[:'includegloballyavailable'] if !opts[:'includegloballyavailable'].nil?
      query_params[:'namefilter'] = opts[:'namefilter'] if !opts[:'namefilter'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#serviceassignmentgetlocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of locations where a service is available
    # Allows the user to view a list of locations in which a service is available.
    # @param token [String] The authentication token.
    # @param serviceid [String] The id of the service to get its locations.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def serviceassignmentgetservice(token, serviceid, opts = {})
      serviceassignmentgetservice_with_http_info(token, serviceid, opts)
      nil
    end

    # View a list of locations where a service is available
    # Allows the user to view a list of locations in which a service is available.
    # @param token [String] The authentication token.
    # @param serviceid [String] The id of the service to get its locations.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def serviceassignmentgetservice_with_http_info(token, serviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.serviceassignmentgetservice ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.serviceassignmentgetservice"
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling DefaultApi.serviceassignmentgetservice"
      end
      # resource path
      local_var_path = '/serviceassignmentgetservice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'serviceid'] = serviceid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#serviceassignmentgetservice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a service from a location
    # Allows the user to disable a service from a location to which they are scoped.
    # @param token [String] The authentication token.
    # @param serviceid [String] The id of the service to remove.
    # @param locationid [String] The id of the location to remove the service from.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def serviceassignmentremoveservice(token, serviceid, locationid, opts = {})
      serviceassignmentremoveservice_with_http_info(token, serviceid, locationid, opts)
      nil
    end

    # Remove a service from a location
    # Allows the user to disable a service from a location to which they are scoped.
    # @param token [String] The authentication token.
    # @param serviceid [String] The id of the service to remove.
    # @param locationid [String] The id of the location to remove the service from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def serviceassignmentremoveservice_with_http_info(token, serviceid, locationid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.serviceassignmentremoveservice ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.serviceassignmentremoveservice"
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling DefaultApi.serviceassignmentremoveservice"
      end
      # verify the required parameter 'locationid' is set
      if @api_client.config.client_side_validation && locationid.nil?
        fail ArgumentError, "Missing the required parameter 'locationid' when calling DefaultApi.serviceassignmentremoveservice"
      end
      # resource path
      local_var_path = '/serviceassignmentremoveservice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'serviceid'] = serviceid
      query_params[:'locationid'] = locationid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#serviceassignmentremoveservice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a service
    # Allows the user to delete a service from the existing list.
    # @param token [String] The authentication token.
    # @param id [String] The id of the service to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def servicedelete(token, id, opts = {})
      servicedelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a service
    # Allows the user to delete a service from the existing list.
    # @param token [String] The authentication token.
    # @param id [String] The id of the service to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def servicedelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.servicedelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.servicedelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.servicedelete"
      end
      # resource path
      local_var_path = '/servicedelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#servicedelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a service
    # Allows the user to view an individual service and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the service to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def serviceget(token, id, opts = {})
      serviceget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a service
    # Allows the user to view an individual service and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the service to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def serviceget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.serviceget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.serviceget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.serviceget"
      end
      # resource path
      local_var_path = '/serviceget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#serviceget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of services
    # Allows the user to view the full list of existing services.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def servicelist(token, from, count, opts = {})
      servicelist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of services
    # Allows the user to view the full list of existing services.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def servicelist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.servicelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.servicelist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.servicelist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.servicelist"
      end
      # resource path
      local_var_path = '/servicelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#servicelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a service
    # Allows the user to create or edit a service.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def servicesave(opts = {})
      servicesave_with_http_info(opts)
      nil
    end

    # Create or edit a service
    # Allows the user to create or edit a service.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def servicesave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.servicesave ...'
      end
      # resource path
      local_var_path = '/servicesave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#servicesave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a note to a class attendance log
    # Allows the user to add a note to a class attendance log.
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log.
    # @param text [String] The text of the note to add.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionattendancelogaddnote(token, id, text, opts = {})
      sessionattendancelogaddnote_with_http_info(token, id, text, opts)
      nil
    end

    # Add a note to a class attendance log
    # Allows the user to add a note to a class attendance log.
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log.
    # @param text [String] The text of the note to add.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendancelogaddnote_with_http_info(token, id, text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionattendancelogaddnote ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionattendancelogaddnote"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.sessionattendancelogaddnote"
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling DefaultApi.sessionattendancelogaddnote"
      end
      # resource path
      local_var_path = '/sessionattendancelogaddnote'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionattendancelogaddnote\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a class attendance log
    # Allows the user to view an individual class attendance log and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def sessionattendancelogget(token, id, opts = {})
      sessionattendancelogget_with_http_info(token, id, opts)
      nil
    end

    # View details of a class attendance log
    # Allows the user to view an individual class attendance log and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the attendance log to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendancelogget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionattendancelogget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionattendancelogget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.sessionattendancelogget"
      end
      # resource path
      local_var_path = '/sessionattendancelogget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionattendancelogget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the class session attendance information for a specific user
    # Allows the user to view the attendance for a specified student.
    # @param attendee [String] The id of the attendee to get statistic for.
    # @param eventid [String] The id of the event whose attendee statistics have to be returned.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [nil]
    def sessionattendanceloggetuser(attendee, eventid, opts = {})
      sessionattendanceloggetuser_with_http_info(attendee, eventid, opts)
      nil
    end

    # View the class session attendance information for a specific user
    # Allows the user to view the attendance for a specified student.
    # @param attendee [String] The id of the attendee to get statistic for.
    # @param eventid [String] The id of the event whose attendee statistics have to be returned.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendanceloggetuser_with_http_info(attendee, eventid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionattendanceloggetuser ...'
      end
      # verify the required parameter 'attendee' is set
      if @api_client.config.client_side_validation && attendee.nil?
        fail ArgumentError, "Missing the required parameter 'attendee' when calling DefaultApi.sessionattendanceloggetuser"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.sessionattendanceloggetuser"
      end
      # resource path
      local_var_path = '/sessionattendanceloggetuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'attendee'] = attendee
      query_params[:'eventid'] = eventid
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionattendanceloggetuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View attendance logs of the specified session
    # Allows the user to view the full list of logs from a specified session
    # @param token [String] The authentication token.
    # @param session [String] The id of the session whose attendees logs have to be returned.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def sessionattendanceloglist(token, session, from, count, opts = {})
      sessionattendanceloglist_with_http_info(token, session, from, count, opts)
      nil
    end

    # View attendance logs of the specified session
    # Allows the user to view the full list of logs from a specified session
    # @param token [String] The authentication token.
    # @param session [String] The id of the session whose attendees logs have to be returned.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendanceloglist_with_http_info(token, session, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionattendanceloglist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionattendanceloglist"
      end
      # verify the required parameter 'session' is set
      if @api_client.config.client_side_validation && session.nil?
        fail ArgumentError, "Missing the required parameter 'session' when calling DefaultApi.sessionattendanceloglist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.sessionattendanceloglist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.sessionattendanceloglist"
      end
      # resource path
      local_var_path = '/sessionattendanceloglist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'session'] = session
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionattendanceloglist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the attendance information of an entire class
    # Allows the user to view the attendance information for an entire class
    # @param eventid [String] The id of the event whose attendance has to be returned.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [nil]
    def sessionattendanceloglistevent(eventid, opts = {})
      sessionattendanceloglistevent_with_http_info(eventid, opts)
      nil
    end

    # View the attendance information of an entire class
    # Allows the user to view the attendance information for an entire class
    # @param eventid [String] The id of the event whose attendance has to be returned.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendanceloglistevent_with_http_info(eventid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionattendanceloglistevent ...'
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.sessionattendanceloglistevent"
      end
      # resource path
      local_var_path = '/sessionattendanceloglistevent'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eventid'] = eventid
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionattendanceloglistevent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the attendance summary for a class and/or a attendee
    # Allows the user to view the attendance summary for a given class and/or attendee.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :eventid The id of the event whose attendance has to be returned.
    # @option opts [String] :attendeeid The id of the attendee whose attendance has to be returned.
    # @option opts [String] :groupid The id of the group whose attendance has to be returned.
    # @option opts [String] :start The start date to filter (beginning of time by default).
    # @option opts [String] :_end The end date to filter (today by default).
    # @return [nil]
    def sessionattendanceloglistsummary(opts = {})
      sessionattendanceloglistsummary_with_http_info(opts)
      nil
    end

    # View the attendance summary for a class and/or a attendee
    # Allows the user to view the attendance summary for a given class and/or attendee.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :eventid The id of the event whose attendance has to be returned.
    # @option opts [String] :attendeeid The id of the attendee whose attendance has to be returned.
    # @option opts [String] :groupid The id of the group whose attendance has to be returned.
    # @option opts [String] :start The start date to filter (beginning of time by default).
    # @option opts [String] :_end The end date to filter (today by default).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendanceloglistsummary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionattendanceloglistsummary ...'
      end
      # resource path
      local_var_path = '/sessionattendanceloglistsummary'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'attendeeid'] = opts[:'attendeeid'] if !opts[:'attendeeid'].nil?
      query_params[:'groupid'] = opts[:'groupid'] if !opts[:'groupid'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionattendanceloglistsummary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View my attendance summary
    # Allows the user to view their own attendance summary.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :eventid The id of the event whose attendance has to be returned.
    # @option opts [String] :start The start date to filter (beginning of time by default).
    # @option opts [String] :_end The end date to filter (today by default).
    # @return [nil]
    def sessionattendancelogmylistsummary(opts = {})
      sessionattendancelogmylistsummary_with_http_info(opts)
      nil
    end

    # View my attendance summary
    # Allows the user to view their own attendance summary.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :eventid The id of the event whose attendance has to be returned.
    # @option opts [String] :start The start date to filter (beginning of time by default).
    # @option opts [String] :_end The end date to filter (today by default).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendancelogmylistsummary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionattendancelogmylistsummary ...'
      end
      # resource path
      local_var_path = '/sessionattendancelogmylistsummary'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionattendancelogmylistsummary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a class attendance log
    # Allows the user to create or edit a class attendance log.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def sessionattendancelogsave(opts = {})
      sessionattendancelogsave_with_http_info(opts)
      nil
    end

    # Create or edit a class attendance log
    # Allows the user to create or edit a class attendance log.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendancelogsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionattendancelogsave ...'
      end
      # resource path
      local_var_path = '/sessionattendancelogsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionattendancelogsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a class attendance log swipe
    # Allows the user to create or edit a class attendance log swipe, which are the details of time in or out.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def sessionattendancelogsaveswipe(opts = {})
      sessionattendancelogsaveswipe_with_http_info(opts)
      nil
    end

    # Create or edit a class attendance log swipe
    # Allows the user to create or edit a class attendance log swipe, which are the details of time in or out.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendancelogsaveswipe_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionattendancelogsaveswipe ...'
      end
      # resource path
      local_var_path = '/sessionattendancelogsaveswipe'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionattendancelogsaveswipe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Bulk update event sessions
    # Allows the user to bulk update event sessions by setting multiple attendees as present, absent, tardy, etc.
    # @param token [String] The authentication token.
    # @param eventid [String] The id of the event to bulk update.
    # @param sessions [String] A JSON-formatted array, with all the sessions to update, create or delete. Each item must contain an action (set/remove) and the session properties.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionbulkupdate(token, eventid, sessions, opts = {})
      sessionbulkupdate_with_http_info(token, eventid, sessions, opts)
      nil
    end

    # Bulk update event sessions
    # Allows the user to bulk update event sessions by setting multiple attendees as present, absent, tardy, etc.
    # @param token [String] The authentication token.
    # @param eventid [String] The id of the event to bulk update.
    # @param sessions [String] A JSON-formatted array, with all the sessions to update, create or delete. Each item must contain an action (set/remove) and the session properties.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionbulkupdate_with_http_info(token, eventid, sessions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionbulkupdate ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionbulkupdate"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.sessionbulkupdate"
      end
      # verify the required parameter 'sessions' is set
      if @api_client.config.client_side_validation && sessions.nil?
        fail ArgumentError, "Missing the required parameter 'sessions' when calling DefaultApi.sessionbulkupdate"
      end
      # resource path
      local_var_path = '/sessionbulkupdate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'eventid'] = eventid
      query_params[:'sessions'] = sessions

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionbulkupdate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a session
    # Allows the user to view a session in order to take attendance.
    # @param token [String] The authentication token.
    # @param id [String] The id of the session to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionget(token, id, opts = {})
      sessionget_with_http_info(token, id, opts)
      nil
    end

    # View details of a session
    # Allows the user to view a session in order to take attendance.
    # @param token [String] The authentication token.
    # @param id [String] The id of the session to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.sessionget"
      end
      # resource path
      local_var_path = '/sessionget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the schedule for a location, instructor or attendees
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [DateTime] :day The day to return. It will also return the whole week for that day.
    # @option opts [String] :attendee The id of the attendee to get the schedule.
    # @option opts [String] :location The id of the location to get the schedule.
    # @option opts [String] :instructor The id of the instructor to get the schedule.
    # @return [nil]
    def sessiongetschedule(opts = {})
      sessiongetschedule_with_http_info(opts)
      nil
    end

    # Gets the schedule for a location, instructor or attendees
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [DateTime] :day The day to return. It will also return the whole week for that day.
    # @option opts [String] :attendee The id of the attendee to get the schedule.
    # @option opts [String] :location The id of the location to get the schedule.
    # @option opts [String] :instructor The id of the instructor to get the schedule.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessiongetschedule_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessiongetschedule ...'
      end
      # resource path
      local_var_path = '/sessiongetschedule'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'day'] = opts[:'day'] if !opts[:'day'].nil?
      query_params[:'attendee'] = opts[:'attendee'] if !opts[:'attendee'].nil?
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'instructor'] = opts[:'instructor'] if !opts[:'instructor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessiongetschedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all future sessions of the current semester
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [DateTime] :startdate The start date to filter the sessions
    # @option opts [DateTime] :enddate The end date to filter the sessions.
    # @return [nil]
    def sessionlist(from, count, opts = {})
      sessionlist_with_http_info(from, count, opts)
      nil
    end

    # Gets all future sessions of the current semester
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [DateTime] :startdate The start date to filter the sessions
    # @option opts [DateTime] :enddate The end date to filter the sessions.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionlist_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionlist ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.sessionlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.sessionlist"
      end
      # resource path
      local_var_path = '/sessionlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register current user to an event session
    # Allows the user to register themselves for an event.
    # @param token [String] The authentication token.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionregaddcurrentuser(token, eventid, sessiondate, opts = {})
      sessionregaddcurrentuser_with_http_info(token, eventid, sessiondate, opts)
      nil
    end

    # Register current user to an event session
    # Allows the user to register themselves for an event.
    # @param token [String] The authentication token.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionregaddcurrentuser_with_http_info(token, eventid, sessiondate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionregaddcurrentuser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionregaddcurrentuser"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.sessionregaddcurrentuser"
      end
      # verify the required parameter 'sessiondate' is set
      if @api_client.config.client_side_validation && sessiondate.nil?
        fail ArgumentError, "Missing the required parameter 'sessiondate' when calling DefaultApi.sessionregaddcurrentuser"
      end
      # resource path
      local_var_path = '/sessionregaddcurrentuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = sessiondate

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionregaddcurrentuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register users for events
    # Allows the user to register another user for an upcoming event.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionregadduser(token, userid, eventid, sessiondate, opts = {})
      sessionregadduser_with_http_info(token, userid, eventid, sessiondate, opts)
      nil
    end

    # Register users for events
    # Allows the user to register another user for an upcoming event.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionregadduser_with_http_info(token, userid, eventid, sessiondate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionregadduser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionregadduser"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.sessionregadduser"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.sessionregadduser"
      end
      # verify the required parameter 'sessiondate' is set
      if @api_client.config.client_side_validation && sessiondate.nil?
        fail ArgumentError, "Missing the required parameter 'sessiondate' when calling DefaultApi.sessionregadduser"
      end
      # resource path
      local_var_path = '/sessionregadduser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = sessiondate

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionregadduser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the sessions the logged user is registered to
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :date Start date to filter the sessions.
    # @return [nil]
    def sessionreggetmysessions(token, opts = {})
      sessionreggetmysessions_with_http_info(token, opts)
      nil
    end

    # View all the sessions the logged user is registered to
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :date Start date to filter the sessions.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreggetmysessions_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionreggetmysessions ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionreggetmysessions"
      end
      # resource path
      local_var_path = '/sessionreggetmysessions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionreggetmysessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the registrations for a specific user
    # Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
    # @param token [String] The authentication token.
    # @param userid [String] The user id to list sessions.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionreggetsessions(token, userid, opts = {})
      sessionreggetsessions_with_http_info(token, userid, opts)
      nil
    end

    # Lists the registrations for a specific user
    # Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
    # @param token [String] The authentication token.
    # @param userid [String] The user id to list sessions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreggetsessions_with_http_info(token, userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionreggetsessions ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionreggetsessions"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.sessionreggetsessions"
      end
      # resource path
      local_var_path = '/sessionreggetsessions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionreggetsessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the settings for session registration
    # Allows the user to view a event's session registration settings.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locationid The id of the location to save settings.
    # @option opts [String] :eventid The id of the event to save settings.
    # @option opts [DateTime] :sessiondate The date and time when the session starts.
    # @option opts [Boolean] :noinherit True to get the location/event/session specific settings without looking for the more global settings.
    # @return [nil]
    def sessionreggetsettings(token, opts = {})
      sessionreggetsettings_with_http_info(token, opts)
      nil
    end

    # Get the settings for session registration
    # Allows the user to view a event&#39;s session registration settings.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locationid The id of the location to save settings.
    # @option opts [String] :eventid The id of the event to save settings.
    # @option opts [DateTime] :sessiondate The date and time when the session starts.
    # @option opts [Boolean] :noinherit True to get the location/event/session specific settings without looking for the more global settings.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreggetsettings_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionreggetsettings ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionreggetsettings"
      end
      # resource path
      local_var_path = '/sessionreggetsettings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'locationid'] = opts[:'locationid'] if !opts[:'locationid'].nil?
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'sessiondate'] = opts[:'sessiondate'] if !opts[:'sessiondate'].nil?
      query_params[:'noinherit'] = opts[:'noinherit'] if !opts[:'noinherit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionreggetsettings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the registrations for a specific session
    # Allows the user to view the registration for a specified event session.
    # @param token [String] The authentication token.
    # @param eventid [String] The event id to list sessions.
    # @param sessiondate [DateTime] The date of the session to find.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionreggetusers(token, eventid, sessiondate, opts = {})
      sessionreggetusers_with_http_info(token, eventid, sessiondate, opts)
      nil
    end

    # Lists the registrations for a specific session
    # Allows the user to view the registration for a specified event session.
    # @param token [String] The authentication token.
    # @param eventid [String] The event id to list sessions.
    # @param sessiondate [DateTime] The date of the session to find.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreggetusers_with_http_info(token, eventid, sessiondate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionreggetusers ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionreggetusers"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.sessionreggetusers"
      end
      # verify the required parameter 'sessiondate' is set
      if @api_client.config.client_side_validation && sessiondate.nil?
        fail ArgumentError, "Missing the required parameter 'sessiondate' when calling DefaultApi.sessionreggetusers"
      end
      # resource path
      local_var_path = '/sessionreggetusers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = sessiondate

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionreggetusers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the sessions available for a specific event
    # Allows the user to view all the sessions available for a recurring event.
    # @param token [String] The authentication token.
    # @param eventid [String] The event id to list sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :sessiondate The date of the session to find.
    # @return [nil]
    def sessionreglistsessions(token, eventid, opts = {})
      sessionreglistsessions_with_http_info(token, eventid, opts)
      nil
    end

    # List the sessions available for a specific event
    # Allows the user to view all the sessions available for a recurring event.
    # @param token [String] The authentication token.
    # @param eventid [String] The event id to list sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :sessiondate The date of the session to find.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreglistsessions_with_http_info(token, eventid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionreglistsessions ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionreglistsessions"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.sessionreglistsessions"
      end
      # resource path
      local_var_path = '/sessionreglistsessions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = opts[:'sessiondate'] if !opts[:'sessiondate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionreglistsessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of upcoming event sessions
    # Allows the user to view the full list of upcoming events.
    # @param token [String] The authentication token.
    # @param date [DateTime] Only sessions in the week of the specified date will be returned.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionreglistupcoming(token, date, opts = {})
      sessionreglistupcoming_with_http_info(token, date, opts)
      nil
    end

    # View a list of upcoming event sessions
    # Allows the user to view the full list of upcoming events.
    # @param token [String] The authentication token.
    # @param date [DateTime] Only sessions in the week of the specified date will be returned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreglistupcoming_with_http_info(token, date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionreglistupcoming ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionreglistupcoming"
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling DefaultApi.sessionreglistupcoming"
      end
      # resource path
      local_var_path = '/sessionreglistupcoming'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'date'] = date

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionreglistupcoming\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of upcoming sessions of a particular event
    # Allows the user to view the upcoming recurring sessions of a specified event.
    # @param token [String] The authentication token.
    # @param date [DateTime] Start date to filter the returned sessions.
    # @param event [String] The id of the event whose sessions will be returned
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionreglistupcomingevent(token, date, event, opts = {})
      sessionreglistupcomingevent_with_http_info(token, date, event, opts)
      nil
    end

    # View a list of upcoming sessions of a particular event
    # Allows the user to view the upcoming recurring sessions of a specified event.
    # @param token [String] The authentication token.
    # @param date [DateTime] Start date to filter the returned sessions.
    # @param event [String] The id of the event whose sessions will be returned
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionreglistupcomingevent_with_http_info(token, date, event, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionreglistupcomingevent ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionreglistupcomingevent"
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling DefaultApi.sessionreglistupcomingevent"
      end
      # verify the required parameter 'event' is set
      if @api_client.config.client_side_validation && event.nil?
        fail ArgumentError, "Missing the required parameter 'event' when calling DefaultApi.sessionreglistupcomingevent"
      end
      # resource path
      local_var_path = '/sessionreglistupcomingevent'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'date'] = date
      query_params[:'event'] = event

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionreglistupcomingevent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unregister current user from an event session
    # Allows the user to un-register themselves from an event.
    # @param token [String] The authentication token.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionregremovecurrentuser(token, eventid, sessiondate, opts = {})
      sessionregremovecurrentuser_with_http_info(token, eventid, sessiondate, opts)
      nil
    end

    # Unregister current user from an event session
    # Allows the user to un-register themselves from an event.
    # @param token [String] The authentication token.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionregremovecurrentuser_with_http_info(token, eventid, sessiondate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionregremovecurrentuser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionregremovecurrentuser"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.sessionregremovecurrentuser"
      end
      # verify the required parameter 'sessiondate' is set
      if @api_client.config.client_side_validation && sessiondate.nil?
        fail ArgumentError, "Missing the required parameter 'sessiondate' when calling DefaultApi.sessionregremovecurrentuser"
      end
      # resource path
      local_var_path = '/sessionregremovecurrentuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = sessiondate

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionregremovecurrentuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes a user from an event session
    # Allows the user to un-register another user from an event.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionregremoveuser(token, userid, eventid, sessiondate, opts = {})
      sessionregremoveuser_with_http_info(token, userid, eventid, sessiondate, opts)
      nil
    end

    # Removes a user from an event session
    # Allows the user to un-register another user from an event.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param eventid [String] The id of the event.
    # @param sessiondate [DateTime] The date and time when the session starts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionregremoveuser_with_http_info(token, userid, eventid, sessiondate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionregremoveuser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionregremoveuser"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.sessionregremoveuser"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling DefaultApi.sessionregremoveuser"
      end
      # verify the required parameter 'sessiondate' is set
      if @api_client.config.client_side_validation && sessiondate.nil?
        fail ArgumentError, "Missing the required parameter 'sessiondate' when calling DefaultApi.sessionregremoveuser"
      end
      # resource path
      local_var_path = '/sessionregremoveuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'eventid'] = eventid
      query_params[:'sessiondate'] = sessiondate

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionregremoveuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save the settings for an event's session registration
    # Allows the user to save the settings for an event.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def sessionregsavesettings(opts = {})
      sessionregsavesettings_with_http_info(opts)
      nil
    end

    # Save the settings for an event&#39;s session registration
    # Allows the user to save the settings for an event.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionregsavesettings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionregsavesettings ...'
      end
      # resource path
      local_var_path = '/sessionregsavesettings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionregsavesettings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a session swipe
    # Allows the user to delete an existing class attendance swipe.
    # @param token [String] The authentication token.
    # @param id [String] The id of the session swipe to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionswipedelete(token, id, opts = {})
      sessionswipedelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a session swipe
    # Allows the user to delete an existing class attendance swipe.
    # @param token [String] The authentication token.
    # @param id [String] The id of the session swipe to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionswipedelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionswipedelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionswipedelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.sessionswipedelete"
      end
      # resource path
      local_var_path = '/sessionswipedelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionswipedelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a class attendance swipe
    # Allows the user to view an individual class attendance swipe.
    # @param token [String] The authentication token.
    # @param id [String] The id of the swipe to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionswipeget(token, id, opts = {})
      sessionswipeget_with_http_info(token, id, opts)
      nil
    end

    # View details of a class attendance swipe
    # Allows the user to view an individual class attendance swipe.
    # @param token [String] The authentication token.
    # @param id [String] The id of the swipe to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionswipeget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionswipeget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionswipeget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.sessionswipeget"
      end
      # resource path
      local_var_path = '/sessionswipeget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionswipeget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of unresolved swipes
    # Allows the user to view all unresolved swipes.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [nil]
    def sessionswipelistunresolved(from, count, opts = {})
      sessionswipelistunresolved_with_http_info(from, count, opts)
      nil
    end

    # View a list of unresolved swipes
    # Allows the user to view all unresolved swipes.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionswipelistunresolved_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionswipelistunresolved ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.sessionswipelistunresolved"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.sessionswipelistunresolved"
      end
      # resource path
      local_var_path = '/sessionswipelistunresolved'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionswipelistunresolved\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resolve a swipe and create the corresponding attendance log
    # Allows the user to resolve an unresolved swipe, which would result in the creation of an attendance log.
    # @param token [String] The authentication token.
    # @param id [String] The id of the swipe to resolve.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :session The id of the session whose swipe has to be saved.
    # @option opts [String] :user The id of the user who signed-in.
    # @return [nil]
    def sessionswiperesolve(token, id, opts = {})
      sessionswiperesolve_with_http_info(token, id, opts)
      nil
    end

    # Resolve a swipe and create the corresponding attendance log
    # Allows the user to resolve an unresolved swipe, which would result in the creation of an attendance log.
    # @param token [String] The authentication token.
    # @param id [String] The id of the swipe to resolve.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :session The id of the session whose swipe has to be saved.
    # @option opts [String] :user The id of the user who signed-in.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionswiperesolve_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionswiperesolve ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.sessionswiperesolve"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.sessionswiperesolve"
      end
      # resource path
      local_var_path = '/sessionswiperesolve'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'session'] = opts[:'session'] if !opts[:'session'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionswiperesolve\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new swipe, and if possible, creates the attendance log
    # Allows the user to create a new swipe, which would usually result in an attendance log.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def sessionswipesave(opts = {})
      sessionswipesave_with_http_info(opts)
      nil
    end

    # Creates a new swipe, and if possible, creates the attendance log
    # Allows the user to create a new swipe, which would usually result in an attendance log.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionswipesave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionswipesave ...'
      end
      # resource path
      local_var_path = '/sessionswipesave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionswipesave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new swipe from a sign-in station, and if possible, creates the attendance log
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def sessionswipesaveanonym(opts = {})
      sessionswipesaveanonym_with_http_info(opts)
      nil
    end

    # Creates a new swipe from a sign-in station, and if possible, creates the attendance log
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionswipesaveanonym_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sessionswipesaveanonym ...'
      end
      # resource path
      local_var_path = '/sessionswipesaveanonym'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sessionswipesaveanonym\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a logo to the account
    # Allows the user to add the logo for the account, which appears on all pages on the AccuCampus browser version.
    # @param token [String] The authentication token.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param filename [String] The original filename, needed to process the file.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def settingaddlogo(token, upload, filename, opts = {})
      settingaddlogo_with_http_info(token, upload, filename, opts)
      nil
    end

    # Add a logo to the account
    # Allows the user to add the logo for the account, which appears on all pages on the AccuCampus browser version.
    # @param token [String] The authentication token.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param filename [String] The original filename, needed to process the file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def settingaddlogo_with_http_info(token, upload, filename, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.settingaddlogo ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.settingaddlogo"
      end
      # verify the required parameter 'upload' is set
      if @api_client.config.client_side_validation && upload.nil?
        fail ArgumentError, "Missing the required parameter 'upload' when calling DefaultApi.settingaddlogo"
      end
      # verify the required parameter 'filename' is set
      if @api_client.config.client_side_validation && filename.nil?
        fail ArgumentError, "Missing the required parameter 'filename' when calling DefaultApi.settingaddlogo"
      end
      # resource path
      local_var_path = '/settingaddlogo'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'upload'] = upload
      query_params[:'filename'] = filename

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#settingaddlogo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get settings for the account or the specified scope
    # @param keys [String] The option keys to get values for. Enter multiple separated by comma.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :domain The account domain, in case of reading settings annonymously.
    # @option opts [String] :scope The scope of the settings to get.
    # @return [nil]
    def settingget(keys, opts = {})
      settingget_with_http_info(keys, opts)
      nil
    end

    # Get settings for the account or the specified scope
    # @param keys [String] The option keys to get values for. Enter multiple separated by comma.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :domain The account domain, in case of reading settings annonymously.
    # @option opts [String] :scope The scope of the settings to get.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def settingget_with_http_info(keys, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.settingget ...'
      end
      # verify the required parameter 'keys' is set
      if @api_client.config.client_side_validation && keys.nil?
        fail ArgumentError, "Missing the required parameter 'keys' when calling DefaultApi.settingget"
      end
      # resource path
      local_var_path = '/settingget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'keys'] = keys
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'domain'] = opts[:'domain'] if !opts[:'domain'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#settingget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save settings for the account or the specified scope
    # Allows the user to affect settings that are not specified elsewhere in permissions. This includes Attendance, Appointments, Compass, Media, and Social Activity.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def settingsave(opts = {})
      settingsave_with_http_info(opts)
      nil
    end

    # Save settings for the account or the specified scope
    # Allows the user to affect settings that are not specified elsewhere in permissions. This includes Attendance, Appointments, Compass, Media, and Social Activity.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def settingsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.settingsave ...'
      end
      # resource path
      local_var_path = '/settingsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#settingsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View general settings for the account
    # Allows the user to view the settings' general section.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def settingviewgeneral(token, opts = {})
      settingviewgeneral_with_http_info(token, opts)
      nil
    end

    # View general settings for the account
    # Allows the user to view the settings&#39; general section.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def settingviewgeneral_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.settingviewgeneral ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.settingviewgeneral"
      end
      # resource path
      local_var_path = '/settingviewgeneral'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#settingviewgeneral\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the list of contacts in the network
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Text to filter results.
    # @option opts [Boolean] :showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.
    # @return [nil]
    def socialcontacts(token, opts = {})
      socialcontacts_with_http_info(token, opts)
      nil
    end

    # Gets the list of contacts in the network
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Text to filter results.
    # @option opts [Boolean] :showdefaultphoto If true, a default photo will be returned in case the user does not have a photo. Otherwise, no photo will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def socialcontacts_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.socialcontacts ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.socialcontacts"
      end
      # resource path
      local_var_path = '/socialcontacts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'showdefaultphoto'] = opts[:'showdefaultphoto'] if !opts[:'showdefaultphoto'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#socialcontacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds new members to a group (which the user must own already)
    # @param token [String] The authentication token.
    # @param id [String] ID of the group to add members to.
    # @param userids [String] Csv list of user Ids to add.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def socialgroupaddmembers(token, id, userids, opts = {})
      socialgroupaddmembers_with_http_info(token, id, userids, opts)
      nil
    end

    # Adds new members to a group (which the user must own already)
    # @param token [String] The authentication token.
    # @param id [String] ID of the group to add members to.
    # @param userids [String] Csv list of user Ids to add.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def socialgroupaddmembers_with_http_info(token, id, userids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.socialgroupaddmembers ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.socialgroupaddmembers"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.socialgroupaddmembers"
      end
      # verify the required parameter 'userids' is set
      if @api_client.config.client_side_validation && userids.nil?
        fail ArgumentError, "Missing the required parameter 'userids' when calling DefaultApi.socialgroupaddmembers"
      end
      # resource path
      local_var_path = '/socialgroupaddmembers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'userids'] = userids

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#socialgroupaddmembers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a group
    # @param token [String] The authentication token.
    # @param id [String] ID of the group to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def socialgroupdelete(token, id, opts = {})
      socialgroupdelete_with_http_info(token, id, opts)
      nil
    end

    # Deletes a group
    # @param token [String] The authentication token.
    # @param id [String] ID of the group to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def socialgroupdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.socialgroupdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.socialgroupdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.socialgroupdelete"
      end
      # resource path
      local_var_path = '/socialgroupdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#socialgroupdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the groups the current user is in
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def socialgrouplist(token, opts = {})
      socialgrouplist_with_http_info(token, opts)
      nil
    end

    # View all the groups the current user is in
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def socialgrouplist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.socialgrouplist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.socialgrouplist"
      end
      # resource path
      local_var_path = '/socialgrouplist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#socialgrouplist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the members of a group
    # @param token [String] The authentication token.
    # @param id [String] ID of the group to list members.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def socialgrouplistmembers(token, id, opts = {})
      socialgrouplistmembers_with_http_info(token, id, opts)
      nil
    end

    # Lists the members of a group
    # @param token [String] The authentication token.
    # @param id [String] ID of the group to list members.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def socialgrouplistmembers_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.socialgrouplistmembers ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.socialgrouplistmembers"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.socialgrouplistmembers"
      end
      # resource path
      local_var_path = '/socialgrouplistmembers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#socialgrouplistmembers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes members from a group (which the user must own already)
    # @param token [String] The authentication token.
    # @param id [String] ID of the group to remove members from.
    # @param userids [String] Csv list of user Ids to remove.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def socialgroupremovemembers(token, id, userids, opts = {})
      socialgroupremovemembers_with_http_info(token, id, userids, opts)
      nil
    end

    # Removes members from a group (which the user must own already)
    # @param token [String] The authentication token.
    # @param id [String] ID of the group to remove members from.
    # @param userids [String] Csv list of user Ids to remove.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def socialgroupremovemembers_with_http_info(token, id, userids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.socialgroupremovemembers ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.socialgroupremovemembers"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.socialgroupremovemembers"
      end
      # verify the required parameter 'userids' is set
      if @api_client.config.client_side_validation && userids.nil?
        fail ArgumentError, "Missing the required parameter 'userids' when calling DefaultApi.socialgroupremovemembers"
      end
      # resource path
      local_var_path = '/socialgroupremovemembers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'userids'] = userids

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#socialgroupremovemembers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes myself from an existent group
    # @param token [String] The authentication token.
    # @param id [String] ID of the group to remove me from.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def socialgroupremovemyself(token, id, opts = {})
      socialgroupremovemyself_with_http_info(token, id, opts)
      nil
    end

    # Removes myself from an existent group
    # @param token [String] The authentication token.
    # @param id [String] ID of the group to remove me from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def socialgroupremovemyself_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.socialgroupremovemyself ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.socialgroupremovemyself"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.socialgroupremovemyself"
      end
      # resource path
      local_var_path = '/socialgroupremovemyself'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#socialgroupremovemyself\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a new group
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def socialgroupsave(opts = {})
      socialgroupsave_with_http_info(opts)
      nil
    end

    # Saves a new group
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def socialgroupsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.socialgroupsave ...'
      end
      # resource path
      local_var_path = '/socialgroupsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#socialgroupsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate/reset single sign on access key.
    # Allows the user to generate or reset the access key for single sign-on.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ssogeneratekey(token, opts = {})
      ssogeneratekey_with_http_info(token, opts)
      nil
    end

    # Generate/reset single sign on access key.
    # Allows the user to generate or reset the access key for single sign-on.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ssogeneratekey_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ssogeneratekey ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ssogeneratekey"
      end
      # resource path
      local_var_path = '/ssogeneratekey'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ssogeneratekey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View single sign on settings.
    # Allows the user to view settings for single sign-on.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ssogetsettings(token, opts = {})
      ssogetsettings_with_http_info(token, opts)
      nil
    end

    # View single sign on settings.
    # Allows the user to view settings for single sign-on.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ssogetsettings_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ssogetsettings ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.ssogetsettings"
      end
      # resource path
      local_var_path = '/ssogetsettings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ssogetsettings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Issue single sign-on token
    # @param key [String] The single sign-on key of the account.
    # @param username [String] The email of the user to sign-on.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :expires Specifies whether the session should expire when inactive.
    # @return [nil]
    def ssoissuetoken(key, username, opts = {})
      ssoissuetoken_with_http_info(key, username, opts)
      nil
    end

    # Issue single sign-on token
    # @param key [String] The single sign-on key of the account.
    # @param username [String] The email of the user to sign-on.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :expires Specifies whether the session should expire when inactive.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ssoissuetoken_with_http_info(key, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ssoissuetoken ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.ssoissuetoken"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.ssoissuetoken"
      end
      # resource path
      local_var_path = '/ssoissuetoken'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'key'] = key
      query_params[:'username'] = username
      query_params[:'expires'] = opts[:'expires'] if !opts[:'expires'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ssoissuetoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit single sign-on settings.
    # Allows the user to edit settings for single sign-on.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def ssosavesettings(opts = {})
      ssosavesettings_with_http_info(opts)
      nil
    end

    # Edit single sign-on settings.
    # Allows the user to edit settings for single sign-on.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ssosavesettings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ssosavesettings ...'
      end
      # resource path
      local_var_path = '/ssosavesettings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ssosavesettings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate current user to all services
    # Allows the user to associate themselves to all services, provided they have a staff role.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavailaddmetoallservices(token, opts = {})
      staffavailaddmetoallservices_with_http_info(token, opts)
      nil
    end

    # Associate current user to all services
    # Allows the user to associate themselves to all services, provided they have a staff role.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavailaddmetoallservices_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.staffavailaddmetoallservices ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.staffavailaddmetoallservices"
      end
      # resource path
      local_var_path = '/staffavailaddmetoallservices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#staffavailaddmetoallservices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate current user to a service
    # Allows the user to associate themselves to a service, provided they have a staff role.
    # @param token [String] The authentication token.
    # @param serviceid [String] The id of the service.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavailaddmetoservice(token, serviceid, opts = {})
      staffavailaddmetoservice_with_http_info(token, serviceid, opts)
      nil
    end

    # Associate current user to a service
    # Allows the user to associate themselves to a service, provided they have a staff role.
    # @param token [String] The authentication token.
    # @param serviceid [String] The id of the service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavailaddmetoservice_with_http_info(token, serviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.staffavailaddmetoservice ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.staffavailaddmetoservice"
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling DefaultApi.staffavailaddmetoservice"
      end
      # resource path
      local_var_path = '/staffavailaddmetoservice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'serviceid'] = serviceid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#staffavailaddmetoservice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate a staff member to all services
    # Allows the user to make a staff member available for all services.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavailaddusertoallservices(token, userid, opts = {})
      staffavailaddusertoallservices_with_http_info(token, userid, opts)
      nil
    end

    # Associate a staff member to all services
    # Allows the user to make a staff member available for all services.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavailaddusertoallservices_with_http_info(token, userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.staffavailaddusertoallservices ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.staffavailaddusertoallservices"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.staffavailaddusertoallservices"
      end
      # resource path
      local_var_path = '/staffavailaddusertoallservices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#staffavailaddusertoallservices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate a staff member to a service
    # Allows the user to make a staff member available for a service.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param serviceid [String] The id of the service.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavailaddusertoservice(token, userid, serviceid, opts = {})
      staffavailaddusertoservice_with_http_info(token, userid, serviceid, opts)
      nil
    end

    # Associate a staff member to a service
    # Allows the user to make a staff member available for a service.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param serviceid [String] The id of the service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavailaddusertoservice_with_http_info(token, userid, serviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.staffavailaddusertoservice ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.staffavailaddusertoservice"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.staffavailaddusertoservice"
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling DefaultApi.staffavailaddusertoservice"
      end
      # resource path
      local_var_path = '/staffavailaddusertoservice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'serviceid'] = serviceid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#staffavailaddusertoservice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the services the current user is available for
    # Allows the user to view a list of services that they are associated with.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavailgetmyservices(token, opts = {})
      staffavailgetmyservices_with_http_info(token, opts)
      nil
    end

    # View the services the current user is available for
    # Allows the user to view a list of services that they are associated with.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavailgetmyservices_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.staffavailgetmyservices ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.staffavailgetmyservices"
      end
      # resource path
      local_var_path = '/staffavailgetmyservices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#staffavailgetmyservices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of services that a staff member is available for
    # Allows the user to view the list of services that a staff member is available for.
    # @param token [String] The authentication token.
    # @param userid [String] The user id to list services.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavailgetservices(token, userid, opts = {})
      staffavailgetservices_with_http_info(token, userid, opts)
      nil
    end

    # View a list of services that a staff member is available for
    # Allows the user to view the list of services that a staff member is available for.
    # @param token [String] The authentication token.
    # @param userid [String] The user id to list services.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavailgetservices_with_http_info(token, userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.staffavailgetservices ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.staffavailgetservices"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.staffavailgetservices"
      end
      # resource path
      local_var_path = '/staffavailgetservices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#staffavailgetservices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of staff members that are available for a specific service
    # Allows the user to view all staff members who are available for a service.
    # @param token [String] The authentication token.
    # @param serviceid [String] The service id to list users.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavailgetusersforservice(token, serviceid, opts = {})
      staffavailgetusersforservice_with_http_info(token, serviceid, opts)
      nil
    end

    # View a list of staff members that are available for a specific service
    # Allows the user to view all staff members who are available for a service.
    # @param token [String] The authentication token.
    # @param serviceid [String] The service id to list users.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavailgetusersforservice_with_http_info(token, serviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.staffavailgetusersforservice ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.staffavailgetusersforservice"
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling DefaultApi.staffavailgetusersforservice"
      end
      # resource path
      local_var_path = '/staffavailgetusersforservice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'serviceid'] = serviceid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#staffavailgetusersforservice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the availability types
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavaillisttypes(token, opts = {})
      staffavaillisttypes_with_http_info(token, opts)
      nil
    end

    # View all the availability types
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavaillisttypes_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.staffavaillisttypes ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.staffavaillisttypes"
      end
      # resource path
      local_var_path = '/staffavaillisttypes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#staffavaillisttypes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove current user from all services
    # Allows the user to disassociate themselves from all services, provided they have a staff role.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavailremovemefromallservices(token, opts = {})
      staffavailremovemefromallservices_with_http_info(token, opts)
      nil
    end

    # Remove current user from all services
    # Allows the user to disassociate themselves from all services, provided they have a staff role.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavailremovemefromallservices_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.staffavailremovemefromallservices ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.staffavailremovemefromallservices"
      end
      # resource path
      local_var_path = '/staffavailremovemefromallservices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#staffavailremovemefromallservices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove current user from a service
    # Allows the user to disassociate themselves from a service, provided they have a staff role.
    # @param token [String] The authentication token.
    # @param serviceid [String] The id of the service.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavailremovemefromservice(token, serviceid, opts = {})
      staffavailremovemefromservice_with_http_info(token, serviceid, opts)
      nil
    end

    # Remove current user from a service
    # Allows the user to disassociate themselves from a service, provided they have a staff role.
    # @param token [String] The authentication token.
    # @param serviceid [String] The id of the service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavailremovemefromservice_with_http_info(token, serviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.staffavailremovemefromservice ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.staffavailremovemefromservice"
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling DefaultApi.staffavailremovemefromservice"
      end
      # resource path
      local_var_path = '/staffavailremovemefromservice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'serviceid'] = serviceid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#staffavailremovemefromservice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes a staff member from the registration to all services
    # Allows the user to remove a staff member's availability to all services.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavailremoveuserfromallservices(token, userid, opts = {})
      staffavailremoveuserfromallservices_with_http_info(token, userid, opts)
      nil
    end

    # Removes a staff member from the registration to all services
    # Allows the user to remove a staff member&#39;s availability to all services.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavailremoveuserfromallservices_with_http_info(token, userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.staffavailremoveuserfromallservices ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.staffavailremoveuserfromallservices"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.staffavailremoveuserfromallservices"
      end
      # resource path
      local_var_path = '/staffavailremoveuserfromallservices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#staffavailremoveuserfromallservices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a staff member from a service
    # Allows the user to remove a staff member's service availability.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param serviceid [String] The id of the service.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavailremoveuserfromservice(token, userid, serviceid, opts = {})
      staffavailremoveuserfromservice_with_http_info(token, userid, serviceid, opts)
      nil
    end

    # Remove a staff member from a service
    # Allows the user to remove a staff member&#39;s service availability.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param serviceid [String] The id of the service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavailremoveuserfromservice_with_http_info(token, userid, serviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.staffavailremoveuserfromservice ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.staffavailremoveuserfromservice"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.staffavailremoveuserfromservice"
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling DefaultApi.staffavailremoveuserfromservice"
      end
      # resource path
      local_var_path = '/staffavailremoveuserfromservice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'serviceid'] = serviceid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#staffavailremoveuserfromservice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Make a staff member available for a specific availability type
    # Allows the user to set a staff member as available for walk ins, appointments, or both.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user whose specific availability has to be set.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :availablefor Specific availability to set.
    # @return [nil]
    def staffavailsetavailability(token, userid, opts = {})
      staffavailsetavailability_with_http_info(token, userid, opts)
      nil
    end

    # Make a staff member available for a specific availability type
    # Allows the user to set a staff member as available for walk ins, appointments, or both.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user whose specific availability has to be set.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :availablefor Specific availability to set.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavailsetavailability_with_http_info(token, userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.staffavailsetavailability ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.staffavailsetavailability"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.staffavailsetavailability"
      end
      # resource path
      local_var_path = '/staffavailsetavailability'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'availablefor'] = opts[:'availablefor'] if !opts[:'availablefor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#staffavailsetavailability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change current user's availability type
    # Allows the user to make themselves available for walk ins, appointments, or both.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :availablefor Specific availability to set.
    # @return [nil]
    def staffavailsetmyavailability(token, opts = {})
      staffavailsetmyavailability_with_http_info(token, opts)
      nil
    end

    # Change current user&#39;s availability type
    # Allows the user to make themselves available for walk ins, appointments, or both.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :availablefor Specific availability to set.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavailsetmyavailability_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.staffavailsetmyavailability ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.staffavailsetmyavailability"
      end
      # resource path
      local_var_path = '/staffavailsetmyavailability'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'availablefor'] = opts[:'availablefor'] if !opts[:'availablefor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#staffavailsetmyavailability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a sign-in station
    # Allows the user to delete a sign-in station from the list of existing sign-in stations that they can view based on their scope.
    # @param token [String] The authentication token.
    # @param id [String] The id of the sign-in station to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stationdelete(token, id, opts = {})
      stationdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a sign-in station
    # Allows the user to delete a sign-in station from the list of existing sign-in stations that they can view based on their scope.
    # @param token [String] The authentication token.
    # @param id [String] The id of the sign-in station to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.stationdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.stationdelete"
      end
      # resource path
      local_var_path = '/stationdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a sign-in station
    # Allows the user to view an individual sign-in station and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the sign-in station to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stationget(token, id, opts = {})
      stationget_with_http_info(token, id, opts)
      nil
    end

    # View details of a sign-in station
    # Allows the user to view an individual sign-in station and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the sign-in station to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.stationget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.stationget"
      end
      # resource path
      local_var_path = '/stationget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all the current terms
    # @param station [String] The id of the sign-in station whose account&#39;s current terms have to be retrieved.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stationgetcurrentterms(station, opts = {})
      stationgetcurrentterms_with_http_info(station, opts)
      nil
    end

    # Get all the current terms
    # @param station [String] The id of the sign-in station whose account&#39;s current terms have to be retrieved.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationgetcurrentterms_with_http_info(station, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationgetcurrentterms ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.stationgetcurrentterms"
      end
      # resource path
      local_var_path = '/stationgetcurrentterms'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationgetcurrentterms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a the info to display in the sign-in station by it's ID.
    # @param id [String] The id of the sign-in station to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :event The id of the event, to override the one by schedule.
    # @return [nil]
    def stationgetinfo(id, opts = {})
      stationgetinfo_with_http_info(id, opts)
      nil
    end

    # Gets a the info to display in the sign-in station by it&#39;s ID.
    # @param id [String] The id of the sign-in station to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :event The id of the event, to override the one by schedule.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationgetinfo_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationgetinfo ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.stationgetinfo"
      end
      # resource path
      local_var_path = '/stationgetinfo'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationgetinfo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the current license information
    # @param station [String] The id of the sign-in station whose account&#39;s license has to be retrieved.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stationgetlicense(station, opts = {})
      stationgetlicense_with_http_info(station, opts)
      nil
    end

    # Gets the current license information
    # @param station [String] The id of the sign-in station whose account&#39;s license has to be retrieved.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationgetlicense_with_http_info(station, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationgetlicense ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.stationgetlicense"
      end
      # resource path
      local_var_path = '/stationgetlicense'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationgetlicense\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the sign-in station settings of a specified location
    # Allows the user to view the location settings of a sign-in station.
    # @param location [String] The id of the location whose station settings have to be returned.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stationgetlocationsettings(location, opts = {})
      stationgetlocationsettings_with_http_info(location, opts)
      nil
    end

    # View the sign-in station settings of a specified location
    # Allows the user to view the location settings of a sign-in station.
    # @param location [String] The id of the location whose station settings have to be returned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationgetlocationsettings_with_http_info(location, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationgetlocationsettings ...'
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling DefaultApi.stationgetlocationsettings"
      end
      # resource path
      local_var_path = '/stationgetlocationsettings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'location'] = location

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationgetlocationsettings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of sign-in stations
    # Allows the user to view the list of sign-in stations, limited to the stations in the locations to which they are scoped.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stationlist(token, from, count, opts = {})
      stationlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of sign-in stations
    # Allows the user to view the list of sign-in stations, limited to the stations in the locations to which they are scoped.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.stationlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.stationlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.stationlist"
      end
      # resource path
      local_var_path = '/stationlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a sign-in station
    # Allows the user to create, edit, or install a sign-in station based in an area to which they are scoped.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def stationsave(opts = {})
      stationsave_with_http_info(opts)
      nil
    end

    # Create or edit a sign-in station
    # Allows the user to create, edit, or install a sign-in station based in an area to which they are scoped.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationsave ...'
      end
      # resource path
      local_var_path = '/stationsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a class attendance sign-in station for myself
    # Allows the user to create a class attendance sign-in station for a course for which they are available as staff.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def stationsavemine(opts = {})
      stationsavemine_with_http_info(opts)
      nil
    end

    # Create or edit a class attendance sign-in station for myself
    # Allows the user to create a class attendance sign-in station for a course for which they are available as staff.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationsavemine_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationsavemine ...'
      end
      # resource path
      local_var_path = '/stationsavemine'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationsavemine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unlocks the sign-in station.
    # @param id [String] The id of the sign-in station to unlock.
    # @param passcode [String] The passcode to unlock the station.
    # @param method [String] The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stationunlock(id, passcode, method, opts = {})
      stationunlock_with_http_info(id, passcode, method, opts)
      nil
    end

    # Unlocks the sign-in station.
    # @param id [String] The id of the sign-in station to unlock.
    # @param passcode [String] The passcode to unlock the station.
    # @param method [String] The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stationunlock_with_http_info(id, passcode, method, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stationunlock ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.stationunlock"
      end
      # verify the required parameter 'passcode' is set
      if @api_client.config.client_side_validation && passcode.nil?
        fail ArgumentError, "Missing the required parameter 'passcode' when calling DefaultApi.stationunlock"
      end
      # verify the required parameter 'method' is set
      if @api_client.config.client_side_validation && method.nil?
        fail ArgumentError, "Missing the required parameter 'method' when calling DefaultApi.stationunlock"
      end
      # resource path
      local_var_path = '/stationunlock'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'passcode'] = passcode
      query_params[:'method'] = method

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stationunlock\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a swipe
    # Allows the user to delete an existing attendance swipe.
    # @param token [String] The authentication token.
    # @param id [String] The id of the swipe to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def swipedelete(token, id, opts = {})
      swipedelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a swipe
    # Allows the user to delete an existing attendance swipe.
    # @param token [String] The authentication token.
    # @param id [String] The id of the swipe to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def swipedelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.swipedelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.swipedelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.swipedelete"
      end
      # resource path
      local_var_path = '/swipedelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#swipedelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a swipe
    # Allows the user to view an individual attendance swipe.
    # @param token [String] The authentication token.
    # @param id [String] The id of the swipe to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def swipeget(token, id, opts = {})
      swipeget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a swipe
    # Allows the user to view an individual attendance swipe.
    # @param token [String] The authentication token.
    # @param id [String] The id of the swipe to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def swipeget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.swipeget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.swipeget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.swipeget"
      end
      # resource path
      local_var_path = '/swipeget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#swipeget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of swipes
    # Allows the user to view a list of all swipes for the location or locations in which the user is scoped.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [nil]
    def swipelist(from, count, opts = {})
      swipelist_with_http_info(from, count, opts)
      nil
    end

    # View a list of swipes
    # Allows the user to view a list of all swipes for the location or locations in which the user is scoped.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def swipelist_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.swipelist ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.swipelist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.swipelist"
      end
      # resource path
      local_var_path = '/swipelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#swipelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a swipe, and if possible, save the related attendance log
    # Allows the user to save an attendance swipe, which will also save the attendance log if the information in the swipe is enough.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def swipesave(opts = {})
      swipesave_with_http_info(opts)
      nil
    end

    # Create or edit a swipe, and if possible, save the related attendance log
    # Allows the user to save an attendance swipe, which will also save the attendance log if the information in the swipe is enough.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def swipesave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.swipesave ...'
      end
      # resource path
      local_var_path = '/swipesave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#swipesave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new swipe from a sign-in station, and if possible, creates the attendance log
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def swipesaveanonym(opts = {})
      swipesaveanonym_with_http_info(opts)
      nil
    end

    # Creates a new swipe from a sign-in station, and if possible, creates the attendance log
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def swipesaveanonym_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.swipesaveanonym ...'
      end
      # resource path
      local_var_path = '/swipesaveanonym'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#swipesaveanonym\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a tag
    # Allows the user to delete an existing tag.
    # @param token [String] The authentication token.
    # @param id [String] The id of the tag to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def tagdelete(token, id, opts = {})
      tagdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a tag
    # Allows the user to delete an existing tag.
    # @param token [String] The authentication token.
    # @param id [String] The id of the tag to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tagdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tagdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.tagdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.tagdelete"
      end
      # resource path
      local_var_path = '/tagdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tagdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a specified tag
    # Allows the user to click on and view the settings for a tag.
    # @param token [String] The authentication token.
    # @param id [String] The id of the tag to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def tagget(token, id, opts = {})
      tagget_with_http_info(token, id, opts)
      nil
    end

    # View details of a specified tag
    # Allows the user to click on and view the settings for a tag.
    # @param token [String] The authentication token.
    # @param id [String] The id of the tag to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tagget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tagget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.tagget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.tagget"
      end
      # resource path
      local_var_path = '/tagget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tagget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of tags
    # Allows the user to view the list of tags.
    # @param token [String] The authentication token.
    # @param group [String] The group of the tags to return.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def taglist(token, group, from, count, opts = {})
      taglist_with_http_info(token, group, from, count, opts)
      nil
    end

    # View a list of tags
    # Allows the user to view the list of tags.
    # @param token [String] The authentication token.
    # @param group [String] The group of the tags to return.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def taglist_with_http_info(token, group, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.taglist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.taglist"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling DefaultApi.taglist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.taglist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.taglist"
      end
      # resource path
      local_var_path = '/taglist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'group'] = group
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#taglist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of entities that can be tagged
    # Allows the user to view the list of user roles that can be tagged, according to that tag's settings.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def taglistgroups(token, opts = {})
      taglistgroups_with_http_info(token, opts)
      nil
    end

    # View a list of entities that can be tagged
    # Allows the user to view the list of user roles that can be tagged, according to that tag&#39;s settings.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def taglistgroups_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.taglistgroups ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.taglistgroups"
      end
      # resource path
      local_var_path = '/taglistgroups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#taglistgroups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a tag
    # Allows the user to create or edit a tag.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def tagsave(opts = {})
      tagsave_with_http_info(opts)
      nil
    end

    # Create or edit a tag
    # Allows the user to create or edit a tag.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tagsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tagsave ...'
      end
      # resource path
      local_var_path = '/tagsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tagsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for tags in the account
    # Allows the user to search for tags.
    # @param token [String] The authentication token.
    # @param query [String] The query to search tags. Use group:&lt;group&gt; to search in a specific group (mandatory).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :allowcreatingnew Specifies whether an option to create a new tag should be retrieved.
    # @return [nil]
    def tagsearch(token, query, opts = {})
      tagsearch_with_http_info(token, query, opts)
      nil
    end

    # Search for tags in the account
    # Allows the user to search for tags.
    # @param token [String] The authentication token.
    # @param query [String] The query to search tags. Use group:&lt;group&gt; to search in a specific group (mandatory).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :allowcreatingnew Specifies whether an option to create a new tag should be retrieved.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tagsearch_with_http_info(token, query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tagsearch ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.tagsearch"
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.tagsearch"
      end
      # resource path
      local_var_path = '/tagsearch'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'query'] = query
      query_params[:'allowcreatingnew'] = opts[:'allowcreatingnew'] if !opts[:'allowcreatingnew'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tagsearch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an image to a template
    # Allows the user to add an image to a badge or certificate template.
    # @param token [String] The authentication token.
    # @param template [String] The id of the template where the image has to be added
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @return [nil]
    def templateaddimage(token, template, upload, opts = {})
      templateaddimage_with_http_info(token, template, upload, opts)
      nil
    end

    # Add an image to a template
    # Allows the user to add an image to a badge or certificate template.
    # @param token [String] The authentication token.
    # @param template [String] The id of the template where the image has to be added
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templateaddimage_with_http_info(token, template, upload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templateaddimage ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.templateaddimage"
      end
      # verify the required parameter 'template' is set
      if @api_client.config.client_side_validation && template.nil?
        fail ArgumentError, "Missing the required parameter 'template' when calling DefaultApi.templateaddimage"
      end
      # verify the required parameter 'upload' is set
      if @api_client.config.client_side_validation && upload.nil?
        fail ArgumentError, "Missing the required parameter 'upload' when calling DefaultApi.templateaddimage"
      end
      # resource path
      local_var_path = '/templateaddimage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'template'] = template
      query_params[:'upload'] = upload
      query_params[:'filename'] = opts[:'filename'] if !opts[:'filename'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templateaddimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a template
    # Allows the user to delete an existing template.
    # @param token [String] The authentication token.
    # @param id [String] The id of the template to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def templatedelete(token, id, opts = {})
      templatedelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a template
    # Allows the user to delete an existing template.
    # @param token [String] The authentication token.
    # @param id [String] The id of the template to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templatedelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templatedelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.templatedelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.templatedelete"
      end
      # resource path
      local_var_path = '/templatedelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templatedelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send generated templates by email
    # Allows the user to send generated templates via email through AccuCampus.
    # @param token [String] The authentication token.
    # @param jobid [String] The id of the job that is creating the templates.
    # @param emailsubject [String] Args depending on the send-to flag.
    # @param emailbody [String] Args depending on the send-to flag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate).
    # @option opts [String] :emailfrom The name of the sender to be displayed in the receipients inbox
    # @option opts [String] :emailreplyto The reply-to field for the emails.
    # @return [nil]
    def templateemail(token, jobid, emailsubject, emailbody, opts = {})
      templateemail_with_http_info(token, jobid, emailsubject, emailbody, opts)
      nil
    end

    # Send generated templates by email
    # Allows the user to send generated templates via email through AccuCampus.
    # @param token [String] The authentication token.
    # @param jobid [String] The id of the job that is creating the templates.
    # @param emailsubject [String] Args depending on the send-to flag.
    # @param emailbody [String] Args depending on the send-to flag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate).
    # @option opts [String] :emailfrom The name of the sender to be displayed in the receipients inbox
    # @option opts [String] :emailreplyto The reply-to field for the emails.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templateemail_with_http_info(token, jobid, emailsubject, emailbody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templateemail ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.templateemail"
      end
      # verify the required parameter 'jobid' is set
      if @api_client.config.client_side_validation && jobid.nil?
        fail ArgumentError, "Missing the required parameter 'jobid' when calling DefaultApi.templateemail"
      end
      # verify the required parameter 'emailsubject' is set
      if @api_client.config.client_side_validation && emailsubject.nil?
        fail ArgumentError, "Missing the required parameter 'emailsubject' when calling DefaultApi.templateemail"
      end
      # verify the required parameter 'emailbody' is set
      if @api_client.config.client_side_validation && emailbody.nil?
        fail ArgumentError, "Missing the required parameter 'emailbody' when calling DefaultApi.templateemail"
      end
      # resource path
      local_var_path = '/templateemail'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'jobid'] = jobid
      query_params[:'emailsubject'] = emailsubject
      query_params[:'emailbody'] = emailbody
      query_params[:'templatekind'] = opts[:'templatekind'] if !opts[:'templatekind'].nil?
      query_params[:'emailfrom'] = opts[:'emailfrom'] if !opts[:'emailfrom'].nil?
      query_params[:'emailreplyto'] = opts[:'emailreplyto'] if !opts[:'emailreplyto'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templateemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate specified templates
    # Allows the user to generate an existing template as badges or certificates.
    # @param token [String] The authentication token.
    # @param template [String] The id of the template to generate.
    # @param source [String] The source key of the selected template data source.
    # @param singlefile [Boolean] True if all the templates should be placed in the same file, false if each one shoud be in its own file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas.
    # @option opts [Boolean] :forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading
    # @option opts [String] :role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor
    # @option opts [String] :filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|...
    # @return [nil]
    def templategenerate(token, template, source, singlefile, opts = {})
      templategenerate_with_http_info(token, template, source, singlefile, opts)
      nil
    end

    # Generate specified templates
    # Allows the user to generate an existing template as badges or certificates.
    # @param token [String] The authentication token.
    # @param template [String] The id of the template to generate.
    # @param source [String] The source key of the selected template data source.
    # @param singlefile [Boolean] True if all the templates should be placed in the same file, false if each one shoud be in its own file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas.
    # @option opts [Boolean] :forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading
    # @option opts [String] :role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor
    # @option opts [String] :filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|...
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templategenerate_with_http_info(token, template, source, singlefile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templategenerate ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.templategenerate"
      end
      # verify the required parameter 'template' is set
      if @api_client.config.client_side_validation && template.nil?
        fail ArgumentError, "Missing the required parameter 'template' when calling DefaultApi.templategenerate"
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling DefaultApi.templategenerate"
      end
      # verify the required parameter 'singlefile' is set
      if @api_client.config.client_side_validation && singlefile.nil?
        fail ArgumentError, "Missing the required parameter 'singlefile' when calling DefaultApi.templategenerate"
      end
      # resource path
      local_var_path = '/templategenerate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'template'] = template
      query_params[:'source'] = source
      query_params[:'singlefile'] = singlefile
      query_params[:'userid'] = opts[:'userid'] if !opts[:'userid'].nil?
      query_params[:'forsending'] = opts[:'forsending'] if !opts[:'forsending'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'filters'] = opts[:'filters'] if !opts[:'filters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templategenerate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a template
    # Allows the user to view a template and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the template to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def templateget(token, id, opts = {})
      templateget_with_http_info(token, id, opts)
      nil
    end

    # View details of a template
    # Allows the user to view a template and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the template to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templateget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templateget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.templateget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.templateget"
      end
      # resource path
      local_var_path = '/templateget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templateget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View generated templates
    # Allows the user to view templates which have been generated as badges or certificates.
    # @param token [String] The authentication token.
    # @param jobid [String] The id of the job that is creating the templates.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def templategetgenerated(token, jobid, opts = {})
      templategetgenerated_with_http_info(token, jobid, opts)
      nil
    end

    # View generated templates
    # Allows the user to view templates which have been generated as badges or certificates.
    # @param token [String] The authentication token.
    # @param jobid [String] The id of the job that is creating the templates.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templategetgenerated_with_http_info(token, jobid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templategetgenerated ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.templategetgenerated"
      end
      # verify the required parameter 'jobid' is set
      if @api_client.config.client_side_validation && jobid.nil?
        fail ArgumentError, "Missing the required parameter 'jobid' when calling DefaultApi.templategetgenerated"
      end
      # resource path
      local_var_path = '/templategetgenerated'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'jobid'] = jobid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templategetgenerated\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of defined templates
    # Allows the user to view the full list of created templates.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param kind [String] The kind of the templates to return. It must be included in (badge, certificate).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :designedonly If true then it only returns the templates that were designed. Otherwise, it returns all.
    # @return [nil]
    def templatelist(token, from, count, kind, opts = {})
      templatelist_with_http_info(token, from, count, kind, opts)
      nil
    end

    # View a list of defined templates
    # Allows the user to view the full list of created templates.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param kind [String] The kind of the templates to return. It must be included in (badge, certificate).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :designedonly If true then it only returns the templates that were designed. Otherwise, it returns all.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templatelist_with_http_info(token, from, count, kind, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templatelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.templatelist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.templatelist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.templatelist"
      end
      # verify the required parameter 'kind' is set
      if @api_client.config.client_side_validation && kind.nil?
        fail ArgumentError, "Missing the required parameter 'kind' when calling DefaultApi.templatelist"
      end
      # resource path
      local_var_path = '/templatelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'kind'] = kind
      query_params[:'designedonly'] = opts[:'designedonly'] if !opts[:'designedonly'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templatelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of templates' data sources
    # Allows the user to see tokens to be used in the template
    # @param token [String] The authentication token.
    # @param kind [String] The kind of the templates to return. It must be included in (badge, certificate).
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def templatelistsources(token, kind, opts = {})
      templatelistsources_with_http_info(token, kind, opts)
      nil
    end

    # View a list of templates&#39; data sources
    # Allows the user to see tokens to be used in the template
    # @param token [String] The authentication token.
    # @param kind [String] The kind of the templates to return. It must be included in (badge, certificate).
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templatelistsources_with_http_info(token, kind, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templatelistsources ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.templatelistsources"
      end
      # verify the required parameter 'kind' is set
      if @api_client.config.client_side_validation && kind.nil?
        fail ArgumentError, "Missing the required parameter 'kind' when calling DefaultApi.templatelistsources"
      end
      # resource path
      local_var_path = '/templatelistsources'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'kind'] = kind

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templatelistsources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a template
    # Allows the user to create or edit a template.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def templatesave(opts = {})
      templatesave_with_http_info(opts)
      nil
    end

    # Create or edit a template
    # Allows the user to create or edit a template.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templatesave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templatesave ...'
      end
      # resource path
      local_var_path = '/templatesave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templatesave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save the layout of a template
    # Allows the user to edit a template's layout.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def templatesavelayout(opts = {})
      templatesavelayout_with_http_info(opts)
      nil
    end

    # Save the layout of a template
    # Allows the user to edit a template&#39;s layout.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def templatesavelayout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.templatesavelayout ...'
      end
      # resource path
      local_var_path = '/templatesavelayout'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#templatesavelayout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a term
    # Allows the user to delete a term from the existing list.
    # @param token [String] The authentication token.
    # @param id [String] The id of the term to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def termdelete(token, id, opts = {})
      termdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a term
    # Allows the user to delete a term from the existing list.
    # @param token [String] The authentication token.
    # @param id [String] The id of the term to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def termdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.termdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.termdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.termdelete"
      end
      # resource path
      local_var_path = '/termdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#termdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a term
    # Allows the user to view a term and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the term to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def termget(token, id, opts = {})
      termget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a term
    # Allows the user to view a term and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the term to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def termget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.termget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.termget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.termget"
      end
      # resource path
      local_var_path = '/termget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#termget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of all terms
    # Allows the user to view the full list of existing term.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from The first record to return.
    # @option opts [Integer] :count The max number of records to return.
    # @option opts [Boolean] :notpast Specifies whether the terms in the past should be returned or not.
    # @return [nil]
    def termlist(token, opts = {})
      termlist_with_http_info(token, opts)
      nil
    end

    # Search and view details of all terms
    # Allows the user to view the full list of existing term.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from The first record to return.
    # @option opts [Integer] :count The max number of records to return.
    # @option opts [Boolean] :notpast Specifies whether the terms in the past should be returned or not.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def termlist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.termlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.termlist"
      end
      # resource path
      local_var_path = '/termlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'notpast'] = opts[:'notpast'] if !opts[:'notpast'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#termlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create and edit terms
    # Allows the user to create and edit terms.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def termsave(opts = {})
      termsave_with_http_info(opts)
      nil
    end

    # Create and edit terms
    # Allows the user to create and edit terms.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def termsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.termsave ...'
      end
      # resource path
      local_var_path = '/termsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#termsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the remaining text credits for the account
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def textcreditremaining(token, opts = {})
      textcreditremaining_with_http_info(token, opts)
      nil
    end

    # Gets the remaining text credits for the account
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def textcreditremaining_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.textcreditremaining ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.textcreditremaining"
      end
      # resource path
      local_var_path = '/textcreditremaining'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#textcreditremaining\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generates a dynamic image from text
    # @param token [String] The authentication token.
    # @param text [String] The text to convert to an image, use double pipes (||) as a new line.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fontcolor The color of the text, in hex format, without the #.
    # @option opts [Integer] :fontsize The size of the text, in points.
    # @option opts [String] :direction Either vertical or horizontal, default horizontal.
    # @option opts [Integer] :width The image width in pixels (or height if the direction is vertical).
    # @return [nil]
    def texttoimage(token, text, opts = {})
      texttoimage_with_http_info(token, text, opts)
      nil
    end

    # Generates a dynamic image from text
    # @param token [String] The authentication token.
    # @param text [String] The text to convert to an image, use double pipes (||) as a new line.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fontcolor The color of the text, in hex format, without the #.
    # @option opts [Integer] :fontsize The size of the text, in points.
    # @option opts [String] :direction Either vertical or horizontal, default horizontal.
    # @option opts [Integer] :width The image width in pixels (or height if the direction is vertical).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def texttoimage_with_http_info(token, text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.texttoimage ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.texttoimage"
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling DefaultApi.texttoimage"
      end
      # resource path
      local_var_path = '/texttoimage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'text'] = text
      query_params[:'fontcolor'] = opts[:'fontcolor'] if !opts[:'fontcolor'].nil?
      query_params[:'fontsize'] = opts[:'fontsize'] if !opts[:'fontsize'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#texttoimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the translations of the specified values
    # @param token [String] The authentication token.
    # @param universal [String] Pipe separated list of universal text to be translated.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def translationget(token, universal, opts = {})
      translationget_with_http_info(token, universal, opts)
      nil
    end

    # Gets the translations of the specified values
    # @param token [String] The authentication token.
    # @param universal [String] Pipe separated list of universal text to be translated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def translationget_with_http_info(token, universal, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.translationget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.translationget"
      end
      # verify the required parameter 'universal' is set
      if @api_client.config.client_side_validation && universal.nil?
        fail ArgumentError, "Missing the required parameter 'universal' when calling DefaultApi.translationget"
      end
      # resource path
      local_var_path = '/translationget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'universal'] = universal

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#translationget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the file containing the translations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :account The id of the account whose translations file has to be retrieved.
    # @return [nil]
    def translationgetcachefile(opts = {})
      translationgetcachefile_with_http_info(opts)
      nil
    end

    # Get the file containing the translations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token.
    # @option opts [String] :account The id of the account whose translations file has to be retrieved.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def translationgetcachefile_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.translationgetcachefile ...'
      end
      # resource path
      local_var_path = '/translationgetcachefile'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'account'] = opts[:'account'] if !opts[:'account'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#translationgetcachefile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all the available translations in the system
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Text to search/filter translations.
    # @option opts [Boolean] :nondefaultonly If true then it returns only the terms translated. Otherwise, it returns all.
    # @option opts [Boolean] :appdefaultasuniversal If true then it uses the app default translation as the universal term.
    # @return [nil]
    def translationlist(token, opts = {})
      translationlist_with_http_info(token, opts)
      nil
    end

    # Lists all the available translations in the system
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Text to search/filter translations.
    # @option opts [Boolean] :nondefaultonly If true then it returns only the terms translated. Otherwise, it returns all.
    # @option opts [Boolean] :appdefaultasuniversal If true then it uses the app default translation as the universal term.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def translationlist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.translationlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.translationlist"
      end
      # resource path
      local_var_path = '/translationlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'nondefaultonly'] = opts[:'nondefaultonly'] if !opts[:'nondefaultonly'].nil?
      query_params[:'appdefaultasuniversal'] = opts[:'appdefaultasuniversal'] if !opts[:'appdefaultasuniversal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#translationlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit a translation
    # Allows the user to edit a translation for the entire account.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def translationsave(opts = {})
      translationsave_with_http_info(opts)
      nil
    end

    # Edit a translation
    # Allows the user to edit a translation for the entire account.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def translationsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.translationsave ...'
      end
      # resource path
      local_var_path = '/translationsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#translationsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change user's own password
    # Allows the user to change their own password.
    # @param token [String] The authentication token.
    # @param oldpass [String] The old password of the authenticated user.
    # @param newpass [String] The new password of the authenticated user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userchangepwd(token, oldpass, newpass, opts = {})
      userchangepwd_with_http_info(token, oldpass, newpass, opts)
      nil
    end

    # Change user&#39;s own password
    # Allows the user to change their own password.
    # @param token [String] The authentication token.
    # @param oldpass [String] The old password of the authenticated user.
    # @param newpass [String] The new password of the authenticated user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userchangepwd_with_http_info(token, oldpass, newpass, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userchangepwd ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userchangepwd"
      end
      # verify the required parameter 'oldpass' is set
      if @api_client.config.client_side_validation && oldpass.nil?
        fail ArgumentError, "Missing the required parameter 'oldpass' when calling DefaultApi.userchangepwd"
      end
      # verify the required parameter 'newpass' is set
      if @api_client.config.client_side_validation && newpass.nil?
        fail ArgumentError, "Missing the required parameter 'newpass' when calling DefaultApi.userchangepwd"
      end
      # resource path
      local_var_path = '/userchangepwd'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'oldpass'] = oldpass
      query_params[:'newpass'] = newpass

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userchangepwd\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Changes the user password using a change password request id
    # @param changereq [String] The change password request ID sent by email to the user.
    # @param newpass [String] The new password of the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userchangepwdbyreq(changereq, newpass, opts = {})
      userchangepwdbyreq_with_http_info(changereq, newpass, opts)
      nil
    end

    # Changes the user password using a change password request id
    # @param changereq [String] The change password request ID sent by email to the user.
    # @param newpass [String] The new password of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userchangepwdbyreq_with_http_info(changereq, newpass, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userchangepwdbyreq ...'
      end
      # verify the required parameter 'changereq' is set
      if @api_client.config.client_side_validation && changereq.nil?
        fail ArgumentError, "Missing the required parameter 'changereq' when calling DefaultApi.userchangepwdbyreq"
      end
      # verify the required parameter 'newpass' is set
      if @api_client.config.client_side_validation && newpass.nil?
        fail ArgumentError, "Missing the required parameter 'newpass' when calling DefaultApi.userchangepwdbyreq"
      end
      # resource path
      local_var_path = '/userchangepwdbyreq'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'changereq'] = changereq
      query_params[:'newpass'] = newpass

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userchangepwdbyreq\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a user
    # Allows the user to delete a user.
    # @param token [String] The authentication token.
    # @param id [String] The id of the user to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userdelete(token, id, opts = {})
      userdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a user
    # Allows the user to delete a user.
    # @param token [String] The authentication token.
    # @param id [String] The id of the user to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.userdelete"
      end
      # resource path
      local_var_path = '/userdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finds similar users to prevent duplicates
    # Allows the user to be warned if a user they are creating has the same card number as another user.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currentid The id of the current user.
    # @option opts [String] :phonenumber A phone number to search for similar users.
    # @option opts [String] :cardnumber A card number to search for similar users.
    # @return [nil]
    def userfindsimilar(token, opts = {})
      userfindsimilar_with_http_info(token, opts)
      nil
    end

    # Finds similar users to prevent duplicates
    # Allows the user to be warned if a user they are creating has the same card number as another user.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currentid The id of the current user.
    # @option opts [String] :phonenumber A phone number to search for similar users.
    # @option opts [String] :cardnumber A card number to search for similar users.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userfindsimilar_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userfindsimilar ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userfindsimilar"
      end
      # resource path
      local_var_path = '/userfindsimilar'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'currentid'] = opts[:'currentid'] if !opts[:'currentid'].nil?
      query_params[:'phonenumber'] = opts[:'phonenumber'] if !opts[:'phonenumber'].nil?
      query_params[:'cardnumber'] = opts[:'cardnumber'] if !opts[:'cardnumber'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userfindsimilar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a user
    # Allows the user to search and view a user and their details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the user to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def userget(token, id, opts = {})
      userget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a user
    # Allows the user to search and view a user and their details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the user to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.userget"
      end
      # resource path
      local_var_path = '/userget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search user by card number
    # Allows the user to search for a user by their card number.
    # @param token [String] The authentication token.
    # @param card [String] The card number of the user to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def usergetbycard(token, card, opts = {})
      usergetbycard_with_http_info(token, card, opts)
      nil
    end

    # Search user by card number
    # Allows the user to search for a user by their card number.
    # @param token [String] The authentication token.
    # @param card [String] The card number of the user to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergetbycard_with_http_info(token, card, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergetbycard ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergetbycard"
      end
      # verify the required parameter 'card' is set
      if @api_client.config.client_side_validation && card.nil?
        fail ArgumentError, "Missing the required parameter 'card' when calling DefaultApi.usergetbycard"
      end
      # resource path
      local_var_path = '/usergetbycard'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'card'] = card
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergetbycard\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a user to a group
    # Allows the user to add a user to a group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param groupid [String] The id of the group.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroupaddmember(token, userid, groupid, opts = {})
      usergroupaddmember_with_http_info(token, userid, groupid, opts)
      nil
    end

    # Add a user to a group
    # Allows the user to add a user to a group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to add.
    # @param groupid [String] The id of the group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroupaddmember_with_http_info(token, userid, groupid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergroupaddmember ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergroupaddmember"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.usergroupaddmember"
      end
      # verify the required parameter 'groupid' is set
      if @api_client.config.client_side_validation && groupid.nil?
        fail ArgumentError, "Missing the required parameter 'groupid' when calling DefaultApi.usergroupaddmember"
      end
      # resource path
      local_var_path = '/usergroupaddmember'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'groupid'] = groupid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergroupaddmember\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a group
    # Allows the user to delete a group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param id [String] The id of the group to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroupdelete(token, id, opts = {})
      usergroupdelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a group
    # Allows the user to delete a group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param id [String] The id of the group to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroupdelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergroupdelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergroupdelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.usergroupdelete"
      end
      # resource path
      local_var_path = '/usergroupdelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergroupdelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a user group
    # Allows the user to view a user group and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the user group to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroupget(token, id, opts = {})
      usergroupget_with_http_info(token, id, opts)
      nil
    end

    # Search and view details of a user group
    # Allows the user to view a user group and its details.
    # @param token [String] The authentication token.
    # @param id [String] The id of the user group to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroupget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergroupget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergroupget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.usergroupget"
      end
      # resource path
      local_var_path = '/usergroupget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergroupget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the members of a user group
    # Allows the user to view the list of users in a group that they have permission to view.
    # @param token [String] The authentication token.
    # @param groupid [String] The id of the user group to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroupgetmembers(token, groupid, opts = {})
      usergroupgetmembers_with_http_info(token, groupid, opts)
      nil
    end

    # View the members of a user group
    # Allows the user to view the list of users in a group that they have permission to view.
    # @param token [String] The authentication token.
    # @param groupid [String] The id of the user group to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroupgetmembers_with_http_info(token, groupid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergroupgetmembers ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergroupgetmembers"
      end
      # verify the required parameter 'groupid' is set
      if @api_client.config.client_side_validation && groupid.nil?
        fail ArgumentError, "Missing the required parameter 'groupid' when calling DefaultApi.usergroupgetmembers"
      end
      # resource path
      local_var_path = '/usergroupgetmembers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'groupid'] = groupid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergroupgetmembers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the groups which a user is registered to
    # Allows the user to view the groups an individual user is registered to, based on group and user permissions.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to get his groups.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroupgetuser(token, userid, opts = {})
      usergroupgetuser_with_http_info(token, userid, opts)
      nil
    end

    # View the groups which a user is registered to
    # Allows the user to view the groups an individual user is registered to, based on group and user permissions.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to get his groups.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroupgetuser_with_http_info(token, userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergroupgetuser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergroupgetuser"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.usergroupgetuser"
      end
      # resource path
      local_var_path = '/usergroupgetuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergroupgetuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of user groups
    # Allows the user to view the list of groups that they have permission to view.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from The first record to return.
    # @option opts [Integer] :count The max number of records to return.
    # @option opts [String] :type The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group.
    # @return [nil]
    def usergrouplist(token, opts = {})
      usergrouplist_with_http_info(token, opts)
      nil
    end

    # View a list of user groups
    # Allows the user to view the list of groups that they have permission to view.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from The first record to return.
    # @option opts [Integer] :count The max number of records to return.
    # @option opts [String] :type The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergrouplist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergrouplist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergrouplist"
      end
      # resource path
      local_var_path = '/usergrouplist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergrouplist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh the dynamic group
    # Allows the user to refresh a dynamic group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param group [String] The ID of the group to refresh.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergrouprefresh(token, group, opts = {})
      usergrouprefresh_with_http_info(token, group, opts)
      nil
    end

    # Refresh the dynamic group
    # Allows the user to refresh a dynamic group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param group [String] The ID of the group to refresh.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergrouprefresh_with_http_info(token, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergrouprefresh ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergrouprefresh"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling DefaultApi.usergrouprefresh"
      end
      # resource path
      local_var_path = '/usergrouprefresh'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'group'] = group

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergrouprefresh\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a user from a group
    # Allows the user to remove a user from a group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param groupid [String] The id of the group.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroupremovemember(token, userid, groupid, opts = {})
      usergroupremovemember_with_http_info(token, userid, groupid, opts)
      nil
    end

    # Remove a user from a group
    # Allows the user to remove a user from a group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param userid [String] The id of the user to remove.
    # @param groupid [String] The id of the group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroupremovemember_with_http_info(token, userid, groupid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergroupremovemember ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergroupremovemember"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling DefaultApi.usergroupremovemember"
      end
      # verify the required parameter 'groupid' is set
      if @api_client.config.client_side_validation && groupid.nil?
        fail ArgumentError, "Missing the required parameter 'groupid' when calling DefaultApi.usergroupremovemember"
      end
      # resource path
      local_var_path = '/usergroupremovemember'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'userid'] = userid
      query_params[:'groupid'] = groupid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergroupremovemember\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a group
    # Allows the user to create a new group or edit a group that they have permission to edit.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def usergroupsave(opts = {})
      usergroupsave_with_http_info(opts)
      nil
    end

    # Create or edit a group
    # Allows the user to create a new group or edit a group that they have permission to edit.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroupsave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergroupsave ...'
      end
      # resource path
      local_var_path = '/usergroupsave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergroupsave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign tags to the members of a specified group
    # Allows the user to assign tags to the users of a group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param group [String] The id of the group to save whose members have to be tagged.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tags The tags to assign to the members of the specified group, in JSON format.
    # @return [nil]
    def usergrouptagmembers(token, group, opts = {})
      usergrouptagmembers_with_http_info(token, group, opts)
      nil
    end

    # Assign tags to the members of a specified group
    # Allows the user to assign tags to the users of a group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param group [String] The id of the group to save whose members have to be tagged.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tags The tags to assign to the members of the specified group, in JSON format.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergrouptagmembers_with_http_info(token, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergrouptagmembers ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergrouptagmembers"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling DefaultApi.usergrouptagmembers"
      end
      # resource path
      local_var_path = '/usergrouptagmembers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'group'] = group
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergrouptagmembers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unassign tags from the members of a specified group
    # Allows the user to unassign tags to the users of a group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param group [String] The id of the group to save whose members have to be untagged.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tags The tags to unassign from the members of the specified group, in JSON format.
    # @return [nil]
    def usergroupuntagmembers(token, group, opts = {})
      usergroupuntagmembers_with_http_info(token, group, opts)
      nil
    end

    # Unassign tags from the members of a specified group
    # Allows the user to unassign tags to the users of a group that they have permission to edit.
    # @param token [String] The authentication token.
    # @param group [String] The id of the group to save whose members have to be untagged.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tags The tags to unassign from the members of the specified group, in JSON format.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroupuntagmembers_with_http_info(token, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usergroupuntagmembers ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usergroupuntagmembers"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling DefaultApi.usergroupuntagmembers"
      end
      # resource path
      local_var_path = '/usergroupuntagmembers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'group'] = group
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usergroupuntagmembers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of users
    # Allows the user to view the full list of users and is based on role permissions.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :roleid The id of the role to filter users by, or empty to return all users.
    # @option opts [String] :onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def userlist(token, from, count, opts = {})
      userlist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of users
    # Allows the user to view the full list of users and is based on role permissions.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :roleid The id of the role to filter users by, or empty to return all users.
    # @option opts [String] :onlywithoutcard If is 1 then only the users without a card are returned, otherwise all users are returned.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userlist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userlist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userlist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.userlist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.userlist"
      end
      # resource path
      local_var_path = '/userlist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'roleid'] = opts[:'roleid'] if !opts[:'roleid'].nil?
      query_params[:'onlywithoutcard'] = opts[:'onlywithoutcard'] if !opts[:'onlywithoutcard'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload a photo for a specific user
    # Allows the user to upload a photo for a user.
    # @param token [String] The authentication token.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @option opts [String] :userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;.
    # @option opts [Boolean] :automatch Set this to true to find the specific user based on the file name. 
    # @return [nil]
    def userloadphoto(token, upload, opts = {})
      userloadphoto_with_http_info(token, upload, opts)
      nil
    end

    # Upload a photo for a specific user
    # Allows the user to upload a photo for a user.
    # @param token [String] The authentication token.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @option opts [String] :userid The user ID to directly associate the upload photo. If not specified, a temp ID is returned that can be later specified in &#39;user.save&#39;.
    # @option opts [Boolean] :automatch Set this to true to find the specific user based on the file name. 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userloadphoto_with_http_info(token, upload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userloadphoto ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userloadphoto"
      end
      # verify the required parameter 'upload' is set
      if @api_client.config.client_side_validation && upload.nil?
        fail ArgumentError, "Missing the required parameter 'upload' when calling DefaultApi.userloadphoto"
      end
      # resource path
      local_var_path = '/userloadphoto'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'upload'] = upload
      query_params[:'filename'] = opts[:'filename'] if !opts[:'filename'].nil?
      query_params[:'userid'] = opts[:'userid'] if !opts[:'userid'].nil?
      query_params[:'automatch'] = opts[:'automatch'] if !opts[:'automatch'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userloadphoto\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move data between users
    # Allows administrators to move data between users.
    # @param token [String] The authentication token.
    # @param source [String] The id of the user that is the source of the data.
    # @param destination [String] The id of the user that is the destination of the data.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usermovedata(token, source, destination, opts = {})
      usermovedata_with_http_info(token, source, destination, opts)
      nil
    end

    # Move data between users
    # Allows administrators to move data between users.
    # @param token [String] The authentication token.
    # @param source [String] The id of the user that is the source of the data.
    # @param destination [String] The id of the user that is the destination of the data.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usermovedata_with_http_info(token, source, destination, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usermovedata ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usermovedata"
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling DefaultApi.usermovedata"
      end
      # verify the required parameter 'destination' is set
      if @api_client.config.client_side_validation && destination.nil?
        fail ArgumentError, "Missing the required parameter 'destination' when calling DefaultApi.usermovedata"
      end
      # resource path
      local_var_path = '/usermovedata'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'source'] = source
      query_params[:'destination'] = destination

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usermovedata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a user profile
    # Allows the user to delete a profile from the list of profiles that they have permission to edit.
    # @param token [String] The authentication token.
    # @param id [String] The id of the user profile to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userprofiledelete(token, id, opts = {})
      userprofiledelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a user profile
    # Allows the user to delete a profile from the list of profiles that they have permission to edit.
    # @param token [String] The authentication token.
    # @param id [String] The id of the user profile to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userprofiledelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userprofiledelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userprofiledelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.userprofiledelete"
      end
      # resource path
      local_var_path = '/userprofiledelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userprofiledelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a specific user profile
    # Allows the user to view individual user profiles and their details, provided they have permission to view that profile.
    # @param token [String] The authentication token.
    # @param id [String] The id of the profile question set.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userprofileget(token, id, opts = {})
      userprofileget_with_http_info(token, id, opts)
      nil
    end

    # View a specific user profile
    # Allows the user to view individual user profiles and their details, provided they have permission to view that profile.
    # @param token [String] The authentication token.
    # @param id [String] The id of the profile question set.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userprofileget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userprofileget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userprofileget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.userprofileget"
      end
      # resource path
      local_var_path = '/userprofileget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userprofileget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Shows the profile for a specific (or current) user, based on each profile questionnaire questions.
    # Allows the user to view a profile for a user, provided they have permission to view that user and profile.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the user to view, or empty for current user.
    # @return [nil]
    def userprofilegetallview(token, opts = {})
      userprofilegetallview_with_http_info(token, opts)
      nil
    end

    # Shows the profile for a specific (or current) user, based on each profile questionnaire questions.
    # Allows the user to view a profile for a user, provided they have permission to view that user and profile.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The id of the user to view, or empty for current user.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userprofilegetallview_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userprofilegetallview ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userprofilegetallview"
      end
      # resource path
      local_var_path = '/userprofilegetallview'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userprofilegetallview\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the list of user profiles
    # Allows the user to view the full list of profiles that they have permission to view.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from The first record to return.
    # @option opts [Integer] :count The max number of records to return.
    # @return [nil]
    def userprofilelist(token, opts = {})
      userprofilelist_with_http_info(token, opts)
      nil
    end

    # View the list of user profiles
    # Allows the user to view the full list of profiles that they have permission to view.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from The first record to return.
    # @option opts [Integer] :count The max number of records to return.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userprofilelist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userprofilelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userprofilelist"
      end
      # resource path
      local_var_path = '/userprofilelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userprofilelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the list of all the available user questions
    # Allows the user to view the list of questions in a profile that they have permission to view.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userprofilelistquestions(token, opts = {})
      userprofilelistquestions_with_http_info(token, opts)
      nil
    end

    # Gets the list of all the available user questions
    # Allows the user to view the list of questions in a profile that they have permission to view.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userprofilelistquestions_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userprofilelistquestions ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userprofilelistquestions"
      end
      # resource path
      local_var_path = '/userprofilelistquestions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userprofilelistquestions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the statistics of a user group
    # Allows the user to view the demographic statistics of a user group.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params The ID of the group, specified as &#39;group&#x3D;...&#39;
    # @return [nil]
    def userprofilepreparestats(token, opts = {})
      userprofilepreparestats_with_http_info(token, opts)
      nil
    end

    # Gets the statistics of a user group
    # Allows the user to view the demographic statistics of a user group.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params The ID of the group, specified as &#39;group&#x3D;...&#39;
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userprofilepreparestats_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userprofilepreparestats ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.userprofilepreparestats"
      end
      # resource path
      local_var_path = '/userprofilepreparestats'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userprofilepreparestats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit user profile questions
    # Allows the user to create or edit a user profile.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def userprofilesave(opts = {})
      userprofilesave_with_http_info(opts)
      nil
    end

    # Create or edit user profile questions
    # Allows the user to create or edit a user profile.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userprofilesave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userprofilesave ...'
      end
      # resource path
      local_var_path = '/userprofilesave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userprofilesave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves the profile for a specific (or current) user. Additional security applies on a per profile basis.
    # Allows the user to edit a profile for a user, provided they have permission to edit that user and profile.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def userprofilesaveanswers(opts = {})
      userprofilesaveanswers_with_http_info(opts)
      nil
    end

    # Saves the profile for a specific (or current) user. Additional security applies on a per profile basis.
    # Allows the user to edit a profile for a user, provided they have permission to edit that user and profile.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userprofilesaveanswers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userprofilesaveanswers ...'
      end
      # resource path
      local_var_path = '/userprofilesaveanswers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userprofilesaveanswers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Requests a password change
    # @param domain [String] The domain of the account where the user exists.
    # @param email [String] The email of the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userrequestpwdchange(domain, email, opts = {})
      userrequestpwdchange_with_http_info(domain, email, opts)
      nil
    end

    # Requests a password change
    # @param domain [String] The domain of the account where the user exists.
    # @param email [String] The email of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def userrequestpwdchange_with_http_info(domain, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.userrequestpwdchange ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling DefaultApi.userrequestpwdchange"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling DefaultApi.userrequestpwdchange"
      end
      # resource path
      local_var_path = '/userrequestpwdchange'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'domain'] = domain
      query_params[:'email'] = email

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#userrequestpwdchange\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a user
    # Allows the user to create or edit a user.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def usersave(opts = {})
      usersave_with_http_info(opts)
      nil
    end

    # Create or edit a user
    # Allows the user to create or edit a user.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usersave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usersave ...'
      end
      # resource path
      local_var_path = '/usersave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usersave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send email to the specified user(s) to set/change their passwords
    # Allows the user to trigger an email to another user asking them to set or change their password.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def usersavepwdchange(opts = {})
      usersavepwdchange_with_http_info(opts)
      nil
    end

    # Send email to the specified user(s) to set/change their passwords
    # Allows the user to trigger an email to another user asking them to set or change their password.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usersavepwdchange_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usersavepwdchange ...'
      end
      # resource path
      local_var_path = '/usersavepwdchange'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usersavepwdchange\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists available user settings
    # @param token [String] The authentication token.
    # @param keys [String] Setting key to get. Can be multiple separated by commas.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The user id whose settings have to be returned.
    # @return [nil]
    def usersettingsget(token, keys, opts = {})
      usersettingsget_with_http_info(token, keys, opts)
      nil
    end

    # Lists available user settings
    # @param token [String] The authentication token.
    # @param keys [String] Setting key to get. Can be multiple separated by commas.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The user id whose settings have to be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usersettingsget_with_http_info(token, keys, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usersettingsget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usersettingsget"
      end
      # verify the required parameter 'keys' is set
      if @api_client.config.client_side_validation && keys.nil?
        fail ArgumentError, "Missing the required parameter 'keys' when calling DefaultApi.usersettingsget"
      end
      # resource path
      local_var_path = '/usersettingsget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'keys'] = keys
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usersettingsget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get multiple user settings
    # @param token [String] The authentication token.
    # @param keys [String] Setting key to get. Can be multiple separated by commas.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The user id whose settings have to be returned.
    # @return [nil]
    def usersettingsgetmultiple(token, keys, opts = {})
      usersettingsgetmultiple_with_http_info(token, keys, opts)
      nil
    end

    # Get multiple user settings
    # @param token [String] The authentication token.
    # @param keys [String] Setting key to get. Can be multiple separated by commas.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The user id whose settings have to be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usersettingsgetmultiple_with_http_info(token, keys, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usersettingsgetmultiple ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.usersettingsgetmultiple"
      end
      # verify the required parameter 'keys' is set
      if @api_client.config.client_side_validation && keys.nil?
        fail ArgumentError, "Missing the required parameter 'keys' when calling DefaultApi.usersettingsgetmultiple"
      end
      # resource path
      local_var_path = '/usersettingsgetmultiple'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'keys'] = keys
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usersettingsgetmultiple\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a user setting
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def usersettingssave(opts = {})
      usersettingssave_with_http_info(opts)
      nil
    end

    # Saves a user setting
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usersettingssave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usersettingssave ...'
      end
      # resource path
      local_var_path = '/usersettingssave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usersettingssave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save multiple user settings at once
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def usersettingssavemultiple(opts = {})
      usersettingssavemultiple_with_http_info(opts)
      nil
    end

    # Save multiple user settings at once
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usersettingssavemultiple_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.usersettingssavemultiple ...'
      end
      # resource path
      local_var_path = '/usersettingssavemultiple'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#usersettingssavemultiple\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get current version information
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def version(token, opts = {})
      version_with_http_info(token, opts)
      nil
    end

    # Get current version information
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def version_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.version ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.version"
      end
      # resource path
      local_var_path = '/version'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add myself to a waiting line
    # Allows the user to add themselves to a waiting line from the AccuCampus mobile app.
    # @param token [String] The authentication token.
    # @param waitinglineid [String] ID of the waiting line to join.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def virtuallineaddmyself(token, waitinglineid, opts = {})
      virtuallineaddmyself_with_http_info(token, waitinglineid, opts)
      nil
    end

    # Add myself to a waiting line
    # Allows the user to add themselves to a waiting line from the AccuCampus mobile app.
    # @param token [String] The authentication token.
    # @param waitinglineid [String] ID of the waiting line to join.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def virtuallineaddmyself_with_http_info(token, waitinglineid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.virtuallineaddmyself ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.virtuallineaddmyself"
      end
      # verify the required parameter 'waitinglineid' is set
      if @api_client.config.client_side_validation && waitinglineid.nil?
        fail ArgumentError, "Missing the required parameter 'waitinglineid' when calling DefaultApi.virtuallineaddmyself"
      end
      # resource path
      local_var_path = '/virtuallineaddmyself'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'waitinglineid'] = waitinglineid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#virtuallineaddmyself\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists waiting lines that have remote access enabled
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def virtuallinelist(token, opts = {})
      virtuallinelist_with_http_info(token, opts)
      nil
    end

    # Lists waiting lines that have remote access enabled
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def virtuallinelist_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.virtuallinelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.virtuallinelist"
      end
      # resource path
      local_var_path = '/virtuallinelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#virtuallinelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove myself from a waiting line
    # Allows the user to remove themselves from a waiting line in the AccuCampus mobile app.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def virtuallineremovemyself(token, opts = {})
      virtuallineremovemyself_with_http_info(token, opts)
      nil
    end

    # Remove myself from a waiting line
    # Allows the user to remove themselves from a waiting line in the AccuCampus mobile app.
    # @param token [String] The authentication token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def virtuallineremovemyself_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.virtuallineremovemyself ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.virtuallineremovemyself"
      end
      # resource path
      local_var_path = '/virtuallineremovemyself'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#virtuallineremovemyself\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Put user in a waiting line
    # @param station [String] The id of the sign-in station.
    # @param user [String] The user&#39;s card number.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locationid The location&#39;s id where the swipe must be saved.
    # @option opts [DateTime] :time The date and time of the swipe.
    # @option opts [String] :signinrole Specifies if the sign-in is for an attendee or a staff member
    # @option opts [String] :roleid Specifies the role the user has selected in order to sign-in
    # @option opts [String] :services The services ids the user has selected.
    # @option opts [String] :eventid The id of the event the user selected.
    # @option opts [String] :staff The id of the staff member the user selected.
    # @option opts [Integer] :photosize The swiping user&#39;s photo size.
    # @return [nil]
    def waitinglineadduser(station, user, opts = {})
      waitinglineadduser_with_http_info(station, user, opts)
      nil
    end

    # Put user in a waiting line
    # @param station [String] The id of the sign-in station.
    # @param user [String] The user&#39;s card number.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locationid The location&#39;s id where the swipe must be saved.
    # @option opts [DateTime] :time The date and time of the swipe.
    # @option opts [String] :signinrole Specifies if the sign-in is for an attendee or a staff member
    # @option opts [String] :roleid Specifies the role the user has selected in order to sign-in
    # @option opts [String] :services The services ids the user has selected.
    # @option opts [String] :eventid The id of the event the user selected.
    # @option opts [String] :staff The id of the staff member the user selected.
    # @option opts [Integer] :photosize The swiping user&#39;s photo size.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def waitinglineadduser_with_http_info(station, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.waitinglineadduser ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.waitinglineadduser"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.waitinglineadduser"
      end
      # resource path
      local_var_path = '/waitinglineadduser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'user'] = user
      query_params[:'locationid'] = opts[:'locationid'] if !opts[:'locationid'].nil?
      query_params[:'time'] = opts[:'time'] if !opts[:'time'].nil?
      query_params[:'signinrole'] = opts[:'signinrole'] if !opts[:'signinrole'].nil?
      query_params[:'roleid'] = opts[:'roleid'] if !opts[:'roleid'].nil?
      query_params[:'services'] = opts[:'services'] if !opts[:'services'].nil?
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'staff'] = opts[:'staff'] if !opts[:'staff'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#waitinglineadduser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a waiting line
    # Allows the user to delete an existing waiting line, provided it is in a location that the user is scoped to.
    # @param token [String] The authentication token.
    # @param id [String] The id of the line to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def waitinglinedelete(token, id, opts = {})
      waitinglinedelete_with_http_info(token, id, opts)
      nil
    end

    # Delete a waiting line
    # Allows the user to delete an existing waiting line, provided it is in a location that the user is scoped to.
    # @param token [String] The authentication token.
    # @param id [String] The id of the line to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def waitinglinedelete_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.waitinglinedelete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.waitinglinedelete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.waitinglinedelete"
      end
      # resource path
      local_var_path = '/waitinglinedelete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#waitinglinedelete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a waiting line
    # Allows the user to view the details of a waiting line in a location to which they are scoped.
    # @param token [String] The authentication token.
    # @param id [String] The id of the waiting line to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def waitinglineget(token, id, opts = {})
      waitinglineget_with_http_info(token, id, opts)
      nil
    end

    # View details of a waiting line
    # Allows the user to view the details of a waiting line in a location to which they are scoped.
    # @param token [String] The authentication token.
    # @param id [String] The id of the waiting line to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def waitinglineget_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.waitinglineget ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.waitinglineget"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.waitinglineget"
      end
      # resource path
      local_var_path = '/waitinglineget'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'id'] = id
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#waitinglineget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check whether a user is in a waiting line, signed-in or is not in the area
    # @param station [String] The id of the sign-in station.
    # @param time [DateTime] The date and time of the swipe.
    # @param user [String] The card number of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The id of the location the user picked.
    # @return [nil]
    def waitinglineisuserin(station, time, user, opts = {})
      waitinglineisuserin_with_http_info(station, time, user, opts)
      nil
    end

    # Check whether a user is in a waiting line, signed-in or is not in the area
    # @param station [String] The id of the sign-in station.
    # @param time [DateTime] The date and time of the swipe.
    # @param user [String] The card number of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The id of the location the user picked.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def waitinglineisuserin_with_http_info(station, time, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.waitinglineisuserin ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling DefaultApi.waitinglineisuserin"
      end
      # verify the required parameter 'time' is set
      if @api_client.config.client_side_validation && time.nil?
        fail ArgumentError, "Missing the required parameter 'time' when calling DefaultApi.waitinglineisuserin"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.waitinglineisuserin"
      end
      # resource path
      local_var_path = '/waitinglineisuserin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'time'] = time
      query_params[:'user'] = user
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#waitinglineisuserin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of waiting lines
    # Allows the user to view the list of waiting lines in locations to which they are scoped.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def waitinglinelist(token, from, count, opts = {})
      waitinglinelist_with_http_info(token, from, count, opts)
      nil
    end

    # View a list of waiting lines
    # Allows the user to view the list of waiting lines in locations to which they are scoped.
    # @param token [String] The authentication token.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def waitinglinelist_with_http_info(token, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.waitinglinelist ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.waitinglinelist"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.waitinglinelist"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DefaultApi.waitinglinelist"
      end
      # resource path
      local_var_path = '/waitinglinelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'from'] = from
      query_params[:'count'] = count

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#waitinglinelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a user from a waiting line
    # Allows the user to remove a user from a waiting line, provided they have permission to access that waiting line.
    # @param token [String] The authentication token.
    # @param waitingline [String] The id of the waiting line whose item has to be removed.
    # @param itemid [String] The ID of the item that has to be removed.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def waitinglineremoveuser(token, waitingline, itemid, opts = {})
      waitinglineremoveuser_with_http_info(token, waitingline, itemid, opts)
      nil
    end

    # Remove a user from a waiting line
    # Allows the user to remove a user from a waiting line, provided they have permission to access that waiting line.
    # @param token [String] The authentication token.
    # @param waitingline [String] The id of the waiting line whose item has to be removed.
    # @param itemid [String] The ID of the item that has to be removed.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def waitinglineremoveuser_with_http_info(token, waitingline, itemid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.waitinglineremoveuser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.waitinglineremoveuser"
      end
      # verify the required parameter 'waitingline' is set
      if @api_client.config.client_side_validation && waitingline.nil?
        fail ArgumentError, "Missing the required parameter 'waitingline' when calling DefaultApi.waitinglineremoveuser"
      end
      # verify the required parameter 'itemid' is set
      if @api_client.config.client_side_validation && itemid.nil?
        fail ArgumentError, "Missing the required parameter 'itemid' when calling DefaultApi.waitinglineremoveuser"
      end
      # resource path
      local_var_path = '/waitinglineremoveuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'waitingline'] = waitingline
      query_params[:'itemid'] = itemid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#waitinglineremoveuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a waiting line
    # Allows the user to create or edit a waiting line in a location to which they are scoped.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def waitinglinesave(opts = {})
      waitinglinesave_with_http_info(opts)
      nil
    end

    # Create or edit a waiting line
    # Allows the user to create or edit a waiting line in a location to which they are scoped.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def waitinglinesave_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.waitinglinesave ...'
      end
      # resource path
      local_var_path = '/waitinglinesave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#waitinglinesave\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sign a user in from a waiting line
    # Allows the user to sign a user in from a waiting line, provided they have permission to access that waiting line.
    # @param token [String] The authentication token.
    # @param waitingline [String] The id of the waiting line whose item needs to be signed-in.
    # @param itemid [String] The ID of the item that has to be signed-in.
    # @param staff [String] The id of the staff member selected to sign-in.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The swiping user&#39;s photo size.
    # @return [nil]
    def waitinglinesigninuser(token, waitingline, itemid, staff, opts = {})
      waitinglinesigninuser_with_http_info(token, waitingline, itemid, staff, opts)
      nil
    end

    # Sign a user in from a waiting line
    # Allows the user to sign a user in from a waiting line, provided they have permission to access that waiting line.
    # @param token [String] The authentication token.
    # @param waitingline [String] The id of the waiting line whose item needs to be signed-in.
    # @param itemid [String] The ID of the item that has to be signed-in.
    # @param staff [String] The id of the staff member selected to sign-in.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The swiping user&#39;s photo size.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def waitinglinesigninuser_with_http_info(token, waitingline, itemid, staff, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.waitinglinesigninuser ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DefaultApi.waitinglinesigninuser"
      end
      # verify the required parameter 'waitingline' is set
      if @api_client.config.client_side_validation && waitingline.nil?
        fail ArgumentError, "Missing the required parameter 'waitingline' when calling DefaultApi.waitinglinesigninuser"
      end
      # verify the required parameter 'itemid' is set
      if @api_client.config.client_side_validation && itemid.nil?
        fail ArgumentError, "Missing the required parameter 'itemid' when calling DefaultApi.waitinglinesigninuser"
      end
      # verify the required parameter 'staff' is set
      if @api_client.config.client_side_validation && staff.nil?
        fail ArgumentError, "Missing the required parameter 'staff' when calling DefaultApi.waitinglinesigninuser"
      end
      # resource path
      local_var_path = '/waitinglinesigninuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'waitingline'] = waitingline
      query_params[:'itemid'] = itemid
      query_params[:'staff'] = staff
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#waitinglinesigninuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
