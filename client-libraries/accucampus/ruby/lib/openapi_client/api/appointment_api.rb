=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class AppointmentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel an appointment
    # Allows the user to cancel an appointment.
    # @param id [String] The id of the appointment to cancel.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointment_cancel(id, opts = {})
      appointment_cancel_with_http_info(id, opts)
      nil
    end

    # Cancel an appointment
    # Allows the user to cancel an appointment.
    # @param id [String] The id of the appointment to cancel.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_cancel_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_cancel ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AppointmentApi.appointment_cancel"
      end
      # resource path
      local_var_path = '/appointment/cancel'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if an appointment is valid or not
    # @param id [String] The id of the appointment to check.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :editing Specifies whether the check is for a new appointment or an existing one.
    # @return [nil]
    def appointment_checkisvalid(id, opts = {})
      appointment_checkisvalid_with_http_info(id, opts)
      nil
    end

    # Check if an appointment is valid or not
    # @param id [String] The id of the appointment to check.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :editing Specifies whether the check is for a new appointment or an existing one.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_checkisvalid_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_checkisvalid ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AppointmentApi.appointment_checkisvalid"
      end
      # resource path
      local_var_path = '/appointment/checkisvalid'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'editing'] = opts[:'editing'] if !opts[:'editing'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_checkisvalid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit an appointment even if it breaks activated rules
    # Allows the user to edit an existing appointment even if it breaks the rules or settings of that location.
    # @param id [String] The id of the appointment to edit.
    # @param attendee [String] The id of the attendee involved in the appointment.
    # @param staff [String] The id of the staff member involved in the appointment.
    # @param location [String] The id of the location where the appointment will take place.
    # @param start [DateTime] The appointment&#39;s start date &amp; time.
    # @param _end [DateTime] The appointment&#39;s end date &amp; time.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :term The id of the term when the appointment takes place.
    # @option opts [String] :event The id of the event of the appointment.
    # @option opts [String] :services Comma-separated string containing the ids of the services of the appointment.
    # @option opts [String] :notes The notes of the appointment.
    # @return [nil]
    def appointment_editanyway(id, attendee, staff, location, start, _end, opts = {})
      appointment_editanyway_with_http_info(id, attendee, staff, location, start, _end, opts)
      nil
    end

    # Edit an appointment even if it breaks activated rules
    # Allows the user to edit an existing appointment even if it breaks the rules or settings of that location.
    # @param id [String] The id of the appointment to edit.
    # @param attendee [String] The id of the attendee involved in the appointment.
    # @param staff [String] The id of the staff member involved in the appointment.
    # @param location [String] The id of the location where the appointment will take place.
    # @param start [DateTime] The appointment&#39;s start date &amp; time.
    # @param _end [DateTime] The appointment&#39;s end date &amp; time.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :term The id of the term when the appointment takes place.
    # @option opts [String] :event The id of the event of the appointment.
    # @option opts [String] :services Comma-separated string containing the ids of the services of the appointment.
    # @option opts [String] :notes The notes of the appointment.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_editanyway_with_http_info(id, attendee, staff, location, start, _end, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_editanyway ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AppointmentApi.appointment_editanyway"
      end
      # verify the required parameter 'attendee' is set
      if @api_client.config.client_side_validation && attendee.nil?
        fail ArgumentError, "Missing the required parameter 'attendee' when calling AppointmentApi.appointment_editanyway"
      end
      # verify the required parameter 'staff' is set
      if @api_client.config.client_side_validation && staff.nil?
        fail ArgumentError, "Missing the required parameter 'staff' when calling AppointmentApi.appointment_editanyway"
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling AppointmentApi.appointment_editanyway"
      end
      # verify the required parameter 'start' is set
      if @api_client.config.client_side_validation && start.nil?
        fail ArgumentError, "Missing the required parameter 'start' when calling AppointmentApi.appointment_editanyway"
      end
      # verify the required parameter '_end' is set
      if @api_client.config.client_side_validation && _end.nil?
        fail ArgumentError, "Missing the required parameter '_end' when calling AppointmentApi.appointment_editanyway"
      end
      # resource path
      local_var_path = '/appointment/editanyway'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'attendee'] = attendee
      query_params[:'staff'] = staff
      query_params[:'location'] = location
      query_params[:'start'] = start
      query_params[:'end'] = _end
      query_params[:'term'] = opts[:'term'] if !opts[:'term'].nil?
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?
      query_params[:'services'] = opts[:'services'] if !opts[:'services'].nil?
      query_params[:'notes'] = opts[:'notes'] if !opts[:'notes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_editanyway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit the no-show status of an appointment
    # Allows the user to edit the no-show status of an appointment by marking it as Voided, Restored, or as a Show.
    # @param id [String] The id of the appointment to edit its presence.
    # @param showedup [Boolean] Specifies whether the attendee was showed-up or not in the appointment.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointment_editpresence(id, showedup, opts = {})
      appointment_editpresence_with_http_info(id, showedup, opts)
      nil
    end

    # Edit the no-show status of an appointment
    # Allows the user to edit the no-show status of an appointment by marking it as Voided, Restored, or as a Show.
    # @param id [String] The id of the appointment to edit its presence.
    # @param showedup [Boolean] Specifies whether the attendee was showed-up or not in the appointment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_editpresence_with_http_info(id, showedup, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_editpresence ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AppointmentApi.appointment_editpresence"
      end
      # verify the required parameter 'showedup' is set
      if @api_client.config.client_side_validation && showedup.nil?
        fail ArgumentError, "Missing the required parameter 'showedup' when calling AppointmentApi.appointment_editpresence"
      end
      # resource path
      local_var_path = '/appointment/editpresence'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'showedup'] = showedup

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_editpresence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finds all staff available slots filtered by service, date, etc
    # Allows the user to view available appointment slots when creating an appointment.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param serviceids [String] CSV list of the service Ids to filter by.
    # @param locationid [String] The id of the service to filter by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def appointment_findallstaffslots(starttime, endtime, serviceids, locationid, opts = {})
      appointment_findallstaffslots_with_http_info(starttime, endtime, serviceids, locationid, opts)
      nil
    end

    # Finds all staff available slots filtered by service, date, etc
    # Allows the user to view available appointment slots when creating an appointment.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param serviceids [String] CSV list of the service Ids to filter by.
    # @param locationid [String] The id of the service to filter by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_findallstaffslots_with_http_info(starttime, endtime, serviceids, locationid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_findallstaffslots ...'
      end
      # verify the required parameter 'starttime' is set
      if @api_client.config.client_side_validation && starttime.nil?
        fail ArgumentError, "Missing the required parameter 'starttime' when calling AppointmentApi.appointment_findallstaffslots"
      end
      # verify the required parameter 'endtime' is set
      if @api_client.config.client_side_validation && endtime.nil?
        fail ArgumentError, "Missing the required parameter 'endtime' when calling AppointmentApi.appointment_findallstaffslots"
      end
      # verify the required parameter 'serviceids' is set
      if @api_client.config.client_side_validation && serviceids.nil?
        fail ArgumentError, "Missing the required parameter 'serviceids' when calling AppointmentApi.appointment_findallstaffslots"
      end
      # verify the required parameter 'locationid' is set
      if @api_client.config.client_side_validation && locationid.nil?
        fail ArgumentError, "Missing the required parameter 'locationid' when calling AppointmentApi.appointment_findallstaffslots"
      end
      # resource path
      local_var_path = '/appointment/findallstaffslots'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'starttime'] = starttime
      query_params[:'endtime'] = endtime
      query_params[:'serviceids'] = serviceids
      query_params[:'locationid'] = locationid
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_findallstaffslots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finds available slots filtered by service, date, staff, etc
    # Allows the user to view available appointment slots when creating an appointment.
    # @param staffid [String] The id of the staff to filter by.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param serviceids [String] CSV list of the service Ids to filter by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [String] :locationid The id of the service to filter by.
    # @return [nil]
    def appointment_findslots(staffid, starttime, endtime, serviceids, opts = {})
      appointment_findslots_with_http_info(staffid, starttime, endtime, serviceids, opts)
      nil
    end

    # Finds available slots filtered by service, date, staff, etc
    # Allows the user to view available appointment slots when creating an appointment.
    # @param staffid [String] The id of the staff to filter by.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param serviceids [String] CSV list of the service Ids to filter by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [String] :locationid The id of the service to filter by.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_findslots_with_http_info(staffid, starttime, endtime, serviceids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_findslots ...'
      end
      # verify the required parameter 'staffid' is set
      if @api_client.config.client_side_validation && staffid.nil?
        fail ArgumentError, "Missing the required parameter 'staffid' when calling AppointmentApi.appointment_findslots"
      end
      # verify the required parameter 'starttime' is set
      if @api_client.config.client_side_validation && starttime.nil?
        fail ArgumentError, "Missing the required parameter 'starttime' when calling AppointmentApi.appointment_findslots"
      end
      # verify the required parameter 'endtime' is set
      if @api_client.config.client_side_validation && endtime.nil?
        fail ArgumentError, "Missing the required parameter 'endtime' when calling AppointmentApi.appointment_findslots"
      end
      # verify the required parameter 'serviceids' is set
      if @api_client.config.client_side_validation && serviceids.nil?
        fail ArgumentError, "Missing the required parameter 'serviceids' when calling AppointmentApi.appointment_findslots"
      end
      # resource path
      local_var_path = '/appointment/findslots'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'staffid'] = staffid
      query_params[:'starttime'] = starttime
      query_params[:'endtime'] = endtime
      query_params[:'serviceids'] = serviceids
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'locationid'] = opts[:'locationid'] if !opts[:'locationid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_findslots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finds staff available by service, date, event, etc
    # Allows the user to view staff availability when creating an appointment.
    # @param serviceids [String] CSV list of the service ids to filter by.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [String] :locationid The id of the service to filter by.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def appointment_findstaff(serviceids, starttime, endtime, opts = {})
      appointment_findstaff_with_http_info(serviceids, starttime, endtime, opts)
      nil
    end

    # Finds staff available by service, date, event, etc
    # Allows the user to view staff availability when creating an appointment.
    # @param serviceids [String] CSV list of the service ids to filter by.
    # @param starttime [DateTime] The start time of the range to look for slots.
    # @param endtime [DateTime] The end time of the range to look for slots.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :eventid The id of the event to filter by.
    # @option opts [String] :locationid The id of the service to filter by.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_findstaff_with_http_info(serviceids, starttime, endtime, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_findstaff ...'
      end
      # verify the required parameter 'serviceids' is set
      if @api_client.config.client_side_validation && serviceids.nil?
        fail ArgumentError, "Missing the required parameter 'serviceids' when calling AppointmentApi.appointment_findstaff"
      end
      # verify the required parameter 'starttime' is set
      if @api_client.config.client_side_validation && starttime.nil?
        fail ArgumentError, "Missing the required parameter 'starttime' when calling AppointmentApi.appointment_findstaff"
      end
      # verify the required parameter 'endtime' is set
      if @api_client.config.client_side_validation && endtime.nil?
        fail ArgumentError, "Missing the required parameter 'endtime' when calling AppointmentApi.appointment_findstaff"
      end
      # resource path
      local_var_path = '/appointment/findstaff'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'serviceids'] = serviceids
      query_params[:'starttime'] = starttime
      query_params[:'endtime'] = endtime
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'locationid'] = opts[:'locationid'] if !opts[:'locationid'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_findstaff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of an appointment
    # Allows the user to view an individual appointment and its details.
    # @param id [String] The id of the appointment to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointment_get(id, opts = {})
      appointment_get_with_http_info(id, opts)
      nil
    end

    # Search and view details of an appointment
    # Allows the user to view an individual appointment and its details.
    # @param id [String] The id of the appointment to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AppointmentApi.appointment_get"
      end
      # resource path
      local_var_path = '/appointment/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the current appointments for the user that is about to sign-in via the specified sign-in station.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param location [String] The id of the location where the user wants to sign-in.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointment_getcurrent(station, user, location, opts = {})
      appointment_getcurrent_with_http_info(station, user, location, opts)
      nil
    end

    # Get the current appointments for the user that is about to sign-in via the specified sign-in station.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param location [String] The id of the location where the user wants to sign-in.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_getcurrent_with_http_info(station, user, location, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_getcurrent ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling AppointmentApi.appointment_getcurrent"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling AppointmentApi.appointment_getcurrent"
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling AppointmentApi.appointment_getcurrent"
      end
      # resource path
      local_var_path = '/appointment/getcurrent'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'user'] = user
      query_params[:'location'] = location

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_getcurrent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find locations where a service is available
    # Allows the user to search for appointment availability by location or service.
    # @param serviceid [String] The id of the service to get its locations.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointment_getlocations(serviceid, opts = {})
      appointment_getlocations_with_http_info(serviceid, opts)
      nil
    end

    # Find locations where a service is available
    # Allows the user to search for appointment availability by location or service.
    # @param serviceid [String] The id of the service to get its locations.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_getlocations_with_http_info(serviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_getlocations ...'
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling AppointmentApi.appointment_getlocations"
      end
      # resource path
      local_var_path = '/appointment/getlocations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'serviceid'] = serviceid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_getlocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of appointments
    # Allows the user to view all upcoming appointments for the location or locations they are scoped to.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :startdate The start date of the period to filter the appointments.
    # @option opts [DateTime] :enddate The end date of the period to filter the appointments.
    # @option opts [String] :userid The attendee id to filter the appointments.
    # @return [nil]
    def appointment_list(from, count, opts = {})
      appointment_list_with_http_info(from, count, opts)
      nil
    end

    # View a list of appointments
    # Allows the user to view all upcoming appointments for the location or locations they are scoped to.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :startdate The start date of the period to filter the appointments.
    # @option opts [DateTime] :enddate The end date of the period to filter the appointments.
    # @option opts [String] :userid The attendee id to filter the appointments.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_list_with_http_info(from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_list ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling AppointmentApi.appointment_list"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling AppointmentApi.appointment_list"
      end
      # resource path
      local_var_path = '/appointment/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?
      query_params[:'enddate'] = opts[:'enddate'] if !opts[:'enddate'].nil?
      query_params[:'userid'] = opts[:'userid'] if !opts[:'userid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all my upcoming appointments
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :start If specified, only appointments that start after the specified date will be returned.
    # @option opts [DateTime] :modifiedafter If specified, only appointments modified after the specified date will be returned.
    # @return [nil]
    def appointment_listmine(opts = {})
      appointment_listmine_with_http_info(opts)
      nil
    end

    # View all my upcoming appointments
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :start If specified, only appointments that start after the specified date will be returned.
    # @option opts [DateTime] :modifiedafter If specified, only appointments modified after the specified date will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_listmine_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_listmine ...'
      end
      # resource path
      local_var_path = '/appointment/listmine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'modifiedafter'] = opts[:'modifiedafter'] if !opts[:'modifiedafter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_listmine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of all my upcoming appointments
    # Allows the user to view all of their own upcoming appointments.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :start If specified, only appointments that start after the specified date will be returned.
    # @option opts [DateTime] :modifiedafter If specified, only appointments modified after the specified date will be returned.
    # @return [nil]
    def appointment_listupcoming(opts = {})
      appointment_listupcoming_with_http_info(opts)
      nil
    end

    # Search and view details of all my upcoming appointments
    # Allows the user to view all of their own upcoming appointments.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :start If specified, only appointments that start after the specified date will be returned.
    # @option opts [DateTime] :modifiedafter If specified, only appointments modified after the specified date will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_listupcoming_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_listupcoming ...'
      end
      # resource path
      local_var_path = '/appointment/listupcoming'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'modifiedafter'] = opts[:'modifiedafter'] if !opts[:'modifiedafter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_listupcoming\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reschedule an appointment from MS Outlook.
    # Allows the user to reschedule, edit, or cancel appointments via MS Outlook if the user has the AccuCampus add-on installed on their Outlook.
    # @param id [String] The id of the appointment to edit.
    # @param start [DateTime] The appointment&#39;s start date &amp; time.
    # @param _end [DateTime] The appointment&#39;s end date &amp; time.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointment_rescheduleoutlook(id, start, _end, opts = {})
      appointment_rescheduleoutlook_with_http_info(id, start, _end, opts)
      nil
    end

    # Reschedule an appointment from MS Outlook.
    # Allows the user to reschedule, edit, or cancel appointments via MS Outlook if the user has the AccuCampus add-on installed on their Outlook.
    # @param id [String] The id of the appointment to edit.
    # @param start [DateTime] The appointment&#39;s start date &amp; time.
    # @param _end [DateTime] The appointment&#39;s end date &amp; time.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_rescheduleoutlook_with_http_info(id, start, _end, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_rescheduleoutlook ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AppointmentApi.appointment_rescheduleoutlook"
      end
      # verify the required parameter 'start' is set
      if @api_client.config.client_side_validation && start.nil?
        fail ArgumentError, "Missing the required parameter 'start' when calling AppointmentApi.appointment_rescheduleoutlook"
      end
      # verify the required parameter '_end' is set
      if @api_client.config.client_side_validation && _end.nil?
        fail ArgumentError, "Missing the required parameter '_end' when calling AppointmentApi.appointment_rescheduleoutlook"
      end
      # resource path
      local_var_path = '/appointment/rescheduleoutlook'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'start'] = start
      query_params[:'end'] = _end

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_rescheduleoutlook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restore an appointment
    # Allows the user to restore a canceled appointment.
    # @param id [String] The id of the appointment to restore.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointment_restore(id, opts = {})
      appointment_restore_with_http_info(id, opts)
      nil
    end

    # Restore an appointment
    # Allows the user to restore a canceled appointment.
    # @param id [String] The id of the appointment to restore.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_restore_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_restore ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AppointmentApi.appointment_restore"
      end
      # resource path
      local_var_path = '/appointment/restore'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_restore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restore an appointment even if it breaks activated rules
    # Allows the user to restore a canceled appointment even if that appointment breaks the rules or settings of that location.
    # @param id [String] The id of the appointment to restore.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointment_restoreanyway(id, opts = {})
      appointment_restoreanyway_with_http_info(id, opts)
      nil
    end

    # Restore an appointment even if it breaks activated rules
    # Allows the user to restore a canceled appointment even if that appointment breaks the rules or settings of that location.
    # @param id [String] The id of the appointment to restore.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_restoreanyway_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_restoreanyway ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AppointmentApi.appointment_restoreanyway"
      end
      # resource path
      local_var_path = '/appointment/restoreanyway'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_restoreanyway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Schedule an appointment
    # Allows the user to schedule an appointment within the rules of the location and the availability of staff members.
    # @param id [String] The id of the appointment to save (leave empty to create a new one).
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def appointment_save(id, opts = {})
      appointment_save_with_http_info(id, opts)
      nil
    end

    # Schedule an appointment
    # Allows the user to schedule an appointment within the rules of the location and the availability of staff members.
    # @param id [String] The id of the appointment to save (leave empty to create a new one).
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_save_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_save ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AppointmentApi.appointment_save"
      end
      # resource path
      local_var_path = '/appointment/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_save\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Schedule an appointment even if it breaks activated rules
    # Allows the user to schedule an appointment even if it breaks the rules or settings of that location or if it goes against the availability of the staff member.
    # @param id [String] The id of the appointment to set as valid.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointment_setasvalid(id, opts = {})
      appointment_setasvalid_with_http_info(id, opts)
      nil
    end

    # Schedule an appointment even if it breaks activated rules
    # Allows the user to schedule an appointment even if it breaks the rules or settings of that location or if it goes against the availability of the staff member.
    # @param id [String] The id of the appointment to set as valid.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_setasvalid_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_setasvalid ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AppointmentApi.appointment_setasvalid"
      end
      # resource path
      local_var_path = '/appointment/setasvalid'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_setasvalid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the locations with most appointments
    # Allows the user to view suggestions for the most popular locations in which to make appointments
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointment_suggestlocations(opts = {})
      appointment_suggestlocations_with_http_info(opts)
      nil
    end

    # View the locations with most appointments
    # Allows the user to view suggestions for the most popular locations in which to make appointments
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_suggestlocations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_suggestlocations ...'
      end
      # resource path
      local_var_path = '/appointment/suggestlocations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_suggestlocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the services with most appointments
    # Allows the user to view suggestions for the most popular services for which to make appointments.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointment_suggestservices(opts = {})
      appointment_suggestservices_with_http_info(opts)
      nil
    end

    # View the services with most appointments
    # Allows the user to view suggestions for the most popular services for which to make appointments.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_suggestservices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_suggestservices ...'
      end
      # resource path
      local_var_path = '/appointment/suggestservices'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_suggestservices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Void an appointment
    # Allows the user to void an appointment that has been marked as a no-show so that it does not count against the student's restrictions.
    # @param id [String] The id of the appointment to cancel.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def appointment_void(id, opts = {})
      appointment_void_with_http_info(id, opts)
      nil
    end

    # Void an appointment
    # Allows the user to void an appointment that has been marked as a no-show so that it does not count against the student&#39;s restrictions.
    # @param id [String] The id of the appointment to cancel.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def appointment_void_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppointmentApi.appointment_void ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AppointmentApi.appointment_void"
      end
      # resource path
      local_var_path = '/appointment/void'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppointmentApi#appointment_void\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
