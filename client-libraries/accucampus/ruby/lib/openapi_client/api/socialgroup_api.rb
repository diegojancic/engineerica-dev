=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class SocialgroupApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adds new members to a group (which the user must own already)
    # @param id [String] ID of the group to add members to.
    # @param userids [String] Csv list of user Ids to add.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def socialgroup_addmembers(id, userids, opts = {})
      socialgroup_addmembers_with_http_info(id, userids, opts)
      nil
    end

    # Adds new members to a group (which the user must own already)
    # @param id [String] ID of the group to add members to.
    # @param userids [String] Csv list of user Ids to add.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def socialgroup_addmembers_with_http_info(id, userids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SocialgroupApi.socialgroup_addmembers ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SocialgroupApi.socialgroup_addmembers"
      end
      # verify the required parameter 'userids' is set
      if @api_client.config.client_side_validation && userids.nil?
        fail ArgumentError, "Missing the required parameter 'userids' when calling SocialgroupApi.socialgroup_addmembers"
      end
      # resource path
      local_var_path = '/socialgroup/addmembers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'userids'] = userids

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialgroupApi#socialgroup_addmembers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a group
    # @param id [String] ID of the group to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [AnyType] :body 
    # @return [nil]
    def socialgroup_delete(id, opts = {})
      socialgroup_delete_with_http_info(id, opts)
      nil
    end

    # Deletes a group
    # @param id [String] ID of the group to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [AnyType] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def socialgroup_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SocialgroupApi.socialgroup_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SocialgroupApi.socialgroup_delete"
      end
      # resource path
      local_var_path = '/socialgroup/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialgroupApi#socialgroup_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the groups the current user is in
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def socialgroup_list(opts = {})
      socialgroup_list_with_http_info(opts)
      nil
    end

    # View all the groups the current user is in
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def socialgroup_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SocialgroupApi.socialgroup_list ...'
      end
      # resource path
      local_var_path = '/socialgroup/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialgroupApi#socialgroup_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the members of a group
    # @param id [String] ID of the group to list members.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def socialgroup_listmembers(id, opts = {})
      socialgroup_listmembers_with_http_info(id, opts)
      nil
    end

    # Lists the members of a group
    # @param id [String] ID of the group to list members.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def socialgroup_listmembers_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SocialgroupApi.socialgroup_listmembers ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SocialgroupApi.socialgroup_listmembers"
      end
      # resource path
      local_var_path = '/socialgroup/listmembers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialgroupApi#socialgroup_listmembers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes members from a group (which the user must own already)
    # @param id [String] ID of the group to remove members from.
    # @param userids [String] Csv list of user Ids to remove.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def socialgroup_removemembers(id, userids, opts = {})
      socialgroup_removemembers_with_http_info(id, userids, opts)
      nil
    end

    # Removes members from a group (which the user must own already)
    # @param id [String] ID of the group to remove members from.
    # @param userids [String] Csv list of user Ids to remove.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def socialgroup_removemembers_with_http_info(id, userids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SocialgroupApi.socialgroup_removemembers ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SocialgroupApi.socialgroup_removemembers"
      end
      # verify the required parameter 'userids' is set
      if @api_client.config.client_side_validation && userids.nil?
        fail ArgumentError, "Missing the required parameter 'userids' when calling SocialgroupApi.socialgroup_removemembers"
      end
      # resource path
      local_var_path = '/socialgroup/removemembers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'userids'] = userids

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialgroupApi#socialgroup_removemembers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes myself from an existent group
    # @param id [String] ID of the group to remove me from.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def socialgroup_removemyself(id, opts = {})
      socialgroup_removemyself_with_http_info(id, opts)
      nil
    end

    # Removes myself from an existent group
    # @param id [String] ID of the group to remove me from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def socialgroup_removemyself_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SocialgroupApi.socialgroup_removemyself ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SocialgroupApi.socialgroup_removemyself"
      end
      # resource path
      local_var_path = '/socialgroup/removemyself'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialgroupApi#socialgroup_removemyself\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a new group
    # @param id [String] ID of the group to update. Leave blank to create new.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def socialgroup_save(id, opts = {})
      socialgroup_save_with_http_info(id, opts)
      nil
    end

    # Saves a new group
    # @param id [String] ID of the group to update. Leave blank to create new.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def socialgroup_save_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SocialgroupApi.socialgroup_save ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SocialgroupApi.socialgroup_save"
      end
      # resource path
      local_var_path = '/socialgroup/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialgroupApi#socialgroup_save\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
