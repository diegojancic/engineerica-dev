=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class DeadendrecordingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deletes a dead-end record group
    # Allows the user to delete a dead end record group.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def deadendrecording_delete(opts = {})
      deadendrecording_delete_with_http_info(opts)
      nil
    end

    # Deletes a dead-end record group
    # Allows the user to delete a dead end record group.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def deadendrecording_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeadendrecordingApi.deadendrecording_delete ...'
      end
      # resource path
      local_var_path = '/deadendrecording/delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeadendrecordingApi#deadendrecording_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the recorded dead ends, if enabled
    # Allows the user to view the list of dead ends, provided dead end recording is enabled for the account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deadendrecording_list(opts = {})
      deadendrecording_list_with_http_info(opts)
      nil
    end

    # Lists the recorded dead ends, if enabled
    # Allows the user to view the list of dead ends, provided dead end recording is enabled for the account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def deadendrecording_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeadendrecordingApi.deadendrecording_list ...'
      end
      # resource path
      local_var_path = '/deadendrecording/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeadendrecordingApi#deadendrecording_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the comments for a specific dead end
    # Allows the user to view the comments made on dead end sessions.
    # @param hierarchykey [String] The hierarchy key of the record to get the feedback.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deadendrecording_listcomments(hierarchykey, opts = {})
      deadendrecording_listcomments_with_http_info(hierarchykey, opts)
      nil
    end

    # Lists the comments for a specific dead end
    # Allows the user to view the comments made on dead end sessions.
    # @param hierarchykey [String] The hierarchy key of the record to get the feedback.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def deadendrecording_listcomments_with_http_info(hierarchykey, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeadendrecordingApi.deadendrecording_listcomments ...'
      end
      # verify the required parameter 'hierarchykey' is set
      if @api_client.config.client_side_validation && hierarchykey.nil?
        fail ArgumentError, "Missing the required parameter 'hierarchykey' when calling DeadendrecordingApi.deadendrecording_listcomments"
      end
      # resource path
      local_var_path = '/deadendrecording/listcomments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hierarchykey'] = hierarchykey

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeadendrecordingApi#deadendrecording_listcomments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a dead-end record
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def deadendrecording_save(opts = {})
      deadendrecording_save_with_http_info(opts)
      nil
    end

    # Saves a dead-end record
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def deadendrecording_save_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeadendrecordingApi.deadendrecording_save ...'
      end
      # resource path
      local_var_path = '/deadendrecording/save'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeadendrecordingApi#deadendrecording_save\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
