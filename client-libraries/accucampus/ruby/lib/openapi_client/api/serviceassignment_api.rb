=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class ServiceassignmentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Enable a service in a specific location
    # Allows the user to enable a service in a location to which they are scoped.
    # @param serviceid [String] The id of the service to add.
    # @param locationid [String] The id of the location.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def serviceassignment_addservice(serviceid, locationid, opts = {})
      serviceassignment_addservice_with_http_info(serviceid, locationid, opts)
      nil
    end

    # Enable a service in a specific location
    # Allows the user to enable a service in a location to which they are scoped.
    # @param serviceid [String] The id of the service to add.
    # @param locationid [String] The id of the location.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def serviceassignment_addservice_with_http_info(serviceid, locationid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceassignmentApi.serviceassignment_addservice ...'
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling ServiceassignmentApi.serviceassignment_addservice"
      end
      # verify the required parameter 'locationid' is set
      if @api_client.config.client_side_validation && locationid.nil?
        fail ArgumentError, "Missing the required parameter 'locationid' when calling ServiceassignmentApi.serviceassignment_addservice"
      end
      # resource path
      local_var_path = '/serviceassignment/addservice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'serviceid'] = serviceid
      query_params[:'locationid'] = locationid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceassignmentApi#serviceassignment_addservice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of services enabled for a specific location
    # Allows the user to view a list of services available in a location to which they are scoped.
    # @param locationid [String] The id of the location to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :includegloballyavailable Specifies whether the services available globally must be returned or not.
    # @option opts [Boolean] :namefilter Filters the name of the services to return.
    # @option opts [Integer] :count The max number of services to return.
    # @return [nil]
    def serviceassignment_getlocation(locationid, opts = {})
      serviceassignment_getlocation_with_http_info(locationid, opts)
      nil
    end

    # View a list of services enabled for a specific location
    # Allows the user to view a list of services available in a location to which they are scoped.
    # @param locationid [String] The id of the location to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :includegloballyavailable Specifies whether the services available globally must be returned or not.
    # @option opts [Boolean] :namefilter Filters the name of the services to return.
    # @option opts [Integer] :count The max number of services to return.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def serviceassignment_getlocation_with_http_info(locationid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceassignmentApi.serviceassignment_getlocation ...'
      end
      # verify the required parameter 'locationid' is set
      if @api_client.config.client_side_validation && locationid.nil?
        fail ArgumentError, "Missing the required parameter 'locationid' when calling ServiceassignmentApi.serviceassignment_getlocation"
      end
      # resource path
      local_var_path = '/serviceassignment/getlocation'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'locationid'] = locationid
      query_params[:'includegloballyavailable'] = opts[:'includegloballyavailable'] if !opts[:'includegloballyavailable'].nil?
      query_params[:'namefilter'] = opts[:'namefilter'] if !opts[:'namefilter'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceassignmentApi#serviceassignment_getlocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of locations where a service is available
    # Allows the user to view a list of locations in which a service is available.
    # @param serviceid [String] The id of the service to get its locations.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def serviceassignment_getservice(serviceid, opts = {})
      serviceassignment_getservice_with_http_info(serviceid, opts)
      nil
    end

    # View a list of locations where a service is available
    # Allows the user to view a list of locations in which a service is available.
    # @param serviceid [String] The id of the service to get its locations.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def serviceassignment_getservice_with_http_info(serviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceassignmentApi.serviceassignment_getservice ...'
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling ServiceassignmentApi.serviceassignment_getservice"
      end
      # resource path
      local_var_path = '/serviceassignment/getservice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'serviceid'] = serviceid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceassignmentApi#serviceassignment_getservice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a service from a location
    # Allows the user to disable a service from a location to which they are scoped.
    # @param serviceid [String] The id of the service to remove.
    # @param locationid [String] The id of the location to remove the service from.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def serviceassignment_removeservice(serviceid, locationid, opts = {})
      serviceassignment_removeservice_with_http_info(serviceid, locationid, opts)
      nil
    end

    # Remove a service from a location
    # Allows the user to disable a service from a location to which they are scoped.
    # @param serviceid [String] The id of the service to remove.
    # @param locationid [String] The id of the location to remove the service from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def serviceassignment_removeservice_with_http_info(serviceid, locationid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceassignmentApi.serviceassignment_removeservice ...'
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling ServiceassignmentApi.serviceassignment_removeservice"
      end
      # verify the required parameter 'locationid' is set
      if @api_client.config.client_side_validation && locationid.nil?
        fail ArgumentError, "Missing the required parameter 'locationid' when calling ServiceassignmentApi.serviceassignment_removeservice"
      end
      # resource path
      local_var_path = '/serviceassignment/removeservice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'serviceid'] = serviceid
      query_params[:'locationid'] = locationid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceassignmentApi#serviceassignment_removeservice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
