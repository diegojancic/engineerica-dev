=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class TranslationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Gets the translations of the specified values
    # @param universal [String] Pipe separated list of universal text to be translated.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def translation_get(universal, opts = {})
      translation_get_with_http_info(universal, opts)
      nil
    end

    # Gets the translations of the specified values
    # @param universal [String] Pipe separated list of universal text to be translated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def translation_get_with_http_info(universal, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TranslationApi.translation_get ...'
      end
      # verify the required parameter 'universal' is set
      if @api_client.config.client_side_validation && universal.nil?
        fail ArgumentError, "Missing the required parameter 'universal' when calling TranslationApi.translation_get"
      end
      # resource path
      local_var_path = '/translation/get'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'universal'] = universal

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TranslationApi#translation_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the file containing the translations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account The id of the account whose translations file has to be retrieved.
    # @return [nil]
    def translation_getcachefile(opts = {})
      translation_getcachefile_with_http_info(opts)
      nil
    end

    # Get the file containing the translations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account The id of the account whose translations file has to be retrieved.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def translation_getcachefile_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TranslationApi.translation_getcachefile ...'
      end
      # resource path
      local_var_path = '/translation/getcachefile'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'account'] = opts[:'account'] if !opts[:'account'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TranslationApi#translation_getcachefile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all the available translations in the system
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Text to search/filter translations.
    # @option opts [Boolean] :nondefaultonly If true then it returns only the terms translated. Otherwise, it returns all.
    # @option opts [Boolean] :appdefaultasuniversal If true then it uses the app default translation as the universal term.
    # @return [nil]
    def translation_list(opts = {})
      translation_list_with_http_info(opts)
      nil
    end

    # Lists all the available translations in the system
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Text to search/filter translations.
    # @option opts [Boolean] :nondefaultonly If true then it returns only the terms translated. Otherwise, it returns all.
    # @option opts [Boolean] :appdefaultasuniversal If true then it uses the app default translation as the universal term.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def translation_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TranslationApi.translation_list ...'
      end
      # resource path
      local_var_path = '/translation/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'nondefaultonly'] = opts[:'nondefaultonly'] if !opts[:'nondefaultonly'].nil?
      query_params[:'appdefaultasuniversal'] = opts[:'appdefaultasuniversal'] if !opts[:'appdefaultasuniversal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TranslationApi#translation_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit a translation
    # Allows the user to edit a translation for the entire account.
    # @param id [String] The id of the translation as returned by translation.list.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def translation_save(id, opts = {})
      translation_save_with_http_info(id, opts)
      nil
    end

    # Edit a translation
    # Allows the user to edit a translation for the entire account.
    # @param id [String] The id of the translation as returned by translation.list.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def translation_save_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TranslationApi.translation_save ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TranslationApi.translation_save"
      end
      # resource path
      local_var_path = '/translation/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TranslationApi#translation_save\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
