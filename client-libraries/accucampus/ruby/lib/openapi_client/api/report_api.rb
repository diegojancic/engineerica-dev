=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class ReportApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Query and load an attendance analytics report
    # Allows the user to query and load attendance analytics reports.
    # @param reportname [String] The name of the report to execute
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @option opts [String] :refreshgroup The ID of the group to check (and refresh) before processing the report.
    # @return [nil]
    def report_attanalyticsprepare(reportname, opts = {})
      report_attanalyticsprepare_with_http_info(reportname, opts)
      nil
    end

    # Query and load an attendance analytics report
    # Allows the user to query and load attendance analytics reports.
    # @param reportname [String] The name of the report to execute
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @option opts [String] :refreshgroup The ID of the group to check (and refresh) before processing the report.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def report_attanalyticsprepare_with_http_info(reportname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.report_attanalyticsprepare ...'
      end
      # verify the required parameter 'reportname' is set
      if @api_client.config.client_side_validation && reportname.nil?
        fail ArgumentError, "Missing the required parameter 'reportname' when calling ReportApi.report_attanalyticsprepare"
      end
      # resource path
      local_var_path = '/report/attanalyticsprepare'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'reportname'] = reportname
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'refreshgroup'] = opts[:'refreshgroup'] if !opts[:'refreshgroup'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#report_attanalyticsprepare\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of available reports
    # Allows the user to view the complete list of available, canned reports.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def report_list(opts = {})
      report_list_with_http_info(opts)
      nil
    end

    # View a list of available reports
    # Allows the user to view the complete list of available, canned reports.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def report_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.report_list ...'
      end
      # resource path
      local_var_path = '/report/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#report_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Permissions by user report
    # Lists all the users in the system including their corresponding permissions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @return [nil]
    def report_permissionsbyuser(opts = {})
      report_permissionsbyuser_with_http_info(opts)
      nil
    end

    # Permissions by user report
    # Lists all the users in the system including their corresponding permissions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def report_permissionsbyuser_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.report_permissionsbyuser ...'
      end
      # resource path
      local_var_path = '/report/permissionsbyuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#report_permissionsbyuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Queries and loads the specified report, in background.
    # Allows the user to run reports, in background, with the exception of attendance analytics reports.
    # @param reportname [String] The name of the report to execute
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @option opts [String] :repformat The format of the resulting report. Json, pdf, csv, ...
    # @option opts [String] :fillgroupid If specified, the result is used to fill the group with the given ID
    # @option opts [String] :groupby How to group the records. In the format &#39;col1+col2|col3+col4
    # @option opts [String] :refreshgroup The ID of the group to check (and refresh) before processing the report.
    # @option opts [String] :filtertext The user friendly text of the applied filters.
    # @return [nil]
    def report_prepare(reportname, opts = {})
      report_prepare_with_http_info(reportname, opts)
      nil
    end

    # Queries and loads the specified report, in background.
    # Allows the user to run reports, in background, with the exception of attendance analytics reports.
    # @param reportname [String] The name of the report to execute
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @option opts [String] :repformat The format of the resulting report. Json, pdf, csv, ...
    # @option opts [String] :fillgroupid If specified, the result is used to fill the group with the given ID
    # @option opts [String] :groupby How to group the records. In the format &#39;col1+col2|col3+col4
    # @option opts [String] :refreshgroup The ID of the group to check (and refresh) before processing the report.
    # @option opts [String] :filtertext The user friendly text of the applied filters.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def report_prepare_with_http_info(reportname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.report_prepare ...'
      end
      # verify the required parameter 'reportname' is set
      if @api_client.config.client_side_validation && reportname.nil?
        fail ArgumentError, "Missing the required parameter 'reportname' when calling ReportApi.report_prepare"
      end
      # resource path
      local_var_path = '/report/prepare'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'reportname'] = reportname
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'repformat'] = opts[:'repformat'] if !opts[:'repformat'].nil?
      query_params[:'fillgroupid'] = opts[:'fillgroupid'] if !opts[:'fillgroupid'].nil?
      query_params[:'groupby'] = opts[:'groupby'] if !opts[:'groupby'].nil?
      query_params[:'refreshgroup'] = opts[:'refreshgroup'] if !opts[:'refreshgroup'].nil?
      query_params[:'filtertext'] = opts[:'filtertext'] if !opts[:'filtertext'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#report_prepare\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query and load a specified report
    # Allows the user to run reports with the exception of attendance analytics reports.
    # @param reportname [String] The name of the report to execute
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @return [nil]
    def report_query(reportname, opts = {})
      report_query_with_http_info(reportname, opts)
      nil
    end

    # Query and load a specified report
    # Allows the user to run reports with the exception of attendance analytics reports.
    # @param reportname [String] The name of the report to execute
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def report_query_with_http_info(reportname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.report_query ...'
      end
      # verify the required parameter 'reportname' is set
      if @api_client.config.client_side_validation && reportname.nil?
        fail ArgumentError, "Missing the required parameter 'reportname' when calling ReportApi.report_query"
      end
      # resource path
      local_var_path = '/report/query'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'reportname'] = reportname
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#report_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Queries and loads a report in background and assigns (or unassigns) the specified tags to (from) the resulting users.
    # Allows the user to use a report to assign or unassign tags.
    # @param reportname [String] The name of the report to execute
    # @param assign [Boolean] Specify whether the specified tags have to be assigned or unassigned.
    # @param tags [String] The tags to assign (or unassign) to the resulting users in the report, in JSON format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @return [nil]
    def report_tagresults(reportname, assign, tags, opts = {})
      report_tagresults_with_http_info(reportname, assign, tags, opts)
      nil
    end

    # Queries and loads a report in background and assigns (or unassigns) the specified tags to (from) the resulting users.
    # Allows the user to use a report to assign or unassign tags.
    # @param reportname [String] The name of the report to execute
    # @param assign [Boolean] Specify whether the specified tags have to be assigned or unassigned.
    # @param tags [String] The tags to assign (or unassign) to the resulting users in the report, in JSON format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params A pipe separated list of the parameters. Example: key1&#x3D;value1|key2&#x3D;value2|key3&#x3D;value3
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def report_tagresults_with_http_info(reportname, assign, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.report_tagresults ...'
      end
      # verify the required parameter 'reportname' is set
      if @api_client.config.client_side_validation && reportname.nil?
        fail ArgumentError, "Missing the required parameter 'reportname' when calling ReportApi.report_tagresults"
      end
      # verify the required parameter 'assign' is set
      if @api_client.config.client_side_validation && assign.nil?
        fail ArgumentError, "Missing the required parameter 'assign' when calling ReportApi.report_tagresults"
      end
      # verify the required parameter 'tags' is set
      if @api_client.config.client_side_validation && tags.nil?
        fail ArgumentError, "Missing the required parameter 'tags' when calling ReportApi.report_tagresults"
      end
      # resource path
      local_var_path = '/report/tagresults'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'reportname'] = reportname
      query_params[:'assign'] = assign
      query_params[:'tags'] = tags
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#report_tagresults\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
