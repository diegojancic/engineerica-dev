=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class StaffavailApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Associate current user to all services
    # Allows the user to associate themselves to all services, provided they have a staff role.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavail_addmetoallservices(opts = {})
      staffavail_addmetoallservices_with_http_info(opts)
      nil
    end

    # Associate current user to all services
    # Allows the user to associate themselves to all services, provided they have a staff role.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavail_addmetoallservices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaffavailApi.staffavail_addmetoallservices ...'
      end
      # resource path
      local_var_path = '/staffavail/addmetoallservices'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaffavailApi#staffavail_addmetoallservices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate current user to a service
    # Allows the user to associate themselves to a service, provided they have a staff role.
    # @param serviceid [String] The id of the service.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavail_addmetoservice(serviceid, opts = {})
      staffavail_addmetoservice_with_http_info(serviceid, opts)
      nil
    end

    # Associate current user to a service
    # Allows the user to associate themselves to a service, provided they have a staff role.
    # @param serviceid [String] The id of the service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavail_addmetoservice_with_http_info(serviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaffavailApi.staffavail_addmetoservice ...'
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling StaffavailApi.staffavail_addmetoservice"
      end
      # resource path
      local_var_path = '/staffavail/addmetoservice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'serviceid'] = serviceid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaffavailApi#staffavail_addmetoservice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate a staff member to all services
    # Allows the user to make a staff member available for all services.
    # @param userid [String] The id of the user to add.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavail_addusertoallservices(userid, opts = {})
      staffavail_addusertoallservices_with_http_info(userid, opts)
      nil
    end

    # Associate a staff member to all services
    # Allows the user to make a staff member available for all services.
    # @param userid [String] The id of the user to add.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavail_addusertoallservices_with_http_info(userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaffavailApi.staffavail_addusertoallservices ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling StaffavailApi.staffavail_addusertoallservices"
      end
      # resource path
      local_var_path = '/staffavail/addusertoallservices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaffavailApi#staffavail_addusertoallservices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate a staff member to a service
    # Allows the user to make a staff member available for a service.
    # @param userid [String] The id of the user to add.
    # @param serviceid [String] The id of the service.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavail_addusertoservice(userid, serviceid, opts = {})
      staffavail_addusertoservice_with_http_info(userid, serviceid, opts)
      nil
    end

    # Associate a staff member to a service
    # Allows the user to make a staff member available for a service.
    # @param userid [String] The id of the user to add.
    # @param serviceid [String] The id of the service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavail_addusertoservice_with_http_info(userid, serviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaffavailApi.staffavail_addusertoservice ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling StaffavailApi.staffavail_addusertoservice"
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling StaffavailApi.staffavail_addusertoservice"
      end
      # resource path
      local_var_path = '/staffavail/addusertoservice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid
      query_params[:'serviceid'] = serviceid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaffavailApi#staffavail_addusertoservice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the services the current user is available for
    # Allows the user to view a list of services that they are associated with.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavail_getmyservices(opts = {})
      staffavail_getmyservices_with_http_info(opts)
      nil
    end

    # View the services the current user is available for
    # Allows the user to view a list of services that they are associated with.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavail_getmyservices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaffavailApi.staffavail_getmyservices ...'
      end
      # resource path
      local_var_path = '/staffavail/getmyservices'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaffavailApi#staffavail_getmyservices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of services that a staff member is available for
    # Allows the user to view the list of services that a staff member is available for.
    # @param userid [String] The user id to list services.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavail_getservices(userid, opts = {})
      staffavail_getservices_with_http_info(userid, opts)
      nil
    end

    # View a list of services that a staff member is available for
    # Allows the user to view the list of services that a staff member is available for.
    # @param userid [String] The user id to list services.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavail_getservices_with_http_info(userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaffavailApi.staffavail_getservices ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling StaffavailApi.staffavail_getservices"
      end
      # resource path
      local_var_path = '/staffavail/getservices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaffavailApi#staffavail_getservices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of staff members that are available for a specific service
    # Allows the user to view all staff members who are available for a service.
    # @param serviceid [String] The service id to list users.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavail_getusersforservice(serviceid, opts = {})
      staffavail_getusersforservice_with_http_info(serviceid, opts)
      nil
    end

    # View a list of staff members that are available for a specific service
    # Allows the user to view all staff members who are available for a service.
    # @param serviceid [String] The service id to list users.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavail_getusersforservice_with_http_info(serviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaffavailApi.staffavail_getusersforservice ...'
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling StaffavailApi.staffavail_getusersforservice"
      end
      # resource path
      local_var_path = '/staffavail/getusersforservice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'serviceid'] = serviceid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaffavailApi#staffavail_getusersforservice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View all the availability types
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavail_listtypes(opts = {})
      staffavail_listtypes_with_http_info(opts)
      nil
    end

    # View all the availability types
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavail_listtypes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaffavailApi.staffavail_listtypes ...'
      end
      # resource path
      local_var_path = '/staffavail/listtypes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaffavailApi#staffavail_listtypes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove current user from all services
    # Allows the user to disassociate themselves from all services, provided they have a staff role.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavail_removemefromallservices(opts = {})
      staffavail_removemefromallservices_with_http_info(opts)
      nil
    end

    # Remove current user from all services
    # Allows the user to disassociate themselves from all services, provided they have a staff role.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavail_removemefromallservices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaffavailApi.staffavail_removemefromallservices ...'
      end
      # resource path
      local_var_path = '/staffavail/removemefromallservices'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaffavailApi#staffavail_removemefromallservices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove current user from a service
    # Allows the user to disassociate themselves from a service, provided they have a staff role.
    # @param serviceid [String] The id of the service.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavail_removemefromservice(serviceid, opts = {})
      staffavail_removemefromservice_with_http_info(serviceid, opts)
      nil
    end

    # Remove current user from a service
    # Allows the user to disassociate themselves from a service, provided they have a staff role.
    # @param serviceid [String] The id of the service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavail_removemefromservice_with_http_info(serviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaffavailApi.staffavail_removemefromservice ...'
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling StaffavailApi.staffavail_removemefromservice"
      end
      # resource path
      local_var_path = '/staffavail/removemefromservice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'serviceid'] = serviceid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaffavailApi#staffavail_removemefromservice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes a staff member from the registration to all services
    # Allows the user to remove a staff member's availability to all services.
    # @param userid [String] The id of the user to remove.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavail_removeuserfromallservices(userid, opts = {})
      staffavail_removeuserfromallservices_with_http_info(userid, opts)
      nil
    end

    # Removes a staff member from the registration to all services
    # Allows the user to remove a staff member&#39;s availability to all services.
    # @param userid [String] The id of the user to remove.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavail_removeuserfromallservices_with_http_info(userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaffavailApi.staffavail_removeuserfromallservices ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling StaffavailApi.staffavail_removeuserfromallservices"
      end
      # resource path
      local_var_path = '/staffavail/removeuserfromallservices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaffavailApi#staffavail_removeuserfromallservices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a staff member from a service
    # Allows the user to remove a staff member's service availability.
    # @param userid [String] The id of the user to remove.
    # @param serviceid [String] The id of the service.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def staffavail_removeuserfromservice(userid, serviceid, opts = {})
      staffavail_removeuserfromservice_with_http_info(userid, serviceid, opts)
      nil
    end

    # Remove a staff member from a service
    # Allows the user to remove a staff member&#39;s service availability.
    # @param userid [String] The id of the user to remove.
    # @param serviceid [String] The id of the service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavail_removeuserfromservice_with_http_info(userid, serviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaffavailApi.staffavail_removeuserfromservice ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling StaffavailApi.staffavail_removeuserfromservice"
      end
      # verify the required parameter 'serviceid' is set
      if @api_client.config.client_side_validation && serviceid.nil?
        fail ArgumentError, "Missing the required parameter 'serviceid' when calling StaffavailApi.staffavail_removeuserfromservice"
      end
      # resource path
      local_var_path = '/staffavail/removeuserfromservice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid
      query_params[:'serviceid'] = serviceid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaffavailApi#staffavail_removeuserfromservice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Make a staff member available for a specific availability type
    # Allows the user to set a staff member as available for walk ins, appointments, or both.
    # @param userid [String] The id of the user whose specific availability has to be set.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :availablefor Specific availability to set.
    # @return [nil]
    def staffavail_setavailability(userid, opts = {})
      staffavail_setavailability_with_http_info(userid, opts)
      nil
    end

    # Make a staff member available for a specific availability type
    # Allows the user to set a staff member as available for walk ins, appointments, or both.
    # @param userid [String] The id of the user whose specific availability has to be set.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :availablefor Specific availability to set.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavail_setavailability_with_http_info(userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaffavailApi.staffavail_setavailability ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling StaffavailApi.staffavail_setavailability"
      end
      # resource path
      local_var_path = '/staffavail/setavailability'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid
      query_params[:'availablefor'] = opts[:'availablefor'] if !opts[:'availablefor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaffavailApi#staffavail_setavailability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change current user's availability type
    # Allows the user to make themselves available for walk ins, appointments, or both.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :availablefor Specific availability to set.
    # @return [nil]
    def staffavail_setmyavailability(opts = {})
      staffavail_setmyavailability_with_http_info(opts)
      nil
    end

    # Change current user&#39;s availability type
    # Allows the user to make themselves available for walk ins, appointments, or both.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :availablefor Specific availability to set.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def staffavail_setmyavailability_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaffavailApi.staffavail_setmyavailability ...'
      end
      # resource path
      local_var_path = '/staffavail/setmyavailability'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'availablefor'] = opts[:'availablefor'] if !opts[:'availablefor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaffavailApi#staffavail_setmyavailability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
