=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class TemplateApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add an image to a template
    # Allows the user to add an image to a badge or certificate template.
    # @param template [String] The id of the template where the image has to be added
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @return [nil]
    def template_addimage(template, upload, opts = {})
      template_addimage_with_http_info(template, upload, opts)
      nil
    end

    # Add an image to a template
    # Allows the user to add an image to a badge or certificate template.
    # @param template [String] The id of the template where the image has to be added
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def template_addimage_with_http_info(template, upload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.template_addimage ...'
      end
      # verify the required parameter 'template' is set
      if @api_client.config.client_side_validation && template.nil?
        fail ArgumentError, "Missing the required parameter 'template' when calling TemplateApi.template_addimage"
      end
      # verify the required parameter 'upload' is set
      if @api_client.config.client_side_validation && upload.nil?
        fail ArgumentError, "Missing the required parameter 'upload' when calling TemplateApi.template_addimage"
      end
      # resource path
      local_var_path = '/template/addimage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'template'] = template
      query_params[:'upload'] = upload
      query_params[:'filename'] = opts[:'filename'] if !opts[:'filename'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#template_addimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a template
    # Allows the user to delete an existing template.
    # @param id [String] The id of the template to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [AnyType] :body 
    # @return [nil]
    def template_delete(id, opts = {})
      template_delete_with_http_info(id, opts)
      nil
    end

    # Delete a template
    # Allows the user to delete an existing template.
    # @param id [String] The id of the template to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [AnyType] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def template_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.template_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TemplateApi.template_delete"
      end
      # resource path
      local_var_path = '/template/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#template_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send generated templates by email
    # Allows the user to send generated templates via email through AccuCampus.
    # @param jobid [String] The id of the job that is creating the templates.
    # @param emailsubject [String] Args depending on the send-to flag.
    # @param emailbody [String] Args depending on the send-to flag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate).
    # @option opts [String] :emailfrom The name of the sender to be displayed in the receipients inbox
    # @option opts [String] :emailreplyto The reply-to field for the emails.
    # @return [nil]
    def template_email(jobid, emailsubject, emailbody, opts = {})
      template_email_with_http_info(jobid, emailsubject, emailbody, opts)
      nil
    end

    # Send generated templates by email
    # Allows the user to send generated templates via email through AccuCampus.
    # @param jobid [String] The id of the job that is creating the templates.
    # @param emailsubject [String] Args depending on the send-to flag.
    # @param emailbody [String] Args depending on the send-to flag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate).
    # @option opts [String] :emailfrom The name of the sender to be displayed in the receipients inbox
    # @option opts [String] :emailreplyto The reply-to field for the emails.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def template_email_with_http_info(jobid, emailsubject, emailbody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.template_email ...'
      end
      # verify the required parameter 'jobid' is set
      if @api_client.config.client_side_validation && jobid.nil?
        fail ArgumentError, "Missing the required parameter 'jobid' when calling TemplateApi.template_email"
      end
      # verify the required parameter 'emailsubject' is set
      if @api_client.config.client_side_validation && emailsubject.nil?
        fail ArgumentError, "Missing the required parameter 'emailsubject' when calling TemplateApi.template_email"
      end
      # verify the required parameter 'emailbody' is set
      if @api_client.config.client_side_validation && emailbody.nil?
        fail ArgumentError, "Missing the required parameter 'emailbody' when calling TemplateApi.template_email"
      end
      # resource path
      local_var_path = '/template/email'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'jobid'] = jobid
      query_params[:'emailsubject'] = emailsubject
      query_params[:'emailbody'] = emailbody
      query_params[:'templatekind'] = opts[:'templatekind'] if !opts[:'templatekind'].nil?
      query_params[:'emailfrom'] = opts[:'emailfrom'] if !opts[:'emailfrom'].nil?
      query_params[:'emailreplyto'] = opts[:'emailreplyto'] if !opts[:'emailreplyto'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#template_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate specified templates
    # Allows the user to generate an existing template as badges or certificates.
    # @param template [String] The id of the template to generate.
    # @param source [String] The source key of the selected template data source.
    # @param singlefile [Boolean] True if all the templates should be placed in the same file, false if each one shoud be in its own file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas.
    # @option opts [Boolean] :forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading
    # @option opts [String] :role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor
    # @option opts [String] :filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|...
    # @return [nil]
    def template_generate(template, source, singlefile, opts = {})
      template_generate_with_http_info(template, source, singlefile, opts)
      nil
    end

    # Generate specified templates
    # Allows the user to generate an existing template as badges or certificates.
    # @param template [String] The id of the template to generate.
    # @param source [String] The source key of the selected template data source.
    # @param singlefile [Boolean] True if all the templates should be placed in the same file, false if each one shoud be in its own file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas.
    # @option opts [Boolean] :forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading
    # @option opts [String] :role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor
    # @option opts [String] :filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|...
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def template_generate_with_http_info(template, source, singlefile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.template_generate ...'
      end
      # verify the required parameter 'template' is set
      if @api_client.config.client_side_validation && template.nil?
        fail ArgumentError, "Missing the required parameter 'template' when calling TemplateApi.template_generate"
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling TemplateApi.template_generate"
      end
      # verify the required parameter 'singlefile' is set
      if @api_client.config.client_side_validation && singlefile.nil?
        fail ArgumentError, "Missing the required parameter 'singlefile' when calling TemplateApi.template_generate"
      end
      # resource path
      local_var_path = '/template/generate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'template'] = template
      query_params[:'source'] = source
      query_params[:'singlefile'] = singlefile
      query_params[:'userid'] = opts[:'userid'] if !opts[:'userid'].nil?
      query_params[:'forsending'] = opts[:'forsending'] if !opts[:'forsending'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'filters'] = opts[:'filters'] if !opts[:'filters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#template_generate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a template
    # Allows the user to view a template and its details.
    # @param id [String] The id of the template to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def template_get(id, opts = {})
      template_get_with_http_info(id, opts)
      nil
    end

    # View details of a template
    # Allows the user to view a template and its details.
    # @param id [String] The id of the template to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def template_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.template_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TemplateApi.template_get"
      end
      # resource path
      local_var_path = '/template/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#template_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View generated templates
    # Allows the user to view templates which have been generated as badges or certificates.
    # @param jobid [String] The id of the job that is creating the templates.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def template_getgenerated(jobid, opts = {})
      template_getgenerated_with_http_info(jobid, opts)
      nil
    end

    # View generated templates
    # Allows the user to view templates which have been generated as badges or certificates.
    # @param jobid [String] The id of the job that is creating the templates.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def template_getgenerated_with_http_info(jobid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.template_getgenerated ...'
      end
      # verify the required parameter 'jobid' is set
      if @api_client.config.client_side_validation && jobid.nil?
        fail ArgumentError, "Missing the required parameter 'jobid' when calling TemplateApi.template_getgenerated"
      end
      # resource path
      local_var_path = '/template/getgenerated'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'jobid'] = jobid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#template_getgenerated\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of defined templates
    # Allows the user to view the full list of created templates.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param kind [String] The kind of the templates to return. It must be included in (badge, certificate).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :designedonly If true then it only returns the templates that were designed. Otherwise, it returns all.
    # @return [nil]
    def template_list(from, count, kind, opts = {})
      template_list_with_http_info(from, count, kind, opts)
      nil
    end

    # View a list of defined templates
    # Allows the user to view the full list of created templates.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param kind [String] The kind of the templates to return. It must be included in (badge, certificate).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :designedonly If true then it only returns the templates that were designed. Otherwise, it returns all.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def template_list_with_http_info(from, count, kind, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.template_list ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling TemplateApi.template_list"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling TemplateApi.template_list"
      end
      # verify the required parameter 'kind' is set
      if @api_client.config.client_side_validation && kind.nil?
        fail ArgumentError, "Missing the required parameter 'kind' when calling TemplateApi.template_list"
      end
      # resource path
      local_var_path = '/template/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'kind'] = kind
      query_params[:'designedonly'] = opts[:'designedonly'] if !opts[:'designedonly'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#template_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of templates' data sources
    # Allows the user to see tokens to be used in the template
    # @param kind [String] The kind of the templates to return. It must be included in (badge, certificate).
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def template_listsources(kind, opts = {})
      template_listsources_with_http_info(kind, opts)
      nil
    end

    # View a list of templates&#39; data sources
    # Allows the user to see tokens to be used in the template
    # @param kind [String] The kind of the templates to return. It must be included in (badge, certificate).
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def template_listsources_with_http_info(kind, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.template_listsources ...'
      end
      # verify the required parameter 'kind' is set
      if @api_client.config.client_side_validation && kind.nil?
        fail ArgumentError, "Missing the required parameter 'kind' when calling TemplateApi.template_listsources"
      end
      # resource path
      local_var_path = '/template/listsources'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'kind'] = kind

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#template_listsources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a template
    # Allows the user to create or edit a template.
    # @param id [String] The id of the template to save (leave empty to create a new one).
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def template_save(id, opts = {})
      template_save_with_http_info(id, opts)
      nil
    end

    # Create or edit a template
    # Allows the user to create or edit a template.
    # @param id [String] The id of the template to save (leave empty to create a new one).
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def template_save_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.template_save ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TemplateApi.template_save"
      end
      # resource path
      local_var_path = '/template/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#template_save\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save the layout of a template
    # Allows the user to edit a template's layout.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def template_savelayout(opts = {})
      template_savelayout_with_http_info(opts)
      nil
    end

    # Save the layout of a template
    # Allows the user to edit a template&#39;s layout.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def template_savelayout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.template_savelayout ...'
      end
      # resource path
      local_var_path = '/template/savelayout'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#template_savelayout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
