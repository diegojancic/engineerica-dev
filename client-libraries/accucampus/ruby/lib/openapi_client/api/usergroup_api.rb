=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class UsergroupApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a user to a group
    # Allows the user to add a user to a group that they have permission to edit.
    # @param userid [String] The id of the user to add.
    # @param groupid [String] The id of the group.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroup_addmember(userid, groupid, opts = {})
      usergroup_addmember_with_http_info(userid, groupid, opts)
      nil
    end

    # Add a user to a group
    # Allows the user to add a user to a group that they have permission to edit.
    # @param userid [String] The id of the user to add.
    # @param groupid [String] The id of the group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroup_addmember_with_http_info(userid, groupid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsergroupApi.usergroup_addmember ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling UsergroupApi.usergroup_addmember"
      end
      # verify the required parameter 'groupid' is set
      if @api_client.config.client_side_validation && groupid.nil?
        fail ArgumentError, "Missing the required parameter 'groupid' when calling UsergroupApi.usergroup_addmember"
      end
      # resource path
      local_var_path = '/usergroup/addmember'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid
      query_params[:'groupid'] = groupid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsergroupApi#usergroup_addmember\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a group
    # Allows the user to delete a group that they have permission to edit.
    # @param id [String] The id of the group to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [AnyType] :body 
    # @return [nil]
    def usergroup_delete(id, opts = {})
      usergroup_delete_with_http_info(id, opts)
      nil
    end

    # Delete a group
    # Allows the user to delete a group that they have permission to edit.
    # @param id [String] The id of the group to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [AnyType] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroup_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsergroupApi.usergroup_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsergroupApi.usergroup_delete"
      end
      # resource path
      local_var_path = '/usergroup/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsergroupApi#usergroup_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search and view details of a user group
    # Allows the user to view a user group and its details.
    # @param id [String] The id of the user group to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroup_get(id, opts = {})
      usergroup_get_with_http_info(id, opts)
      nil
    end

    # Search and view details of a user group
    # Allows the user to view a user group and its details.
    # @param id [String] The id of the user group to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroup_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsergroupApi.usergroup_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsergroupApi.usergroup_get"
      end
      # resource path
      local_var_path = '/usergroup/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsergroupApi#usergroup_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the members of a user group
    # Allows the user to view the list of users in a group that they have permission to view.
    # @param groupid [String] The id of the user group to get.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroup_getmembers(groupid, opts = {})
      usergroup_getmembers_with_http_info(groupid, opts)
      nil
    end

    # View the members of a user group
    # Allows the user to view the list of users in a group that they have permission to view.
    # @param groupid [String] The id of the user group to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroup_getmembers_with_http_info(groupid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsergroupApi.usergroup_getmembers ...'
      end
      # verify the required parameter 'groupid' is set
      if @api_client.config.client_side_validation && groupid.nil?
        fail ArgumentError, "Missing the required parameter 'groupid' when calling UsergroupApi.usergroup_getmembers"
      end
      # resource path
      local_var_path = '/usergroup/getmembers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groupid'] = groupid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsergroupApi#usergroup_getmembers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the groups which a user is registered to
    # Allows the user to view the groups an individual user is registered to, based on group and user permissions.
    # @param userid [String] The id of the user to get his groups.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroup_getuser(userid, opts = {})
      usergroup_getuser_with_http_info(userid, opts)
      nil
    end

    # View the groups which a user is registered to
    # Allows the user to view the groups an individual user is registered to, based on group and user permissions.
    # @param userid [String] The id of the user to get his groups.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroup_getuser_with_http_info(userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsergroupApi.usergroup_getuser ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling UsergroupApi.usergroup_getuser"
      end
      # resource path
      local_var_path = '/usergroup/getuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsergroupApi#usergroup_getuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View a list of user groups
    # Allows the user to view the list of groups that they have permission to view.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from The first record to return.
    # @option opts [Integer] :count The max number of records to return.
    # @option opts [String] :type The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group.
    # @return [nil]
    def usergroup_list(opts = {})
      usergroup_list_with_http_info(opts)
      nil
    end

    # View a list of user groups
    # Allows the user to view the list of groups that they have permission to view.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from The first record to return.
    # @option opts [Integer] :count The max number of records to return.
    # @option opts [String] :type The type of the groups to return. Either &#39;user&#39;, &#39;dynamic&#39; or any other type of group.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroup_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsergroupApi.usergroup_list ...'
      end
      # resource path
      local_var_path = '/usergroup/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsergroupApi#usergroup_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh the dynamic group
    # Allows the user to refresh a dynamic group that they have permission to edit.
    # @param group [String] The ID of the group to refresh.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroup_refresh(group, opts = {})
      usergroup_refresh_with_http_info(group, opts)
      nil
    end

    # Refresh the dynamic group
    # Allows the user to refresh a dynamic group that they have permission to edit.
    # @param group [String] The ID of the group to refresh.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroup_refresh_with_http_info(group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsergroupApi.usergroup_refresh ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling UsergroupApi.usergroup_refresh"
      end
      # resource path
      local_var_path = '/usergroup/refresh'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group'] = group

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsergroupApi#usergroup_refresh\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a user from a group
    # Allows the user to remove a user from a group that they have permission to edit.
    # @param userid [String] The id of the user to remove.
    # @param groupid [String] The id of the group.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def usergroup_removemember(userid, groupid, opts = {})
      usergroup_removemember_with_http_info(userid, groupid, opts)
      nil
    end

    # Remove a user from a group
    # Allows the user to remove a user from a group that they have permission to edit.
    # @param userid [String] The id of the user to remove.
    # @param groupid [String] The id of the group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroup_removemember_with_http_info(userid, groupid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsergroupApi.usergroup_removemember ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling UsergroupApi.usergroup_removemember"
      end
      # verify the required parameter 'groupid' is set
      if @api_client.config.client_side_validation && groupid.nil?
        fail ArgumentError, "Missing the required parameter 'groupid' when calling UsergroupApi.usergroup_removemember"
      end
      # resource path
      local_var_path = '/usergroup/removemember'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userid'] = userid
      query_params[:'groupid'] = groupid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsergroupApi#usergroup_removemember\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a group
    # Allows the user to create a new group or edit a group that they have permission to edit.
    # @param id [String] The id of the group to save (leave empty to create a new one).
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def usergroup_save(id, opts = {})
      usergroup_save_with_http_info(id, opts)
      nil
    end

    # Create or edit a group
    # Allows the user to create a new group or edit a group that they have permission to edit.
    # @param id [String] The id of the group to save (leave empty to create a new one).
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroup_save_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsergroupApi.usergroup_save ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsergroupApi.usergroup_save"
      end
      # resource path
      local_var_path = '/usergroup/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsergroupApi#usergroup_save\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign tags to the members of a specified group
    # Allows the user to assign tags to the users of a group that they have permission to edit.
    # @param group [String] The id of the group to save whose members have to be tagged.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tags The tags to assign to the members of the specified group, in JSON format.
    # @return [nil]
    def usergroup_tagmembers(group, opts = {})
      usergroup_tagmembers_with_http_info(group, opts)
      nil
    end

    # Assign tags to the members of a specified group
    # Allows the user to assign tags to the users of a group that they have permission to edit.
    # @param group [String] The id of the group to save whose members have to be tagged.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tags The tags to assign to the members of the specified group, in JSON format.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroup_tagmembers_with_http_info(group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsergroupApi.usergroup_tagmembers ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling UsergroupApi.usergroup_tagmembers"
      end
      # resource path
      local_var_path = '/usergroup/tagmembers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group'] = group
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsergroupApi#usergroup_tagmembers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unassign tags from the members of a specified group
    # Allows the user to unassign tags to the users of a group that they have permission to edit.
    # @param group [String] The id of the group to save whose members have to be untagged.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tags The tags to unassign from the members of the specified group, in JSON format.
    # @return [nil]
    def usergroup_untagmembers(group, opts = {})
      usergroup_untagmembers_with_http_info(group, opts)
      nil
    end

    # Unassign tags from the members of a specified group
    # Allows the user to unassign tags to the users of a group that they have permission to edit.
    # @param group [String] The id of the group to save whose members have to be untagged.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tags The tags to unassign from the members of the specified group, in JSON format.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def usergroup_untagmembers_with_http_info(group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsergroupApi.usergroup_untagmembers ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling UsergroupApi.usergroup_untagmembers"
      end
      # resource path
      local_var_path = '/usergroup/untagmembers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group'] = group
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsergroupApi#usergroup_untagmembers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
