=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class AdvancedstationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Check whether the user is known by the system.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param location [String] The id of the location the user picked.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advancedstation_checkunknownuser(station, user, location, opts = {})
      advancedstation_checkunknownuser_with_http_info(station, user, location, opts)
      nil
    end

    # Check whether the user is known by the system.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param location [String] The id of the location the user picked.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstation_checkunknownuser_with_http_info(station, user, location, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvancedstationApi.advancedstation_checkunknownuser ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling AdvancedstationApi.advancedstation_checkunknownuser"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling AdvancedstationApi.advancedstation_checkunknownuser"
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling AdvancedstationApi.advancedstation_checkunknownuser"
      end
      # resource path
      local_var_path = '/advancedstation/checkunknownuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'user'] = user
      query_params[:'location'] = location

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvancedstationApi#advancedstation_checkunknownuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check whether the user is a staff member, an attendee or both.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param location [String] The id of the location the user picked.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advancedstation_checkuserrole(station, user, location, opts = {})
      advancedstation_checkuserrole_with_http_info(station, user, location, opts)
      nil
    end

    # Check whether the user is a staff member, an attendee or both.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user.
    # @param location [String] The id of the location the user picked.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstation_checkuserrole_with_http_info(station, user, location, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvancedstationApi.advancedstation_checkuserrole ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling AdvancedstationApi.advancedstation_checkuserrole"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling AdvancedstationApi.advancedstation_checkuserrole"
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling AdvancedstationApi.advancedstation_checkuserrole"
      end
      # resource path
      local_var_path = '/advancedstation/checkuserrole'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'user'] = user
      query_params[:'location'] = location

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvancedstationApi#advancedstation_checkuserrole\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a user via a sign-in station.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user to create.
    # @param location [String] The id of the location the user picked.
    # @param firstname [String] The first name of the user to create.
    # @param lastname [String] The last name of the user to create.
    # @param email [String] The email of the user to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :middlename The middle name of the user to create.
    # @return [nil]
    def advancedstation_createuser(station, user, location, firstname, lastname, email, opts = {})
      advancedstation_createuser_with_http_info(station, user, location, firstname, lastname, email, opts)
      nil
    end

    # Creates a user via a sign-in station.
    # @param station [String] The id of the sign-in station to get.
    # @param user [String] The card of the user to create.
    # @param location [String] The id of the location the user picked.
    # @param firstname [String] The first name of the user to create.
    # @param lastname [String] The last name of the user to create.
    # @param email [String] The email of the user to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :middlename The middle name of the user to create.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstation_createuser_with_http_info(station, user, location, firstname, lastname, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvancedstationApi.advancedstation_createuser ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling AdvancedstationApi.advancedstation_createuser"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling AdvancedstationApi.advancedstation_createuser"
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling AdvancedstationApi.advancedstation_createuser"
      end
      # verify the required parameter 'firstname' is set
      if @api_client.config.client_side_validation && firstname.nil?
        fail ArgumentError, "Missing the required parameter 'firstname' when calling AdvancedstationApi.advancedstation_createuser"
      end
      # verify the required parameter 'lastname' is set
      if @api_client.config.client_side_validation && lastname.nil?
        fail ArgumentError, "Missing the required parameter 'lastname' when calling AdvancedstationApi.advancedstation_createuser"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling AdvancedstationApi.advancedstation_createuser"
      end
      # resource path
      local_var_path = '/advancedstation/createuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'user'] = user
      query_params[:'location'] = location
      query_params[:'firstname'] = firstname
      query_params[:'lastname'] = lastname
      query_params[:'email'] = email
      query_params[:'middlename'] = opts[:'middlename'] if !opts[:'middlename'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvancedstationApi#advancedstation_createuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the courses available for a specific location and a specific student.
    # @param station [String] The id of the sign-in station to get.
    # @param location [String] The id of the location the student picked.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advancedstation_getevents(station, location, user, opts = {})
      advancedstation_getevents_with_http_info(station, location, user, opts)
      nil
    end

    # Gets the courses available for a specific location and a specific student.
    # @param station [String] The id of the sign-in station to get.
    # @param location [String] The id of the location the student picked.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstation_getevents_with_http_info(station, location, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvancedstationApi.advancedstation_getevents ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling AdvancedstationApi.advancedstation_getevents"
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling AdvancedstationApi.advancedstation_getevents"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling AdvancedstationApi.advancedstation_getevents"
      end
      # resource path
      local_var_path = '/advancedstation/getevents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'location'] = location
      query_params[:'user'] = user

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvancedstationApi#advancedstation_getevents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the info to display in the sign-in station by it's ID.
    # @param id [String] The id of the sign-in station to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :event The id of the event (or session), to override the scheduled one.
    # @return [nil]
    def advancedstation_getinfo(id, opts = {})
      advancedstation_getinfo_with_http_info(id, opts)
      nil
    end

    # Gets the info to display in the sign-in station by it&#39;s ID.
    # @param id [String] The id of the sign-in station to get.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :event The id of the event (or session), to override the scheduled one.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstation_getinfo_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvancedstationApi.advancedstation_getinfo ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdvancedstationApi.advancedstation_getinfo"
      end
      # resource path
      local_var_path = '/advancedstation/getinfo'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvancedstationApi#advancedstation_getinfo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the locations available in a sign-in station.
    # @param station [String] The id of the sign-in station whose locations have to be returned.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advancedstation_getlocations(station, user, opts = {})
      advancedstation_getlocations_with_http_info(station, user, opts)
      nil
    end

    # Gets the locations available in a sign-in station.
    # @param station [String] The id of the sign-in station whose locations have to be returned.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstation_getlocations_with_http_info(station, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvancedstationApi.advancedstation_getlocations ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling AdvancedstationApi.advancedstation_getlocations"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling AdvancedstationApi.advancedstation_getlocations"
      end
      # resource path
      local_var_path = '/advancedstation/getlocations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'user'] = user

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvancedstationApi#advancedstation_getlocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the staff/tutors available filtered by the location, course and services of the given attendance log.
    # @param station [String] The id of the sign-in station to get.
    # @param attendancelog [String] The id of the attendance log to filter the staff members.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def advancedstation_getlogstaff(station, attendancelog, opts = {})
      advancedstation_getlogstaff_with_http_info(station, attendancelog, opts)
      nil
    end

    # Gets the staff/tutors available filtered by the location, course and services of the given attendance log.
    # @param station [String] The id of the sign-in station to get.
    # @param attendancelog [String] The id of the attendance log to filter the staff members.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstation_getlogstaff_with_http_info(station, attendancelog, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvancedstationApi.advancedstation_getlogstaff ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling AdvancedstationApi.advancedstation_getlogstaff"
      end
      # verify the required parameter 'attendancelog' is set
      if @api_client.config.client_side_validation && attendancelog.nil?
        fail ArgumentError, "Missing the required parameter 'attendancelog' when calling AdvancedstationApi.advancedstation_getlogstaff"
      end
      # resource path
      local_var_path = '/advancedstation/getlogstaff'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'attendancelog'] = attendancelog
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvancedstationApi#advancedstation_getlogstaff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the user roles of the user trying to sign-in.
    # @param station [String] The id of the sign-in station to get.
    # @param signinrole [String] Specifies how the user is signing-in.
    # @param user [String] The card of the user.
    # @param location [String] The id of the location the user picked.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advancedstation_getroles(station, signinrole, user, location, opts = {})
      advancedstation_getroles_with_http_info(station, signinrole, user, location, opts)
      nil
    end

    # Gets the user roles of the user trying to sign-in.
    # @param station [String] The id of the sign-in station to get.
    # @param signinrole [String] Specifies how the user is signing-in.
    # @param user [String] The card of the user.
    # @param location [String] The id of the location the user picked.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstation_getroles_with_http_info(station, signinrole, user, location, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvancedstationApi.advancedstation_getroles ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling AdvancedstationApi.advancedstation_getroles"
      end
      # verify the required parameter 'signinrole' is set
      if @api_client.config.client_side_validation && signinrole.nil?
        fail ArgumentError, "Missing the required parameter 'signinrole' when calling AdvancedstationApi.advancedstation_getroles"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling AdvancedstationApi.advancedstation_getroles"
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling AdvancedstationApi.advancedstation_getroles"
      end
      # resource path
      local_var_path = '/advancedstation/getroles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'signinrole'] = signinrole
      query_params[:'user'] = user
      query_params[:'location'] = location

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvancedstationApi#advancedstation_getroles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the services available for a specific location.
    # @param station [String] The id of the sign-in station to get.
    # @param location [String] The id of the location the student picked.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advancedstation_getservices(station, location, user, opts = {})
      advancedstation_getservices_with_http_info(station, location, user, opts)
      nil
    end

    # Gets the services available for a specific location.
    # @param station [String] The id of the sign-in station to get.
    # @param location [String] The id of the location the student picked.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstation_getservices_with_http_info(station, location, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvancedstationApi.advancedstation_getservices ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling AdvancedstationApi.advancedstation_getservices"
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling AdvancedstationApi.advancedstation_getservices"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling AdvancedstationApi.advancedstation_getservices"
      end
      # resource path
      local_var_path = '/advancedstation/getservices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'location'] = location
      query_params[:'user'] = user

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvancedstationApi#advancedstation_getservices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the staff/tutors available for a specific location, course and service.
    # @param station [String] The id of the sign-in station to get.
    # @param locationid [String] The id of the location the student picked.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :services The list of services selected by the user, in JSON format.
    # @option opts [String] :eventid The ID of the event selected.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def advancedstation_getstaff(station, locationid, user, opts = {})
      advancedstation_getstaff_with_http_info(station, locationid, user, opts)
      nil
    end

    # Gets the staff/tutors available for a specific location, course and service.
    # @param station [String] The id of the sign-in station to get.
    # @param locationid [String] The id of the location the student picked.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :services The list of services selected by the user, in JSON format.
    # @option opts [String] :eventid The ID of the event selected.
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstation_getstaff_with_http_info(station, locationid, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvancedstationApi.advancedstation_getstaff ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling AdvancedstationApi.advancedstation_getstaff"
      end
      # verify the required parameter 'locationid' is set
      if @api_client.config.client_side_validation && locationid.nil?
        fail ArgumentError, "Missing the required parameter 'locationid' when calling AdvancedstationApi.advancedstation_getstaff"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling AdvancedstationApi.advancedstation_getstaff"
      end
      # resource path
      local_var_path = '/advancedstation/getstaff'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'locationid'] = locationid
      query_params[:'user'] = user
      query_params[:'services'] = opts[:'services'] if !opts[:'services'].nil?
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvancedstationApi#advancedstation_getstaff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets whether a user is signed-in or not.
    # @param station [String] The id of the sign-in station to get.
    # @param time [DateTime] The date and time of the swipe.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The id of the location the user picked.
    # @return [nil]
    def advancedstation_issignedin(station, time, user, opts = {})
      advancedstation_issignedin_with_http_info(station, time, user, opts)
      nil
    end

    # Gets whether a user is signed-in or not.
    # @param station [String] The id of the sign-in station to get.
    # @param time [DateTime] The date and time of the swipe.
    # @param user [String] The card of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location The id of the location the user picked.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advancedstation_issignedin_with_http_info(station, time, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvancedstationApi.advancedstation_issignedin ...'
      end
      # verify the required parameter 'station' is set
      if @api_client.config.client_side_validation && station.nil?
        fail ArgumentError, "Missing the required parameter 'station' when calling AdvancedstationApi.advancedstation_issignedin"
      end
      # verify the required parameter 'time' is set
      if @api_client.config.client_side_validation && time.nil?
        fail ArgumentError, "Missing the required parameter 'time' when calling AdvancedstationApi.advancedstation_issignedin"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling AdvancedstationApi.advancedstation_issignedin"
      end
      # resource path
      local_var_path = '/advancedstation/issignedin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'station'] = station
      query_params[:'time'] = time
      query_params[:'user'] = user
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvancedstationApi#advancedstation_issignedin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
