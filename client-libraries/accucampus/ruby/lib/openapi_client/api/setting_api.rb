=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class SettingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a logo to the account
    # Allows the user to add the logo for the account, which appears on all pages on the AccuCampus browser version.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param filename [String] The original filename, needed to process the file.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def setting_addlogo(upload, filename, opts = {})
      setting_addlogo_with_http_info(upload, filename, opts)
      nil
    end

    # Add a logo to the account
    # Allows the user to add the logo for the account, which appears on all pages on the AccuCampus browser version.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param filename [String] The original filename, needed to process the file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def setting_addlogo_with_http_info(upload, filename, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingApi.setting_addlogo ...'
      end
      # verify the required parameter 'upload' is set
      if @api_client.config.client_side_validation && upload.nil?
        fail ArgumentError, "Missing the required parameter 'upload' when calling SettingApi.setting_addlogo"
      end
      # verify the required parameter 'filename' is set
      if @api_client.config.client_side_validation && filename.nil?
        fail ArgumentError, "Missing the required parameter 'filename' when calling SettingApi.setting_addlogo"
      end
      # resource path
      local_var_path = '/setting/addlogo'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'upload'] = upload
      query_params[:'filename'] = filename

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingApi#setting_addlogo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get settings for the account or the specified scope
    # @param keys [String] The option keys to get values for. Enter multiple separated by comma.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :domain The account domain, in case of reading settings annonymously.
    # @option opts [String] :scope The scope of the settings to get.
    # @return [nil]
    def setting_get(keys, opts = {})
      setting_get_with_http_info(keys, opts)
      nil
    end

    # Get settings for the account or the specified scope
    # @param keys [String] The option keys to get values for. Enter multiple separated by comma.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :domain The account domain, in case of reading settings annonymously.
    # @option opts [String] :scope The scope of the settings to get.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def setting_get_with_http_info(keys, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingApi.setting_get ...'
      end
      # verify the required parameter 'keys' is set
      if @api_client.config.client_side_validation && keys.nil?
        fail ArgumentError, "Missing the required parameter 'keys' when calling SettingApi.setting_get"
      end
      # resource path
      local_var_path = '/setting/get'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'keys'] = keys
      query_params[:'domain'] = opts[:'domain'] if !opts[:'domain'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingApi#setting_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save settings for the account or the specified scope
    # Allows the user to affect settings that are not specified elsewhere in permissions. This includes Attendance, Appointments, Compass, Media, and Social Activity.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def setting_save(opts = {})
      setting_save_with_http_info(opts)
      nil
    end

    # Save settings for the account or the specified scope
    # Allows the user to affect settings that are not specified elsewhere in permissions. This includes Attendance, Appointments, Compass, Media, and Social Activity.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def setting_save_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingApi.setting_save ...'
      end
      # resource path
      local_var_path = '/setting/save'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingApi#setting_save\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View general settings for the account
    # Allows the user to view the settings' general section.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def setting_viewgeneral(opts = {})
      setting_viewgeneral_with_http_info(opts)
      nil
    end

    # View general settings for the account
    # Allows the user to view the settings&#39; general section.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def setting_viewgeneral_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingApi.setting_viewgeneral ...'
      end
      # resource path
      local_var_path = '/setting/viewgeneral'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingApi#setting_viewgeneral\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
