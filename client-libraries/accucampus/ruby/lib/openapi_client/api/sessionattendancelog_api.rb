=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class SessionattendancelogApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a note to a class attendance log
    # Allows the user to add a note to a class attendance log.
    # @param id [String] The id of the attendance log.
    # @param text [String] The text of the note to add.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionattendancelog_addnote(id, text, opts = {})
      sessionattendancelog_addnote_with_http_info(id, text, opts)
      nil
    end

    # Add a note to a class attendance log
    # Allows the user to add a note to a class attendance log.
    # @param id [String] The id of the attendance log.
    # @param text [String] The text of the note to add.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendancelog_addnote_with_http_info(id, text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionattendancelogApi.sessionattendancelog_addnote ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SessionattendancelogApi.sessionattendancelog_addnote"
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling SessionattendancelogApi.sessionattendancelog_addnote"
      end
      # resource path
      local_var_path = '/sessionattendancelog/addnote'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionattendancelogApi#sessionattendancelog_addnote\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View details of a class attendance log
    # Allows the user to view an individual class attendance log and its details.
    # @param id [String] The id of the attendance log to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def sessionattendancelog_get(id, opts = {})
      sessionattendancelog_get_with_http_info(id, opts)
      nil
    end

    # View details of a class attendance log
    # Allows the user to view an individual class attendance log and its details.
    # @param id [String] The id of the attendance log to get.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendancelog_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionattendancelogApi.sessionattendancelog_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SessionattendancelogApi.sessionattendancelog_get"
      end
      # resource path
      local_var_path = '/sessionattendancelog/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionattendancelogApi#sessionattendancelog_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the class session attendance information for a specific user
    # Allows the user to view the attendance for a specified student.
    # @param attendee [String] The id of the attendee to get statistic for.
    # @param eventid [String] The id of the event whose attendee statistics have to be returned.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionattendancelog_getuser(attendee, eventid, opts = {})
      sessionattendancelog_getuser_with_http_info(attendee, eventid, opts)
      nil
    end

    # View the class session attendance information for a specific user
    # Allows the user to view the attendance for a specified student.
    # @param attendee [String] The id of the attendee to get statistic for.
    # @param eventid [String] The id of the event whose attendee statistics have to be returned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendancelog_getuser_with_http_info(attendee, eventid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionattendancelogApi.sessionattendancelog_getuser ...'
      end
      # verify the required parameter 'attendee' is set
      if @api_client.config.client_side_validation && attendee.nil?
        fail ArgumentError, "Missing the required parameter 'attendee' when calling SessionattendancelogApi.sessionattendancelog_getuser"
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling SessionattendancelogApi.sessionattendancelog_getuser"
      end
      # resource path
      local_var_path = '/sessionattendancelog/getuser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'attendee'] = attendee
      query_params[:'eventid'] = eventid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionattendancelogApi#sessionattendancelog_getuser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View attendance logs of the specified session
    # Allows the user to view the full list of logs from a specified session
    # @param session [String] The id of the session whose attendees logs have to be returned.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [nil]
    def sessionattendancelog_list(session, from, count, opts = {})
      sessionattendancelog_list_with_http_info(session, from, count, opts)
      nil
    end

    # View attendance logs of the specified session
    # Allows the user to view the full list of logs from a specified session
    # @param session [String] The id of the session whose attendees logs have to be returned.
    # @param from [Integer] The first record to return.
    # @param count [Integer] The max number of records to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendancelog_list_with_http_info(session, from, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionattendancelogApi.sessionattendancelog_list ...'
      end
      # verify the required parameter 'session' is set
      if @api_client.config.client_side_validation && session.nil?
        fail ArgumentError, "Missing the required parameter 'session' when calling SessionattendancelogApi.sessionattendancelog_list"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling SessionattendancelogApi.sessionattendancelog_list"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling SessionattendancelogApi.sessionattendancelog_list"
      end
      # resource path
      local_var_path = '/sessionattendancelog/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'session'] = session
      query_params[:'from'] = from
      query_params[:'count'] = count
      query_params[:'photosize'] = opts[:'photosize'] if !opts[:'photosize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionattendancelogApi#sessionattendancelog_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the attendance information of an entire class
    # Allows the user to view the attendance information for an entire class
    # @param eventid [String] The id of the event whose attendance has to be returned.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sessionattendancelog_listevent(eventid, opts = {})
      sessionattendancelog_listevent_with_http_info(eventid, opts)
      nil
    end

    # View the attendance information of an entire class
    # Allows the user to view the attendance information for an entire class
    # @param eventid [String] The id of the event whose attendance has to be returned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendancelog_listevent_with_http_info(eventid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionattendancelogApi.sessionattendancelog_listevent ...'
      end
      # verify the required parameter 'eventid' is set
      if @api_client.config.client_side_validation && eventid.nil?
        fail ArgumentError, "Missing the required parameter 'eventid' when calling SessionattendancelogApi.sessionattendancelog_listevent"
      end
      # resource path
      local_var_path = '/sessionattendancelog/listevent'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eventid'] = eventid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionattendancelogApi#sessionattendancelog_listevent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View the attendance summary for a class and/or a attendee
    # Allows the user to view the attendance summary for a given class and/or attendee.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :eventid The id of the event whose attendance has to be returned.
    # @option opts [String] :attendeeid The id of the attendee whose attendance has to be returned.
    # @option opts [String] :groupid The id of the group whose attendance has to be returned.
    # @option opts [String] :start The start date to filter (beginning of time by default).
    # @option opts [String] :_end The end date to filter (today by default).
    # @return [nil]
    def sessionattendancelog_listsummary(opts = {})
      sessionattendancelog_listsummary_with_http_info(opts)
      nil
    end

    # View the attendance summary for a class and/or a attendee
    # Allows the user to view the attendance summary for a given class and/or attendee.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :eventid The id of the event whose attendance has to be returned.
    # @option opts [String] :attendeeid The id of the attendee whose attendance has to be returned.
    # @option opts [String] :groupid The id of the group whose attendance has to be returned.
    # @option opts [String] :start The start date to filter (beginning of time by default).
    # @option opts [String] :_end The end date to filter (today by default).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendancelog_listsummary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionattendancelogApi.sessionattendancelog_listsummary ...'
      end
      # resource path
      local_var_path = '/sessionattendancelog/listsummary'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'attendeeid'] = opts[:'attendeeid'] if !opts[:'attendeeid'].nil?
      query_params[:'groupid'] = opts[:'groupid'] if !opts[:'groupid'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionattendancelogApi#sessionattendancelog_listsummary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View my attendance summary
    # Allows the user to view their own attendance summary.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :eventid The id of the event whose attendance has to be returned.
    # @option opts [String] :start The start date to filter (beginning of time by default).
    # @option opts [String] :_end The end date to filter (today by default).
    # @return [nil]
    def sessionattendancelog_mylistsummary(opts = {})
      sessionattendancelog_mylistsummary_with_http_info(opts)
      nil
    end

    # View my attendance summary
    # Allows the user to view their own attendance summary.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :eventid The id of the event whose attendance has to be returned.
    # @option opts [String] :start The start date to filter (beginning of time by default).
    # @option opts [String] :_end The end date to filter (today by default).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendancelog_mylistsummary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionattendancelogApi.sessionattendancelog_mylistsummary ...'
      end
      # resource path
      local_var_path = '/sessionattendancelog/mylistsummary'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eventid'] = opts[:'eventid'] if !opts[:'eventid'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionattendancelogApi#sessionattendancelog_mylistsummary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a class attendance log
    # Allows the user to create or edit a class attendance log.
    # @param id [String] The id of the att log to save (leave empty to create a new one).
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def sessionattendancelog_save(id, opts = {})
      sessionattendancelog_save_with_http_info(id, opts)
      nil
    end

    # Create or edit a class attendance log
    # Allows the user to create or edit a class attendance log.
    # @param id [String] The id of the att log to save (leave empty to create a new one).
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendancelog_save_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionattendancelogApi.sessionattendancelog_save ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SessionattendancelogApi.sessionattendancelog_save"
      end
      # resource path
      local_var_path = '/sessionattendancelog/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionattendancelogApi#sessionattendancelog_save\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or edit a class attendance log swipe
    # Allows the user to create or edit a class attendance log swipe, which are the details of time in or out.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def sessionattendancelog_saveswipe(opts = {})
      sessionattendancelog_saveswipe_with_http_info(opts)
      nil
    end

    # Create or edit a class attendance log swipe
    # Allows the user to create or edit a class attendance log swipe, which are the details of time in or out.
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sessionattendancelog_saveswipe_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionattendancelogApi.sessionattendancelog_saveswipe ...'
      end
      # resource path
      local_var_path = '/sessionattendancelog/saveswipe'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'unknown_base_type']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionattendancelogApi#sessionattendancelog_saveswipe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
