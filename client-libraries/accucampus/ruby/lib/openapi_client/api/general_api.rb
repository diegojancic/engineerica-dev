=begin
#AccuCampus OpenAPI 3

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class GeneralApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the application change log
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def changelog(opts = {})
      changelog_with_http_info(opts)
      nil
    end

    # Get the application change log
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def changelog_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeneralApi.changelog ...'
      end
      # resource path
      local_var_path = '/changelog'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeneralApi#changelog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the documentation
    # Retrieves the list of actions available in the system.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :excludeanonymous If true it excludes the anonymous actions from the returned list.
    # @return [nil]
    def doc(opts = {})
      doc_with_http_info(opts)
      nil
    end

    # Get the documentation
    # Retrieves the list of actions available in the system.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :excludeanonymous If true it excludes the anonymous actions from the returned list.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def doc_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeneralApi.doc ...'
      end
      # resource path
      local_var_path = '/doc'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'excludeanonymous'] = opts[:'excludeanonymous'] if !opts[:'excludeanonymous'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeneralApi#doc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export AccuCampus data
    # Allows the user to export data from AccuCampus into a CSV, HTML, or Excel format.
    # @param exporttype [String] What to export.
    # @param exportformat [String] The format of the resulting file. Valid types are CSV, HTML, XLS.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters Pipe separated filters for the export, eg: aaa&#x3D;val|bbb&#x3D;val|...
    # @return [nil]
    def export(exporttype, exportformat, opts = {})
      export_with_http_info(exporttype, exportformat, opts)
      nil
    end

    # Export AccuCampus data
    # Allows the user to export data from AccuCampus into a CSV, HTML, or Excel format.
    # @param exporttype [String] What to export.
    # @param exportformat [String] The format of the resulting file. Valid types are CSV, HTML, XLS.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filters Pipe separated filters for the export, eg: aaa&#x3D;val|bbb&#x3D;val|...
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def export_with_http_info(exporttype, exportformat, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeneralApi.export ...'
      end
      # verify the required parameter 'exporttype' is set
      if @api_client.config.client_side_validation && exporttype.nil?
        fail ArgumentError, "Missing the required parameter 'exporttype' when calling GeneralApi.export"
      end
      # verify the required parameter 'exportformat' is set
      if @api_client.config.client_side_validation && exportformat.nil?
        fail ArgumentError, "Missing the required parameter 'exportformat' when calling GeneralApi.export"
      end
      # resource path
      local_var_path = '/export'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exporttype'] = exporttype
      query_params[:'exportformat'] = exportformat
      query_params[:'filters'] = opts[:'filters'] if !opts[:'filters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeneralApi#export\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import data into AccuCampus
    # Allows the user to import data into AccuCampus via CSV or flat files either manually or automatically using the import utility.
    # @param importtype [String] The kind of data that is being uploaded.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @option opts [String] :parameters Import parameters, in a key-value pair JSON-serialized object. Eg {&#39;parameter&#39;:&#39;value&#39;}.
    # @return [nil]
    def import(importtype, upload, opts = {})
      import_with_http_info(importtype, upload, opts)
      nil
    end

    # Import data into AccuCampus
    # Allows the user to import data into AccuCampus via CSV or flat files either manually or automatically using the import utility.
    # @param importtype [String] The kind of data that is being uploaded.
    # @param upload [String] Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename The local name of the uploaded file. For later reference.
    # @option opts [String] :parameters Import parameters, in a key-value pair JSON-serialized object. Eg {&#39;parameter&#39;:&#39;value&#39;}.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def import_with_http_info(importtype, upload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeneralApi.import ...'
      end
      # verify the required parameter 'importtype' is set
      if @api_client.config.client_side_validation && importtype.nil?
        fail ArgumentError, "Missing the required parameter 'importtype' when calling GeneralApi.import"
      end
      # verify the required parameter 'upload' is set
      if @api_client.config.client_side_validation && upload.nil?
        fail ArgumentError, "Missing the required parameter 'upload' when calling GeneralApi.import"
      end
      # resource path
      local_var_path = '/import'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'importtype'] = importtype
      query_params[:'upload'] = upload
      query_params[:'filename'] = opts[:'filename'] if !opts[:'filename'].nil?
      query_params[:'parameters'] = opts[:'parameters'] if !opts[:'parameters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeneralApi#import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the available timezones
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def listtimezones(opts = {})
      listtimezones_with_http_info(opts)
      nil
    end

    # Lists the available timezones
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def listtimezones_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeneralApi.listtimezones ...'
      end
      # resource path
      local_var_path = '/listtimezones'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeneralApi#listtimezones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Login
    # @param domain [String] The account domain to login.
    # @param username [String] The username (email) of the user to login as.
    # @param password [String] The password of the user to login as.
    # @param method [String] The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :rememberme If true then the session will not expire.
    # @return [nil]
    def login(domain, username, password, method, opts = {})
      login_with_http_info(domain, username, password, method, opts)
      nil
    end

    # Login
    # @param domain [String] The account domain to login.
    # @param username [String] The username (email) of the user to login as.
    # @param password [String] The password of the user to login as.
    # @param method [String] The authentication method. Valid values are &#39;token&#39; and &#39;cookie&#39;.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :rememberme If true then the session will not expire.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def login_with_http_info(domain, username, password, method, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeneralApi.login ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling GeneralApi.login"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling GeneralApi.login"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling GeneralApi.login"
      end
      # verify the required parameter 'method' is set
      if @api_client.config.client_side_validation && method.nil?
        fail ArgumentError, "Missing the required parameter 'method' when calling GeneralApi.login"
      end
      # resource path
      local_var_path = '/login'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'domain'] = domain
      query_params[:'username'] = username
      query_params[:'password'] = password
      query_params[:'method'] = method
      query_params[:'rememberme'] = opts[:'rememberme'] if !opts[:'rememberme'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeneralApi#login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Logout
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def logout(opts = {})
      logout_with_http_info(opts)
      nil
    end

    # Logout
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeneralApi.logout ...'
      end
      # resource path
      local_var_path = '/logout'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeneralApi#logout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search
    # @param query [String] The query to search for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Current page to show, zero-based.
    # @return [nil]
    def search(query, opts = {})
      search_with_http_info(query, opts)
      nil
    end

    # Search
    # @param query [String] The query to search for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Current page to show, zero-based.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def search_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeneralApi.search ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling GeneralApi.search"
      end
      # resource path
      local_var_path = '/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeneralApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generates a dynamic image from text
    # @param text [String] The text to convert to an image, use double pipes (||) as a new line.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fontcolor The color of the text, in hex format, without the #.
    # @option opts [Integer] :fontsize The size of the text, in points.
    # @option opts [String] :direction Either vertical or horizontal, default horizontal.
    # @option opts [Integer] :width The image width in pixels (or height if the direction is vertical).
    # @return [nil]
    def texttoimage(text, opts = {})
      texttoimage_with_http_info(text, opts)
      nil
    end

    # Generates a dynamic image from text
    # @param text [String] The text to convert to an image, use double pipes (||) as a new line.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fontcolor The color of the text, in hex format, without the #.
    # @option opts [Integer] :fontsize The size of the text, in points.
    # @option opts [String] :direction Either vertical or horizontal, default horizontal.
    # @option opts [Integer] :width The image width in pixels (or height if the direction is vertical).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def texttoimage_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeneralApi.texttoimage ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling GeneralApi.texttoimage"
      end
      # resource path
      local_var_path = '/texttoimage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text
      query_params[:'fontcolor'] = opts[:'fontcolor'] if !opts[:'fontcolor'].nil?
      query_params[:'fontsize'] = opts[:'fontsize'] if !opts[:'fontsize'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeneralApi#texttoimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get current version information
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def version(opts = {})
      version_with_http_info(opts)
      nil
    end

    # Get current version information
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def version_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeneralApi.version ...'
      end
      # resource path
      local_var_path = '/version'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeneralApi#version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
