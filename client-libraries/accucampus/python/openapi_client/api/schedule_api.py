# coding: utf-8

"""
    AccuCampus OpenAPI 3

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ScheduleApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def schedule_delete(self, **kwargs):  # noqa: E501
        """Delete a schedule slot  # noqa: E501

        Allows the user to delete a schedule slot from another user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.schedule_delete_with_http_info(**kwargs)  # noqa: E501

    def schedule_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Delete a schedule slot  # noqa: E501

        Allows the user to delete a schedule slot from another user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'unknown_base_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schedule/delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schedule_deletemine(self, **kwargs):  # noqa: E501
        """Delete a specific block from a user's own schedule  # noqa: E501

        Allows the user to delete a schedule block from their own availability.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_deletemine(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.schedule_deletemine_with_http_info(**kwargs)  # noqa: E501

    def schedule_deletemine_with_http_info(self, **kwargs):  # noqa: E501
        """Delete a specific block from a user's own schedule  # noqa: E501

        Allows the user to delete a schedule block from their own availability.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_deletemine_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'unknown_base_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_deletemine" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schedule/deletemine', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schedule_enable(self, userid, enable, **kwargs):  # noqa: E501
        """Enable or disable the schedule for a specific person  # noqa: E501

        Allows the user to enable or disable a schedule for another user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_enable(userid, enable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to enable or disable the schedule. (required)
        :param bool enable: True to enable schedules, false to disable. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.schedule_enable_with_http_info(userid, enable, **kwargs)  # noqa: E501

    def schedule_enable_with_http_info(self, userid, enable, **kwargs):  # noqa: E501
        """Enable or disable the schedule for a specific person  # noqa: E501

        Allows the user to enable or disable a schedule for another user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_enable_with_http_info(userid, enable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to enable or disable the schedule. (required)
        :param bool enable: True to enable schedules, false to disable. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'userid',
            'enable'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_enable" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'userid' is set
        if self.api_client.client_side_validation and ('userid' not in local_var_params or  # noqa: E501
                                                        local_var_params['userid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `userid` when calling `schedule_enable`")  # noqa: E501
        # verify the required parameter 'enable' is set
        if self.api_client.client_side_validation and ('enable' not in local_var_params or  # noqa: E501
                                                        local_var_params['enable'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `enable` when calling `schedule_enable`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'userid' in local_var_params and local_var_params['userid'] is not None:  # noqa: E501
            query_params.append(('userid', local_var_params['userid']))  # noqa: E501
        if 'enable' in local_var_params and local_var_params['enable'] is not None:  # noqa: E501
            query_params.append(('enable', local_var_params['enable']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schedule/enable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schedule_enablemine(self, enable, **kwargs):  # noqa: E501
        """Enable or disable current user's schedule  # noqa: E501

        Allows the user to enable or disable a schedule for himself.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_enablemine(enable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool enable: True to enable schedules, false to disable. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.schedule_enablemine_with_http_info(enable, **kwargs)  # noqa: E501

    def schedule_enablemine_with_http_info(self, enable, **kwargs):  # noqa: E501
        """Enable or disable current user's schedule  # noqa: E501

        Allows the user to enable or disable a schedule for himself.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_enablemine_with_http_info(enable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool enable: True to enable schedules, false to disable. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'enable'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_enablemine" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'enable' is set
        if self.api_client.client_side_validation and ('enable' not in local_var_params or  # noqa: E501
                                                        local_var_params['enable'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `enable` when calling `schedule_enablemine`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'enable' in local_var_params and local_var_params['enable'] is not None:  # noqa: E501
            query_params.append(('enable', local_var_params['enable']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schedule/enablemine', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schedule_findallstaffslots(self, starttime, endtime, **kwargs):  # noqa: E501
        """Search available schedule slots by service, event, date  # noqa: E501

        Allows users to search available slots.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_findallstaffslots(starttime, endtime, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param datetime starttime: The start time of the range to look for slots. (required)
        :param datetime endtime: The end time of the range to look for slots. (required)
        :param str staffid: The id of the staff to filter by.
        :param str serviceids: CSV list of the service Ids to filter by.
        :param str eventid: The id of the event to filter by.
        :param str locationid: The id of the location to filter by.
        :param str staffroleids: CSV list of the staff member role ids to filter by.
        :param str availablefor: The specific availability type to filter by.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.schedule_findallstaffslots_with_http_info(starttime, endtime, **kwargs)  # noqa: E501

    def schedule_findallstaffslots_with_http_info(self, starttime, endtime, **kwargs):  # noqa: E501
        """Search available schedule slots by service, event, date  # noqa: E501

        Allows users to search available slots.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_findallstaffslots_with_http_info(starttime, endtime, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param datetime starttime: The start time of the range to look for slots. (required)
        :param datetime endtime: The end time of the range to look for slots. (required)
        :param str staffid: The id of the staff to filter by.
        :param str serviceids: CSV list of the service Ids to filter by.
        :param str eventid: The id of the event to filter by.
        :param str locationid: The id of the location to filter by.
        :param str staffroleids: CSV list of the staff member role ids to filter by.
        :param str availablefor: The specific availability type to filter by.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'starttime',
            'endtime',
            'staffid',
            'serviceids',
            'eventid',
            'locationid',
            'staffroleids',
            'availablefor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_findallstaffslots" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'starttime' is set
        if self.api_client.client_side_validation and ('starttime' not in local_var_params or  # noqa: E501
                                                        local_var_params['starttime'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `starttime` when calling `schedule_findallstaffslots`")  # noqa: E501
        # verify the required parameter 'endtime' is set
        if self.api_client.client_side_validation and ('endtime' not in local_var_params or  # noqa: E501
                                                        local_var_params['endtime'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `endtime` when calling `schedule_findallstaffslots`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'starttime' in local_var_params and local_var_params['starttime'] is not None:  # noqa: E501
            query_params.append(('starttime', local_var_params['starttime']))  # noqa: E501
        if 'endtime' in local_var_params and local_var_params['endtime'] is not None:  # noqa: E501
            query_params.append(('endtime', local_var_params['endtime']))  # noqa: E501
        if 'staffid' in local_var_params and local_var_params['staffid'] is not None:  # noqa: E501
            query_params.append(('staffid', local_var_params['staffid']))  # noqa: E501
        if 'serviceids' in local_var_params and local_var_params['serviceids'] is not None:  # noqa: E501
            query_params.append(('serviceids', local_var_params['serviceids']))  # noqa: E501
        if 'eventid' in local_var_params and local_var_params['eventid'] is not None:  # noqa: E501
            query_params.append(('eventid', local_var_params['eventid']))  # noqa: E501
        if 'locationid' in local_var_params and local_var_params['locationid'] is not None:  # noqa: E501
            query_params.append(('locationid', local_var_params['locationid']))  # noqa: E501
        if 'staffroleids' in local_var_params and local_var_params['staffroleids'] is not None:  # noqa: E501
            query_params.append(('staffroleids', local_var_params['staffroleids']))  # noqa: E501
        if 'availablefor' in local_var_params and local_var_params['availablefor'] is not None:  # noqa: E501
            query_params.append(('availablefor', local_var_params['availablefor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schedule/findallstaffslots', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schedule_findslots(self, staffid, starttime, endtime, **kwargs):  # noqa: E501
        """Search available schedule slots by service, event, date and/or staff  # noqa: E501

        Allows users to search available slots when making appointments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_findslots(staffid, starttime, endtime, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str staffid: The id of the staff to filter by. (required)
        :param datetime starttime: The start time of the range to look for slots. (required)
        :param datetime endtime: The end time of the range to look for slots. (required)
        :param str serviceids: CSV list of the service Ids to filter by.
        :param str eventid: The id of the event to filter by.
        :param str locationid: The id of the service to filter by.
        :param str availablefor: The specific availability type to filter by.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.schedule_findslots_with_http_info(staffid, starttime, endtime, **kwargs)  # noqa: E501

    def schedule_findslots_with_http_info(self, staffid, starttime, endtime, **kwargs):  # noqa: E501
        """Search available schedule slots by service, event, date and/or staff  # noqa: E501

        Allows users to search available slots when making appointments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_findslots_with_http_info(staffid, starttime, endtime, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str staffid: The id of the staff to filter by. (required)
        :param datetime starttime: The start time of the range to look for slots. (required)
        :param datetime endtime: The end time of the range to look for slots. (required)
        :param str serviceids: CSV list of the service Ids to filter by.
        :param str eventid: The id of the event to filter by.
        :param str locationid: The id of the service to filter by.
        :param str availablefor: The specific availability type to filter by.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'staffid',
            'starttime',
            'endtime',
            'serviceids',
            'eventid',
            'locationid',
            'availablefor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_findslots" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'staffid' is set
        if self.api_client.client_side_validation and ('staffid' not in local_var_params or  # noqa: E501
                                                        local_var_params['staffid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `staffid` when calling `schedule_findslots`")  # noqa: E501
        # verify the required parameter 'starttime' is set
        if self.api_client.client_side_validation and ('starttime' not in local_var_params or  # noqa: E501
                                                        local_var_params['starttime'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `starttime` when calling `schedule_findslots`")  # noqa: E501
        # verify the required parameter 'endtime' is set
        if self.api_client.client_side_validation and ('endtime' not in local_var_params or  # noqa: E501
                                                        local_var_params['endtime'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `endtime` when calling `schedule_findslots`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'staffid' in local_var_params and local_var_params['staffid'] is not None:  # noqa: E501
            query_params.append(('staffid', local_var_params['staffid']))  # noqa: E501
        if 'starttime' in local_var_params and local_var_params['starttime'] is not None:  # noqa: E501
            query_params.append(('starttime', local_var_params['starttime']))  # noqa: E501
        if 'endtime' in local_var_params and local_var_params['endtime'] is not None:  # noqa: E501
            query_params.append(('endtime', local_var_params['endtime']))  # noqa: E501
        if 'serviceids' in local_var_params and local_var_params['serviceids'] is not None:  # noqa: E501
            query_params.append(('serviceids', local_var_params['serviceids']))  # noqa: E501
        if 'eventid' in local_var_params and local_var_params['eventid'] is not None:  # noqa: E501
            query_params.append(('eventid', local_var_params['eventid']))  # noqa: E501
        if 'locationid' in local_var_params and local_var_params['locationid'] is not None:  # noqa: E501
            query_params.append(('locationid', local_var_params['locationid']))  # noqa: E501
        if 'availablefor' in local_var_params and local_var_params['availablefor'] is not None:  # noqa: E501
            query_params.append(('availablefor', local_var_params['availablefor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schedule/findslots', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schedule_findstaffavail(self, starttime, endtime, **kwargs):  # noqa: E501
        """Search available staff members slots by service, event, and/or date  # noqa: E501

        Allows users to search available staff.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_findstaffavail(starttime, endtime, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param datetime starttime: The start time of the range to look for slots. (required)
        :param datetime endtime: The end time of the range to look for slots. (required)
        :param str serviceids: CSV list of the service ids to filter by.
        :param str eventid: The id of the event to filter by.
        :param str locationid: The id of the service to filter by.
        :param str staffroleids: CSV list of the staff member role ids to filter by.
        :param str availablefor: Filter slots by a specific availability type.
        :param int photosize: The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.schedule_findstaffavail_with_http_info(starttime, endtime, **kwargs)  # noqa: E501

    def schedule_findstaffavail_with_http_info(self, starttime, endtime, **kwargs):  # noqa: E501
        """Search available staff members slots by service, event, and/or date  # noqa: E501

        Allows users to search available staff.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_findstaffavail_with_http_info(starttime, endtime, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param datetime starttime: The start time of the range to look for slots. (required)
        :param datetime endtime: The end time of the range to look for slots. (required)
        :param str serviceids: CSV list of the service ids to filter by.
        :param str eventid: The id of the event to filter by.
        :param str locationid: The id of the service to filter by.
        :param str staffroleids: CSV list of the staff member role ids to filter by.
        :param str availablefor: Filter slots by a specific availability type.
        :param int photosize: The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'starttime',
            'endtime',
            'serviceids',
            'eventid',
            'locationid',
            'staffroleids',
            'availablefor',
            'photosize'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_findstaffavail" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'starttime' is set
        if self.api_client.client_side_validation and ('starttime' not in local_var_params or  # noqa: E501
                                                        local_var_params['starttime'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `starttime` when calling `schedule_findstaffavail`")  # noqa: E501
        # verify the required parameter 'endtime' is set
        if self.api_client.client_side_validation and ('endtime' not in local_var_params or  # noqa: E501
                                                        local_var_params['endtime'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `endtime` when calling `schedule_findstaffavail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'serviceids' in local_var_params and local_var_params['serviceids'] is not None:  # noqa: E501
            query_params.append(('serviceids', local_var_params['serviceids']))  # noqa: E501
        if 'eventid' in local_var_params and local_var_params['eventid'] is not None:  # noqa: E501
            query_params.append(('eventid', local_var_params['eventid']))  # noqa: E501
        if 'starttime' in local_var_params and local_var_params['starttime'] is not None:  # noqa: E501
            query_params.append(('starttime', local_var_params['starttime']))  # noqa: E501
        if 'endtime' in local_var_params and local_var_params['endtime'] is not None:  # noqa: E501
            query_params.append(('endtime', local_var_params['endtime']))  # noqa: E501
        if 'locationid' in local_var_params and local_var_params['locationid'] is not None:  # noqa: E501
            query_params.append(('locationid', local_var_params['locationid']))  # noqa: E501
        if 'staffroleids' in local_var_params and local_var_params['staffroleids'] is not None:  # noqa: E501
            query_params.append(('staffroleids', local_var_params['staffroleids']))  # noqa: E501
        if 'availablefor' in local_var_params and local_var_params['availablefor'] is not None:  # noqa: E501
            query_params.append(('availablefor', local_var_params['availablefor']))  # noqa: E501
        if 'photosize' in local_var_params and local_var_params['photosize'] is not None:  # noqa: E501
            query_params.append(('photosize', local_var_params['photosize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schedule/findstaffavail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schedule_get(self, scheduleid, **kwargs):  # noqa: E501
        """Search and view details of a specific schedule slot  # noqa: E501

        Allows the user to view the details of schedule shifts for any user role that the user has permission to view.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_get(scheduleid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str scheduleid: The id of the schedule. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.schedule_get_with_http_info(scheduleid, **kwargs)  # noqa: E501

    def schedule_get_with_http_info(self, scheduleid, **kwargs):  # noqa: E501
        """Search and view details of a specific schedule slot  # noqa: E501

        Allows the user to view the details of schedule shifts for any user role that the user has permission to view.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_get_with_http_info(scheduleid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str scheduleid: The id of the schedule. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'scheduleid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'scheduleid' is set
        if self.api_client.client_side_validation and ('scheduleid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scheduleid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scheduleid` when calling `schedule_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'scheduleid' in local_var_params and local_var_params['scheduleid'] is not None:  # noqa: E501
            query_params.append(('scheduleid', local_var_params['scheduleid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schedule/get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schedule_getmine(self, scheduleid, **kwargs):  # noqa: E501
        """View details of a specific schedule block, for current user  # noqa: E501

        Allows the user to view the details of their own schedule shifts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_getmine(scheduleid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str scheduleid: The id of the schedule. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.schedule_getmine_with_http_info(scheduleid, **kwargs)  # noqa: E501

    def schedule_getmine_with_http_info(self, scheduleid, **kwargs):  # noqa: E501
        """View details of a specific schedule block, for current user  # noqa: E501

        Allows the user to view the details of their own schedule shifts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_getmine_with_http_info(scheduleid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str scheduleid: The id of the schedule. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'scheduleid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_getmine" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'scheduleid' is set
        if self.api_client.client_side_validation and ('scheduleid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scheduleid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scheduleid` when calling `schedule_getmine`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'scheduleid' in local_var_params and local_var_params['scheduleid'] is not None:  # noqa: E501
            query_params.append(('scheduleid', local_var_params['scheduleid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schedule/getmine', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schedule_getstaff(self, userid, **kwargs):  # noqa: E501
        """View a list of schedule information of a specified person  # noqa: E501

        Allows the user to view the schedule shifts for user roles that the user has permission to access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_getstaff(userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to get info. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.schedule_getstaff_with_http_info(userid, **kwargs)  # noqa: E501

    def schedule_getstaff_with_http_info(self, userid, **kwargs):  # noqa: E501
        """View a list of schedule information of a specified person  # noqa: E501

        Allows the user to view the schedule shifts for user roles that the user has permission to access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_getstaff_with_http_info(userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to get info. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'userid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_getstaff" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'userid' is set
        if self.api_client.client_side_validation and ('userid' not in local_var_params or  # noqa: E501
                                                        local_var_params['userid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `userid` when calling `schedule_getstaff`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'userid' in local_var_params and local_var_params['userid'] is not None:  # noqa: E501
            query_params.append(('userid', local_var_params['userid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schedule/getstaff', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schedule_getstaffmine(self, **kwargs):  # noqa: E501
        """View current user's schedule information  # noqa: E501

        Allows the user to view their own schedule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_getstaffmine(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.schedule_getstaffmine_with_http_info(**kwargs)  # noqa: E501

    def schedule_getstaffmine_with_http_info(self, **kwargs):  # noqa: E501
        """View current user's schedule information  # noqa: E501

        Allows the user to view their own schedule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_getstaffmine_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_getstaffmine" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schedule/getstaffmine', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schedule_myofftimes(self, **kwargs):  # noqa: E501
        """View current user's schedule exceptions  # noqa: E501

        Allows the user to view their own schedule exceptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_myofftimes(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool includedeleted: If true the deleted offtimes are also returned.
        :param bool onlyupcoming: If true then only upcoming offtimes are returned.
        :param datetime modifiedafter: If specified, only offtimes modified after the specified date will be returned.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.schedule_myofftimes_with_http_info(**kwargs)  # noqa: E501

    def schedule_myofftimes_with_http_info(self, **kwargs):  # noqa: E501
        """View current user's schedule exceptions  # noqa: E501

        Allows the user to view their own schedule exceptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_myofftimes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool includedeleted: If true the deleted offtimes are also returned.
        :param bool onlyupcoming: If true then only upcoming offtimes are returned.
        :param datetime modifiedafter: If specified, only offtimes modified after the specified date will be returned.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'includedeleted',
            'onlyupcoming',
            'modifiedafter'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_myofftimes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'includedeleted' in local_var_params and local_var_params['includedeleted'] is not None:  # noqa: E501
            query_params.append(('includedeleted', local_var_params['includedeleted']))  # noqa: E501
        if 'onlyupcoming' in local_var_params and local_var_params['onlyupcoming'] is not None:  # noqa: E501
            query_params.append(('onlyupcoming', local_var_params['onlyupcoming']))  # noqa: E501
        if 'modifiedafter' in local_var_params and local_var_params['modifiedafter'] is not None:  # noqa: E501
            query_params.append(('modifiedafter', local_var_params['modifiedafter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schedule/myofftimes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schedule_save(self, **kwargs):  # noqa: E501
        """Create or edit a schedule slot  # noqa: E501

        Allows the user to create or edit a schedule slot of another user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_save(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.schedule_save_with_http_info(**kwargs)  # noqa: E501

    def schedule_save_with_http_info(self, **kwargs):  # noqa: E501
        """Create or edit a schedule slot  # noqa: E501

        Allows the user to create or edit a schedule slot of another user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_save_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'unknown_base_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_save" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schedule/save', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schedule_savemine(self, **kwargs):  # noqa: E501
        """Create or edit a block in current user's schedule  # noqa: E501

        Allows the user to create or edit a schedule shift in their own availability.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_savemine(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.schedule_savemine_with_http_info(**kwargs)  # noqa: E501

    def schedule_savemine_with_http_info(self, **kwargs):  # noqa: E501
        """Create or edit a block in current user's schedule  # noqa: E501

        Allows the user to create or edit a schedule shift in their own availability.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schedule_savemine_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'unknown_base_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_savemine" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schedule/savemine', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
