# coding: utf-8

"""
    AccuCampus OpenAPI 3

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class WaitinglineApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def waitingline_adduser(self, station, user, **kwargs):  # noqa: E501
        """Put user in a waiting line  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.waitingline_adduser(station, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str station: The id of the sign-in station. (required)
        :param str user: The user's card number. (required)
        :param str locationid: The location's id where the swipe must be saved.
        :param datetime time: The date and time of the swipe.
        :param str signinrole: Specifies if the sign-in is for an attendee or a staff member
        :param str roleid: Specifies the role the user has selected in order to sign-in
        :param str services: The services ids the user has selected.
        :param str eventid: The id of the event the user selected.
        :param str staff: The id of the staff member the user selected.
        :param int photosize: The swiping user's photo size.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.waitingline_adduser_with_http_info(station, user, **kwargs)  # noqa: E501

    def waitingline_adduser_with_http_info(self, station, user, **kwargs):  # noqa: E501
        """Put user in a waiting line  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.waitingline_adduser_with_http_info(station, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str station: The id of the sign-in station. (required)
        :param str user: The user's card number. (required)
        :param str locationid: The location's id where the swipe must be saved.
        :param datetime time: The date and time of the swipe.
        :param str signinrole: Specifies if the sign-in is for an attendee or a staff member
        :param str roleid: Specifies the role the user has selected in order to sign-in
        :param str services: The services ids the user has selected.
        :param str eventid: The id of the event the user selected.
        :param str staff: The id of the staff member the user selected.
        :param int photosize: The swiping user's photo size.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'station',
            'user',
            'locationid',
            'time',
            'signinrole',
            'roleid',
            'services',
            'eventid',
            'staff',
            'photosize'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waitingline_adduser" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'station' is set
        if self.api_client.client_side_validation and ('station' not in local_var_params or  # noqa: E501
                                                        local_var_params['station'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `station` when calling `waitingline_adduser`")  # noqa: E501
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in local_var_params or  # noqa: E501
                                                        local_var_params['user'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user` when calling `waitingline_adduser`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'station' in local_var_params and local_var_params['station'] is not None:  # noqa: E501
            query_params.append(('station', local_var_params['station']))  # noqa: E501
        if 'locationid' in local_var_params and local_var_params['locationid'] is not None:  # noqa: E501
            query_params.append(('locationid', local_var_params['locationid']))  # noqa: E501
        if 'time' in local_var_params and local_var_params['time'] is not None:  # noqa: E501
            query_params.append(('time', local_var_params['time']))  # noqa: E501
        if 'user' in local_var_params and local_var_params['user'] is not None:  # noqa: E501
            query_params.append(('user', local_var_params['user']))  # noqa: E501
        if 'signinrole' in local_var_params and local_var_params['signinrole'] is not None:  # noqa: E501
            query_params.append(('signinrole', local_var_params['signinrole']))  # noqa: E501
        if 'roleid' in local_var_params and local_var_params['roleid'] is not None:  # noqa: E501
            query_params.append(('roleid', local_var_params['roleid']))  # noqa: E501
        if 'services' in local_var_params and local_var_params['services'] is not None:  # noqa: E501
            query_params.append(('services', local_var_params['services']))  # noqa: E501
        if 'eventid' in local_var_params and local_var_params['eventid'] is not None:  # noqa: E501
            query_params.append(('eventid', local_var_params['eventid']))  # noqa: E501
        if 'staff' in local_var_params and local_var_params['staff'] is not None:  # noqa: E501
            query_params.append(('staff', local_var_params['staff']))  # noqa: E501
        if 'photosize' in local_var_params and local_var_params['photosize'] is not None:  # noqa: E501
            query_params.append(('photosize', local_var_params['photosize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/waitingline/adduser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def waitingline_delete(self, id, **kwargs):  # noqa: E501
        """Delete a waiting line  # noqa: E501

        Allows the user to delete an existing waiting line, provided it is in a location that the user is scoped to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.waitingline_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The id of the line to delete. (required)
        :param object body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.waitingline_delete_with_http_info(id, **kwargs)  # noqa: E501

    def waitingline_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a waiting line  # noqa: E501

        Allows the user to delete an existing waiting line, provided it is in a location that the user is scoped to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.waitingline_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The id of the line to delete. (required)
        :param object body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waitingline_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `waitingline_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/waitingline/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def waitingline_get(self, id, **kwargs):  # noqa: E501
        """View details of a waiting line  # noqa: E501

        Allows the user to view the details of a waiting line in a location to which they are scoped.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.waitingline_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The id of the waiting line to get. (required)
        :param int photosize: The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.waitingline_get_with_http_info(id, **kwargs)  # noqa: E501

    def waitingline_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """View details of a waiting line  # noqa: E501

        Allows the user to view the details of a waiting line in a location to which they are scoped.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.waitingline_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The id of the waiting line to get. (required)
        :param int photosize: The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'photosize'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waitingline_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `waitingline_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'photosize' in local_var_params and local_var_params['photosize'] is not None:  # noqa: E501
            query_params.append(('photosize', local_var_params['photosize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/waitingline/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def waitingline_isuserin(self, station, time, user, **kwargs):  # noqa: E501
        """Check whether a user is in a waiting line, signed-in or is not in the area  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.waitingline_isuserin(station, time, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str station: The id of the sign-in station. (required)
        :param datetime time: The date and time of the swipe. (required)
        :param str user: The card number of the user. (required)
        :param str location: The id of the location the user picked.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.waitingline_isuserin_with_http_info(station, time, user, **kwargs)  # noqa: E501

    def waitingline_isuserin_with_http_info(self, station, time, user, **kwargs):  # noqa: E501
        """Check whether a user is in a waiting line, signed-in or is not in the area  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.waitingline_isuserin_with_http_info(station, time, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str station: The id of the sign-in station. (required)
        :param datetime time: The date and time of the swipe. (required)
        :param str user: The card number of the user. (required)
        :param str location: The id of the location the user picked.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'station',
            'time',
            'user',
            'location'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waitingline_isuserin" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'station' is set
        if self.api_client.client_side_validation and ('station' not in local_var_params or  # noqa: E501
                                                        local_var_params['station'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `station` when calling `waitingline_isuserin`")  # noqa: E501
        # verify the required parameter 'time' is set
        if self.api_client.client_side_validation and ('time' not in local_var_params or  # noqa: E501
                                                        local_var_params['time'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `time` when calling `waitingline_isuserin`")  # noqa: E501
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in local_var_params or  # noqa: E501
                                                        local_var_params['user'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user` when calling `waitingline_isuserin`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'station' in local_var_params and local_var_params['station'] is not None:  # noqa: E501
            query_params.append(('station', local_var_params['station']))  # noqa: E501
        if 'time' in local_var_params and local_var_params['time'] is not None:  # noqa: E501
            query_params.append(('time', local_var_params['time']))  # noqa: E501
        if 'user' in local_var_params and local_var_params['user'] is not None:  # noqa: E501
            query_params.append(('user', local_var_params['user']))  # noqa: E501
        if 'location' in local_var_params and local_var_params['location'] is not None:  # noqa: E501
            query_params.append(('location', local_var_params['location']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/waitingline/isuserin', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def waitingline_list(self, _from, count, **kwargs):  # noqa: E501
        """View a list of waiting lines  # noqa: E501

        Allows the user to view the list of waiting lines in locations to which they are scoped.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.waitingline_list(_from, count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int _from: The first record to return. (required)
        :param int count: The max number of records to return. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.waitingline_list_with_http_info(_from, count, **kwargs)  # noqa: E501

    def waitingline_list_with_http_info(self, _from, count, **kwargs):  # noqa: E501
        """View a list of waiting lines  # noqa: E501

        Allows the user to view the list of waiting lines in locations to which they are scoped.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.waitingline_list_with_http_info(_from, count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int _from: The first record to return. (required)
        :param int count: The max number of records to return. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            '_from',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waitingline_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter '_from' is set
        if self.api_client.client_side_validation and ('_from' not in local_var_params or  # noqa: E501
                                                        local_var_params['_from'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `_from` when calling `waitingline_list`")  # noqa: E501
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in local_var_params or  # noqa: E501
                                                        local_var_params['count'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `count` when calling `waitingline_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in local_var_params and local_var_params['_from'] is not None:  # noqa: E501
            query_params.append(('from', local_var_params['_from']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/waitingline/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def waitingline_removeuser(self, waitingline, itemid, **kwargs):  # noqa: E501
        """Remove a user from a waiting line  # noqa: E501

        Allows the user to remove a user from a waiting line, provided they have permission to access that waiting line.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.waitingline_removeuser(waitingline, itemid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str waitingline: The id of the waiting line whose item has to be removed. (required)
        :param str itemid: The ID of the item that has to be removed. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.waitingline_removeuser_with_http_info(waitingline, itemid, **kwargs)  # noqa: E501

    def waitingline_removeuser_with_http_info(self, waitingline, itemid, **kwargs):  # noqa: E501
        """Remove a user from a waiting line  # noqa: E501

        Allows the user to remove a user from a waiting line, provided they have permission to access that waiting line.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.waitingline_removeuser_with_http_info(waitingline, itemid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str waitingline: The id of the waiting line whose item has to be removed. (required)
        :param str itemid: The ID of the item that has to be removed. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'waitingline',
            'itemid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waitingline_removeuser" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'waitingline' is set
        if self.api_client.client_side_validation and ('waitingline' not in local_var_params or  # noqa: E501
                                                        local_var_params['waitingline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `waitingline` when calling `waitingline_removeuser`")  # noqa: E501
        # verify the required parameter 'itemid' is set
        if self.api_client.client_side_validation and ('itemid' not in local_var_params or  # noqa: E501
                                                        local_var_params['itemid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `itemid` when calling `waitingline_removeuser`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'waitingline' in local_var_params and local_var_params['waitingline'] is not None:  # noqa: E501
            query_params.append(('waitingline', local_var_params['waitingline']))  # noqa: E501
        if 'itemid' in local_var_params and local_var_params['itemid'] is not None:  # noqa: E501
            query_params.append(('itemid', local_var_params['itemid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/waitingline/removeuser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def waitingline_save(self, id, **kwargs):  # noqa: E501
        """Create or edit a waiting line  # noqa: E501

        Allows the user to create or edit a waiting line in a location to which they are scoped.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.waitingline_save(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The id of the waiting line save (leave empty to create a new one). (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.waitingline_save_with_http_info(id, **kwargs)  # noqa: E501

    def waitingline_save_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create or edit a waiting line  # noqa: E501

        Allows the user to create or edit a waiting line in a location to which they are scoped.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.waitingline_save_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The id of the waiting line save (leave empty to create a new one). (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'unknown_base_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waitingline_save" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `waitingline_save`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/waitingline/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def waitingline_signinuser(self, waitingline, itemid, staff, **kwargs):  # noqa: E501
        """Sign a user in from a waiting line  # noqa: E501

        Allows the user to sign a user in from a waiting line, provided they have permission to access that waiting line.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.waitingline_signinuser(waitingline, itemid, staff, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str waitingline: The id of the waiting line whose item needs to be signed-in. (required)
        :param str itemid: The ID of the item that has to be signed-in. (required)
        :param str staff: The id of the staff member selected to sign-in. (required)
        :param int photosize: The swiping user's photo size.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.waitingline_signinuser_with_http_info(waitingline, itemid, staff, **kwargs)  # noqa: E501

    def waitingline_signinuser_with_http_info(self, waitingline, itemid, staff, **kwargs):  # noqa: E501
        """Sign a user in from a waiting line  # noqa: E501

        Allows the user to sign a user in from a waiting line, provided they have permission to access that waiting line.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.waitingline_signinuser_with_http_info(waitingline, itemid, staff, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str waitingline: The id of the waiting line whose item needs to be signed-in. (required)
        :param str itemid: The ID of the item that has to be signed-in. (required)
        :param str staff: The id of the staff member selected to sign-in. (required)
        :param int photosize: The swiping user's photo size.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'waitingline',
            'itemid',
            'staff',
            'photosize'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waitingline_signinuser" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'waitingline' is set
        if self.api_client.client_side_validation and ('waitingline' not in local_var_params or  # noqa: E501
                                                        local_var_params['waitingline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `waitingline` when calling `waitingline_signinuser`")  # noqa: E501
        # verify the required parameter 'itemid' is set
        if self.api_client.client_side_validation and ('itemid' not in local_var_params or  # noqa: E501
                                                        local_var_params['itemid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `itemid` when calling `waitingline_signinuser`")  # noqa: E501
        # verify the required parameter 'staff' is set
        if self.api_client.client_side_validation and ('staff' not in local_var_params or  # noqa: E501
                                                        local_var_params['staff'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `staff` when calling `waitingline_signinuser`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'waitingline' in local_var_params and local_var_params['waitingline'] is not None:  # noqa: E501
            query_params.append(('waitingline', local_var_params['waitingline']))  # noqa: E501
        if 'itemid' in local_var_params and local_var_params['itemid'] is not None:  # noqa: E501
            query_params.append(('itemid', local_var_params['itemid']))  # noqa: E501
        if 'staff' in local_var_params and local_var_params['staff'] is not None:  # noqa: E501
            query_params.append(('staff', local_var_params['staff']))  # noqa: E501
        if 'photosize' in local_var_params and local_var_params['photosize'] is not None:  # noqa: E501
            query_params.append(('photosize', local_var_params['photosize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/waitingline/signinuser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
