# coding: utf-8

"""
    AccuCampus OpenAPI 3

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class RatingApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def rating_flag(self, id, **kwargs):  # noqa: E501
        """Flags one rating for moderation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_flag(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The rating to flag. (required)
        :param str comment: Comment why should this should be removed.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.rating_flag_with_http_info(id, **kwargs)  # noqa: E501

    def rating_flag_with_http_info(self, id, **kwargs):  # noqa: E501
        """Flags one rating for moderation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_flag_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The rating to flag. (required)
        :param str comment: Comment why should this should be removed.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'comment'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rating_flag" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `rating_flag`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'comment' in local_var_params and local_var_params['comment'] is not None:  # noqa: E501
            query_params.append(('comment', local_var_params['comment']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rating/flag', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rating_flagcomment(self, id, **kwargs):  # noqa: E501
        """Flags one comment for moderation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_flagcomment(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The comment to flag. (required)
        :param str comment: Comment why should this should be removed.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.rating_flagcomment_with_http_info(id, **kwargs)  # noqa: E501

    def rating_flagcomment_with_http_info(self, id, **kwargs):  # noqa: E501
        """Flags one comment for moderation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_flagcomment_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: The comment to flag. (required)
        :param str comment: Comment why should this should be removed.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'comment'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rating_flagcomment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `rating_flagcomment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'comment' in local_var_params and local_var_params['comment'] is not None:  # noqa: E501
            query_params.append(('comment', local_var_params['comment']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rating/flagcomment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rating_get(self, type, entityids, **kwargs):  # noqa: E501
        """Get rating for one or more entities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_get(type, entityids, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type: The entity type to get the rating. (required)
        :param str entityids: List of ids to get the ratings. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.rating_get_with_http_info(type, entityids, **kwargs)  # noqa: E501

    def rating_get_with_http_info(self, type, entityids, **kwargs):  # noqa: E501
        """Get rating for one or more entities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_get_with_http_info(type, entityids, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type: The entity type to get the rating. (required)
        :param str entityids: List of ids to get the ratings. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'type',
            'entityids'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rating_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in local_var_params or  # noqa: E501
                                                        local_var_params['type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type` when calling `rating_get`")  # noqa: E501
        # verify the required parameter 'entityids' is set
        if self.api_client.client_side_validation and ('entityids' not in local_var_params or  # noqa: E501
                                                        local_var_params['entityids'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `entityids` when calling `rating_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'entityids' in local_var_params and local_var_params['entityids'] is not None:  # noqa: E501
            query_params.append(('entityids', local_var_params['entityids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rating/get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rating_getall(self, type, entityid, **kwargs):  # noqa: E501
        """Gets the full ratings and comments for a specific entity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_getall(type, entityid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type: The entity type to get the rating. (required)
        :param str entityid: Id of the entity to get the ratings. (required)
        :param bool mostrecentfirst: True to show most recent first, otherwise most helpful first.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.rating_getall_with_http_info(type, entityid, **kwargs)  # noqa: E501

    def rating_getall_with_http_info(self, type, entityid, **kwargs):  # noqa: E501
        """Gets the full ratings and comments for a specific entity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_getall_with_http_info(type, entityid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type: The entity type to get the rating. (required)
        :param str entityid: Id of the entity to get the ratings. (required)
        :param bool mostrecentfirst: True to show most recent first, otherwise most helpful first.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'type',
            'entityid',
            'mostrecentfirst'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rating_getall" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in local_var_params or  # noqa: E501
                                                        local_var_params['type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type` when calling `rating_getall`")  # noqa: E501
        # verify the required parameter 'entityid' is set
        if self.api_client.client_side_validation and ('entityid' not in local_var_params or  # noqa: E501
                                                        local_var_params['entityid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `entityid` when calling `rating_getall`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'entityid' in local_var_params and local_var_params['entityid'] is not None:  # noqa: E501
            query_params.append(('entityid', local_var_params['entityid']))  # noqa: E501
        if 'mostrecentfirst' in local_var_params and local_var_params['mostrecentfirst'] is not None:  # noqa: E501
            query_params.append(('mostrecentfirst', local_var_params['mostrecentfirst']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rating/getall', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rating_getcomments(self, ratingid, **kwargs):  # noqa: E501
        """Gets all the comments for a rating  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_getcomments(ratingid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ratingid: The ID of the rating to get all comments. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.rating_getcomments_with_http_info(ratingid, **kwargs)  # noqa: E501

    def rating_getcomments_with_http_info(self, ratingid, **kwargs):  # noqa: E501
        """Gets all the comments for a rating  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_getcomments_with_http_info(ratingid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ratingid: The ID of the rating to get all comments. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'ratingid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rating_getcomments" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ratingid' is set
        if self.api_client.client_side_validation and ('ratingid' not in local_var_params or  # noqa: E501
                                                        local_var_params['ratingid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ratingid` when calling `rating_getcomments`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ratingid' in local_var_params and local_var_params['ratingid'] is not None:  # noqa: E501
            query_params.append(('ratingid', local_var_params['ratingid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rating/getcomments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rating_getpending(self, getgroup, **kwargs):  # noqa: E501
        """Gets info of pre-saved and pre-approved ratings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_getpending(getgroup, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str getgroup: The ID of the group of pending ratings to get. (required)
        :param str rateid: Rate this before returning.
        :param int rateval: The value used to rate the item specified in rateid.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.rating_getpending_with_http_info(getgroup, **kwargs)  # noqa: E501

    def rating_getpending_with_http_info(self, getgroup, **kwargs):  # noqa: E501
        """Gets info of pre-saved and pre-approved ratings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_getpending_with_http_info(getgroup, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str getgroup: The ID of the group of pending ratings to get. (required)
        :param str rateid: Rate this before returning.
        :param int rateval: The value used to rate the item specified in rateid.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'getgroup',
            'rateid',
            'rateval'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rating_getpending" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'getgroup' is set
        if self.api_client.client_side_validation and ('getgroup' not in local_var_params or  # noqa: E501
                                                        local_var_params['getgroup'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `getgroup` when calling `rating_getpending`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'getgroup' in local_var_params and local_var_params['getgroup'] is not None:  # noqa: E501
            query_params.append(('getgroup', local_var_params['getgroup']))  # noqa: E501
        if 'rateid' in local_var_params and local_var_params['rateid'] is not None:  # noqa: E501
            query_params.append(('rateid', local_var_params['rateid']))  # noqa: E501
        if 'rateval' in local_var_params and local_var_params['rateval'] is not None:  # noqa: E501
            query_params.append(('rateval', local_var_params['rateval']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rating/getpending', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rating_getpendingmoderation(self, **kwargs):  # noqa: E501
        """Shows a list of the ratings and comments that are pending for moderation  # noqa: E501

        Allows the user to view the list of pending ratings and comments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_getpendingmoderation(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.rating_getpendingmoderation_with_http_info(**kwargs)  # noqa: E501

    def rating_getpendingmoderation_with_http_info(self, **kwargs):  # noqa: E501
        """Shows a list of the ratings and comments that are pending for moderation  # noqa: E501

        Allows the user to view the list of pending ratings and comments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_getpendingmoderation_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rating_getpendingmoderation" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rating/getpendingmoderation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rating_moderate(self, type, id, approve, **kwargs):  # noqa: E501
        """Allows the user to accept or reject a comment  # noqa: E501

        Allows the user to approve or reject a comment or rating.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_moderate(type, id, approve, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type: Either 'rating' or 'comment' depending on what you want to moderate. (required)
        :param str id: Id of the rating or comment, as specified in type. (required)
        :param bool approve: True to approve, false to reject. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.rating_moderate_with_http_info(type, id, approve, **kwargs)  # noqa: E501

    def rating_moderate_with_http_info(self, type, id, approve, **kwargs):  # noqa: E501
        """Allows the user to accept or reject a comment  # noqa: E501

        Allows the user to approve or reject a comment or rating.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_moderate_with_http_info(type, id, approve, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type: Either 'rating' or 'comment' depending on what you want to moderate. (required)
        :param str id: Id of the rating or comment, as specified in type. (required)
        :param bool approve: True to approve, false to reject. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'type',
            'id',
            'approve'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rating_moderate" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in local_var_params or  # noqa: E501
                                                        local_var_params['type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type` when calling `rating_moderate`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `rating_moderate`")  # noqa: E501
        # verify the required parameter 'approve' is set
        if self.api_client.client_side_validation and ('approve' not in local_var_params or  # noqa: E501
                                                        local_var_params['approve'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `approve` when calling `rating_moderate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'approve' in local_var_params and local_var_params['approve'] is not None:  # noqa: E501
            query_params.append(('approve', local_var_params['approve']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rating/moderate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rating_postcomment(self, ratingid, comment, annonymous, **kwargs):  # noqa: E501
        """Posts a comments for in a rating  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_postcomment(ratingid, comment, annonymous, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ratingid: The ID of the rating to post the comment. (required)
        :param str comment: Text of the comment to post. (required)
        :param bool annonymous: True to post the comment annonymously. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.rating_postcomment_with_http_info(ratingid, comment, annonymous, **kwargs)  # noqa: E501

    def rating_postcomment_with_http_info(self, ratingid, comment, annonymous, **kwargs):  # noqa: E501
        """Posts a comments for in a rating  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_postcomment_with_http_info(ratingid, comment, annonymous, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ratingid: The ID of the rating to post the comment. (required)
        :param str comment: Text of the comment to post. (required)
        :param bool annonymous: True to post the comment annonymously. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'ratingid',
            'comment',
            'annonymous'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rating_postcomment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ratingid' is set
        if self.api_client.client_side_validation and ('ratingid' not in local_var_params or  # noqa: E501
                                                        local_var_params['ratingid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ratingid` when calling `rating_postcomment`")  # noqa: E501
        # verify the required parameter 'comment' is set
        if self.api_client.client_side_validation and ('comment' not in local_var_params or  # noqa: E501
                                                        local_var_params['comment'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `comment` when calling `rating_postcomment`")  # noqa: E501
        # verify the required parameter 'annonymous' is set
        if self.api_client.client_side_validation and ('annonymous' not in local_var_params or  # noqa: E501
                                                        local_var_params['annonymous'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `annonymous` when calling `rating_postcomment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ratingid' in local_var_params and local_var_params['ratingid'] is not None:  # noqa: E501
            query_params.append(('ratingid', local_var_params['ratingid']))  # noqa: E501
        if 'comment' in local_var_params and local_var_params['comment'] is not None:  # noqa: E501
            query_params.append(('comment', local_var_params['comment']))  # noqa: E501
        if 'annonymous' in local_var_params and local_var_params['annonymous'] is not None:  # noqa: E501
            query_params.append(('annonymous', local_var_params['annonymous']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rating/postcomment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rating_rate(self, type, entityid, annonymous, **kwargs):  # noqa: E501
        """Rates one entity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_rate(type, entityid, annonymous, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type: The entity type to rate. (required)
        :param str entityid: Id of the entity to rate. (required)
        :param bool annonymous: Whether to post as annonymous. (required)
        :param int value: Value from 0 to 100 with the rating.
        :param str comment: Comment associated with this review. Comment can be updated later on another request too.
        :param bool updatecomment: Whether to update the comments. Defaults to true.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.rating_rate_with_http_info(type, entityid, annonymous, **kwargs)  # noqa: E501

    def rating_rate_with_http_info(self, type, entityid, annonymous, **kwargs):  # noqa: E501
        """Rates one entity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_rate_with_http_info(type, entityid, annonymous, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type: The entity type to rate. (required)
        :param str entityid: Id of the entity to rate. (required)
        :param bool annonymous: Whether to post as annonymous. (required)
        :param int value: Value from 0 to 100 with the rating.
        :param str comment: Comment associated with this review. Comment can be updated later on another request too.
        :param bool updatecomment: Whether to update the comments. Defaults to true.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'type',
            'entityid',
            'annonymous',
            'value',
            'comment',
            'updatecomment'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rating_rate" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in local_var_params or  # noqa: E501
                                                        local_var_params['type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type` when calling `rating_rate`")  # noqa: E501
        # verify the required parameter 'entityid' is set
        if self.api_client.client_side_validation and ('entityid' not in local_var_params or  # noqa: E501
                                                        local_var_params['entityid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `entityid` when calling `rating_rate`")  # noqa: E501
        # verify the required parameter 'annonymous' is set
        if self.api_client.client_side_validation and ('annonymous' not in local_var_params or  # noqa: E501
                                                        local_var_params['annonymous'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `annonymous` when calling `rating_rate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'entityid' in local_var_params and local_var_params['entityid'] is not None:  # noqa: E501
            query_params.append(('entityid', local_var_params['entityid']))  # noqa: E501
        if 'value' in local_var_params and local_var_params['value'] is not None:  # noqa: E501
            query_params.append(('value', local_var_params['value']))  # noqa: E501
        if 'annonymous' in local_var_params and local_var_params['annonymous'] is not None:  # noqa: E501
            query_params.append(('annonymous', local_var_params['annonymous']))  # noqa: E501
        if 'comment' in local_var_params and local_var_params['comment'] is not None:  # noqa: E501
            query_params.append(('comment', local_var_params['comment']))  # noqa: E501
        if 'updatecomment' in local_var_params and local_var_params['updatecomment'] is not None:  # noqa: E501
            query_params.append(('updatecomment', local_var_params['updatecomment']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rating/rate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rating_ratepending(self, group, annonymous, **kwargs):  # noqa: E501
        """Rates a pre-saved and pre-approved entity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_ratepending(group, annonymous, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str group: The ID of the group of with pre-approved ratings. (required)
        :param bool annonymous: Whether to post as annonymous. (required)
        :param str rateid: Rate this before returning.
        :param int value: Value from 0 to 100 with the rating.
        :param str comment: Comment associated with this review. Comment can be updated later on another request too.
        :param bool updatecomment: Whether to update the comments. Defaults to true.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.rating_ratepending_with_http_info(group, annonymous, **kwargs)  # noqa: E501

    def rating_ratepending_with_http_info(self, group, annonymous, **kwargs):  # noqa: E501
        """Rates a pre-saved and pre-approved entity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_ratepending_with_http_info(group, annonymous, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str group: The ID of the group of with pre-approved ratings. (required)
        :param bool annonymous: Whether to post as annonymous. (required)
        :param str rateid: Rate this before returning.
        :param int value: Value from 0 to 100 with the rating.
        :param str comment: Comment associated with this review. Comment can be updated later on another request too.
        :param bool updatecomment: Whether to update the comments. Defaults to true.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'group',
            'annonymous',
            'rateid',
            'value',
            'comment',
            'updatecomment'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rating_ratepending" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in local_var_params or  # noqa: E501
                                                        local_var_params['group'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `group` when calling `rating_ratepending`")  # noqa: E501
        # verify the required parameter 'annonymous' is set
        if self.api_client.client_side_validation and ('annonymous' not in local_var_params or  # noqa: E501
                                                        local_var_params['annonymous'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `annonymous` when calling `rating_ratepending`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'group' in local_var_params and local_var_params['group'] is not None:  # noqa: E501
            query_params.append(('group', local_var_params['group']))  # noqa: E501
        if 'rateid' in local_var_params and local_var_params['rateid'] is not None:  # noqa: E501
            query_params.append(('rateid', local_var_params['rateid']))  # noqa: E501
        if 'value' in local_var_params and local_var_params['value'] is not None:  # noqa: E501
            query_params.append(('value', local_var_params['value']))  # noqa: E501
        if 'annonymous' in local_var_params and local_var_params['annonymous'] is not None:  # noqa: E501
            query_params.append(('annonymous', local_var_params['annonymous']))  # noqa: E501
        if 'comment' in local_var_params and local_var_params['comment'] is not None:  # noqa: E501
            query_params.append(('comment', local_var_params['comment']))  # noqa: E501
        if 'updatecomment' in local_var_params and local_var_params['updatecomment'] is not None:  # noqa: E501
            query_params.append(('updatecomment', local_var_params['updatecomment']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rating/ratepending', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rating_vote(self, ratingid, vote, **kwargs):  # noqa: E501
        """Votes up or down a rating  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_vote(ratingid, vote, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ratingid: The ID of the rating to vote on. (required)
        :param int vote: 1 to vote up, -1 to vote down. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.rating_vote_with_http_info(ratingid, vote, **kwargs)  # noqa: E501

    def rating_vote_with_http_info(self, ratingid, vote, **kwargs):  # noqa: E501
        """Votes up or down a rating  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rating_vote_with_http_info(ratingid, vote, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ratingid: The ID of the rating to vote on. (required)
        :param int vote: 1 to vote up, -1 to vote down. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'ratingid',
            'vote'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rating_vote" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ratingid' is set
        if self.api_client.client_side_validation and ('ratingid' not in local_var_params or  # noqa: E501
                                                        local_var_params['ratingid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ratingid` when calling `rating_vote`")  # noqa: E501
        # verify the required parameter 'vote' is set
        if self.api_client.client_side_validation and ('vote' not in local_var_params or  # noqa: E501
                                                        local_var_params['vote'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vote` when calling `rating_vote`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ratingid' in local_var_params and local_var_params['ratingid'] is not None:  # noqa: E501
            query_params.append(('ratingid', local_var_params['ratingid']))  # noqa: E501
        if 'vote' in local_var_params and local_var_params['vote'] is not None:  # noqa: E501
            query_params.append(('vote', local_var_params['vote']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rating/vote', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
