# coding: utf-8

"""
    AccuCampus OpenAPI 3

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class EventregApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def eventreg_addme(self, eventid, listname, **kwargs):  # noqa: E501
        """Register current user to a course  # noqa: E501

        Allows the user to make themselves available for individual courses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_addme(eventid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str eventid: The id of the event. (required)
        :param str listname: The name of the list where the user has to be registered. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_addme_with_http_info(eventid, listname, **kwargs)  # noqa: E501

    def eventreg_addme_with_http_info(self, eventid, listname, **kwargs):  # noqa: E501
        """Register current user to a course  # noqa: E501

        Allows the user to make themselves available for individual courses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_addme_with_http_info(eventid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str eventid: The id of the event. (required)
        :param str listname: The name of the list where the user has to be registered. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'eventid',
            'listname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_addme" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'eventid' is set
        if self.api_client.client_side_validation and ('eventid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eventid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eventid` when calling `eventreg_addme`")  # noqa: E501
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_addme`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'eventid' in local_var_params and local_var_params['eventid'] is not None:  # noqa: E501
            query_params.append(('eventid', local_var_params['eventid']))  # noqa: E501
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/addme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_addmetoall(self, listname, **kwargs):  # noqa: E501
        """Register current user to all courses  # noqa: E501

        Allows the user to make themselves available for all courses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_addmetoall(listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str listname: The name of the list where the user has to be registered. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_addmetoall_with_http_info(listname, **kwargs)  # noqa: E501

    def eventreg_addmetoall_with_http_info(self, listname, **kwargs):  # noqa: E501
        """Register current user to all courses  # noqa: E501

        Allows the user to make themselves available for all courses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_addmetoall_with_http_info(listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str listname: The name of the list where the user has to be registered. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'listname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_addmetoall" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_addmetoall`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/addmetoall', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_addmetogroup(self, codegroup, listname, **kwargs):  # noqa: E501
        """Register current user to a course group  # noqa: E501

        Allows the user to make themselves available for a course group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_addmetogroup(codegroup, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str codegroup: The code used to group events. (required)
        :param str listname: The name of the list where the user has to be registered. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_addmetogroup_with_http_info(codegroup, listname, **kwargs)  # noqa: E501

    def eventreg_addmetogroup_with_http_info(self, codegroup, listname, **kwargs):  # noqa: E501
        """Register current user to a course group  # noqa: E501

        Allows the user to make themselves available for a course group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_addmetogroup_with_http_info(codegroup, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str codegroup: The code used to group events. (required)
        :param str listname: The name of the list where the user has to be registered. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'codegroup',
            'listname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_addmetogroup" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'codegroup' is set
        if self.api_client.client_side_validation and ('codegroup' not in local_var_params or  # noqa: E501
                                                        local_var_params['codegroup'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `codegroup` when calling `eventreg_addmetogroup`")  # noqa: E501
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_addmetogroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'codegroup' in local_var_params and local_var_params['codegroup'] is not None:  # noqa: E501
            query_params.append(('codegroup', local_var_params['codegroup']))  # noqa: E501
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/addmetogroup', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_adduser(self, userid, eventid, listname, **kwargs):  # noqa: E501
        """Register a user to a course for attendance  # noqa: E501

        Allows the user to register a user to a course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_adduser(userid, eventid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to add. (required)
        :param str eventid: The id of the event. (required)
        :param str listname: The name of the list where the user has to be registered. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_adduser_with_http_info(userid, eventid, listname, **kwargs)  # noqa: E501

    def eventreg_adduser_with_http_info(self, userid, eventid, listname, **kwargs):  # noqa: E501
        """Register a user to a course for attendance  # noqa: E501

        Allows the user to register a user to a course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_adduser_with_http_info(userid, eventid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to add. (required)
        :param str eventid: The id of the event. (required)
        :param str listname: The name of the list where the user has to be registered. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'userid',
            'eventid',
            'listname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_adduser" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'userid' is set
        if self.api_client.client_side_validation and ('userid' not in local_var_params or  # noqa: E501
                                                        local_var_params['userid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `userid` when calling `eventreg_adduser`")  # noqa: E501
        # verify the required parameter 'eventid' is set
        if self.api_client.client_side_validation and ('eventid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eventid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eventid` when calling `eventreg_adduser`")  # noqa: E501
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_adduser`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'userid' in local_var_params and local_var_params['userid'] is not None:  # noqa: E501
            query_params.append(('userid', local_var_params['userid']))  # noqa: E501
        if 'eventid' in local_var_params and local_var_params['eventid'] is not None:  # noqa: E501
            query_params.append(('eventid', local_var_params['eventid']))  # noqa: E501
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/adduser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_addusertoall(self, userid, listname, **kwargs):  # noqa: E501
        """Register a user to assist with all courses  # noqa: E501

        Allows the user to make a staff member available to assist with all courses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_addusertoall(userid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to add. (required)
        :param str listname: The name of the list where the user has to be registered. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_addusertoall_with_http_info(userid, listname, **kwargs)  # noqa: E501

    def eventreg_addusertoall_with_http_info(self, userid, listname, **kwargs):  # noqa: E501
        """Register a user to assist with all courses  # noqa: E501

        Allows the user to make a staff member available to assist with all courses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_addusertoall_with_http_info(userid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to add. (required)
        :param str listname: The name of the list where the user has to be registered. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'userid',
            'listname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_addusertoall" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'userid' is set
        if self.api_client.client_side_validation and ('userid' not in local_var_params or  # noqa: E501
                                                        local_var_params['userid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `userid` when calling `eventreg_addusertoall`")  # noqa: E501
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_addusertoall`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'userid' in local_var_params and local_var_params['userid'] is not None:  # noqa: E501
            query_params.append(('userid', local_var_params['userid']))  # noqa: E501
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/addusertoall', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_addusertogroup(self, userid, codegroup, listname, **kwargs):  # noqa: E501
        """Register a user to an course group  # noqa: E501

        Allows the user to make a staff member available for a course group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_addusertogroup(userid, codegroup, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to add. (required)
        :param str codegroup: The code used to group events. (required)
        :param str listname: The name of the list where the user has to be registered. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_addusertogroup_with_http_info(userid, codegroup, listname, **kwargs)  # noqa: E501

    def eventreg_addusertogroup_with_http_info(self, userid, codegroup, listname, **kwargs):  # noqa: E501
        """Register a user to an course group  # noqa: E501

        Allows the user to make a staff member available for a course group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_addusertogroup_with_http_info(userid, codegroup, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to add. (required)
        :param str codegroup: The code used to group events. (required)
        :param str listname: The name of the list where the user has to be registered. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'userid',
            'codegroup',
            'listname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_addusertogroup" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'userid' is set
        if self.api_client.client_side_validation and ('userid' not in local_var_params or  # noqa: E501
                                                        local_var_params['userid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `userid` when calling `eventreg_addusertogroup`")  # noqa: E501
        # verify the required parameter 'codegroup' is set
        if self.api_client.client_side_validation and ('codegroup' not in local_var_params or  # noqa: E501
                                                        local_var_params['codegroup'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `codegroup` when calling `eventreg_addusertogroup`")  # noqa: E501
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_addusertogroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'userid' in local_var_params and local_var_params['userid'] is not None:  # noqa: E501
            query_params.append(('userid', local_var_params['userid']))  # noqa: E501
        if 'codegroup' in local_var_params and local_var_params['codegroup'] is not None:  # noqa: E501
            query_params.append(('codegroup', local_var_params['codegroup']))  # noqa: E501
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/addusertogroup', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_getevents(self, userid, listname, **kwargs):  # noqa: E501
        """View course registration by user  # noqa: E501

        Allows the user to view all courses a given user is registered to, provided they have permission to view that user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_getevents(userid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The user id to list events. (required)
        :param str listname: The name of the list where the user is registered. (required)
        :param str termid: The term id to list events.
        :param str namefilter: The value used to filter the events by name.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_getevents_with_http_info(userid, listname, **kwargs)  # noqa: E501

    def eventreg_getevents_with_http_info(self, userid, listname, **kwargs):  # noqa: E501
        """View course registration by user  # noqa: E501

        Allows the user to view all courses a given user is registered to, provided they have permission to view that user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_getevents_with_http_info(userid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The user id to list events. (required)
        :param str listname: The name of the list where the user is registered. (required)
        :param str termid: The term id to list events.
        :param str namefilter: The value used to filter the events by name.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'userid',
            'listname',
            'termid',
            'namefilter'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_getevents" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'userid' is set
        if self.api_client.client_side_validation and ('userid' not in local_var_params or  # noqa: E501
                                                        local_var_params['userid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `userid` when calling `eventreg_getevents`")  # noqa: E501
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_getevents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'userid' in local_var_params and local_var_params['userid'] is not None:  # noqa: E501
            query_params.append(('userid', local_var_params['userid']))  # noqa: E501
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501
        if 'termid' in local_var_params and local_var_params['termid'] is not None:  # noqa: E501
            query_params.append(('termid', local_var_params['termid']))  # noqa: E501
        if 'namefilter' in local_var_params and local_var_params['namefilter'] is not None:  # noqa: E501
            query_params.append(('namefilter', local_var_params['namefilter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/getevents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_getgroups(self, userid, listname, **kwargs):  # noqa: E501
        """Lists the course group registrations of a user  # noqa: E501

        Allows the user to view the course groups a staff member is available for.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_getgroups(userid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The user id to list events. (required)
        :param str listname: The name of the list where the user is registered. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_getgroups_with_http_info(userid, listname, **kwargs)  # noqa: E501

    def eventreg_getgroups_with_http_info(self, userid, listname, **kwargs):  # noqa: E501
        """Lists the course group registrations of a user  # noqa: E501

        Allows the user to view the course groups a staff member is available for.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_getgroups_with_http_info(userid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The user id to list events. (required)
        :param str listname: The name of the list where the user is registered. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'userid',
            'listname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_getgroups" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'userid' is set
        if self.api_client.client_side_validation and ('userid' not in local_var_params or  # noqa: E501
                                                        local_var_params['userid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `userid` when calling `eventreg_getgroups`")  # noqa: E501
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_getgroups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'userid' in local_var_params and local_var_params['userid'] is not None:  # noqa: E501
            query_params.append(('userid', local_var_params['userid']))  # noqa: E501
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/getgroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_getmyevents(self, listname, **kwargs):  # noqa: E501
        """View the event registrations of the current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_getmyevents(listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str listname: The name of the list where the user is registered. (required)
        :param str termid: The term id to list events.
        :param str namefilter: The value used to filter the events by name.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_getmyevents_with_http_info(listname, **kwargs)  # noqa: E501

    def eventreg_getmyevents_with_http_info(self, listname, **kwargs):  # noqa: E501
        """View the event registrations of the current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_getmyevents_with_http_info(listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str listname: The name of the list where the user is registered. (required)
        :param str termid: The term id to list events.
        :param str namefilter: The value used to filter the events by name.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'listname',
            'termid',
            'namefilter'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_getmyevents" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_getmyevents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501
        if 'termid' in local_var_params and local_var_params['termid'] is not None:  # noqa: E501
            query_params.append(('termid', local_var_params['termid']))  # noqa: E501
        if 'namefilter' in local_var_params and local_var_params['namefilter'] is not None:  # noqa: E501
            query_params.append(('namefilter', local_var_params['namefilter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/getmyevents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_getmygroups(self, listname, **kwargs):  # noqa: E501
        """View all current user registrations to course groups  # noqa: E501

        Allows the user to view all his registrations to course groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_getmygroups(listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str listname: The name of the list where the user is registered. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_getmygroups_with_http_info(listname, **kwargs)  # noqa: E501

    def eventreg_getmygroups_with_http_info(self, listname, **kwargs):  # noqa: E501
        """View all current user registrations to course groups  # noqa: E501

        Allows the user to view all his registrations to course groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_getmygroups_with_http_info(listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str listname: The name of the list where the user is registered. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'listname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_getmygroups" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_getmygroups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/getmygroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_getusers(self, eventid, listname, **kwargs):  # noqa: E501
        """View course registration  # noqa: E501

        Allows the user to view all users registered for an individual course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_getusers(eventid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str eventid: The event id to list users. (required)
        :param str listname: The name of the list to get. (required)
        :param int photosize: The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_getusers_with_http_info(eventid, listname, **kwargs)  # noqa: E501

    def eventreg_getusers_with_http_info(self, eventid, listname, **kwargs):  # noqa: E501
        """View course registration  # noqa: E501

        Allows the user to view all users registered for an individual course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_getusers_with_http_info(eventid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str eventid: The event id to list users. (required)
        :param str listname: The name of the list to get. (required)
        :param int photosize: The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'eventid',
            'listname',
            'photosize'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_getusers" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'eventid' is set
        if self.api_client.client_side_validation and ('eventid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eventid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eventid` when calling `eventreg_getusers`")  # noqa: E501
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_getusers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'eventid' in local_var_params and local_var_params['eventid'] is not None:  # noqa: E501
            query_params.append(('eventid', local_var_params['eventid']))  # noqa: E501
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501
        if 'photosize' in local_var_params and local_var_params['photosize'] is not None:  # noqa: E501
            query_params.append(('photosize', local_var_params['photosize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/getusers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_getusersfromgroup(self, codegroup, listname, **kwargs):  # noqa: E501
        """Lists the registrations for a course group  # noqa: E501

        Allows the user the get the staff members registered to a specific course group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_getusersfromgroup(codegroup, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str codegroup: The code group to list users. (required)
        :param str listname: The name of the list to get. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_getusersfromgroup_with_http_info(codegroup, listname, **kwargs)  # noqa: E501

    def eventreg_getusersfromgroup_with_http_info(self, codegroup, listname, **kwargs):  # noqa: E501
        """Lists the registrations for a course group  # noqa: E501

        Allows the user the get the staff members registered to a specific course group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_getusersfromgroup_with_http_info(codegroup, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str codegroup: The code group to list users. (required)
        :param str listname: The name of the list to get. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'codegroup',
            'listname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_getusersfromgroup" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'codegroup' is set
        if self.api_client.client_side_validation and ('codegroup' not in local_var_params or  # noqa: E501
                                                        local_var_params['codegroup'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `codegroup` when calling `eventreg_getusersfromgroup`")  # noqa: E501
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_getusersfromgroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'codegroup' in local_var_params and local_var_params['codegroup'] is not None:  # noqa: E501
            query_params.append(('codegroup', local_var_params['codegroup']))  # noqa: E501
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/getusersfromgroup', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_getuserstoall(self, listname, **kwargs):  # noqa: E501
        """View the users that are registered to all courses  # noqa: E501

        Allows the user to view all staff members available for all courses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_getuserstoall(listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str listname: The name of the list to get. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_getuserstoall_with_http_info(listname, **kwargs)  # noqa: E501

    def eventreg_getuserstoall_with_http_info(self, listname, **kwargs):  # noqa: E501
        """View the users that are registered to all courses  # noqa: E501

        Allows the user to view all staff members available for all courses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_getuserstoall_with_http_info(listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str listname: The name of the list to get. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'listname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_getuserstoall" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_getuserstoall`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/getuserstoall', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_removeme(self, eventid, listname, **kwargs):  # noqa: E501
        """Unregister current user from a course  # noqa: E501

        Allows the user to remove themselves from registration to a course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_removeme(eventid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str eventid: The id of the event. (required)
        :param str listname: The name of the list where the user is registered. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_removeme_with_http_info(eventid, listname, **kwargs)  # noqa: E501

    def eventreg_removeme_with_http_info(self, eventid, listname, **kwargs):  # noqa: E501
        """Unregister current user from a course  # noqa: E501

        Allows the user to remove themselves from registration to a course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_removeme_with_http_info(eventid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str eventid: The id of the event. (required)
        :param str listname: The name of the list where the user is registered. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'eventid',
            'listname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_removeme" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'eventid' is set
        if self.api_client.client_side_validation and ('eventid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eventid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eventid` when calling `eventreg_removeme`")  # noqa: E501
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_removeme`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'eventid' in local_var_params and local_var_params['eventid'] is not None:  # noqa: E501
            query_params.append(('eventid', local_var_params['eventid']))  # noqa: E501
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/removeme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_removemefromall(self, listname, **kwargs):  # noqa: E501
        """Remove current user from the registration to all courses  # noqa: E501

        Allows the user to remove themselves from availability to all courses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_removemefromall(listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str listname: The name of the list where the user is registered. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_removemefromall_with_http_info(listname, **kwargs)  # noqa: E501

    def eventreg_removemefromall_with_http_info(self, listname, **kwargs):  # noqa: E501
        """Remove current user from the registration to all courses  # noqa: E501

        Allows the user to remove themselves from availability to all courses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_removemefromall_with_http_info(listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str listname: The name of the list where the user is registered. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'listname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_removemefromall" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_removemefromall`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/removemefromall', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_removemefromgroup(self, codegroup, listname, **kwargs):  # noqa: E501
        """Remove current user from a course group  # noqa: E501

        Allows the user to remove themselves from availability to a course group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_removemefromgroup(codegroup, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str codegroup: The code group of the events/courses. (required)
        :param str listname: The name of the list where the user is registered. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_removemefromgroup_with_http_info(codegroup, listname, **kwargs)  # noqa: E501

    def eventreg_removemefromgroup_with_http_info(self, codegroup, listname, **kwargs):  # noqa: E501
        """Remove current user from a course group  # noqa: E501

        Allows the user to remove themselves from availability to a course group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_removemefromgroup_with_http_info(codegroup, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str codegroup: The code group of the events/courses. (required)
        :param str listname: The name of the list where the user is registered. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'codegroup',
            'listname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_removemefromgroup" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'codegroup' is set
        if self.api_client.client_side_validation and ('codegroup' not in local_var_params or  # noqa: E501
                                                        local_var_params['codegroup'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `codegroup` when calling `eventreg_removemefromgroup`")  # noqa: E501
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_removemefromgroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'codegroup' in local_var_params and local_var_params['codegroup'] is not None:  # noqa: E501
            query_params.append(('codegroup', local_var_params['codegroup']))  # noqa: E501
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/removemefromgroup', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_removeuser(self, userid, eventid, listname, **kwargs):  # noqa: E501
        """Remove a user from a course  # noqa: E501

        Allows the user to remove a user from a course's registration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_removeuser(userid, eventid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to remove. (required)
        :param str eventid: The id of the event. (required)
        :param str listname: The name of the list where the user is registered. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_removeuser_with_http_info(userid, eventid, listname, **kwargs)  # noqa: E501

    def eventreg_removeuser_with_http_info(self, userid, eventid, listname, **kwargs):  # noqa: E501
        """Remove a user from a course  # noqa: E501

        Allows the user to remove a user from a course's registration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_removeuser_with_http_info(userid, eventid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to remove. (required)
        :param str eventid: The id of the event. (required)
        :param str listname: The name of the list where the user is registered. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'userid',
            'eventid',
            'listname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_removeuser" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'userid' is set
        if self.api_client.client_side_validation and ('userid' not in local_var_params or  # noqa: E501
                                                        local_var_params['userid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `userid` when calling `eventreg_removeuser`")  # noqa: E501
        # verify the required parameter 'eventid' is set
        if self.api_client.client_side_validation and ('eventid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eventid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eventid` when calling `eventreg_removeuser`")  # noqa: E501
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_removeuser`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'userid' in local_var_params and local_var_params['userid'] is not None:  # noqa: E501
            query_params.append(('userid', local_var_params['userid']))  # noqa: E501
        if 'eventid' in local_var_params and local_var_params['eventid'] is not None:  # noqa: E501
            query_params.append(('eventid', local_var_params['eventid']))  # noqa: E501
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/removeuser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_removeuserfromall(self, userid, listname, **kwargs):  # noqa: E501
        """Remove a user from the registration to all courses  # noqa: E501

        Allows the user to remove a staff member from availability to all courses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_removeuserfromall(userid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to remove. (required)
        :param str listname: The name of the list where the user is registered. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_removeuserfromall_with_http_info(userid, listname, **kwargs)  # noqa: E501

    def eventreg_removeuserfromall_with_http_info(self, userid, listname, **kwargs):  # noqa: E501
        """Remove a user from the registration to all courses  # noqa: E501

        Allows the user to remove a staff member from availability to all courses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_removeuserfromall_with_http_info(userid, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to remove. (required)
        :param str listname: The name of the list where the user is registered. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'userid',
            'listname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_removeuserfromall" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'userid' is set
        if self.api_client.client_side_validation and ('userid' not in local_var_params or  # noqa: E501
                                                        local_var_params['userid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `userid` when calling `eventreg_removeuserfromall`")  # noqa: E501
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_removeuserfromall`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'userid' in local_var_params and local_var_params['userid'] is not None:  # noqa: E501
            query_params.append(('userid', local_var_params['userid']))  # noqa: E501
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/removeuserfromall', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eventreg_removeuserfromgroup(self, userid, codegroup, listname, **kwargs):  # noqa: E501
        """Remove a user from a course group  # noqa: E501

        Allows the user to remove a staff member from availability to a course group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_removeuserfromgroup(userid, codegroup, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to remove. (required)
        :param str codegroup: The code group of the events/courses. (required)
        :param str listname: The name of the list where the user is registered. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.eventreg_removeuserfromgroup_with_http_info(userid, codegroup, listname, **kwargs)  # noqa: E501

    def eventreg_removeuserfromgroup_with_http_info(self, userid, codegroup, listname, **kwargs):  # noqa: E501
        """Remove a user from a course group  # noqa: E501

        Allows the user to remove a staff member from availability to a course group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.eventreg_removeuserfromgroup_with_http_info(userid, codegroup, listname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to remove. (required)
        :param str codegroup: The code group of the events/courses. (required)
        :param str listname: The name of the list where the user is registered. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'userid',
            'codegroup',
            'listname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eventreg_removeuserfromgroup" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'userid' is set
        if self.api_client.client_side_validation and ('userid' not in local_var_params or  # noqa: E501
                                                        local_var_params['userid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `userid` when calling `eventreg_removeuserfromgroup`")  # noqa: E501
        # verify the required parameter 'codegroup' is set
        if self.api_client.client_side_validation and ('codegroup' not in local_var_params or  # noqa: E501
                                                        local_var_params['codegroup'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `codegroup` when calling `eventreg_removeuserfromgroup`")  # noqa: E501
        # verify the required parameter 'listname' is set
        if self.api_client.client_side_validation and ('listname' not in local_var_params or  # noqa: E501
                                                        local_var_params['listname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `listname` when calling `eventreg_removeuserfromgroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'userid' in local_var_params and local_var_params['userid'] is not None:  # noqa: E501
            query_params.append(('userid', local_var_params['userid']))  # noqa: E501
        if 'codegroup' in local_var_params and local_var_params['codegroup'] is not None:  # noqa: E501
            query_params.append(('codegroup', local_var_params['codegroup']))  # noqa: E501
        if 'listname' in local_var_params and local_var_params['listname'] is not None:  # noqa: E501
            query_params.append(('listname', local_var_params['listname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventreg/removeuserfromgroup', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
