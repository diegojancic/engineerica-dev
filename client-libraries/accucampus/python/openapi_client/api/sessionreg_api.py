# coding: utf-8

"""
    AccuCampus OpenAPI 3

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SessionregApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sessionreg_addcurrentuser(self, eventid, sessiondate, **kwargs):  # noqa: E501
        """Register current user to an event session  # noqa: E501

        Allows the user to register themselves for an event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_addcurrentuser(eventid, sessiondate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str eventid: The id of the event. (required)
        :param datetime sessiondate: The date and time when the session starts. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.sessionreg_addcurrentuser_with_http_info(eventid, sessiondate, **kwargs)  # noqa: E501

    def sessionreg_addcurrentuser_with_http_info(self, eventid, sessiondate, **kwargs):  # noqa: E501
        """Register current user to an event session  # noqa: E501

        Allows the user to register themselves for an event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_addcurrentuser_with_http_info(eventid, sessiondate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str eventid: The id of the event. (required)
        :param datetime sessiondate: The date and time when the session starts. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'eventid',
            'sessiondate'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessionreg_addcurrentuser" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'eventid' is set
        if self.api_client.client_side_validation and ('eventid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eventid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eventid` when calling `sessionreg_addcurrentuser`")  # noqa: E501
        # verify the required parameter 'sessiondate' is set
        if self.api_client.client_side_validation and ('sessiondate' not in local_var_params or  # noqa: E501
                                                        local_var_params['sessiondate'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sessiondate` when calling `sessionreg_addcurrentuser`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'eventid' in local_var_params and local_var_params['eventid'] is not None:  # noqa: E501
            query_params.append(('eventid', local_var_params['eventid']))  # noqa: E501
        if 'sessiondate' in local_var_params and local_var_params['sessiondate'] is not None:  # noqa: E501
            query_params.append(('sessiondate', local_var_params['sessiondate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sessionreg/addcurrentuser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessionreg_adduser(self, userid, eventid, sessiondate, **kwargs):  # noqa: E501
        """Register users for events  # noqa: E501

        Allows the user to register another user for an upcoming event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_adduser(userid, eventid, sessiondate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to add. (required)
        :param str eventid: The id of the event. (required)
        :param datetime sessiondate: The date and time when the session starts. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.sessionreg_adduser_with_http_info(userid, eventid, sessiondate, **kwargs)  # noqa: E501

    def sessionreg_adduser_with_http_info(self, userid, eventid, sessiondate, **kwargs):  # noqa: E501
        """Register users for events  # noqa: E501

        Allows the user to register another user for an upcoming event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_adduser_with_http_info(userid, eventid, sessiondate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to add. (required)
        :param str eventid: The id of the event. (required)
        :param datetime sessiondate: The date and time when the session starts. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'userid',
            'eventid',
            'sessiondate'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessionreg_adduser" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'userid' is set
        if self.api_client.client_side_validation and ('userid' not in local_var_params or  # noqa: E501
                                                        local_var_params['userid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `userid` when calling `sessionreg_adduser`")  # noqa: E501
        # verify the required parameter 'eventid' is set
        if self.api_client.client_side_validation and ('eventid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eventid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eventid` when calling `sessionreg_adduser`")  # noqa: E501
        # verify the required parameter 'sessiondate' is set
        if self.api_client.client_side_validation and ('sessiondate' not in local_var_params or  # noqa: E501
                                                        local_var_params['sessiondate'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sessiondate` when calling `sessionreg_adduser`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'userid' in local_var_params and local_var_params['userid'] is not None:  # noqa: E501
            query_params.append(('userid', local_var_params['userid']))  # noqa: E501
        if 'eventid' in local_var_params and local_var_params['eventid'] is not None:  # noqa: E501
            query_params.append(('eventid', local_var_params['eventid']))  # noqa: E501
        if 'sessiondate' in local_var_params and local_var_params['sessiondate'] is not None:  # noqa: E501
            query_params.append(('sessiondate', local_var_params['sessiondate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sessionreg/adduser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessionreg_getmysessions(self, **kwargs):  # noqa: E501
        """View all the sessions the logged user is registered to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_getmysessions(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param datetime date: Start date to filter the sessions.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.sessionreg_getmysessions_with_http_info(**kwargs)  # noqa: E501

    def sessionreg_getmysessions_with_http_info(self, **kwargs):  # noqa: E501
        """View all the sessions the logged user is registered to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_getmysessions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param datetime date: Start date to filter the sessions.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'date'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessionreg_getmysessions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date' in local_var_params and local_var_params['date'] is not None:  # noqa: E501
            query_params.append(('date', local_var_params['date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sessionreg/getmysessions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessionreg_getsessions(self, userid, **kwargs):  # noqa: E501
        """Lists the registrations for a specific user  # noqa: E501

        Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_getsessions(userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The user id to list sessions. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.sessionreg_getsessions_with_http_info(userid, **kwargs)  # noqa: E501

    def sessionreg_getsessions_with_http_info(self, userid, **kwargs):  # noqa: E501
        """Lists the registrations for a specific user  # noqa: E501

        Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_getsessions_with_http_info(userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The user id to list sessions. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'userid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessionreg_getsessions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'userid' is set
        if self.api_client.client_side_validation and ('userid' not in local_var_params or  # noqa: E501
                                                        local_var_params['userid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `userid` when calling `sessionreg_getsessions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'userid' in local_var_params and local_var_params['userid'] is not None:  # noqa: E501
            query_params.append(('userid', local_var_params['userid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sessionreg/getsessions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessionreg_getsettings(self, **kwargs):  # noqa: E501
        """Get the settings for session registration  # noqa: E501

        Allows the user to view a event's session registration settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_getsettings(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str locationid: The id of the location to save settings.
        :param str eventid: The id of the event to save settings.
        :param datetime sessiondate: The date and time when the session starts.
        :param bool noinherit: True to get the location/event/session specific settings without looking for the more global settings.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.sessionreg_getsettings_with_http_info(**kwargs)  # noqa: E501

    def sessionreg_getsettings_with_http_info(self, **kwargs):  # noqa: E501
        """Get the settings for session registration  # noqa: E501

        Allows the user to view a event's session registration settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_getsettings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str locationid: The id of the location to save settings.
        :param str eventid: The id of the event to save settings.
        :param datetime sessiondate: The date and time when the session starts.
        :param bool noinherit: True to get the location/event/session specific settings without looking for the more global settings.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'locationid',
            'eventid',
            'sessiondate',
            'noinherit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessionreg_getsettings" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locationid' in local_var_params and local_var_params['locationid'] is not None:  # noqa: E501
            query_params.append(('locationid', local_var_params['locationid']))  # noqa: E501
        if 'eventid' in local_var_params and local_var_params['eventid'] is not None:  # noqa: E501
            query_params.append(('eventid', local_var_params['eventid']))  # noqa: E501
        if 'sessiondate' in local_var_params and local_var_params['sessiondate'] is not None:  # noqa: E501
            query_params.append(('sessiondate', local_var_params['sessiondate']))  # noqa: E501
        if 'noinherit' in local_var_params and local_var_params['noinherit'] is not None:  # noqa: E501
            query_params.append(('noinherit', local_var_params['noinherit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sessionreg/getsettings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessionreg_getusers(self, eventid, sessiondate, **kwargs):  # noqa: E501
        """Lists the registrations for a specific session  # noqa: E501

        Allows the user to view the registration for a specified event session.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_getusers(eventid, sessiondate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str eventid: The event id to list sessions. (required)
        :param datetime sessiondate: The date of the session to find. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.sessionreg_getusers_with_http_info(eventid, sessiondate, **kwargs)  # noqa: E501

    def sessionreg_getusers_with_http_info(self, eventid, sessiondate, **kwargs):  # noqa: E501
        """Lists the registrations for a specific session  # noqa: E501

        Allows the user to view the registration for a specified event session.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_getusers_with_http_info(eventid, sessiondate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str eventid: The event id to list sessions. (required)
        :param datetime sessiondate: The date of the session to find. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'eventid',
            'sessiondate'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessionreg_getusers" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'eventid' is set
        if self.api_client.client_side_validation and ('eventid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eventid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eventid` when calling `sessionreg_getusers`")  # noqa: E501
        # verify the required parameter 'sessiondate' is set
        if self.api_client.client_side_validation and ('sessiondate' not in local_var_params or  # noqa: E501
                                                        local_var_params['sessiondate'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sessiondate` when calling `sessionreg_getusers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'eventid' in local_var_params and local_var_params['eventid'] is not None:  # noqa: E501
            query_params.append(('eventid', local_var_params['eventid']))  # noqa: E501
        if 'sessiondate' in local_var_params and local_var_params['sessiondate'] is not None:  # noqa: E501
            query_params.append(('sessiondate', local_var_params['sessiondate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sessionreg/getusers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessionreg_listsessions(self, eventid, **kwargs):  # noqa: E501
        """List the sessions available for a specific event  # noqa: E501

        Allows the user to view all the sessions available for a recurring event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_listsessions(eventid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str eventid: The event id to list sessions. (required)
        :param datetime sessiondate: The date of the session to find.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.sessionreg_listsessions_with_http_info(eventid, **kwargs)  # noqa: E501

    def sessionreg_listsessions_with_http_info(self, eventid, **kwargs):  # noqa: E501
        """List the sessions available for a specific event  # noqa: E501

        Allows the user to view all the sessions available for a recurring event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_listsessions_with_http_info(eventid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str eventid: The event id to list sessions. (required)
        :param datetime sessiondate: The date of the session to find.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'eventid',
            'sessiondate'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessionreg_listsessions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'eventid' is set
        if self.api_client.client_side_validation and ('eventid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eventid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eventid` when calling `sessionreg_listsessions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'eventid' in local_var_params and local_var_params['eventid'] is not None:  # noqa: E501
            query_params.append(('eventid', local_var_params['eventid']))  # noqa: E501
        if 'sessiondate' in local_var_params and local_var_params['sessiondate'] is not None:  # noqa: E501
            query_params.append(('sessiondate', local_var_params['sessiondate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sessionreg/listsessions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessionreg_listupcoming(self, date, **kwargs):  # noqa: E501
        """View a list of upcoming event sessions  # noqa: E501

        Allows the user to view the full list of upcoming events.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_listupcoming(date, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param datetime date: Only sessions in the week of the specified date will be returned. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.sessionreg_listupcoming_with_http_info(date, **kwargs)  # noqa: E501

    def sessionreg_listupcoming_with_http_info(self, date, **kwargs):  # noqa: E501
        """View a list of upcoming event sessions  # noqa: E501

        Allows the user to view the full list of upcoming events.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_listupcoming_with_http_info(date, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param datetime date: Only sessions in the week of the specified date will be returned. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'date'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessionreg_listupcoming" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'date' is set
        if self.api_client.client_side_validation and ('date' not in local_var_params or  # noqa: E501
                                                        local_var_params['date'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `date` when calling `sessionreg_listupcoming`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date' in local_var_params and local_var_params['date'] is not None:  # noqa: E501
            query_params.append(('date', local_var_params['date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sessionreg/listupcoming', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessionreg_listupcomingevent(self, date, event, **kwargs):  # noqa: E501
        """View a list of upcoming sessions of a particular event  # noqa: E501

        Allows the user to view the upcoming recurring sessions of a specified event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_listupcomingevent(date, event, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param datetime date: Start date to filter the returned sessions. (required)
        :param str event: The id of the event whose sessions will be returned (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.sessionreg_listupcomingevent_with_http_info(date, event, **kwargs)  # noqa: E501

    def sessionreg_listupcomingevent_with_http_info(self, date, event, **kwargs):  # noqa: E501
        """View a list of upcoming sessions of a particular event  # noqa: E501

        Allows the user to view the upcoming recurring sessions of a specified event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_listupcomingevent_with_http_info(date, event, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param datetime date: Start date to filter the returned sessions. (required)
        :param str event: The id of the event whose sessions will be returned (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'date',
            'event'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessionreg_listupcomingevent" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'date' is set
        if self.api_client.client_side_validation and ('date' not in local_var_params or  # noqa: E501
                                                        local_var_params['date'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `date` when calling `sessionreg_listupcomingevent`")  # noqa: E501
        # verify the required parameter 'event' is set
        if self.api_client.client_side_validation and ('event' not in local_var_params or  # noqa: E501
                                                        local_var_params['event'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event` when calling `sessionreg_listupcomingevent`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date' in local_var_params and local_var_params['date'] is not None:  # noqa: E501
            query_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'event' in local_var_params and local_var_params['event'] is not None:  # noqa: E501
            query_params.append(('event', local_var_params['event']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sessionreg/listupcomingevent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessionreg_removecurrentuser(self, eventid, sessiondate, **kwargs):  # noqa: E501
        """Unregister current user from an event session  # noqa: E501

        Allows the user to un-register themselves from an event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_removecurrentuser(eventid, sessiondate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str eventid: The id of the event. (required)
        :param datetime sessiondate: The date and time when the session starts. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.sessionreg_removecurrentuser_with_http_info(eventid, sessiondate, **kwargs)  # noqa: E501

    def sessionreg_removecurrentuser_with_http_info(self, eventid, sessiondate, **kwargs):  # noqa: E501
        """Unregister current user from an event session  # noqa: E501

        Allows the user to un-register themselves from an event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_removecurrentuser_with_http_info(eventid, sessiondate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str eventid: The id of the event. (required)
        :param datetime sessiondate: The date and time when the session starts. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'eventid',
            'sessiondate'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessionreg_removecurrentuser" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'eventid' is set
        if self.api_client.client_side_validation and ('eventid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eventid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eventid` when calling `sessionreg_removecurrentuser`")  # noqa: E501
        # verify the required parameter 'sessiondate' is set
        if self.api_client.client_side_validation and ('sessiondate' not in local_var_params or  # noqa: E501
                                                        local_var_params['sessiondate'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sessiondate` when calling `sessionreg_removecurrentuser`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'eventid' in local_var_params and local_var_params['eventid'] is not None:  # noqa: E501
            query_params.append(('eventid', local_var_params['eventid']))  # noqa: E501
        if 'sessiondate' in local_var_params and local_var_params['sessiondate'] is not None:  # noqa: E501
            query_params.append(('sessiondate', local_var_params['sessiondate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sessionreg/removecurrentuser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessionreg_removeuser(self, userid, eventid, sessiondate, **kwargs):  # noqa: E501
        """Removes a user from an event session  # noqa: E501

        Allows the user to un-register another user from an event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_removeuser(userid, eventid, sessiondate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to remove. (required)
        :param str eventid: The id of the event. (required)
        :param datetime sessiondate: The date and time when the session starts. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.sessionreg_removeuser_with_http_info(userid, eventid, sessiondate, **kwargs)  # noqa: E501

    def sessionreg_removeuser_with_http_info(self, userid, eventid, sessiondate, **kwargs):  # noqa: E501
        """Removes a user from an event session  # noqa: E501

        Allows the user to un-register another user from an event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_removeuser_with_http_info(userid, eventid, sessiondate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str userid: The id of the user to remove. (required)
        :param str eventid: The id of the event. (required)
        :param datetime sessiondate: The date and time when the session starts. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'userid',
            'eventid',
            'sessiondate'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessionreg_removeuser" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'userid' is set
        if self.api_client.client_side_validation and ('userid' not in local_var_params or  # noqa: E501
                                                        local_var_params['userid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `userid` when calling `sessionreg_removeuser`")  # noqa: E501
        # verify the required parameter 'eventid' is set
        if self.api_client.client_side_validation and ('eventid' not in local_var_params or  # noqa: E501
                                                        local_var_params['eventid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `eventid` when calling `sessionreg_removeuser`")  # noqa: E501
        # verify the required parameter 'sessiondate' is set
        if self.api_client.client_side_validation and ('sessiondate' not in local_var_params or  # noqa: E501
                                                        local_var_params['sessiondate'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sessiondate` when calling `sessionreg_removeuser`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'userid' in local_var_params and local_var_params['userid'] is not None:  # noqa: E501
            query_params.append(('userid', local_var_params['userid']))  # noqa: E501
        if 'eventid' in local_var_params and local_var_params['eventid'] is not None:  # noqa: E501
            query_params.append(('eventid', local_var_params['eventid']))  # noqa: E501
        if 'sessiondate' in local_var_params and local_var_params['sessiondate'] is not None:  # noqa: E501
            query_params.append(('sessiondate', local_var_params['sessiondate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sessionreg/removeuser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessionreg_savesettings(self, **kwargs):  # noqa: E501
        """Save the settings for an event's session registration  # noqa: E501

        Allows the user to save the settings for an event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_savesettings(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.sessionreg_savesettings_with_http_info(**kwargs)  # noqa: E501

    def sessionreg_savesettings_with_http_info(self, **kwargs):  # noqa: E501
        """Save the settings for an event's session registration  # noqa: E501

        Allows the user to save the settings for an event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessionreg_savesettings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'unknown_base_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessionreg_savesettings" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sessionreg/savesettings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
