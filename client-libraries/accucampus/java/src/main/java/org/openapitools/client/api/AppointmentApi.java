/*
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppointmentApi {
    private ApiClient localVarApiClient;

    public AppointmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppointmentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for appointmentCancel
     * @param id The id of the appointment to cancel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentCancelCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentCancelValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentCancel(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentCancelCall(id, _callback);
        return localVarCall;

    }

    /**
     * Cancel an appointment
     * Allows the user to cancel an appointment.
     * @param id The id of the appointment to cancel. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentCancel(UUID id) throws ApiException {
        appointmentCancelWithHttpInfo(id);
    }

    /**
     * Cancel an appointment
     * Allows the user to cancel an appointment.
     * @param id The id of the appointment to cancel. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentCancelWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = appointmentCancelValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel an appointment (asynchronously)
     * Allows the user to cancel an appointment.
     * @param id The id of the appointment to cancel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentCancelAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentCancelValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentCheckisvalid
     * @param id The id of the appointment to check. (required)
     * @param editing Specifies whether the check is for a new appointment or an existing one. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentCheckisvalidCall(UUID id, Boolean editing, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/checkisvalid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (editing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("editing", editing));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentCheckisvalidValidateBeforeCall(UUID id, Boolean editing, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentCheckisvalid(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentCheckisvalidCall(id, editing, _callback);
        return localVarCall;

    }

    /**
     * Check if an appointment is valid or not
     * 
     * @param id The id of the appointment to check. (required)
     * @param editing Specifies whether the check is for a new appointment or an existing one. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentCheckisvalid(UUID id, Boolean editing) throws ApiException {
        appointmentCheckisvalidWithHttpInfo(id, editing);
    }

    /**
     * Check if an appointment is valid or not
     * 
     * @param id The id of the appointment to check. (required)
     * @param editing Specifies whether the check is for a new appointment or an existing one. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentCheckisvalidWithHttpInfo(UUID id, Boolean editing) throws ApiException {
        okhttp3.Call localVarCall = appointmentCheckisvalidValidateBeforeCall(id, editing, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if an appointment is valid or not (asynchronously)
     * 
     * @param id The id of the appointment to check. (required)
     * @param editing Specifies whether the check is for a new appointment or an existing one. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentCheckisvalidAsync(UUID id, Boolean editing, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentCheckisvalidValidateBeforeCall(id, editing, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentEditanyway
     * @param id The id of the appointment to edit. (required)
     * @param attendee The id of the attendee involved in the appointment. (required)
     * @param staff The id of the staff member involved in the appointment. (required)
     * @param location The id of the location where the appointment will take place. (required)
     * @param start The appointment&#39;s start date &amp; time. (required)
     * @param end The appointment&#39;s end date &amp; time. (required)
     * @param term The id of the term when the appointment takes place. (optional)
     * @param event The id of the event of the appointment. (optional)
     * @param services Comma-separated string containing the ids of the services of the appointment. (optional)
     * @param notes The notes of the appointment. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentEditanywayCall(UUID id, UUID attendee, UUID staff, UUID location, OffsetDateTime start, OffsetDateTime end, UUID term, UUID event, String services, String notes, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/editanyway";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (term != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("term", term));
        }

        if (attendee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attendee", attendee));
        }

        if (staff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staff", staff));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (services != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("services", services));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentEditanywayValidateBeforeCall(UUID id, UUID attendee, UUID staff, UUID location, OffsetDateTime start, OffsetDateTime end, UUID term, UUID event, String services, String notes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentEditanyway(Async)");
        }
        
        // verify the required parameter 'attendee' is set
        if (attendee == null) {
            throw new ApiException("Missing the required parameter 'attendee' when calling appointmentEditanyway(Async)");
        }
        
        // verify the required parameter 'staff' is set
        if (staff == null) {
            throw new ApiException("Missing the required parameter 'staff' when calling appointmentEditanyway(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling appointmentEditanyway(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling appointmentEditanyway(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling appointmentEditanyway(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentEditanywayCall(id, attendee, staff, location, start, end, term, event, services, notes, _callback);
        return localVarCall;

    }

    /**
     * Edit an appointment even if it breaks activated rules
     * Allows the user to edit an existing appointment even if it breaks the rules or settings of that location.
     * @param id The id of the appointment to edit. (required)
     * @param attendee The id of the attendee involved in the appointment. (required)
     * @param staff The id of the staff member involved in the appointment. (required)
     * @param location The id of the location where the appointment will take place. (required)
     * @param start The appointment&#39;s start date &amp; time. (required)
     * @param end The appointment&#39;s end date &amp; time. (required)
     * @param term The id of the term when the appointment takes place. (optional)
     * @param event The id of the event of the appointment. (optional)
     * @param services Comma-separated string containing the ids of the services of the appointment. (optional)
     * @param notes The notes of the appointment. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentEditanyway(UUID id, UUID attendee, UUID staff, UUID location, OffsetDateTime start, OffsetDateTime end, UUID term, UUID event, String services, String notes) throws ApiException {
        appointmentEditanywayWithHttpInfo(id, attendee, staff, location, start, end, term, event, services, notes);
    }

    /**
     * Edit an appointment even if it breaks activated rules
     * Allows the user to edit an existing appointment even if it breaks the rules or settings of that location.
     * @param id The id of the appointment to edit. (required)
     * @param attendee The id of the attendee involved in the appointment. (required)
     * @param staff The id of the staff member involved in the appointment. (required)
     * @param location The id of the location where the appointment will take place. (required)
     * @param start The appointment&#39;s start date &amp; time. (required)
     * @param end The appointment&#39;s end date &amp; time. (required)
     * @param term The id of the term when the appointment takes place. (optional)
     * @param event The id of the event of the appointment. (optional)
     * @param services Comma-separated string containing the ids of the services of the appointment. (optional)
     * @param notes The notes of the appointment. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentEditanywayWithHttpInfo(UUID id, UUID attendee, UUID staff, UUID location, OffsetDateTime start, OffsetDateTime end, UUID term, UUID event, String services, String notes) throws ApiException {
        okhttp3.Call localVarCall = appointmentEditanywayValidateBeforeCall(id, attendee, staff, location, start, end, term, event, services, notes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Edit an appointment even if it breaks activated rules (asynchronously)
     * Allows the user to edit an existing appointment even if it breaks the rules or settings of that location.
     * @param id The id of the appointment to edit. (required)
     * @param attendee The id of the attendee involved in the appointment. (required)
     * @param staff The id of the staff member involved in the appointment. (required)
     * @param location The id of the location where the appointment will take place. (required)
     * @param start The appointment&#39;s start date &amp; time. (required)
     * @param end The appointment&#39;s end date &amp; time. (required)
     * @param term The id of the term when the appointment takes place. (optional)
     * @param event The id of the event of the appointment. (optional)
     * @param services Comma-separated string containing the ids of the services of the appointment. (optional)
     * @param notes The notes of the appointment. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentEditanywayAsync(UUID id, UUID attendee, UUID staff, UUID location, OffsetDateTime start, OffsetDateTime end, UUID term, UUID event, String services, String notes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentEditanywayValidateBeforeCall(id, attendee, staff, location, start, end, term, event, services, notes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentEditpresence
     * @param id The id of the appointment to edit its presence. (required)
     * @param showedup Specifies whether the attendee was showed-up or not in the appointment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentEditpresenceCall(UUID id, Boolean showedup, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/editpresence";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (showedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showedup", showedup));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentEditpresenceValidateBeforeCall(UUID id, Boolean showedup, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentEditpresence(Async)");
        }
        
        // verify the required parameter 'showedup' is set
        if (showedup == null) {
            throw new ApiException("Missing the required parameter 'showedup' when calling appointmentEditpresence(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentEditpresenceCall(id, showedup, _callback);
        return localVarCall;

    }

    /**
     * Edit the no-show status of an appointment
     * Allows the user to edit the no-show status of an appointment by marking it as Voided, Restored, or as a Show.
     * @param id The id of the appointment to edit its presence. (required)
     * @param showedup Specifies whether the attendee was showed-up or not in the appointment. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentEditpresence(UUID id, Boolean showedup) throws ApiException {
        appointmentEditpresenceWithHttpInfo(id, showedup);
    }

    /**
     * Edit the no-show status of an appointment
     * Allows the user to edit the no-show status of an appointment by marking it as Voided, Restored, or as a Show.
     * @param id The id of the appointment to edit its presence. (required)
     * @param showedup Specifies whether the attendee was showed-up or not in the appointment. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentEditpresenceWithHttpInfo(UUID id, Boolean showedup) throws ApiException {
        okhttp3.Call localVarCall = appointmentEditpresenceValidateBeforeCall(id, showedup, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Edit the no-show status of an appointment (asynchronously)
     * Allows the user to edit the no-show status of an appointment by marking it as Voided, Restored, or as a Show.
     * @param id The id of the appointment to edit its presence. (required)
     * @param showedup Specifies whether the attendee was showed-up or not in the appointment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentEditpresenceAsync(UUID id, Boolean showedup, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentEditpresenceValidateBeforeCall(id, showedup, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentFindallstaffslots
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (required)
     * @param locationid The id of the service to filter by. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentFindallstaffslotsCall(OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID locationid, UUID eventid, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/findallstaffslots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (starttime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starttime", starttime));
        }

        if (endtime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endtime", endtime));
        }

        if (serviceids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceids", serviceids));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentFindallstaffslotsValidateBeforeCall(OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID locationid, UUID eventid, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'starttime' is set
        if (starttime == null) {
            throw new ApiException("Missing the required parameter 'starttime' when calling appointmentFindallstaffslots(Async)");
        }
        
        // verify the required parameter 'endtime' is set
        if (endtime == null) {
            throw new ApiException("Missing the required parameter 'endtime' when calling appointmentFindallstaffslots(Async)");
        }
        
        // verify the required parameter 'serviceids' is set
        if (serviceids == null) {
            throw new ApiException("Missing the required parameter 'serviceids' when calling appointmentFindallstaffslots(Async)");
        }
        
        // verify the required parameter 'locationid' is set
        if (locationid == null) {
            throw new ApiException("Missing the required parameter 'locationid' when calling appointmentFindallstaffslots(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentFindallstaffslotsCall(starttime, endtime, serviceids, locationid, eventid, photosize, _callback);
        return localVarCall;

    }

    /**
     * Finds all staff available slots filtered by service, date, etc
     * Allows the user to view available appointment slots when creating an appointment.
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (required)
     * @param locationid The id of the service to filter by. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentFindallstaffslots(OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID locationid, UUID eventid, Integer photosize) throws ApiException {
        appointmentFindallstaffslotsWithHttpInfo(starttime, endtime, serviceids, locationid, eventid, photosize);
    }

    /**
     * Finds all staff available slots filtered by service, date, etc
     * Allows the user to view available appointment slots when creating an appointment.
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (required)
     * @param locationid The id of the service to filter by. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentFindallstaffslotsWithHttpInfo(OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID locationid, UUID eventid, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = appointmentFindallstaffslotsValidateBeforeCall(starttime, endtime, serviceids, locationid, eventid, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Finds all staff available slots filtered by service, date, etc (asynchronously)
     * Allows the user to view available appointment slots when creating an appointment.
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (required)
     * @param locationid The id of the service to filter by. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentFindallstaffslotsAsync(OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID locationid, UUID eventid, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentFindallstaffslotsValidateBeforeCall(starttime, endtime, serviceids, locationid, eventid, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentFindslots
     * @param staffid The id of the staff to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentFindslotsCall(UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/findslots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (staffid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffid", staffid));
        }

        if (starttime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starttime", starttime));
        }

        if (endtime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endtime", endtime));
        }

        if (serviceids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceids", serviceids));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentFindslotsValidateBeforeCall(UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'staffid' is set
        if (staffid == null) {
            throw new ApiException("Missing the required parameter 'staffid' when calling appointmentFindslots(Async)");
        }
        
        // verify the required parameter 'starttime' is set
        if (starttime == null) {
            throw new ApiException("Missing the required parameter 'starttime' when calling appointmentFindslots(Async)");
        }
        
        // verify the required parameter 'endtime' is set
        if (endtime == null) {
            throw new ApiException("Missing the required parameter 'endtime' when calling appointmentFindslots(Async)");
        }
        
        // verify the required parameter 'serviceids' is set
        if (serviceids == null) {
            throw new ApiException("Missing the required parameter 'serviceids' when calling appointmentFindslots(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentFindslotsCall(staffid, starttime, endtime, serviceids, eventid, locationid, _callback);
        return localVarCall;

    }

    /**
     * Finds available slots filtered by service, date, staff, etc
     * Allows the user to view available appointment slots when creating an appointment.
     * @param staffid The id of the staff to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentFindslots(UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid) throws ApiException {
        appointmentFindslotsWithHttpInfo(staffid, starttime, endtime, serviceids, eventid, locationid);
    }

    /**
     * Finds available slots filtered by service, date, staff, etc
     * Allows the user to view available appointment slots when creating an appointment.
     * @param staffid The id of the staff to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentFindslotsWithHttpInfo(UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid) throws ApiException {
        okhttp3.Call localVarCall = appointmentFindslotsValidateBeforeCall(staffid, starttime, endtime, serviceids, eventid, locationid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Finds available slots filtered by service, date, staff, etc (asynchronously)
     * Allows the user to view available appointment slots when creating an appointment.
     * @param staffid The id of the staff to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentFindslotsAsync(UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentFindslotsValidateBeforeCall(staffid, starttime, endtime, serviceids, eventid, locationid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentFindstaff
     * @param serviceids CSV list of the service ids to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentFindstaffCall(String serviceids, OffsetDateTime starttime, OffsetDateTime endtime, UUID eventid, UUID locationid, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/findstaff";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceids", serviceids));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (starttime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starttime", starttime));
        }

        if (endtime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endtime", endtime));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentFindstaffValidateBeforeCall(String serviceids, OffsetDateTime starttime, OffsetDateTime endtime, UUID eventid, UUID locationid, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serviceids' is set
        if (serviceids == null) {
            throw new ApiException("Missing the required parameter 'serviceids' when calling appointmentFindstaff(Async)");
        }
        
        // verify the required parameter 'starttime' is set
        if (starttime == null) {
            throw new ApiException("Missing the required parameter 'starttime' when calling appointmentFindstaff(Async)");
        }
        
        // verify the required parameter 'endtime' is set
        if (endtime == null) {
            throw new ApiException("Missing the required parameter 'endtime' when calling appointmentFindstaff(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentFindstaffCall(serviceids, starttime, endtime, eventid, locationid, photosize, _callback);
        return localVarCall;

    }

    /**
     * Finds staff available by service, date, event, etc
     * Allows the user to view staff availability when creating an appointment.
     * @param serviceids CSV list of the service ids to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentFindstaff(String serviceids, OffsetDateTime starttime, OffsetDateTime endtime, UUID eventid, UUID locationid, Integer photosize) throws ApiException {
        appointmentFindstaffWithHttpInfo(serviceids, starttime, endtime, eventid, locationid, photosize);
    }

    /**
     * Finds staff available by service, date, event, etc
     * Allows the user to view staff availability when creating an appointment.
     * @param serviceids CSV list of the service ids to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentFindstaffWithHttpInfo(String serviceids, OffsetDateTime starttime, OffsetDateTime endtime, UUID eventid, UUID locationid, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = appointmentFindstaffValidateBeforeCall(serviceids, starttime, endtime, eventid, locationid, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Finds staff available by service, date, event, etc (asynchronously)
     * Allows the user to view staff availability when creating an appointment.
     * @param serviceids CSV list of the service ids to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentFindstaffAsync(String serviceids, OffsetDateTime starttime, OffsetDateTime endtime, UUID eventid, UUID locationid, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentFindstaffValidateBeforeCall(serviceids, starttime, endtime, eventid, locationid, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentGet
     * @param id The id of the appointment to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentGetCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentGetValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentGet(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of an appointment
     * Allows the user to view an individual appointment and its details.
     * @param id The id of the appointment to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentGet(UUID id) throws ApiException {
        appointmentGetWithHttpInfo(id);
    }

    /**
     * Search and view details of an appointment
     * Allows the user to view an individual appointment and its details.
     * @param id The id of the appointment to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentGetWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = appointmentGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of an appointment (asynchronously)
     * Allows the user to view an individual appointment and its details.
     * @param id The id of the appointment to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentGetAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentGetcurrent
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location where the user wants to sign-in. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentGetcurrentCall(UUID station, String user, UUID location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/getcurrent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentGetcurrentValidateBeforeCall(UUID station, String user, UUID location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling appointmentGetcurrent(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling appointmentGetcurrent(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling appointmentGetcurrent(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentGetcurrentCall(station, user, location, _callback);
        return localVarCall;

    }

    /**
     * Get the current appointments for the user that is about to sign-in via the specified sign-in station.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location where the user wants to sign-in. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentGetcurrent(UUID station, String user, UUID location) throws ApiException {
        appointmentGetcurrentWithHttpInfo(station, user, location);
    }

    /**
     * Get the current appointments for the user that is about to sign-in via the specified sign-in station.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location where the user wants to sign-in. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentGetcurrentWithHttpInfo(UUID station, String user, UUID location) throws ApiException {
        okhttp3.Call localVarCall = appointmentGetcurrentValidateBeforeCall(station, user, location, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the current appointments for the user that is about to sign-in via the specified sign-in station. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location where the user wants to sign-in. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentGetcurrentAsync(UUID station, String user, UUID location, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentGetcurrentValidateBeforeCall(station, user, location, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentGetlocations
     * @param serviceid The id of the service to get its locations. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentGetlocationsCall(UUID serviceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/getlocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceid", serviceid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentGetlocationsValidateBeforeCall(UUID serviceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serviceid' is set
        if (serviceid == null) {
            throw new ApiException("Missing the required parameter 'serviceid' when calling appointmentGetlocations(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentGetlocationsCall(serviceid, _callback);
        return localVarCall;

    }

    /**
     * Find locations where a service is available
     * Allows the user to search for appointment availability by location or service.
     * @param serviceid The id of the service to get its locations. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentGetlocations(UUID serviceid) throws ApiException {
        appointmentGetlocationsWithHttpInfo(serviceid);
    }

    /**
     * Find locations where a service is available
     * Allows the user to search for appointment availability by location or service.
     * @param serviceid The id of the service to get its locations. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentGetlocationsWithHttpInfo(UUID serviceid) throws ApiException {
        okhttp3.Call localVarCall = appointmentGetlocationsValidateBeforeCall(serviceid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Find locations where a service is available (asynchronously)
     * Allows the user to search for appointment availability by location or service.
     * @param serviceid The id of the service to get its locations. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentGetlocationsAsync(UUID serviceid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentGetlocationsValidateBeforeCall(serviceid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentList
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param startdate The start date of the period to filter the appointments. (optional)
     * @param enddate The end date of the period to filter the appointments. (optional)
     * @param userid The attendee id to filter the appointments. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentListCall(Integer from, Integer count, OffsetDateTime startdate, OffsetDateTime enddate, UUID userid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (startdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startdate", startdate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentListValidateBeforeCall(Integer from, Integer count, OffsetDateTime startdate, OffsetDateTime enddate, UUID userid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling appointmentList(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling appointmentList(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentListCall(from, count, startdate, enddate, userid, _callback);
        return localVarCall;

    }

    /**
     * View a list of appointments
     * Allows the user to view all upcoming appointments for the location or locations they are scoped to.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param startdate The start date of the period to filter the appointments. (optional)
     * @param enddate The end date of the period to filter the appointments. (optional)
     * @param userid The attendee id to filter the appointments. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentList(Integer from, Integer count, OffsetDateTime startdate, OffsetDateTime enddate, UUID userid) throws ApiException {
        appointmentListWithHttpInfo(from, count, startdate, enddate, userid);
    }

    /**
     * View a list of appointments
     * Allows the user to view all upcoming appointments for the location or locations they are scoped to.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param startdate The start date of the period to filter the appointments. (optional)
     * @param enddate The end date of the period to filter the appointments. (optional)
     * @param userid The attendee id to filter the appointments. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentListWithHttpInfo(Integer from, Integer count, OffsetDateTime startdate, OffsetDateTime enddate, UUID userid) throws ApiException {
        okhttp3.Call localVarCall = appointmentListValidateBeforeCall(from, count, startdate, enddate, userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of appointments (asynchronously)
     * Allows the user to view all upcoming appointments for the location or locations they are scoped to.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param startdate The start date of the period to filter the appointments. (optional)
     * @param enddate The end date of the period to filter the appointments. (optional)
     * @param userid The attendee id to filter the appointments. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentListAsync(Integer from, Integer count, OffsetDateTime startdate, OffsetDateTime enddate, UUID userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentListValidateBeforeCall(from, count, startdate, enddate, userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentListmine
     * @param start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentListmineCall(OffsetDateTime start, OffsetDateTime modifiedafter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/listmine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (modifiedafter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedafter", modifiedafter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentListmineValidateBeforeCall(OffsetDateTime start, OffsetDateTime modifiedafter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = appointmentListmineCall(start, modifiedafter, _callback);
        return localVarCall;

    }

    /**
     * View all my upcoming appointments
     * 
     * @param start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentListmine(OffsetDateTime start, OffsetDateTime modifiedafter) throws ApiException {
        appointmentListmineWithHttpInfo(start, modifiedafter);
    }

    /**
     * View all my upcoming appointments
     * 
     * @param start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentListmineWithHttpInfo(OffsetDateTime start, OffsetDateTime modifiedafter) throws ApiException {
        okhttp3.Call localVarCall = appointmentListmineValidateBeforeCall(start, modifiedafter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all my upcoming appointments (asynchronously)
     * 
     * @param start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentListmineAsync(OffsetDateTime start, OffsetDateTime modifiedafter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentListmineValidateBeforeCall(start, modifiedafter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentListupcoming
     * @param start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentListupcomingCall(OffsetDateTime start, OffsetDateTime modifiedafter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/listupcoming";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (modifiedafter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedafter", modifiedafter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentListupcomingValidateBeforeCall(OffsetDateTime start, OffsetDateTime modifiedafter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = appointmentListupcomingCall(start, modifiedafter, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of all my upcoming appointments
     * Allows the user to view all of their own upcoming appointments.
     * @param start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentListupcoming(OffsetDateTime start, OffsetDateTime modifiedafter) throws ApiException {
        appointmentListupcomingWithHttpInfo(start, modifiedafter);
    }

    /**
     * Search and view details of all my upcoming appointments
     * Allows the user to view all of their own upcoming appointments.
     * @param start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentListupcomingWithHttpInfo(OffsetDateTime start, OffsetDateTime modifiedafter) throws ApiException {
        okhttp3.Call localVarCall = appointmentListupcomingValidateBeforeCall(start, modifiedafter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of all my upcoming appointments (asynchronously)
     * Allows the user to view all of their own upcoming appointments.
     * @param start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentListupcomingAsync(OffsetDateTime start, OffsetDateTime modifiedafter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentListupcomingValidateBeforeCall(start, modifiedafter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentRescheduleoutlook
     * @param id The id of the appointment to edit. (required)
     * @param start The appointment&#39;s start date &amp; time. (required)
     * @param end The appointment&#39;s end date &amp; time. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentRescheduleoutlookCall(UUID id, OffsetDateTime start, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/rescheduleoutlook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentRescheduleoutlookValidateBeforeCall(UUID id, OffsetDateTime start, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentRescheduleoutlook(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling appointmentRescheduleoutlook(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling appointmentRescheduleoutlook(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentRescheduleoutlookCall(id, start, end, _callback);
        return localVarCall;

    }

    /**
     * Reschedule an appointment from MS Outlook.
     * Allows the user to reschedule, edit, or cancel appointments via MS Outlook if the user has the AccuCampus add-on installed on their Outlook.
     * @param id The id of the appointment to edit. (required)
     * @param start The appointment&#39;s start date &amp; time. (required)
     * @param end The appointment&#39;s end date &amp; time. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentRescheduleoutlook(UUID id, OffsetDateTime start, OffsetDateTime end) throws ApiException {
        appointmentRescheduleoutlookWithHttpInfo(id, start, end);
    }

    /**
     * Reschedule an appointment from MS Outlook.
     * Allows the user to reschedule, edit, or cancel appointments via MS Outlook if the user has the AccuCampus add-on installed on their Outlook.
     * @param id The id of the appointment to edit. (required)
     * @param start The appointment&#39;s start date &amp; time. (required)
     * @param end The appointment&#39;s end date &amp; time. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentRescheduleoutlookWithHttpInfo(UUID id, OffsetDateTime start, OffsetDateTime end) throws ApiException {
        okhttp3.Call localVarCall = appointmentRescheduleoutlookValidateBeforeCall(id, start, end, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reschedule an appointment from MS Outlook. (asynchronously)
     * Allows the user to reschedule, edit, or cancel appointments via MS Outlook if the user has the AccuCampus add-on installed on their Outlook.
     * @param id The id of the appointment to edit. (required)
     * @param start The appointment&#39;s start date &amp; time. (required)
     * @param end The appointment&#39;s end date &amp; time. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentRescheduleoutlookAsync(UUID id, OffsetDateTime start, OffsetDateTime end, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentRescheduleoutlookValidateBeforeCall(id, start, end, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentRestore
     * @param id The id of the appointment to restore. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentRestoreCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/restore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentRestoreValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentRestore(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentRestoreCall(id, _callback);
        return localVarCall;

    }

    /**
     * Restore an appointment
     * Allows the user to restore a canceled appointment.
     * @param id The id of the appointment to restore. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentRestore(UUID id) throws ApiException {
        appointmentRestoreWithHttpInfo(id);
    }

    /**
     * Restore an appointment
     * Allows the user to restore a canceled appointment.
     * @param id The id of the appointment to restore. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentRestoreWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = appointmentRestoreValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restore an appointment (asynchronously)
     * Allows the user to restore a canceled appointment.
     * @param id The id of the appointment to restore. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentRestoreAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentRestoreValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentRestoreanyway
     * @param id The id of the appointment to restore. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentRestoreanywayCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/restoreanyway";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentRestoreanywayValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentRestoreanyway(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentRestoreanywayCall(id, _callback);
        return localVarCall;

    }

    /**
     * Restore an appointment even if it breaks activated rules
     * Allows the user to restore a canceled appointment even if that appointment breaks the rules or settings of that location.
     * @param id The id of the appointment to restore. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentRestoreanyway(UUID id) throws ApiException {
        appointmentRestoreanywayWithHttpInfo(id);
    }

    /**
     * Restore an appointment even if it breaks activated rules
     * Allows the user to restore a canceled appointment even if that appointment breaks the rules or settings of that location.
     * @param id The id of the appointment to restore. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentRestoreanywayWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = appointmentRestoreanywayValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restore an appointment even if it breaks activated rules (asynchronously)
     * Allows the user to restore a canceled appointment even if that appointment breaks the rules or settings of that location.
     * @param id The id of the appointment to restore. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentRestoreanywayAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentRestoreanywayValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentSave
     * @param id The id of the appointment to save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentSaveCall(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/appointment/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentSaveValidateBeforeCall(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentSave(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentSaveCall(id, UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Schedule an appointment
     * Allows the user to schedule an appointment within the rules of the location and the availability of staff members.
     * @param id The id of the appointment to save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentSave(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        appointmentSaveWithHttpInfo(id, UNKNOWN_BASE_TYPE);
    }

    /**
     * Schedule an appointment
     * Allows the user to schedule an appointment within the rules of the location and the availability of staff members.
     * @param id The id of the appointment to save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentSaveWithHttpInfo(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = appointmentSaveValidateBeforeCall(id, UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Schedule an appointment (asynchronously)
     * Allows the user to schedule an appointment within the rules of the location and the availability of staff members.
     * @param id The id of the appointment to save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentSaveAsync(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentSaveValidateBeforeCall(id, UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentSetasvalid
     * @param id The id of the appointment to set as valid. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentSetasvalidCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/setasvalid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentSetasvalidValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentSetasvalid(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentSetasvalidCall(id, _callback);
        return localVarCall;

    }

    /**
     * Schedule an appointment even if it breaks activated rules
     * Allows the user to schedule an appointment even if it breaks the rules or settings of that location or if it goes against the availability of the staff member.
     * @param id The id of the appointment to set as valid. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentSetasvalid(UUID id) throws ApiException {
        appointmentSetasvalidWithHttpInfo(id);
    }

    /**
     * Schedule an appointment even if it breaks activated rules
     * Allows the user to schedule an appointment even if it breaks the rules or settings of that location or if it goes against the availability of the staff member.
     * @param id The id of the appointment to set as valid. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentSetasvalidWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = appointmentSetasvalidValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Schedule an appointment even if it breaks activated rules (asynchronously)
     * Allows the user to schedule an appointment even if it breaks the rules or settings of that location or if it goes against the availability of the staff member.
     * @param id The id of the appointment to set as valid. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentSetasvalidAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentSetasvalidValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentSuggestlocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentSuggestlocationsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/suggestlocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentSuggestlocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = appointmentSuggestlocationsCall(_callback);
        return localVarCall;

    }

    /**
     * View the locations with most appointments
     * Allows the user to view suggestions for the most popular locations in which to make appointments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentSuggestlocations() throws ApiException {
        appointmentSuggestlocationsWithHttpInfo();
    }

    /**
     * View the locations with most appointments
     * Allows the user to view suggestions for the most popular locations in which to make appointments
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentSuggestlocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = appointmentSuggestlocationsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the locations with most appointments (asynchronously)
     * Allows the user to view suggestions for the most popular locations in which to make appointments
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentSuggestlocationsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentSuggestlocationsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentSuggestservices
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentSuggestservicesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/suggestservices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentSuggestservicesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = appointmentSuggestservicesCall(_callback);
        return localVarCall;

    }

    /**
     * View the services with most appointments
     * Allows the user to view suggestions for the most popular services for which to make appointments.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentSuggestservices() throws ApiException {
        appointmentSuggestservicesWithHttpInfo();
    }

    /**
     * View the services with most appointments
     * Allows the user to view suggestions for the most popular services for which to make appointments.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentSuggestservicesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = appointmentSuggestservicesValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the services with most appointments (asynchronously)
     * Allows the user to view suggestions for the most popular services for which to make appointments.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentSuggestservicesAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentSuggestservicesValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appointmentVoid
     * @param id The id of the appointment to cancel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentVoidCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointment/void";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appointmentVoidValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appointmentVoid(Async)");
        }
        

        okhttp3.Call localVarCall = appointmentVoidCall(id, _callback);
        return localVarCall;

    }

    /**
     * Void an appointment
     * Allows the user to void an appointment that has been marked as a no-show so that it does not count against the student&#39;s restrictions.
     * @param id The id of the appointment to cancel. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void appointmentVoid(UUID id) throws ApiException {
        appointmentVoidWithHttpInfo(id);
    }

    /**
     * Void an appointment
     * Allows the user to void an appointment that has been marked as a no-show so that it does not count against the student&#39;s restrictions.
     * @param id The id of the appointment to cancel. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appointmentVoidWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = appointmentVoidValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Void an appointment (asynchronously)
     * Allows the user to void an appointment that has been marked as a no-show so that it does not count against the student&#39;s restrictions.
     * @param id The id of the appointment to cancel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appointmentVoidAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appointmentVoidValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
