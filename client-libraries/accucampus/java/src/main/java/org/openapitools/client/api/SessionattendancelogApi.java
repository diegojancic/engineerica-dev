/*
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SessionattendancelogApi {
    private ApiClient localVarApiClient;

    public SessionattendancelogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SessionattendancelogApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for sessionattendancelogAddnote
     * @param id The id of the attendance log. (required)
     * @param text The text of the note to add. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogAddnoteCall(UUID id, String text, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionattendancelog/addnote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendancelogAddnoteValidateBeforeCall(UUID id, String text, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sessionattendancelogAddnote(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling sessionattendancelogAddnote(Async)");
        }
        

        okhttp3.Call localVarCall = sessionattendancelogAddnoteCall(id, text, _callback);
        return localVarCall;

    }

    /**
     * Add a note to a class attendance log
     * Allows the user to add a note to a class attendance log.
     * @param id The id of the attendance log. (required)
     * @param text The text of the note to add. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendancelogAddnote(UUID id, String text) throws ApiException {
        sessionattendancelogAddnoteWithHttpInfo(id, text);
    }

    /**
     * Add a note to a class attendance log
     * Allows the user to add a note to a class attendance log.
     * @param id The id of the attendance log. (required)
     * @param text The text of the note to add. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendancelogAddnoteWithHttpInfo(UUID id, String text) throws ApiException {
        okhttp3.Call localVarCall = sessionattendancelogAddnoteValidateBeforeCall(id, text, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a note to a class attendance log (asynchronously)
     * Allows the user to add a note to a class attendance log.
     * @param id The id of the attendance log. (required)
     * @param text The text of the note to add. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogAddnoteAsync(UUID id, String text, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendancelogAddnoteValidateBeforeCall(id, text, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionattendancelogGet
     * @param id The id of the attendance log to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogGetCall(UUID id, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionattendancelog/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendancelogGetValidateBeforeCall(UUID id, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sessionattendancelogGet(Async)");
        }
        

        okhttp3.Call localVarCall = sessionattendancelogGetCall(id, photosize, _callback);
        return localVarCall;

    }

    /**
     * View details of a class attendance log
     * Allows the user to view an individual class attendance log and its details.
     * @param id The id of the attendance log to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendancelogGet(UUID id, Integer photosize) throws ApiException {
        sessionattendancelogGetWithHttpInfo(id, photosize);
    }

    /**
     * View details of a class attendance log
     * Allows the user to view an individual class attendance log and its details.
     * @param id The id of the attendance log to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendancelogGetWithHttpInfo(UUID id, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = sessionattendancelogGetValidateBeforeCall(id, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a class attendance log (asynchronously)
     * Allows the user to view an individual class attendance log and its details.
     * @param id The id of the attendance log to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 400. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogGetAsync(UUID id, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendancelogGetValidateBeforeCall(id, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionattendancelogGetuser
     * @param attendee The id of the attendee to get statistic for. (required)
     * @param eventid The id of the event whose attendee statistics have to be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogGetuserCall(UUID attendee, UUID eventid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionattendancelog/getuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (attendee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attendee", attendee));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendancelogGetuserValidateBeforeCall(UUID attendee, UUID eventid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'attendee' is set
        if (attendee == null) {
            throw new ApiException("Missing the required parameter 'attendee' when calling sessionattendancelogGetuser(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling sessionattendancelogGetuser(Async)");
        }
        

        okhttp3.Call localVarCall = sessionattendancelogGetuserCall(attendee, eventid, _callback);
        return localVarCall;

    }

    /**
     * View the class session attendance information for a specific user
     * Allows the user to view the attendance for a specified student.
     * @param attendee The id of the attendee to get statistic for. (required)
     * @param eventid The id of the event whose attendee statistics have to be returned. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendancelogGetuser(UUID attendee, UUID eventid) throws ApiException {
        sessionattendancelogGetuserWithHttpInfo(attendee, eventid);
    }

    /**
     * View the class session attendance information for a specific user
     * Allows the user to view the attendance for a specified student.
     * @param attendee The id of the attendee to get statistic for. (required)
     * @param eventid The id of the event whose attendee statistics have to be returned. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendancelogGetuserWithHttpInfo(UUID attendee, UUID eventid) throws ApiException {
        okhttp3.Call localVarCall = sessionattendancelogGetuserValidateBeforeCall(attendee, eventid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the class session attendance information for a specific user (asynchronously)
     * Allows the user to view the attendance for a specified student.
     * @param attendee The id of the attendee to get statistic for. (required)
     * @param eventid The id of the event whose attendee statistics have to be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogGetuserAsync(UUID attendee, UUID eventid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendancelogGetuserValidateBeforeCall(attendee, eventid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionattendancelogList
     * @param session The id of the session whose attendees logs have to be returned. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogListCall(UUID session, Integer from, Integer count, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionattendancelog/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (session != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("session", session));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendancelogListValidateBeforeCall(UUID session, Integer from, Integer count, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'session' is set
        if (session == null) {
            throw new ApiException("Missing the required parameter 'session' when calling sessionattendancelogList(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling sessionattendancelogList(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling sessionattendancelogList(Async)");
        }
        

        okhttp3.Call localVarCall = sessionattendancelogListCall(session, from, count, photosize, _callback);
        return localVarCall;

    }

    /**
     * View attendance logs of the specified session
     * Allows the user to view the full list of logs from a specified session
     * @param session The id of the session whose attendees logs have to be returned. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendancelogList(UUID session, Integer from, Integer count, Integer photosize) throws ApiException {
        sessionattendancelogListWithHttpInfo(session, from, count, photosize);
    }

    /**
     * View attendance logs of the specified session
     * Allows the user to view the full list of logs from a specified session
     * @param session The id of the session whose attendees logs have to be returned. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendancelogListWithHttpInfo(UUID session, Integer from, Integer count, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = sessionattendancelogListValidateBeforeCall(session, from, count, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View attendance logs of the specified session (asynchronously)
     * Allows the user to view the full list of logs from a specified session
     * @param session The id of the session whose attendees logs have to be returned. (required)
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogListAsync(UUID session, Integer from, Integer count, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendancelogListValidateBeforeCall(session, from, count, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionattendancelogListevent
     * @param eventid The id of the event whose attendance has to be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogListeventCall(UUID eventid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionattendancelog/listevent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendancelogListeventValidateBeforeCall(UUID eventid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling sessionattendancelogListevent(Async)");
        }
        

        okhttp3.Call localVarCall = sessionattendancelogListeventCall(eventid, _callback);
        return localVarCall;

    }

    /**
     * View the attendance information of an entire class
     * Allows the user to view the attendance information for an entire class
     * @param eventid The id of the event whose attendance has to be returned. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendancelogListevent(UUID eventid) throws ApiException {
        sessionattendancelogListeventWithHttpInfo(eventid);
    }

    /**
     * View the attendance information of an entire class
     * Allows the user to view the attendance information for an entire class
     * @param eventid The id of the event whose attendance has to be returned. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendancelogListeventWithHttpInfo(UUID eventid) throws ApiException {
        okhttp3.Call localVarCall = sessionattendancelogListeventValidateBeforeCall(eventid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the attendance information of an entire class (asynchronously)
     * Allows the user to view the attendance information for an entire class
     * @param eventid The id of the event whose attendance has to be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogListeventAsync(UUID eventid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendancelogListeventValidateBeforeCall(eventid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionattendancelogListsummary
     * @param eventid The id of the event whose attendance has to be returned. (optional)
     * @param attendeeid The id of the attendee whose attendance has to be returned. (optional)
     * @param groupid The id of the group whose attendance has to be returned. (optional)
     * @param start The start date to filter (beginning of time by default). (optional)
     * @param end The end date to filter (today by default). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogListsummaryCall(UUID eventid, UUID attendeeid, UUID groupid, String start, String end, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionattendancelog/listsummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (attendeeid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attendeeid", attendeeid));
        }

        if (groupid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupid", groupid));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendancelogListsummaryValidateBeforeCall(UUID eventid, UUID attendeeid, UUID groupid, String start, String end, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sessionattendancelogListsummaryCall(eventid, attendeeid, groupid, start, end, _callback);
        return localVarCall;

    }

    /**
     * View the attendance summary for a class and/or a attendee
     * Allows the user to view the attendance summary for a given class and/or attendee.
     * @param eventid The id of the event whose attendance has to be returned. (optional)
     * @param attendeeid The id of the attendee whose attendance has to be returned. (optional)
     * @param groupid The id of the group whose attendance has to be returned. (optional)
     * @param start The start date to filter (beginning of time by default). (optional)
     * @param end The end date to filter (today by default). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendancelogListsummary(UUID eventid, UUID attendeeid, UUID groupid, String start, String end) throws ApiException {
        sessionattendancelogListsummaryWithHttpInfo(eventid, attendeeid, groupid, start, end);
    }

    /**
     * View the attendance summary for a class and/or a attendee
     * Allows the user to view the attendance summary for a given class and/or attendee.
     * @param eventid The id of the event whose attendance has to be returned. (optional)
     * @param attendeeid The id of the attendee whose attendance has to be returned. (optional)
     * @param groupid The id of the group whose attendance has to be returned. (optional)
     * @param start The start date to filter (beginning of time by default). (optional)
     * @param end The end date to filter (today by default). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendancelogListsummaryWithHttpInfo(UUID eventid, UUID attendeeid, UUID groupid, String start, String end) throws ApiException {
        okhttp3.Call localVarCall = sessionattendancelogListsummaryValidateBeforeCall(eventid, attendeeid, groupid, start, end, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the attendance summary for a class and/or a attendee (asynchronously)
     * Allows the user to view the attendance summary for a given class and/or attendee.
     * @param eventid The id of the event whose attendance has to be returned. (optional)
     * @param attendeeid The id of the attendee whose attendance has to be returned. (optional)
     * @param groupid The id of the group whose attendance has to be returned. (optional)
     * @param start The start date to filter (beginning of time by default). (optional)
     * @param end The end date to filter (today by default). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogListsummaryAsync(UUID eventid, UUID attendeeid, UUID groupid, String start, String end, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendancelogListsummaryValidateBeforeCall(eventid, attendeeid, groupid, start, end, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionattendancelogMylistsummary
     * @param eventid The id of the event whose attendance has to be returned. (optional)
     * @param start The start date to filter (beginning of time by default). (optional)
     * @param end The end date to filter (today by default). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogMylistsummaryCall(UUID eventid, String start, String end, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessionattendancelog/mylistsummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendancelogMylistsummaryValidateBeforeCall(UUID eventid, String start, String end, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sessionattendancelogMylistsummaryCall(eventid, start, end, _callback);
        return localVarCall;

    }

    /**
     * View my attendance summary
     * Allows the user to view their own attendance summary.
     * @param eventid The id of the event whose attendance has to be returned. (optional)
     * @param start The start date to filter (beginning of time by default). (optional)
     * @param end The end date to filter (today by default). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendancelogMylistsummary(UUID eventid, String start, String end) throws ApiException {
        sessionattendancelogMylistsummaryWithHttpInfo(eventid, start, end);
    }

    /**
     * View my attendance summary
     * Allows the user to view their own attendance summary.
     * @param eventid The id of the event whose attendance has to be returned. (optional)
     * @param start The start date to filter (beginning of time by default). (optional)
     * @param end The end date to filter (today by default). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendancelogMylistsummaryWithHttpInfo(UUID eventid, String start, String end) throws ApiException {
        okhttp3.Call localVarCall = sessionattendancelogMylistsummaryValidateBeforeCall(eventid, start, end, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View my attendance summary (asynchronously)
     * Allows the user to view their own attendance summary.
     * @param eventid The id of the event whose attendance has to be returned. (optional)
     * @param start The start date to filter (beginning of time by default). (optional)
     * @param end The end date to filter (today by default). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogMylistsummaryAsync(UUID eventid, String start, String end, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendancelogMylistsummaryValidateBeforeCall(eventid, start, end, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionattendancelogSave
     * @param id The id of the att log to save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogSaveCall(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/sessionattendancelog/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendancelogSaveValidateBeforeCall(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sessionattendancelogSave(Async)");
        }
        

        okhttp3.Call localVarCall = sessionattendancelogSaveCall(id, UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a class attendance log
     * Allows the user to create or edit a class attendance log.
     * @param id The id of the att log to save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendancelogSave(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        sessionattendancelogSaveWithHttpInfo(id, UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a class attendance log
     * Allows the user to create or edit a class attendance log.
     * @param id The id of the att log to save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendancelogSaveWithHttpInfo(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = sessionattendancelogSaveValidateBeforeCall(id, UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a class attendance log (asynchronously)
     * Allows the user to create or edit a class attendance log.
     * @param id The id of the att log to save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogSaveAsync(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendancelogSaveValidateBeforeCall(id, UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionattendancelogSaveswipe
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogSaveswipeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/sessionattendancelog/saveswipe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionattendancelogSaveswipeValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sessionattendancelogSaveswipeCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a class attendance log swipe
     * Allows the user to create or edit a class attendance log swipe, which are the details of time in or out.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void sessionattendancelogSaveswipe(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        sessionattendancelogSaveswipeWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a class attendance log swipe
     * Allows the user to create or edit a class attendance log swipe, which are the details of time in or out.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionattendancelogSaveswipeWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = sessionattendancelogSaveswipeValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a class attendance log swipe (asynchronously)
     * Allows the user to create or edit a class attendance log swipe, which are the details of time in or out.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionattendancelogSaveswipeAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionattendancelogSaveswipeValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
