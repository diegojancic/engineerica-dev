/*
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventregApi {
    private ApiClient localVarApiClient;

    public EventregApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventregApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for eventregAddme
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregAddmeCall(UUID eventid, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/addme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregAddmeValidateBeforeCall(UUID eventid, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling eventregAddme(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregAddme(Async)");
        }
        

        okhttp3.Call localVarCall = eventregAddmeCall(eventid, listname, _callback);
        return localVarCall;

    }

    /**
     * Register current user to a course
     * Allows the user to make themselves available for individual courses.
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregAddme(UUID eventid, String listname) throws ApiException {
        eventregAddmeWithHttpInfo(eventid, listname);
    }

    /**
     * Register current user to a course
     * Allows the user to make themselves available for individual courses.
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregAddmeWithHttpInfo(UUID eventid, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregAddmeValidateBeforeCall(eventid, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register current user to a course (asynchronously)
     * Allows the user to make themselves available for individual courses.
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregAddmeAsync(UUID eventid, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregAddmeValidateBeforeCall(eventid, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregAddmetoall
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregAddmetoallCall(String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/addmetoall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregAddmetoallValidateBeforeCall(String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregAddmetoall(Async)");
        }
        

        okhttp3.Call localVarCall = eventregAddmetoallCall(listname, _callback);
        return localVarCall;

    }

    /**
     * Register current user to all courses
     * Allows the user to make themselves available for all courses.
     * @param listname The name of the list where the user has to be registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregAddmetoall(String listname) throws ApiException {
        eventregAddmetoallWithHttpInfo(listname);
    }

    /**
     * Register current user to all courses
     * Allows the user to make themselves available for all courses.
     * @param listname The name of the list where the user has to be registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregAddmetoallWithHttpInfo(String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregAddmetoallValidateBeforeCall(listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register current user to all courses (asynchronously)
     * Allows the user to make themselves available for all courses.
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregAddmetoallAsync(String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregAddmetoallValidateBeforeCall(listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregAddmetogroup
     * @param codegroup The code used to group events. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregAddmetogroupCall(String codegroup, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/addmetogroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codegroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codegroup", codegroup));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregAddmetogroupValidateBeforeCall(String codegroup, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codegroup' is set
        if (codegroup == null) {
            throw new ApiException("Missing the required parameter 'codegroup' when calling eventregAddmetogroup(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregAddmetogroup(Async)");
        }
        

        okhttp3.Call localVarCall = eventregAddmetogroupCall(codegroup, listname, _callback);
        return localVarCall;

    }

    /**
     * Register current user to a course group
     * Allows the user to make themselves available for a course group.
     * @param codegroup The code used to group events. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregAddmetogroup(String codegroup, String listname) throws ApiException {
        eventregAddmetogroupWithHttpInfo(codegroup, listname);
    }

    /**
     * Register current user to a course group
     * Allows the user to make themselves available for a course group.
     * @param codegroup The code used to group events. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregAddmetogroupWithHttpInfo(String codegroup, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregAddmetogroupValidateBeforeCall(codegroup, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register current user to a course group (asynchronously)
     * Allows the user to make themselves available for a course group.
     * @param codegroup The code used to group events. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregAddmetogroupAsync(String codegroup, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregAddmetogroupValidateBeforeCall(codegroup, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregAdduser
     * @param userid The id of the user to add. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregAdduserCall(UUID userid, UUID eventid, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/adduser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregAdduserValidateBeforeCall(UUID userid, UUID eventid, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling eventregAdduser(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling eventregAdduser(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregAdduser(Async)");
        }
        

        okhttp3.Call localVarCall = eventregAdduserCall(userid, eventid, listname, _callback);
        return localVarCall;

    }

    /**
     * Register a user to a course for attendance
     * Allows the user to register a user to a course.
     * @param userid The id of the user to add. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregAdduser(UUID userid, UUID eventid, String listname) throws ApiException {
        eventregAdduserWithHttpInfo(userid, eventid, listname);
    }

    /**
     * Register a user to a course for attendance
     * Allows the user to register a user to a course.
     * @param userid The id of the user to add. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregAdduserWithHttpInfo(UUID userid, UUID eventid, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregAdduserValidateBeforeCall(userid, eventid, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register a user to a course for attendance (asynchronously)
     * Allows the user to register a user to a course.
     * @param userid The id of the user to add. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregAdduserAsync(UUID userid, UUID eventid, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregAdduserValidateBeforeCall(userid, eventid, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregAddusertoall
     * @param userid The id of the user to add. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregAddusertoallCall(UUID userid, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/addusertoall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregAddusertoallValidateBeforeCall(UUID userid, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling eventregAddusertoall(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregAddusertoall(Async)");
        }
        

        okhttp3.Call localVarCall = eventregAddusertoallCall(userid, listname, _callback);
        return localVarCall;

    }

    /**
     * Register a user to assist with all courses
     * Allows the user to make a staff member available to assist with all courses.
     * @param userid The id of the user to add. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregAddusertoall(UUID userid, String listname) throws ApiException {
        eventregAddusertoallWithHttpInfo(userid, listname);
    }

    /**
     * Register a user to assist with all courses
     * Allows the user to make a staff member available to assist with all courses.
     * @param userid The id of the user to add. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregAddusertoallWithHttpInfo(UUID userid, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregAddusertoallValidateBeforeCall(userid, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register a user to assist with all courses (asynchronously)
     * Allows the user to make a staff member available to assist with all courses.
     * @param userid The id of the user to add. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregAddusertoallAsync(UUID userid, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregAddusertoallValidateBeforeCall(userid, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregAddusertogroup
     * @param userid The id of the user to add. (required)
     * @param codegroup The code used to group events. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregAddusertogroupCall(UUID userid, String codegroup, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/addusertogroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (codegroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codegroup", codegroup));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregAddusertogroupValidateBeforeCall(UUID userid, String codegroup, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling eventregAddusertogroup(Async)");
        }
        
        // verify the required parameter 'codegroup' is set
        if (codegroup == null) {
            throw new ApiException("Missing the required parameter 'codegroup' when calling eventregAddusertogroup(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregAddusertogroup(Async)");
        }
        

        okhttp3.Call localVarCall = eventregAddusertogroupCall(userid, codegroup, listname, _callback);
        return localVarCall;

    }

    /**
     * Register a user to an course group
     * Allows the user to make a staff member available for a course group.
     * @param userid The id of the user to add. (required)
     * @param codegroup The code used to group events. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregAddusertogroup(UUID userid, String codegroup, String listname) throws ApiException {
        eventregAddusertogroupWithHttpInfo(userid, codegroup, listname);
    }

    /**
     * Register a user to an course group
     * Allows the user to make a staff member available for a course group.
     * @param userid The id of the user to add. (required)
     * @param codegroup The code used to group events. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregAddusertogroupWithHttpInfo(UUID userid, String codegroup, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregAddusertogroupValidateBeforeCall(userid, codegroup, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register a user to an course group (asynchronously)
     * Allows the user to make a staff member available for a course group.
     * @param userid The id of the user to add. (required)
     * @param codegroup The code used to group events. (required)
     * @param listname The name of the list where the user has to be registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregAddusertogroupAsync(UUID userid, String codegroup, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregAddusertogroupValidateBeforeCall(userid, codegroup, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregGetevents
     * @param userid The user id to list events. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param termid The term id to list events. (optional)
     * @param namefilter The value used to filter the events by name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregGeteventsCall(UUID userid, String listname, UUID termid, String namefilter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/getevents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        if (termid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termid", termid));
        }

        if (namefilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namefilter", namefilter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregGeteventsValidateBeforeCall(UUID userid, String listname, UUID termid, String namefilter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling eventregGetevents(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregGetevents(Async)");
        }
        

        okhttp3.Call localVarCall = eventregGeteventsCall(userid, listname, termid, namefilter, _callback);
        return localVarCall;

    }

    /**
     * View course registration by user
     * Allows the user to view all courses a given user is registered to, provided they have permission to view that user.
     * @param userid The user id to list events. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param termid The term id to list events. (optional)
     * @param namefilter The value used to filter the events by name. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregGetevents(UUID userid, String listname, UUID termid, String namefilter) throws ApiException {
        eventregGeteventsWithHttpInfo(userid, listname, termid, namefilter);
    }

    /**
     * View course registration by user
     * Allows the user to view all courses a given user is registered to, provided they have permission to view that user.
     * @param userid The user id to list events. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param termid The term id to list events. (optional)
     * @param namefilter The value used to filter the events by name. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregGeteventsWithHttpInfo(UUID userid, String listname, UUID termid, String namefilter) throws ApiException {
        okhttp3.Call localVarCall = eventregGeteventsValidateBeforeCall(userid, listname, termid, namefilter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View course registration by user (asynchronously)
     * Allows the user to view all courses a given user is registered to, provided they have permission to view that user.
     * @param userid The user id to list events. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param termid The term id to list events. (optional)
     * @param namefilter The value used to filter the events by name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregGeteventsAsync(UUID userid, String listname, UUID termid, String namefilter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregGeteventsValidateBeforeCall(userid, listname, termid, namefilter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregGetgroups
     * @param userid The user id to list events. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregGetgroupsCall(UUID userid, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/getgroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregGetgroupsValidateBeforeCall(UUID userid, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling eventregGetgroups(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregGetgroups(Async)");
        }
        

        okhttp3.Call localVarCall = eventregGetgroupsCall(userid, listname, _callback);
        return localVarCall;

    }

    /**
     * Lists the course group registrations of a user
     * Allows the user to view the course groups a staff member is available for.
     * @param userid The user id to list events. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregGetgroups(UUID userid, String listname) throws ApiException {
        eventregGetgroupsWithHttpInfo(userid, listname);
    }

    /**
     * Lists the course group registrations of a user
     * Allows the user to view the course groups a staff member is available for.
     * @param userid The user id to list events. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregGetgroupsWithHttpInfo(UUID userid, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregGetgroupsValidateBeforeCall(userid, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the course group registrations of a user (asynchronously)
     * Allows the user to view the course groups a staff member is available for.
     * @param userid The user id to list events. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregGetgroupsAsync(UUID userid, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregGetgroupsValidateBeforeCall(userid, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregGetmyevents
     * @param listname The name of the list where the user is registered. (required)
     * @param termid The term id to list events. (optional)
     * @param namefilter The value used to filter the events by name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregGetmyeventsCall(String listname, UUID termid, String namefilter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/getmyevents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        if (termid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termid", termid));
        }

        if (namefilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namefilter", namefilter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregGetmyeventsValidateBeforeCall(String listname, UUID termid, String namefilter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregGetmyevents(Async)");
        }
        

        okhttp3.Call localVarCall = eventregGetmyeventsCall(listname, termid, namefilter, _callback);
        return localVarCall;

    }

    /**
     * View the event registrations of the current user
     * 
     * @param listname The name of the list where the user is registered. (required)
     * @param termid The term id to list events. (optional)
     * @param namefilter The value used to filter the events by name. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregGetmyevents(String listname, UUID termid, String namefilter) throws ApiException {
        eventregGetmyeventsWithHttpInfo(listname, termid, namefilter);
    }

    /**
     * View the event registrations of the current user
     * 
     * @param listname The name of the list where the user is registered. (required)
     * @param termid The term id to list events. (optional)
     * @param namefilter The value used to filter the events by name. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregGetmyeventsWithHttpInfo(String listname, UUID termid, String namefilter) throws ApiException {
        okhttp3.Call localVarCall = eventregGetmyeventsValidateBeforeCall(listname, termid, namefilter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the event registrations of the current user (asynchronously)
     * 
     * @param listname The name of the list where the user is registered. (required)
     * @param termid The term id to list events. (optional)
     * @param namefilter The value used to filter the events by name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregGetmyeventsAsync(String listname, UUID termid, String namefilter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregGetmyeventsValidateBeforeCall(listname, termid, namefilter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregGetmygroups
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregGetmygroupsCall(String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/getmygroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregGetmygroupsValidateBeforeCall(String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregGetmygroups(Async)");
        }
        

        okhttp3.Call localVarCall = eventregGetmygroupsCall(listname, _callback);
        return localVarCall;

    }

    /**
     * View all current user registrations to course groups
     * Allows the user to view all his registrations to course groups.
     * @param listname The name of the list where the user is registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregGetmygroups(String listname) throws ApiException {
        eventregGetmygroupsWithHttpInfo(listname);
    }

    /**
     * View all current user registrations to course groups
     * Allows the user to view all his registrations to course groups.
     * @param listname The name of the list where the user is registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregGetmygroupsWithHttpInfo(String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregGetmygroupsValidateBeforeCall(listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all current user registrations to course groups (asynchronously)
     * Allows the user to view all his registrations to course groups.
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregGetmygroupsAsync(String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregGetmygroupsValidateBeforeCall(listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregGetusers
     * @param eventid The event id to list users. (required)
     * @param listname The name of the list to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregGetusersCall(UUID eventid, String listname, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/getusers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregGetusersValidateBeforeCall(UUID eventid, String listname, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling eventregGetusers(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregGetusers(Async)");
        }
        

        okhttp3.Call localVarCall = eventregGetusersCall(eventid, listname, photosize, _callback);
        return localVarCall;

    }

    /**
     * View course registration
     * Allows the user to view all users registered for an individual course.
     * @param eventid The event id to list users. (required)
     * @param listname The name of the list to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregGetusers(UUID eventid, String listname, Integer photosize) throws ApiException {
        eventregGetusersWithHttpInfo(eventid, listname, photosize);
    }

    /**
     * View course registration
     * Allows the user to view all users registered for an individual course.
     * @param eventid The event id to list users. (required)
     * @param listname The name of the list to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregGetusersWithHttpInfo(UUID eventid, String listname, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = eventregGetusersValidateBeforeCall(eventid, listname, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View course registration (asynchronously)
     * Allows the user to view all users registered for an individual course.
     * @param eventid The event id to list users. (required)
     * @param listname The name of the list to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregGetusersAsync(UUID eventid, String listname, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregGetusersValidateBeforeCall(eventid, listname, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregGetusersfromgroup
     * @param codegroup The code group to list users. (required)
     * @param listname The name of the list to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregGetusersfromgroupCall(UUID codegroup, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/getusersfromgroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codegroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codegroup", codegroup));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregGetusersfromgroupValidateBeforeCall(UUID codegroup, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codegroup' is set
        if (codegroup == null) {
            throw new ApiException("Missing the required parameter 'codegroup' when calling eventregGetusersfromgroup(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregGetusersfromgroup(Async)");
        }
        

        okhttp3.Call localVarCall = eventregGetusersfromgroupCall(codegroup, listname, _callback);
        return localVarCall;

    }

    /**
     * Lists the registrations for a course group
     * Allows the user the get the staff members registered to a specific course group
     * @param codegroup The code group to list users. (required)
     * @param listname The name of the list to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregGetusersfromgroup(UUID codegroup, String listname) throws ApiException {
        eventregGetusersfromgroupWithHttpInfo(codegroup, listname);
    }

    /**
     * Lists the registrations for a course group
     * Allows the user the get the staff members registered to a specific course group
     * @param codegroup The code group to list users. (required)
     * @param listname The name of the list to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregGetusersfromgroupWithHttpInfo(UUID codegroup, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregGetusersfromgroupValidateBeforeCall(codegroup, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the registrations for a course group (asynchronously)
     * Allows the user the get the staff members registered to a specific course group
     * @param codegroup The code group to list users. (required)
     * @param listname The name of the list to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregGetusersfromgroupAsync(UUID codegroup, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregGetusersfromgroupValidateBeforeCall(codegroup, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregGetuserstoall
     * @param listname The name of the list to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregGetuserstoallCall(String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/getuserstoall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregGetuserstoallValidateBeforeCall(String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregGetuserstoall(Async)");
        }
        

        okhttp3.Call localVarCall = eventregGetuserstoallCall(listname, _callback);
        return localVarCall;

    }

    /**
     * View the users that are registered to all courses
     * Allows the user to view all staff members available for all courses.
     * @param listname The name of the list to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregGetuserstoall(String listname) throws ApiException {
        eventregGetuserstoallWithHttpInfo(listname);
    }

    /**
     * View the users that are registered to all courses
     * Allows the user to view all staff members available for all courses.
     * @param listname The name of the list to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregGetuserstoallWithHttpInfo(String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregGetuserstoallValidateBeforeCall(listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the users that are registered to all courses (asynchronously)
     * Allows the user to view all staff members available for all courses.
     * @param listname The name of the list to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregGetuserstoallAsync(String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregGetuserstoallValidateBeforeCall(listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregRemoveme
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregRemovemeCall(UUID eventid, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/removeme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregRemovemeValidateBeforeCall(UUID eventid, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling eventregRemoveme(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregRemoveme(Async)");
        }
        

        okhttp3.Call localVarCall = eventregRemovemeCall(eventid, listname, _callback);
        return localVarCall;

    }

    /**
     * Unregister current user from a course
     * Allows the user to remove themselves from registration to a course.
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregRemoveme(UUID eventid, String listname) throws ApiException {
        eventregRemovemeWithHttpInfo(eventid, listname);
    }

    /**
     * Unregister current user from a course
     * Allows the user to remove themselves from registration to a course.
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregRemovemeWithHttpInfo(UUID eventid, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregRemovemeValidateBeforeCall(eventid, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unregister current user from a course (asynchronously)
     * Allows the user to remove themselves from registration to a course.
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregRemovemeAsync(UUID eventid, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregRemovemeValidateBeforeCall(eventid, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregRemovemefromall
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregRemovemefromallCall(String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/removemefromall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregRemovemefromallValidateBeforeCall(String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregRemovemefromall(Async)");
        }
        

        okhttp3.Call localVarCall = eventregRemovemefromallCall(listname, _callback);
        return localVarCall;

    }

    /**
     * Remove current user from the registration to all courses
     * Allows the user to remove themselves from availability to all courses.
     * @param listname The name of the list where the user is registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregRemovemefromall(String listname) throws ApiException {
        eventregRemovemefromallWithHttpInfo(listname);
    }

    /**
     * Remove current user from the registration to all courses
     * Allows the user to remove themselves from availability to all courses.
     * @param listname The name of the list where the user is registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregRemovemefromallWithHttpInfo(String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregRemovemefromallValidateBeforeCall(listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove current user from the registration to all courses (asynchronously)
     * Allows the user to remove themselves from availability to all courses.
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregRemovemefromallAsync(String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregRemovemefromallValidateBeforeCall(listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregRemovemefromgroup
     * @param codegroup The code group of the events/courses. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregRemovemefromgroupCall(UUID codegroup, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/removemefromgroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codegroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codegroup", codegroup));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregRemovemefromgroupValidateBeforeCall(UUID codegroup, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codegroup' is set
        if (codegroup == null) {
            throw new ApiException("Missing the required parameter 'codegroup' when calling eventregRemovemefromgroup(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregRemovemefromgroup(Async)");
        }
        

        okhttp3.Call localVarCall = eventregRemovemefromgroupCall(codegroup, listname, _callback);
        return localVarCall;

    }

    /**
     * Remove current user from a course group
     * Allows the user to remove themselves from availability to a course group.
     * @param codegroup The code group of the events/courses. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregRemovemefromgroup(UUID codegroup, String listname) throws ApiException {
        eventregRemovemefromgroupWithHttpInfo(codegroup, listname);
    }

    /**
     * Remove current user from a course group
     * Allows the user to remove themselves from availability to a course group.
     * @param codegroup The code group of the events/courses. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregRemovemefromgroupWithHttpInfo(UUID codegroup, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregRemovemefromgroupValidateBeforeCall(codegroup, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove current user from a course group (asynchronously)
     * Allows the user to remove themselves from availability to a course group.
     * @param codegroup The code group of the events/courses. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregRemovemefromgroupAsync(UUID codegroup, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregRemovemefromgroupValidateBeforeCall(codegroup, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregRemoveuser
     * @param userid The id of the user to remove. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregRemoveuserCall(UUID userid, UUID eventid, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/removeuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregRemoveuserValidateBeforeCall(UUID userid, UUID eventid, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling eventregRemoveuser(Async)");
        }
        
        // verify the required parameter 'eventid' is set
        if (eventid == null) {
            throw new ApiException("Missing the required parameter 'eventid' when calling eventregRemoveuser(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregRemoveuser(Async)");
        }
        

        okhttp3.Call localVarCall = eventregRemoveuserCall(userid, eventid, listname, _callback);
        return localVarCall;

    }

    /**
     * Remove a user from a course
     * Allows the user to remove a user from a course&#39;s registration.
     * @param userid The id of the user to remove. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregRemoveuser(UUID userid, UUID eventid, String listname) throws ApiException {
        eventregRemoveuserWithHttpInfo(userid, eventid, listname);
    }

    /**
     * Remove a user from a course
     * Allows the user to remove a user from a course&#39;s registration.
     * @param userid The id of the user to remove. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregRemoveuserWithHttpInfo(UUID userid, UUID eventid, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregRemoveuserValidateBeforeCall(userid, eventid, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a user from a course (asynchronously)
     * Allows the user to remove a user from a course&#39;s registration.
     * @param userid The id of the user to remove. (required)
     * @param eventid The id of the event. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregRemoveuserAsync(UUID userid, UUID eventid, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregRemoveuserValidateBeforeCall(userid, eventid, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregRemoveuserfromall
     * @param userid The id of the user to remove. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregRemoveuserfromallCall(UUID userid, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/removeuserfromall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregRemoveuserfromallValidateBeforeCall(UUID userid, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling eventregRemoveuserfromall(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregRemoveuserfromall(Async)");
        }
        

        okhttp3.Call localVarCall = eventregRemoveuserfromallCall(userid, listname, _callback);
        return localVarCall;

    }

    /**
     * Remove a user from the registration to all courses
     * Allows the user to remove a staff member from availability to all courses.
     * @param userid The id of the user to remove. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregRemoveuserfromall(UUID userid, String listname) throws ApiException {
        eventregRemoveuserfromallWithHttpInfo(userid, listname);
    }

    /**
     * Remove a user from the registration to all courses
     * Allows the user to remove a staff member from availability to all courses.
     * @param userid The id of the user to remove. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregRemoveuserfromallWithHttpInfo(UUID userid, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregRemoveuserfromallValidateBeforeCall(userid, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a user from the registration to all courses (asynchronously)
     * Allows the user to remove a staff member from availability to all courses.
     * @param userid The id of the user to remove. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregRemoveuserfromallAsync(UUID userid, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregRemoveuserfromallValidateBeforeCall(userid, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventregRemoveuserfromgroup
     * @param userid The id of the user to remove. (required)
     * @param codegroup The code group of the events/courses. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregRemoveuserfromgroupCall(UUID userid, UUID codegroup, String listname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventreg/removeuserfromgroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (codegroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codegroup", codegroup));
        }

        if (listname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listname", listname));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventregRemoveuserfromgroupValidateBeforeCall(UUID userid, UUID codegroup, String listname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling eventregRemoveuserfromgroup(Async)");
        }
        
        // verify the required parameter 'codegroup' is set
        if (codegroup == null) {
            throw new ApiException("Missing the required parameter 'codegroup' when calling eventregRemoveuserfromgroup(Async)");
        }
        
        // verify the required parameter 'listname' is set
        if (listname == null) {
            throw new ApiException("Missing the required parameter 'listname' when calling eventregRemoveuserfromgroup(Async)");
        }
        

        okhttp3.Call localVarCall = eventregRemoveuserfromgroupCall(userid, codegroup, listname, _callback);
        return localVarCall;

    }

    /**
     * Remove a user from a course group
     * Allows the user to remove a staff member from availability to a course group.
     * @param userid The id of the user to remove. (required)
     * @param codegroup The code group of the events/courses. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void eventregRemoveuserfromgroup(UUID userid, UUID codegroup, String listname) throws ApiException {
        eventregRemoveuserfromgroupWithHttpInfo(userid, codegroup, listname);
    }

    /**
     * Remove a user from a course group
     * Allows the user to remove a staff member from availability to a course group.
     * @param userid The id of the user to remove. (required)
     * @param codegroup The code group of the events/courses. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventregRemoveuserfromgroupWithHttpInfo(UUID userid, UUID codegroup, String listname) throws ApiException {
        okhttp3.Call localVarCall = eventregRemoveuserfromgroupValidateBeforeCall(userid, codegroup, listname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a user from a course group (asynchronously)
     * Allows the user to remove a staff member from availability to a course group.
     * @param userid The id of the user to remove. (required)
     * @param codegroup The code group of the events/courses. (required)
     * @param listname The name of the list where the user is registered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventregRemoveuserfromgroupAsync(UUID userid, UUID codegroup, String listname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventregRemoveuserfromgroupValidateBeforeCall(userid, codegroup, listname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
