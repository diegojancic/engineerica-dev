/*
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RatingApi {
    private ApiClient localVarApiClient;

    public RatingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RatingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for ratingFlag
     * @param id The rating to flag. (required)
     * @param comment Comment why should this should be removed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingFlagCall(UUID id, String comment, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rating/flag";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingFlagValidateBeforeCall(UUID id, String comment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ratingFlag(Async)");
        }
        

        okhttp3.Call localVarCall = ratingFlagCall(id, comment, _callback);
        return localVarCall;

    }

    /**
     * Flags one rating for moderation
     * 
     * @param id The rating to flag. (required)
     * @param comment Comment why should this should be removed. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingFlag(UUID id, String comment) throws ApiException {
        ratingFlagWithHttpInfo(id, comment);
    }

    /**
     * Flags one rating for moderation
     * 
     * @param id The rating to flag. (required)
     * @param comment Comment why should this should be removed. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingFlagWithHttpInfo(UUID id, String comment) throws ApiException {
        okhttp3.Call localVarCall = ratingFlagValidateBeforeCall(id, comment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Flags one rating for moderation (asynchronously)
     * 
     * @param id The rating to flag. (required)
     * @param comment Comment why should this should be removed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingFlagAsync(UUID id, String comment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingFlagValidateBeforeCall(id, comment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingFlagcomment
     * @param id The comment to flag. (required)
     * @param comment Comment why should this should be removed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingFlagcommentCall(UUID id, String comment, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rating/flagcomment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingFlagcommentValidateBeforeCall(UUID id, String comment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ratingFlagcomment(Async)");
        }
        

        okhttp3.Call localVarCall = ratingFlagcommentCall(id, comment, _callback);
        return localVarCall;

    }

    /**
     * Flags one comment for moderation
     * 
     * @param id The comment to flag. (required)
     * @param comment Comment why should this should be removed. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingFlagcomment(UUID id, String comment) throws ApiException {
        ratingFlagcommentWithHttpInfo(id, comment);
    }

    /**
     * Flags one comment for moderation
     * 
     * @param id The comment to flag. (required)
     * @param comment Comment why should this should be removed. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingFlagcommentWithHttpInfo(UUID id, String comment) throws ApiException {
        okhttp3.Call localVarCall = ratingFlagcommentValidateBeforeCall(id, comment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Flags one comment for moderation (asynchronously)
     * 
     * @param id The comment to flag. (required)
     * @param comment Comment why should this should be removed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingFlagcommentAsync(UUID id, String comment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingFlagcommentValidateBeforeCall(id, comment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingGet
     * @param type The entity type to get the rating. (required)
     * @param entityids List of ids to get the ratings. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingGetCall(String type, String entityids, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rating/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (entityids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityids", entityids));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingGetValidateBeforeCall(String type, String entityids, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling ratingGet(Async)");
        }
        
        // verify the required parameter 'entityids' is set
        if (entityids == null) {
            throw new ApiException("Missing the required parameter 'entityids' when calling ratingGet(Async)");
        }
        

        okhttp3.Call localVarCall = ratingGetCall(type, entityids, _callback);
        return localVarCall;

    }

    /**
     * Get rating for one or more entities
     * 
     * @param type The entity type to get the rating. (required)
     * @param entityids List of ids to get the ratings. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingGet(String type, String entityids) throws ApiException {
        ratingGetWithHttpInfo(type, entityids);
    }

    /**
     * Get rating for one or more entities
     * 
     * @param type The entity type to get the rating. (required)
     * @param entityids List of ids to get the ratings. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingGetWithHttpInfo(String type, String entityids) throws ApiException {
        okhttp3.Call localVarCall = ratingGetValidateBeforeCall(type, entityids, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get rating for one or more entities (asynchronously)
     * 
     * @param type The entity type to get the rating. (required)
     * @param entityids List of ids to get the ratings. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingGetAsync(String type, String entityids, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingGetValidateBeforeCall(type, entityids, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingGetall
     * @param type The entity type to get the rating. (required)
     * @param entityid Id of the entity to get the ratings. (required)
     * @param mostrecentfirst True to show most recent first, otherwise most helpful first. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingGetallCall(String type, String entityid, Boolean mostrecentfirst, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rating/getall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (entityid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityid", entityid));
        }

        if (mostrecentfirst != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mostrecentfirst", mostrecentfirst));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingGetallValidateBeforeCall(String type, String entityid, Boolean mostrecentfirst, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling ratingGetall(Async)");
        }
        
        // verify the required parameter 'entityid' is set
        if (entityid == null) {
            throw new ApiException("Missing the required parameter 'entityid' when calling ratingGetall(Async)");
        }
        

        okhttp3.Call localVarCall = ratingGetallCall(type, entityid, mostrecentfirst, _callback);
        return localVarCall;

    }

    /**
     * Gets the full ratings and comments for a specific entity
     * 
     * @param type The entity type to get the rating. (required)
     * @param entityid Id of the entity to get the ratings. (required)
     * @param mostrecentfirst True to show most recent first, otherwise most helpful first. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingGetall(String type, String entityid, Boolean mostrecentfirst) throws ApiException {
        ratingGetallWithHttpInfo(type, entityid, mostrecentfirst);
    }

    /**
     * Gets the full ratings and comments for a specific entity
     * 
     * @param type The entity type to get the rating. (required)
     * @param entityid Id of the entity to get the ratings. (required)
     * @param mostrecentfirst True to show most recent first, otherwise most helpful first. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingGetallWithHttpInfo(String type, String entityid, Boolean mostrecentfirst) throws ApiException {
        okhttp3.Call localVarCall = ratingGetallValidateBeforeCall(type, entityid, mostrecentfirst, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the full ratings and comments for a specific entity (asynchronously)
     * 
     * @param type The entity type to get the rating. (required)
     * @param entityid Id of the entity to get the ratings. (required)
     * @param mostrecentfirst True to show most recent first, otherwise most helpful first. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingGetallAsync(String type, String entityid, Boolean mostrecentfirst, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingGetallValidateBeforeCall(type, entityid, mostrecentfirst, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingGetcomments
     * @param ratingid The ID of the rating to get all comments. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingGetcommentsCall(UUID ratingid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rating/getcomments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ratingid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ratingid", ratingid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingGetcommentsValidateBeforeCall(UUID ratingid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ratingid' is set
        if (ratingid == null) {
            throw new ApiException("Missing the required parameter 'ratingid' when calling ratingGetcomments(Async)");
        }
        

        okhttp3.Call localVarCall = ratingGetcommentsCall(ratingid, _callback);
        return localVarCall;

    }

    /**
     * Gets all the comments for a rating
     * 
     * @param ratingid The ID of the rating to get all comments. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingGetcomments(UUID ratingid) throws ApiException {
        ratingGetcommentsWithHttpInfo(ratingid);
    }

    /**
     * Gets all the comments for a rating
     * 
     * @param ratingid The ID of the rating to get all comments. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingGetcommentsWithHttpInfo(UUID ratingid) throws ApiException {
        okhttp3.Call localVarCall = ratingGetcommentsValidateBeforeCall(ratingid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets all the comments for a rating (asynchronously)
     * 
     * @param ratingid The ID of the rating to get all comments. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingGetcommentsAsync(UUID ratingid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingGetcommentsValidateBeforeCall(ratingid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingGetpending
     * @param getgroup The ID of the group of pending ratings to get. (required)
     * @param rateid Rate this before returning. (optional)
     * @param rateval The value used to rate the item specified in rateid. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingGetpendingCall(UUID getgroup, UUID rateid, Integer rateval, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rating/getpending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (getgroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("getgroup", getgroup));
        }

        if (rateid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rateid", rateid));
        }

        if (rateval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rateval", rateval));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingGetpendingValidateBeforeCall(UUID getgroup, UUID rateid, Integer rateval, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'getgroup' is set
        if (getgroup == null) {
            throw new ApiException("Missing the required parameter 'getgroup' when calling ratingGetpending(Async)");
        }
        

        okhttp3.Call localVarCall = ratingGetpendingCall(getgroup, rateid, rateval, _callback);
        return localVarCall;

    }

    /**
     * Gets info of pre-saved and pre-approved ratings
     * 
     * @param getgroup The ID of the group of pending ratings to get. (required)
     * @param rateid Rate this before returning. (optional)
     * @param rateval The value used to rate the item specified in rateid. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingGetpending(UUID getgroup, UUID rateid, Integer rateval) throws ApiException {
        ratingGetpendingWithHttpInfo(getgroup, rateid, rateval);
    }

    /**
     * Gets info of pre-saved and pre-approved ratings
     * 
     * @param getgroup The ID of the group of pending ratings to get. (required)
     * @param rateid Rate this before returning. (optional)
     * @param rateval The value used to rate the item specified in rateid. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingGetpendingWithHttpInfo(UUID getgroup, UUID rateid, Integer rateval) throws ApiException {
        okhttp3.Call localVarCall = ratingGetpendingValidateBeforeCall(getgroup, rateid, rateval, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets info of pre-saved and pre-approved ratings (asynchronously)
     * 
     * @param getgroup The ID of the group of pending ratings to get. (required)
     * @param rateid Rate this before returning. (optional)
     * @param rateval The value used to rate the item specified in rateid. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingGetpendingAsync(UUID getgroup, UUID rateid, Integer rateval, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingGetpendingValidateBeforeCall(getgroup, rateid, rateval, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingGetpendingmoderation
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingGetpendingmoderationCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rating/getpendingmoderation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingGetpendingmoderationValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = ratingGetpendingmoderationCall(_callback);
        return localVarCall;

    }

    /**
     * Shows a list of the ratings and comments that are pending for moderation
     * Allows the user to view the list of pending ratings and comments.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingGetpendingmoderation() throws ApiException {
        ratingGetpendingmoderationWithHttpInfo();
    }

    /**
     * Shows a list of the ratings and comments that are pending for moderation
     * Allows the user to view the list of pending ratings and comments.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingGetpendingmoderationWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ratingGetpendingmoderationValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Shows a list of the ratings and comments that are pending for moderation (asynchronously)
     * Allows the user to view the list of pending ratings and comments.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingGetpendingmoderationAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingGetpendingmoderationValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingModerate
     * @param type Either &#39;rating&#39; or &#39;comment&#39; depending on what you want to moderate. (required)
     * @param id Id of the rating or comment, as specified in type. (required)
     * @param approve True to approve, false to reject. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingModerateCall(String type, UUID id, Boolean approve, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rating/moderate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (approve != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approve", approve));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingModerateValidateBeforeCall(String type, UUID id, Boolean approve, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling ratingModerate(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ratingModerate(Async)");
        }
        
        // verify the required parameter 'approve' is set
        if (approve == null) {
            throw new ApiException("Missing the required parameter 'approve' when calling ratingModerate(Async)");
        }
        

        okhttp3.Call localVarCall = ratingModerateCall(type, id, approve, _callback);
        return localVarCall;

    }

    /**
     * Allows the user to accept or reject a comment
     * Allows the user to approve or reject a comment or rating.
     * @param type Either &#39;rating&#39; or &#39;comment&#39; depending on what you want to moderate. (required)
     * @param id Id of the rating or comment, as specified in type. (required)
     * @param approve True to approve, false to reject. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingModerate(String type, UUID id, Boolean approve) throws ApiException {
        ratingModerateWithHttpInfo(type, id, approve);
    }

    /**
     * Allows the user to accept or reject a comment
     * Allows the user to approve or reject a comment or rating.
     * @param type Either &#39;rating&#39; or &#39;comment&#39; depending on what you want to moderate. (required)
     * @param id Id of the rating or comment, as specified in type. (required)
     * @param approve True to approve, false to reject. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingModerateWithHttpInfo(String type, UUID id, Boolean approve) throws ApiException {
        okhttp3.Call localVarCall = ratingModerateValidateBeforeCall(type, id, approve, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Allows the user to accept or reject a comment (asynchronously)
     * Allows the user to approve or reject a comment or rating.
     * @param type Either &#39;rating&#39; or &#39;comment&#39; depending on what you want to moderate. (required)
     * @param id Id of the rating or comment, as specified in type. (required)
     * @param approve True to approve, false to reject. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingModerateAsync(String type, UUID id, Boolean approve, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingModerateValidateBeforeCall(type, id, approve, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingPostcomment
     * @param ratingid The ID of the rating to post the comment. (required)
     * @param comment Text of the comment to post. (required)
     * @param annonymous True to post the comment annonymously. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingPostcommentCall(UUID ratingid, String comment, Boolean annonymous, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rating/postcomment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ratingid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ratingid", ratingid));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (annonymous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("annonymous", annonymous));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingPostcommentValidateBeforeCall(UUID ratingid, String comment, Boolean annonymous, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ratingid' is set
        if (ratingid == null) {
            throw new ApiException("Missing the required parameter 'ratingid' when calling ratingPostcomment(Async)");
        }
        
        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling ratingPostcomment(Async)");
        }
        
        // verify the required parameter 'annonymous' is set
        if (annonymous == null) {
            throw new ApiException("Missing the required parameter 'annonymous' when calling ratingPostcomment(Async)");
        }
        

        okhttp3.Call localVarCall = ratingPostcommentCall(ratingid, comment, annonymous, _callback);
        return localVarCall;

    }

    /**
     * Posts a comments for in a rating
     * 
     * @param ratingid The ID of the rating to post the comment. (required)
     * @param comment Text of the comment to post. (required)
     * @param annonymous True to post the comment annonymously. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingPostcomment(UUID ratingid, String comment, Boolean annonymous) throws ApiException {
        ratingPostcommentWithHttpInfo(ratingid, comment, annonymous);
    }

    /**
     * Posts a comments for in a rating
     * 
     * @param ratingid The ID of the rating to post the comment. (required)
     * @param comment Text of the comment to post. (required)
     * @param annonymous True to post the comment annonymously. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingPostcommentWithHttpInfo(UUID ratingid, String comment, Boolean annonymous) throws ApiException {
        okhttp3.Call localVarCall = ratingPostcommentValidateBeforeCall(ratingid, comment, annonymous, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Posts a comments for in a rating (asynchronously)
     * 
     * @param ratingid The ID of the rating to post the comment. (required)
     * @param comment Text of the comment to post. (required)
     * @param annonymous True to post the comment annonymously. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingPostcommentAsync(UUID ratingid, String comment, Boolean annonymous, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingPostcommentValidateBeforeCall(ratingid, comment, annonymous, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingRate
     * @param type The entity type to rate. (required)
     * @param entityid Id of the entity to rate. (required)
     * @param annonymous Whether to post as annonymous. (required)
     * @param value Value from 0 to 100 with the rating. (optional)
     * @param comment Comment associated with this review. Comment can be updated later on another request too. (optional)
     * @param updatecomment Whether to update the comments. Defaults to true. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingRateCall(String type, String entityid, Boolean annonymous, Integer value, String comment, Boolean updatecomment, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rating/rate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (entityid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityid", entityid));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (annonymous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("annonymous", annonymous));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (updatecomment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatecomment", updatecomment));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingRateValidateBeforeCall(String type, String entityid, Boolean annonymous, Integer value, String comment, Boolean updatecomment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling ratingRate(Async)");
        }
        
        // verify the required parameter 'entityid' is set
        if (entityid == null) {
            throw new ApiException("Missing the required parameter 'entityid' when calling ratingRate(Async)");
        }
        
        // verify the required parameter 'annonymous' is set
        if (annonymous == null) {
            throw new ApiException("Missing the required parameter 'annonymous' when calling ratingRate(Async)");
        }
        

        okhttp3.Call localVarCall = ratingRateCall(type, entityid, annonymous, value, comment, updatecomment, _callback);
        return localVarCall;

    }

    /**
     * Rates one entity
     * 
     * @param type The entity type to rate. (required)
     * @param entityid Id of the entity to rate. (required)
     * @param annonymous Whether to post as annonymous. (required)
     * @param value Value from 0 to 100 with the rating. (optional)
     * @param comment Comment associated with this review. Comment can be updated later on another request too. (optional)
     * @param updatecomment Whether to update the comments. Defaults to true. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingRate(String type, String entityid, Boolean annonymous, Integer value, String comment, Boolean updatecomment) throws ApiException {
        ratingRateWithHttpInfo(type, entityid, annonymous, value, comment, updatecomment);
    }

    /**
     * Rates one entity
     * 
     * @param type The entity type to rate. (required)
     * @param entityid Id of the entity to rate. (required)
     * @param annonymous Whether to post as annonymous. (required)
     * @param value Value from 0 to 100 with the rating. (optional)
     * @param comment Comment associated with this review. Comment can be updated later on another request too. (optional)
     * @param updatecomment Whether to update the comments. Defaults to true. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingRateWithHttpInfo(String type, String entityid, Boolean annonymous, Integer value, String comment, Boolean updatecomment) throws ApiException {
        okhttp3.Call localVarCall = ratingRateValidateBeforeCall(type, entityid, annonymous, value, comment, updatecomment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rates one entity (asynchronously)
     * 
     * @param type The entity type to rate. (required)
     * @param entityid Id of the entity to rate. (required)
     * @param annonymous Whether to post as annonymous. (required)
     * @param value Value from 0 to 100 with the rating. (optional)
     * @param comment Comment associated with this review. Comment can be updated later on another request too. (optional)
     * @param updatecomment Whether to update the comments. Defaults to true. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingRateAsync(String type, String entityid, Boolean annonymous, Integer value, String comment, Boolean updatecomment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingRateValidateBeforeCall(type, entityid, annonymous, value, comment, updatecomment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingRatepending
     * @param group The ID of the group of with pre-approved ratings. (required)
     * @param annonymous Whether to post as annonymous. (required)
     * @param rateid Rate this before returning. (optional)
     * @param value Value from 0 to 100 with the rating. (optional)
     * @param comment Comment associated with this review. Comment can be updated later on another request too. (optional)
     * @param updatecomment Whether to update the comments. Defaults to true. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingRatependingCall(UUID group, Boolean annonymous, UUID rateid, Integer value, String comment, Boolean updatecomment, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rating/ratepending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (rateid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rateid", rateid));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (annonymous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("annonymous", annonymous));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (updatecomment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatecomment", updatecomment));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingRatependingValidateBeforeCall(UUID group, Boolean annonymous, UUID rateid, Integer value, String comment, Boolean updatecomment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling ratingRatepending(Async)");
        }
        
        // verify the required parameter 'annonymous' is set
        if (annonymous == null) {
            throw new ApiException("Missing the required parameter 'annonymous' when calling ratingRatepending(Async)");
        }
        

        okhttp3.Call localVarCall = ratingRatependingCall(group, annonymous, rateid, value, comment, updatecomment, _callback);
        return localVarCall;

    }

    /**
     * Rates a pre-saved and pre-approved entity
     * 
     * @param group The ID of the group of with pre-approved ratings. (required)
     * @param annonymous Whether to post as annonymous. (required)
     * @param rateid Rate this before returning. (optional)
     * @param value Value from 0 to 100 with the rating. (optional)
     * @param comment Comment associated with this review. Comment can be updated later on another request too. (optional)
     * @param updatecomment Whether to update the comments. Defaults to true. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingRatepending(UUID group, Boolean annonymous, UUID rateid, Integer value, String comment, Boolean updatecomment) throws ApiException {
        ratingRatependingWithHttpInfo(group, annonymous, rateid, value, comment, updatecomment);
    }

    /**
     * Rates a pre-saved and pre-approved entity
     * 
     * @param group The ID of the group of with pre-approved ratings. (required)
     * @param annonymous Whether to post as annonymous. (required)
     * @param rateid Rate this before returning. (optional)
     * @param value Value from 0 to 100 with the rating. (optional)
     * @param comment Comment associated with this review. Comment can be updated later on another request too. (optional)
     * @param updatecomment Whether to update the comments. Defaults to true. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingRatependingWithHttpInfo(UUID group, Boolean annonymous, UUID rateid, Integer value, String comment, Boolean updatecomment) throws ApiException {
        okhttp3.Call localVarCall = ratingRatependingValidateBeforeCall(group, annonymous, rateid, value, comment, updatecomment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rates a pre-saved and pre-approved entity (asynchronously)
     * 
     * @param group The ID of the group of with pre-approved ratings. (required)
     * @param annonymous Whether to post as annonymous. (required)
     * @param rateid Rate this before returning. (optional)
     * @param value Value from 0 to 100 with the rating. (optional)
     * @param comment Comment associated with this review. Comment can be updated later on another request too. (optional)
     * @param updatecomment Whether to update the comments. Defaults to true. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingRatependingAsync(UUID group, Boolean annonymous, UUID rateid, Integer value, String comment, Boolean updatecomment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingRatependingValidateBeforeCall(group, annonymous, rateid, value, comment, updatecomment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingVote
     * @param ratingid The ID of the rating to vote on. (required)
     * @param vote 1 to vote up, -1 to vote down. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingVoteCall(UUID ratingid, Integer vote, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rating/vote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ratingid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ratingid", ratingid));
        }

        if (vote != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vote", vote));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingVoteValidateBeforeCall(UUID ratingid, Integer vote, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ratingid' is set
        if (ratingid == null) {
            throw new ApiException("Missing the required parameter 'ratingid' when calling ratingVote(Async)");
        }
        
        // verify the required parameter 'vote' is set
        if (vote == null) {
            throw new ApiException("Missing the required parameter 'vote' when calling ratingVote(Async)");
        }
        

        okhttp3.Call localVarCall = ratingVoteCall(ratingid, vote, _callback);
        return localVarCall;

    }

    /**
     * Votes up or down a rating
     * 
     * @param ratingid The ID of the rating to vote on. (required)
     * @param vote 1 to vote up, -1 to vote down. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ratingVote(UUID ratingid, Integer vote) throws ApiException {
        ratingVoteWithHttpInfo(ratingid, vote);
    }

    /**
     * Votes up or down a rating
     * 
     * @param ratingid The ID of the rating to vote on. (required)
     * @param vote 1 to vote up, -1 to vote down. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ratingVoteWithHttpInfo(UUID ratingid, Integer vote) throws ApiException {
        okhttp3.Call localVarCall = ratingVoteValidateBeforeCall(ratingid, vote, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Votes up or down a rating (asynchronously)
     * 
     * @param ratingid The ID of the rating to vote on. (required)
     * @param vote 1 to vote up, -1 to vote down. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingVoteAsync(UUID ratingid, Integer vote, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingVoteValidateBeforeCall(ratingid, vote, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
