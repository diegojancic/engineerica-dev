/*
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WaitinglineApi {
    private ApiClient localVarApiClient;

    public WaitinglineApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WaitinglineApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for waitinglineAdduser
     * @param station The id of the sign-in station. (required)
     * @param user The user&#39;s card number. (required)
     * @param locationid The location&#39;s id where the swipe must be saved. (optional)
     * @param time The date and time of the swipe. (optional)
     * @param signinrole Specifies if the sign-in is for an attendee or a staff member (optional)
     * @param roleid Specifies the role the user has selected in order to sign-in (optional)
     * @param services The services ids the user has selected. (optional)
     * @param eventid The id of the event the user selected. (optional)
     * @param staff The id of the staff member the user selected. (optional)
     * @param photosize The swiping user&#39;s photo size. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineAdduserCall(UUID station, String user, UUID locationid, OffsetDateTime time, String signinrole, UUID roleid, String services, UUID eventid, UUID staff, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/waitingline/adduser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (signinrole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signinrole", signinrole));
        }

        if (roleid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roleid", roleid));
        }

        if (services != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("services", services));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (staff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staff", staff));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitinglineAdduserValidateBeforeCall(UUID station, String user, UUID locationid, OffsetDateTime time, String signinrole, UUID roleid, String services, UUID eventid, UUID staff, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling waitinglineAdduser(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling waitinglineAdduser(Async)");
        }
        

        okhttp3.Call localVarCall = waitinglineAdduserCall(station, user, locationid, time, signinrole, roleid, services, eventid, staff, photosize, _callback);
        return localVarCall;

    }

    /**
     * Put user in a waiting line
     * 
     * @param station The id of the sign-in station. (required)
     * @param user The user&#39;s card number. (required)
     * @param locationid The location&#39;s id where the swipe must be saved. (optional)
     * @param time The date and time of the swipe. (optional)
     * @param signinrole Specifies if the sign-in is for an attendee or a staff member (optional)
     * @param roleid Specifies the role the user has selected in order to sign-in (optional)
     * @param services The services ids the user has selected. (optional)
     * @param eventid The id of the event the user selected. (optional)
     * @param staff The id of the staff member the user selected. (optional)
     * @param photosize The swiping user&#39;s photo size. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void waitinglineAdduser(UUID station, String user, UUID locationid, OffsetDateTime time, String signinrole, UUID roleid, String services, UUID eventid, UUID staff, Integer photosize) throws ApiException {
        waitinglineAdduserWithHttpInfo(station, user, locationid, time, signinrole, roleid, services, eventid, staff, photosize);
    }

    /**
     * Put user in a waiting line
     * 
     * @param station The id of the sign-in station. (required)
     * @param user The user&#39;s card number. (required)
     * @param locationid The location&#39;s id where the swipe must be saved. (optional)
     * @param time The date and time of the swipe. (optional)
     * @param signinrole Specifies if the sign-in is for an attendee or a staff member (optional)
     * @param roleid Specifies the role the user has selected in order to sign-in (optional)
     * @param services The services ids the user has selected. (optional)
     * @param eventid The id of the event the user selected. (optional)
     * @param staff The id of the staff member the user selected. (optional)
     * @param photosize The swiping user&#39;s photo size. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> waitinglineAdduserWithHttpInfo(UUID station, String user, UUID locationid, OffsetDateTime time, String signinrole, UUID roleid, String services, UUID eventid, UUID staff, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = waitinglineAdduserValidateBeforeCall(station, user, locationid, time, signinrole, roleid, services, eventid, staff, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Put user in a waiting line (asynchronously)
     * 
     * @param station The id of the sign-in station. (required)
     * @param user The user&#39;s card number. (required)
     * @param locationid The location&#39;s id where the swipe must be saved. (optional)
     * @param time The date and time of the swipe. (optional)
     * @param signinrole Specifies if the sign-in is for an attendee or a staff member (optional)
     * @param roleid Specifies the role the user has selected in order to sign-in (optional)
     * @param services The services ids the user has selected. (optional)
     * @param eventid The id of the event the user selected. (optional)
     * @param staff The id of the staff member the user selected. (optional)
     * @param photosize The swiping user&#39;s photo size. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineAdduserAsync(UUID station, String user, UUID locationid, OffsetDateTime time, String signinrole, UUID roleid, String services, UUID eventid, UUID staff, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitinglineAdduserValidateBeforeCall(station, user, locationid, time, signinrole, roleid, services, eventid, staff, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitinglineDelete
     * @param id The id of the line to delete. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineDeleteCall(UUID id, oas_any_type_not_mapped body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/waitingline/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitinglineDeleteValidateBeforeCall(UUID id, oas_any_type_not_mapped body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling waitinglineDelete(Async)");
        }
        

        okhttp3.Call localVarCall = waitinglineDeleteCall(id, body, _callback);
        return localVarCall;

    }

    /**
     * Delete a waiting line
     * Allows the user to delete an existing waiting line, provided it is in a location that the user is scoped to.
     * @param id The id of the line to delete. (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void waitinglineDelete(UUID id, oas_any_type_not_mapped body) throws ApiException {
        waitinglineDeleteWithHttpInfo(id, body);
    }

    /**
     * Delete a waiting line
     * Allows the user to delete an existing waiting line, provided it is in a location that the user is scoped to.
     * @param id The id of the line to delete. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> waitinglineDeleteWithHttpInfo(UUID id, oas_any_type_not_mapped body) throws ApiException {
        okhttp3.Call localVarCall = waitinglineDeleteValidateBeforeCall(id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a waiting line (asynchronously)
     * Allows the user to delete an existing waiting line, provided it is in a location that the user is scoped to.
     * @param id The id of the line to delete. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineDeleteAsync(UUID id, oas_any_type_not_mapped body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitinglineDeleteValidateBeforeCall(id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitinglineGet
     * @param id The id of the waiting line to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineGetCall(UUID id, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/waitingline/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitinglineGetValidateBeforeCall(UUID id, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling waitinglineGet(Async)");
        }
        

        okhttp3.Call localVarCall = waitinglineGetCall(id, photosize, _callback);
        return localVarCall;

    }

    /**
     * View details of a waiting line
     * Allows the user to view the details of a waiting line in a location to which they are scoped.
     * @param id The id of the waiting line to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void waitinglineGet(UUID id, Integer photosize) throws ApiException {
        waitinglineGetWithHttpInfo(id, photosize);
    }

    /**
     * View details of a waiting line
     * Allows the user to view the details of a waiting line in a location to which they are scoped.
     * @param id The id of the waiting line to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> waitinglineGetWithHttpInfo(UUID id, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = waitinglineGetValidateBeforeCall(id, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a waiting line (asynchronously)
     * Allows the user to view the details of a waiting line in a location to which they are scoped.
     * @param id The id of the waiting line to get. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineGetAsync(UUID id, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitinglineGetValidateBeforeCall(id, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitinglineIsuserin
     * @param station The id of the sign-in station. (required)
     * @param time The date and time of the swipe. (required)
     * @param user The card number of the user. (required)
     * @param location The id of the location the user picked. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineIsuserinCall(UUID station, OffsetDateTime time, String user, UUID location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/waitingline/isuserin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitinglineIsuserinValidateBeforeCall(UUID station, OffsetDateTime time, String user, UUID location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling waitinglineIsuserin(Async)");
        }
        
        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling waitinglineIsuserin(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling waitinglineIsuserin(Async)");
        }
        

        okhttp3.Call localVarCall = waitinglineIsuserinCall(station, time, user, location, _callback);
        return localVarCall;

    }

    /**
     * Check whether a user is in a waiting line, signed-in or is not in the area
     * 
     * @param station The id of the sign-in station. (required)
     * @param time The date and time of the swipe. (required)
     * @param user The card number of the user. (required)
     * @param location The id of the location the user picked. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void waitinglineIsuserin(UUID station, OffsetDateTime time, String user, UUID location) throws ApiException {
        waitinglineIsuserinWithHttpInfo(station, time, user, location);
    }

    /**
     * Check whether a user is in a waiting line, signed-in or is not in the area
     * 
     * @param station The id of the sign-in station. (required)
     * @param time The date and time of the swipe. (required)
     * @param user The card number of the user. (required)
     * @param location The id of the location the user picked. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> waitinglineIsuserinWithHttpInfo(UUID station, OffsetDateTime time, String user, UUID location) throws ApiException {
        okhttp3.Call localVarCall = waitinglineIsuserinValidateBeforeCall(station, time, user, location, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check whether a user is in a waiting line, signed-in or is not in the area (asynchronously)
     * 
     * @param station The id of the sign-in station. (required)
     * @param time The date and time of the swipe. (required)
     * @param user The card number of the user. (required)
     * @param location The id of the location the user picked. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineIsuserinAsync(UUID station, OffsetDateTime time, String user, UUID location, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitinglineIsuserinValidateBeforeCall(station, time, user, location, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitinglineList
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineListCall(Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/waitingline/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitinglineListValidateBeforeCall(Integer from, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling waitinglineList(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling waitinglineList(Async)");
        }
        

        okhttp3.Call localVarCall = waitinglineListCall(from, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of waiting lines
     * Allows the user to view the list of waiting lines in locations to which they are scoped.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void waitinglineList(Integer from, Integer count) throws ApiException {
        waitinglineListWithHttpInfo(from, count);
    }

    /**
     * View a list of waiting lines
     * Allows the user to view the list of waiting lines in locations to which they are scoped.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> waitinglineListWithHttpInfo(Integer from, Integer count) throws ApiException {
        okhttp3.Call localVarCall = waitinglineListValidateBeforeCall(from, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of waiting lines (asynchronously)
     * Allows the user to view the list of waiting lines in locations to which they are scoped.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineListAsync(Integer from, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitinglineListValidateBeforeCall(from, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitinglineRemoveuser
     * @param waitingline The id of the waiting line whose item has to be removed. (required)
     * @param itemid The ID of the item that has to be removed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineRemoveuserCall(UUID waitingline, UUID itemid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/waitingline/removeuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (waitingline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("waitingline", waitingline));
        }

        if (itemid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemid", itemid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitinglineRemoveuserValidateBeforeCall(UUID waitingline, UUID itemid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'waitingline' is set
        if (waitingline == null) {
            throw new ApiException("Missing the required parameter 'waitingline' when calling waitinglineRemoveuser(Async)");
        }
        
        // verify the required parameter 'itemid' is set
        if (itemid == null) {
            throw new ApiException("Missing the required parameter 'itemid' when calling waitinglineRemoveuser(Async)");
        }
        

        okhttp3.Call localVarCall = waitinglineRemoveuserCall(waitingline, itemid, _callback);
        return localVarCall;

    }

    /**
     * Remove a user from a waiting line
     * Allows the user to remove a user from a waiting line, provided they have permission to access that waiting line.
     * @param waitingline The id of the waiting line whose item has to be removed. (required)
     * @param itemid The ID of the item that has to be removed. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void waitinglineRemoveuser(UUID waitingline, UUID itemid) throws ApiException {
        waitinglineRemoveuserWithHttpInfo(waitingline, itemid);
    }

    /**
     * Remove a user from a waiting line
     * Allows the user to remove a user from a waiting line, provided they have permission to access that waiting line.
     * @param waitingline The id of the waiting line whose item has to be removed. (required)
     * @param itemid The ID of the item that has to be removed. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> waitinglineRemoveuserWithHttpInfo(UUID waitingline, UUID itemid) throws ApiException {
        okhttp3.Call localVarCall = waitinglineRemoveuserValidateBeforeCall(waitingline, itemid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a user from a waiting line (asynchronously)
     * Allows the user to remove a user from a waiting line, provided they have permission to access that waiting line.
     * @param waitingline The id of the waiting line whose item has to be removed. (required)
     * @param itemid The ID of the item that has to be removed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineRemoveuserAsync(UUID waitingline, UUID itemid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitinglineRemoveuserValidateBeforeCall(waitingline, itemid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitinglineSave
     * @param id The id of the waiting line save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineSaveCall(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/waitingline/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitinglineSaveValidateBeforeCall(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling waitinglineSave(Async)");
        }
        

        okhttp3.Call localVarCall = waitinglineSaveCall(id, UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a waiting line
     * Allows the user to create or edit a waiting line in a location to which they are scoped.
     * @param id The id of the waiting line save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void waitinglineSave(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        waitinglineSaveWithHttpInfo(id, UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a waiting line
     * Allows the user to create or edit a waiting line in a location to which they are scoped.
     * @param id The id of the waiting line save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> waitinglineSaveWithHttpInfo(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = waitinglineSaveValidateBeforeCall(id, UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a waiting line (asynchronously)
     * Allows the user to create or edit a waiting line in a location to which they are scoped.
     * @param id The id of the waiting line save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineSaveAsync(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitinglineSaveValidateBeforeCall(id, UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitinglineSigninuser
     * @param waitingline The id of the waiting line whose item needs to be signed-in. (required)
     * @param itemid The ID of the item that has to be signed-in. (required)
     * @param staff The id of the staff member selected to sign-in. (required)
     * @param photosize The swiping user&#39;s photo size. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineSigninuserCall(UUID waitingline, UUID itemid, UUID staff, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/waitingline/signinuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (waitingline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("waitingline", waitingline));
        }

        if (itemid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemid", itemid));
        }

        if (staff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staff", staff));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitinglineSigninuserValidateBeforeCall(UUID waitingline, UUID itemid, UUID staff, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'waitingline' is set
        if (waitingline == null) {
            throw new ApiException("Missing the required parameter 'waitingline' when calling waitinglineSigninuser(Async)");
        }
        
        // verify the required parameter 'itemid' is set
        if (itemid == null) {
            throw new ApiException("Missing the required parameter 'itemid' when calling waitinglineSigninuser(Async)");
        }
        
        // verify the required parameter 'staff' is set
        if (staff == null) {
            throw new ApiException("Missing the required parameter 'staff' when calling waitinglineSigninuser(Async)");
        }
        

        okhttp3.Call localVarCall = waitinglineSigninuserCall(waitingline, itemid, staff, photosize, _callback);
        return localVarCall;

    }

    /**
     * Sign a user in from a waiting line
     * Allows the user to sign a user in from a waiting line, provided they have permission to access that waiting line.
     * @param waitingline The id of the waiting line whose item needs to be signed-in. (required)
     * @param itemid The ID of the item that has to be signed-in. (required)
     * @param staff The id of the staff member selected to sign-in. (required)
     * @param photosize The swiping user&#39;s photo size. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void waitinglineSigninuser(UUID waitingline, UUID itemid, UUID staff, Integer photosize) throws ApiException {
        waitinglineSigninuserWithHttpInfo(waitingline, itemid, staff, photosize);
    }

    /**
     * Sign a user in from a waiting line
     * Allows the user to sign a user in from a waiting line, provided they have permission to access that waiting line.
     * @param waitingline The id of the waiting line whose item needs to be signed-in. (required)
     * @param itemid The ID of the item that has to be signed-in. (required)
     * @param staff The id of the staff member selected to sign-in. (required)
     * @param photosize The swiping user&#39;s photo size. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> waitinglineSigninuserWithHttpInfo(UUID waitingline, UUID itemid, UUID staff, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = waitinglineSigninuserValidateBeforeCall(waitingline, itemid, staff, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sign a user in from a waiting line (asynchronously)
     * Allows the user to sign a user in from a waiting line, provided they have permission to access that waiting line.
     * @param waitingline The id of the waiting line whose item needs to be signed-in. (required)
     * @param itemid The ID of the item that has to be signed-in. (required)
     * @param staff The id of the staff member selected to sign-in. (required)
     * @param photosize The swiping user&#39;s photo size. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitinglineSigninuserAsync(UUID waitingline, UUID itemid, UUID staff, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitinglineSigninuserValidateBeforeCall(waitingline, itemid, staff, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
