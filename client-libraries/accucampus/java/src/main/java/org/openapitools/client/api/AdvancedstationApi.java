/*
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdvancedstationApi {
    private ApiClient localVarApiClient;

    public AdvancedstationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdvancedstationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for advancedstationCheckunknownuser
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationCheckunknownuserCall(UUID station, String user, UUID location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstation/checkunknownuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationCheckunknownuserValidateBeforeCall(UUID station, String user, UUID location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationCheckunknownuser(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationCheckunknownuser(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling advancedstationCheckunknownuser(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationCheckunknownuserCall(station, user, location, _callback);
        return localVarCall;

    }

    /**
     * Check whether the user is known by the system.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationCheckunknownuser(UUID station, String user, UUID location) throws ApiException {
        advancedstationCheckunknownuserWithHttpInfo(station, user, location);
    }

    /**
     * Check whether the user is known by the system.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationCheckunknownuserWithHttpInfo(UUID station, String user, UUID location) throws ApiException {
        okhttp3.Call localVarCall = advancedstationCheckunknownuserValidateBeforeCall(station, user, location, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check whether the user is known by the system. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationCheckunknownuserAsync(UUID station, String user, UUID location, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationCheckunknownuserValidateBeforeCall(station, user, location, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationCheckuserrole
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationCheckuserroleCall(UUID station, String user, UUID location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstation/checkuserrole";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationCheckuserroleValidateBeforeCall(UUID station, String user, UUID location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationCheckuserrole(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationCheckuserrole(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling advancedstationCheckuserrole(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationCheckuserroleCall(station, user, location, _callback);
        return localVarCall;

    }

    /**
     * Check whether the user is a staff member, an attendee or both.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationCheckuserrole(UUID station, String user, UUID location) throws ApiException {
        advancedstationCheckuserroleWithHttpInfo(station, user, location);
    }

    /**
     * Check whether the user is a staff member, an attendee or both.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationCheckuserroleWithHttpInfo(UUID station, String user, UUID location) throws ApiException {
        okhttp3.Call localVarCall = advancedstationCheckuserroleValidateBeforeCall(station, user, location, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check whether the user is a staff member, an attendee or both. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationCheckuserroleAsync(UUID station, String user, UUID location, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationCheckuserroleValidateBeforeCall(station, user, location, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationCreateuser
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user to create. (required)
     * @param location The id of the location the user picked. (required)
     * @param firstname The first name of the user to create. (required)
     * @param lastname The last name of the user to create. (required)
     * @param email The email of the user to create. (required)
     * @param middlename The middle name of the user to create. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationCreateuserCall(UUID station, String user, UUID location, String firstname, String lastname, String email, String middlename, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstation/createuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (firstname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstname", firstname));
        }

        if (middlename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("middlename", middlename));
        }

        if (lastname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastname", lastname));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationCreateuserValidateBeforeCall(UUID station, String user, UUID location, String firstname, String lastname, String email, String middlename, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationCreateuser(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationCreateuser(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling advancedstationCreateuser(Async)");
        }
        
        // verify the required parameter 'firstname' is set
        if (firstname == null) {
            throw new ApiException("Missing the required parameter 'firstname' when calling advancedstationCreateuser(Async)");
        }
        
        // verify the required parameter 'lastname' is set
        if (lastname == null) {
            throw new ApiException("Missing the required parameter 'lastname' when calling advancedstationCreateuser(Async)");
        }
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling advancedstationCreateuser(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationCreateuserCall(station, user, location, firstname, lastname, email, middlename, _callback);
        return localVarCall;

    }

    /**
     * Creates a user via a sign-in station.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user to create. (required)
     * @param location The id of the location the user picked. (required)
     * @param firstname The first name of the user to create. (required)
     * @param lastname The last name of the user to create. (required)
     * @param email The email of the user to create. (required)
     * @param middlename The middle name of the user to create. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationCreateuser(UUID station, String user, UUID location, String firstname, String lastname, String email, String middlename) throws ApiException {
        advancedstationCreateuserWithHttpInfo(station, user, location, firstname, lastname, email, middlename);
    }

    /**
     * Creates a user via a sign-in station.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user to create. (required)
     * @param location The id of the location the user picked. (required)
     * @param firstname The first name of the user to create. (required)
     * @param lastname The last name of the user to create. (required)
     * @param email The email of the user to create. (required)
     * @param middlename The middle name of the user to create. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationCreateuserWithHttpInfo(UUID station, String user, UUID location, String firstname, String lastname, String email, String middlename) throws ApiException {
        okhttp3.Call localVarCall = advancedstationCreateuserValidateBeforeCall(station, user, location, firstname, lastname, email, middlename, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a user via a sign-in station. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param user The card of the user to create. (required)
     * @param location The id of the location the user picked. (required)
     * @param firstname The first name of the user to create. (required)
     * @param lastname The last name of the user to create. (required)
     * @param email The email of the user to create. (required)
     * @param middlename The middle name of the user to create. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationCreateuserAsync(UUID station, String user, UUID location, String firstname, String lastname, String email, String middlename, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationCreateuserValidateBeforeCall(station, user, location, firstname, lastname, email, middlename, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationGetevents
     * @param station The id of the sign-in station to get. (required)
     * @param location The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationGeteventsCall(UUID station, UUID location, String user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstation/getevents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationGeteventsValidateBeforeCall(UUID station, UUID location, String user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationGetevents(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling advancedstationGetevents(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationGetevents(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationGeteventsCall(station, location, user, _callback);
        return localVarCall;

    }

    /**
     * Gets the courses available for a specific location and a specific student.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param location The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationGetevents(UUID station, UUID location, String user) throws ApiException {
        advancedstationGeteventsWithHttpInfo(station, location, user);
    }

    /**
     * Gets the courses available for a specific location and a specific student.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param location The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationGeteventsWithHttpInfo(UUID station, UUID location, String user) throws ApiException {
        okhttp3.Call localVarCall = advancedstationGeteventsValidateBeforeCall(station, location, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the courses available for a specific location and a specific student. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param location The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationGeteventsAsync(UUID station, UUID location, String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationGeteventsValidateBeforeCall(station, location, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationGetinfo
     * @param id The id of the sign-in station to get. (required)
     * @param event The id of the event (or session), to override the scheduled one. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationGetinfoCall(UUID id, UUID event, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstation/getinfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationGetinfoValidateBeforeCall(UUID id, UUID event, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling advancedstationGetinfo(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationGetinfoCall(id, event, _callback);
        return localVarCall;

    }

    /**
     * Gets the info to display in the sign-in station by it&#39;s ID.
     * 
     * @param id The id of the sign-in station to get. (required)
     * @param event The id of the event (or session), to override the scheduled one. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationGetinfo(UUID id, UUID event) throws ApiException {
        advancedstationGetinfoWithHttpInfo(id, event);
    }

    /**
     * Gets the info to display in the sign-in station by it&#39;s ID.
     * 
     * @param id The id of the sign-in station to get. (required)
     * @param event The id of the event (or session), to override the scheduled one. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationGetinfoWithHttpInfo(UUID id, UUID event) throws ApiException {
        okhttp3.Call localVarCall = advancedstationGetinfoValidateBeforeCall(id, event, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the info to display in the sign-in station by it&#39;s ID. (asynchronously)
     * 
     * @param id The id of the sign-in station to get. (required)
     * @param event The id of the event (or session), to override the scheduled one. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationGetinfoAsync(UUID id, UUID event, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationGetinfoValidateBeforeCall(id, event, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationGetlocations
     * @param station The id of the sign-in station whose locations have to be returned. (required)
     * @param user The card of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationGetlocationsCall(UUID station, String user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstation/getlocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationGetlocationsValidateBeforeCall(UUID station, String user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationGetlocations(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationGetlocations(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationGetlocationsCall(station, user, _callback);
        return localVarCall;

    }

    /**
     * Gets the locations available in a sign-in station.
     * 
     * @param station The id of the sign-in station whose locations have to be returned. (required)
     * @param user The card of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationGetlocations(UUID station, String user) throws ApiException {
        advancedstationGetlocationsWithHttpInfo(station, user);
    }

    /**
     * Gets the locations available in a sign-in station.
     * 
     * @param station The id of the sign-in station whose locations have to be returned. (required)
     * @param user The card of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationGetlocationsWithHttpInfo(UUID station, String user) throws ApiException {
        okhttp3.Call localVarCall = advancedstationGetlocationsValidateBeforeCall(station, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the locations available in a sign-in station. (asynchronously)
     * 
     * @param station The id of the sign-in station whose locations have to be returned. (required)
     * @param user The card of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationGetlocationsAsync(UUID station, String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationGetlocationsValidateBeforeCall(station, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationGetlogstaff
     * @param station The id of the sign-in station to get. (required)
     * @param attendancelog The id of the attendance log to filter the staff members. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationGetlogstaffCall(UUID station, UUID attendancelog, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstation/getlogstaff";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (attendancelog != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attendancelog", attendancelog));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationGetlogstaffValidateBeforeCall(UUID station, UUID attendancelog, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationGetlogstaff(Async)");
        }
        
        // verify the required parameter 'attendancelog' is set
        if (attendancelog == null) {
            throw new ApiException("Missing the required parameter 'attendancelog' when calling advancedstationGetlogstaff(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationGetlogstaffCall(station, attendancelog, photosize, _callback);
        return localVarCall;

    }

    /**
     * Gets the staff/tutors available filtered by the location, course and services of the given attendance log.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param attendancelog The id of the attendance log to filter the staff members. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationGetlogstaff(UUID station, UUID attendancelog, Integer photosize) throws ApiException {
        advancedstationGetlogstaffWithHttpInfo(station, attendancelog, photosize);
    }

    /**
     * Gets the staff/tutors available filtered by the location, course and services of the given attendance log.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param attendancelog The id of the attendance log to filter the staff members. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationGetlogstaffWithHttpInfo(UUID station, UUID attendancelog, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = advancedstationGetlogstaffValidateBeforeCall(station, attendancelog, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the staff/tutors available filtered by the location, course and services of the given attendance log. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param attendancelog The id of the attendance log to filter the staff members. (required)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationGetlogstaffAsync(UUID station, UUID attendancelog, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationGetlogstaffValidateBeforeCall(station, attendancelog, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationGetroles
     * @param station The id of the sign-in station to get. (required)
     * @param signinrole Specifies how the user is signing-in. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationGetrolesCall(UUID station, String signinrole, String user, UUID location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstation/getroles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (signinrole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signinrole", signinrole));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationGetrolesValidateBeforeCall(UUID station, String signinrole, String user, UUID location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationGetroles(Async)");
        }
        
        // verify the required parameter 'signinrole' is set
        if (signinrole == null) {
            throw new ApiException("Missing the required parameter 'signinrole' when calling advancedstationGetroles(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationGetroles(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling advancedstationGetroles(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationGetrolesCall(station, signinrole, user, location, _callback);
        return localVarCall;

    }

    /**
     * Gets the user roles of the user trying to sign-in.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param signinrole Specifies how the user is signing-in. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationGetroles(UUID station, String signinrole, String user, UUID location) throws ApiException {
        advancedstationGetrolesWithHttpInfo(station, signinrole, user, location);
    }

    /**
     * Gets the user roles of the user trying to sign-in.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param signinrole Specifies how the user is signing-in. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationGetrolesWithHttpInfo(UUID station, String signinrole, String user, UUID location) throws ApiException {
        okhttp3.Call localVarCall = advancedstationGetrolesValidateBeforeCall(station, signinrole, user, location, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the user roles of the user trying to sign-in. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param signinrole Specifies how the user is signing-in. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationGetrolesAsync(UUID station, String signinrole, String user, UUID location, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationGetrolesValidateBeforeCall(station, signinrole, user, location, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationGetservices
     * @param station The id of the sign-in station to get. (required)
     * @param location The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationGetservicesCall(UUID station, UUID location, String user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstation/getservices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationGetservicesValidateBeforeCall(UUID station, UUID location, String user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationGetservices(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling advancedstationGetservices(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationGetservices(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationGetservicesCall(station, location, user, _callback);
        return localVarCall;

    }

    /**
     * Gets the services available for a specific location.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param location The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationGetservices(UUID station, UUID location, String user) throws ApiException {
        advancedstationGetservicesWithHttpInfo(station, location, user);
    }

    /**
     * Gets the services available for a specific location.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param location The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationGetservicesWithHttpInfo(UUID station, UUID location, String user) throws ApiException {
        okhttp3.Call localVarCall = advancedstationGetservicesValidateBeforeCall(station, location, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the services available for a specific location. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param location The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationGetservicesAsync(UUID station, UUID location, String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationGetservicesValidateBeforeCall(station, location, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationGetstaff
     * @param station The id of the sign-in station to get. (required)
     * @param locationid The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @param services The list of services selected by the user, in JSON format. (optional)
     * @param eventid The ID of the event selected. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationGetstaffCall(UUID station, UUID locationid, String user, String services, UUID eventid, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstation/getstaff";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (services != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("services", services));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationGetstaffValidateBeforeCall(UUID station, UUID locationid, String user, String services, UUID eventid, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationGetstaff(Async)");
        }
        
        // verify the required parameter 'locationid' is set
        if (locationid == null) {
            throw new ApiException("Missing the required parameter 'locationid' when calling advancedstationGetstaff(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationGetstaff(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationGetstaffCall(station, locationid, user, services, eventid, photosize, _callback);
        return localVarCall;

    }

    /**
     * Gets the staff/tutors available for a specific location, course and service.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param locationid The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @param services The list of services selected by the user, in JSON format. (optional)
     * @param eventid The ID of the event selected. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationGetstaff(UUID station, UUID locationid, String user, String services, UUID eventid, Integer photosize) throws ApiException {
        advancedstationGetstaffWithHttpInfo(station, locationid, user, services, eventid, photosize);
    }

    /**
     * Gets the staff/tutors available for a specific location, course and service.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param locationid The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @param services The list of services selected by the user, in JSON format. (optional)
     * @param eventid The ID of the event selected. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationGetstaffWithHttpInfo(UUID station, UUID locationid, String user, String services, UUID eventid, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = advancedstationGetstaffValidateBeforeCall(station, locationid, user, services, eventid, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets the staff/tutors available for a specific location, course and service. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param locationid The id of the location the student picked. (required)
     * @param user The card of the user. (required)
     * @param services The list of services selected by the user, in JSON format. (optional)
     * @param eventid The ID of the event selected. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationGetstaffAsync(UUID station, UUID locationid, String user, String services, UUID eventid, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationGetstaffValidateBeforeCall(station, locationid, user, services, eventid, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for advancedstationIssignedin
     * @param station The id of the sign-in station to get. (required)
     * @param time The date and time of the swipe. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationIssignedinCall(UUID station, OffsetDateTime time, String user, UUID location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advancedstation/issignedin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (station != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("station", station));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancedstationIssignedinValidateBeforeCall(UUID station, OffsetDateTime time, String user, UUID location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'station' is set
        if (station == null) {
            throw new ApiException("Missing the required parameter 'station' when calling advancedstationIssignedin(Async)");
        }
        
        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling advancedstationIssignedin(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling advancedstationIssignedin(Async)");
        }
        

        okhttp3.Call localVarCall = advancedstationIssignedinCall(station, time, user, location, _callback);
        return localVarCall;

    }

    /**
     * Gets whether a user is signed-in or not.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param time The date and time of the swipe. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void advancedstationIssignedin(UUID station, OffsetDateTime time, String user, UUID location) throws ApiException {
        advancedstationIssignedinWithHttpInfo(station, time, user, location);
    }

    /**
     * Gets whether a user is signed-in or not.
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param time The date and time of the swipe. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancedstationIssignedinWithHttpInfo(UUID station, OffsetDateTime time, String user, UUID location) throws ApiException {
        okhttp3.Call localVarCall = advancedstationIssignedinValidateBeforeCall(station, time, user, location, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets whether a user is signed-in or not. (asynchronously)
     * 
     * @param station The id of the sign-in station to get. (required)
     * @param time The date and time of the swipe. (required)
     * @param user The card of the user. (required)
     * @param location The id of the location the user picked. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancedstationIssignedinAsync(UUID station, OffsetDateTime time, String user, UUID location, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancedstationIssignedinValidateBeforeCall(station, time, user, location, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
