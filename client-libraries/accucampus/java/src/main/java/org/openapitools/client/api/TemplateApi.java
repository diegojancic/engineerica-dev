/*
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplateApi {
    private ApiClient localVarApiClient;

    public TemplateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for templateAddimage
     * @param template The id of the template where the image has to be added (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateAddimageCall(UUID template, String upload, String filename, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/template/addimage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (template != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template", template));
        }

        if (upload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload", upload));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateAddimageValidateBeforeCall(UUID template, String upload, String filename, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'template' is set
        if (template == null) {
            throw new ApiException("Missing the required parameter 'template' when calling templateAddimage(Async)");
        }
        
        // verify the required parameter 'upload' is set
        if (upload == null) {
            throw new ApiException("Missing the required parameter 'upload' when calling templateAddimage(Async)");
        }
        

        okhttp3.Call localVarCall = templateAddimageCall(template, upload, filename, _callback);
        return localVarCall;

    }

    /**
     * Add an image to a template
     * Allows the user to add an image to a badge or certificate template.
     * @param template The id of the template where the image has to be added (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templateAddimage(UUID template, String upload, String filename) throws ApiException {
        templateAddimageWithHttpInfo(template, upload, filename);
    }

    /**
     * Add an image to a template
     * Allows the user to add an image to a badge or certificate template.
     * @param template The id of the template where the image has to be added (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templateAddimageWithHttpInfo(UUID template, String upload, String filename) throws ApiException {
        okhttp3.Call localVarCall = templateAddimageValidateBeforeCall(template, upload, filename, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add an image to a template (asynchronously)
     * Allows the user to add an image to a badge or certificate template.
     * @param template The id of the template where the image has to be added (required)
     * @param upload Set &#39;file&#39; as value to indicate that a file is being submitted in the body (instead of a JSON object). (required)
     * @param filename The local name of the uploaded file. For later reference. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateAddimageAsync(UUID template, String upload, String filename, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateAddimageValidateBeforeCall(template, upload, filename, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateDelete
     * @param id The id of the template to delete. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateDeleteCall(UUID id, oas_any_type_not_mapped body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/template/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateDeleteValidateBeforeCall(UUID id, oas_any_type_not_mapped body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling templateDelete(Async)");
        }
        

        okhttp3.Call localVarCall = templateDeleteCall(id, body, _callback);
        return localVarCall;

    }

    /**
     * Delete a template
     * Allows the user to delete an existing template.
     * @param id The id of the template to delete. (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templateDelete(UUID id, oas_any_type_not_mapped body) throws ApiException {
        templateDeleteWithHttpInfo(id, body);
    }

    /**
     * Delete a template
     * Allows the user to delete an existing template.
     * @param id The id of the template to delete. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templateDeleteWithHttpInfo(UUID id, oas_any_type_not_mapped body) throws ApiException {
        okhttp3.Call localVarCall = templateDeleteValidateBeforeCall(id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a template (asynchronously)
     * Allows the user to delete an existing template.
     * @param id The id of the template to delete. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateDeleteAsync(UUID id, oas_any_type_not_mapped body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateDeleteValidateBeforeCall(id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateEmail
     * @param jobid The id of the job that is creating the templates. (required)
     * @param emailsubject Args depending on the send-to flag. (required)
     * @param emailbody Args depending on the send-to flag. (required)
     * @param templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate). (optional)
     * @param emailfrom The name of the sender to be displayed in the receipients inbox (optional)
     * @param emailreplyto The reply-to field for the emails. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateEmailCall(String jobid, String emailsubject, String emailbody, String templatekind, String emailfrom, String emailreplyto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/template/email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jobid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobid", jobid));
        }

        if (templatekind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templatekind", templatekind));
        }

        if (emailfrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailfrom", emailfrom));
        }

        if (emailreplyto != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailreplyto", emailreplyto));
        }

        if (emailsubject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailsubject", emailsubject));
        }

        if (emailbody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailbody", emailbody));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateEmailValidateBeforeCall(String jobid, String emailsubject, String emailbody, String templatekind, String emailfrom, String emailreplyto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling templateEmail(Async)");
        }
        
        // verify the required parameter 'emailsubject' is set
        if (emailsubject == null) {
            throw new ApiException("Missing the required parameter 'emailsubject' when calling templateEmail(Async)");
        }
        
        // verify the required parameter 'emailbody' is set
        if (emailbody == null) {
            throw new ApiException("Missing the required parameter 'emailbody' when calling templateEmail(Async)");
        }
        

        okhttp3.Call localVarCall = templateEmailCall(jobid, emailsubject, emailbody, templatekind, emailfrom, emailreplyto, _callback);
        return localVarCall;

    }

    /**
     * Send generated templates by email
     * Allows the user to send generated templates via email through AccuCampus.
     * @param jobid The id of the job that is creating the templates. (required)
     * @param emailsubject Args depending on the send-to flag. (required)
     * @param emailbody Args depending on the send-to flag. (required)
     * @param templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate). (optional)
     * @param emailfrom The name of the sender to be displayed in the receipients inbox (optional)
     * @param emailreplyto The reply-to field for the emails. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templateEmail(String jobid, String emailsubject, String emailbody, String templatekind, String emailfrom, String emailreplyto) throws ApiException {
        templateEmailWithHttpInfo(jobid, emailsubject, emailbody, templatekind, emailfrom, emailreplyto);
    }

    /**
     * Send generated templates by email
     * Allows the user to send generated templates via email through AccuCampus.
     * @param jobid The id of the job that is creating the templates. (required)
     * @param emailsubject Args depending on the send-to flag. (required)
     * @param emailbody Args depending on the send-to flag. (required)
     * @param templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate). (optional)
     * @param emailfrom The name of the sender to be displayed in the receipients inbox (optional)
     * @param emailreplyto The reply-to field for the emails. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templateEmailWithHttpInfo(String jobid, String emailsubject, String emailbody, String templatekind, String emailfrom, String emailreplyto) throws ApiException {
        okhttp3.Call localVarCall = templateEmailValidateBeforeCall(jobid, emailsubject, emailbody, templatekind, emailfrom, emailreplyto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send generated templates by email (asynchronously)
     * Allows the user to send generated templates via email through AccuCampus.
     * @param jobid The id of the job that is creating the templates. (required)
     * @param emailsubject Args depending on the send-to flag. (required)
     * @param emailbody Args depending on the send-to flag. (required)
     * @param templatekind The kind of the template you&#39;re sending. It must be included in (badge, certificate). (optional)
     * @param emailfrom The name of the sender to be displayed in the receipients inbox (optional)
     * @param emailreplyto The reply-to field for the emails. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateEmailAsync(String jobid, String emailsubject, String emailbody, String templatekind, String emailfrom, String emailreplyto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateEmailValidateBeforeCall(jobid, emailsubject, emailbody, templatekind, emailfrom, emailreplyto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateGenerate
     * @param template The id of the template to generate. (required)
     * @param source The source key of the selected template data source. (required)
     * @param singlefile True if all the templates should be placed in the same file, false if each one shoud be in its own file. (required)
     * @param userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas. (optional)
     * @param forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading (optional)
     * @param role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor (optional)
     * @param filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateGenerateCall(UUID template, UUID source, Boolean singlefile, String userid, Boolean forsending, UUID role, String filters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/template/generate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (template != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template", template));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (singlefile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("singlefile", singlefile));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (forsending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forsending", forsending));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateGenerateValidateBeforeCall(UUID template, UUID source, Boolean singlefile, String userid, Boolean forsending, UUID role, String filters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'template' is set
        if (template == null) {
            throw new ApiException("Missing the required parameter 'template' when calling templateGenerate(Async)");
        }
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling templateGenerate(Async)");
        }
        
        // verify the required parameter 'singlefile' is set
        if (singlefile == null) {
            throw new ApiException("Missing the required parameter 'singlefile' when calling templateGenerate(Async)");
        }
        

        okhttp3.Call localVarCall = templateGenerateCall(template, source, singlefile, userid, forsending, role, filters, _callback);
        return localVarCall;

    }

    /**
     * Generate specified templates
     * Allows the user to generate an existing template as badges or certificates.
     * @param template The id of the template to generate. (required)
     * @param source The source key of the selected template data source. (required)
     * @param singlefile True if all the templates should be placed in the same file, false if each one shoud be in its own file. (required)
     * @param userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas. (optional)
     * @param forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading (optional)
     * @param role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor (optional)
     * @param filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templateGenerate(UUID template, UUID source, Boolean singlefile, String userid, Boolean forsending, UUID role, String filters) throws ApiException {
        templateGenerateWithHttpInfo(template, source, singlefile, userid, forsending, role, filters);
    }

    /**
     * Generate specified templates
     * Allows the user to generate an existing template as badges or certificates.
     * @param template The id of the template to generate. (required)
     * @param source The source key of the selected template data source. (required)
     * @param singlefile True if all the templates should be placed in the same file, false if each one shoud be in its own file. (required)
     * @param userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas. (optional)
     * @param forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading (optional)
     * @param role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor (optional)
     * @param filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templateGenerateWithHttpInfo(UUID template, UUID source, Boolean singlefile, String userid, Boolean forsending, UUID role, String filters) throws ApiException {
        okhttp3.Call localVarCall = templateGenerateValidateBeforeCall(template, source, singlefile, userid, forsending, role, filters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generate specified templates (asynchronously)
     * Allows the user to generate an existing template as badges or certificates.
     * @param template The id of the template to generate. (required)
     * @param source The source key of the selected template data source. (required)
     * @param singlefile True if all the templates should be placed in the same file, false if each one shoud be in its own file. (required)
     * @param userid Only the template for these users is created (and emailed if &#39;email&#39; is true), enter multiple separated by commas. (optional)
     * @param forsending It specifies the purpose of the creation of the templates. If true then is for sending via e-mail, otherwise is just for downloading (optional)
     * @param role When printing all badges, filter by person type, can be either: attendee, presenter or exhibitor (optional)
     * @param filters Pipe separated filters for the generation, eg: aaa&#x3D;val|bbb&#x3D;val|... (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateGenerateAsync(UUID template, UUID source, Boolean singlefile, String userid, Boolean forsending, UUID role, String filters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateGenerateValidateBeforeCall(template, source, singlefile, userid, forsending, role, filters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateGet
     * @param id The id of the template to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateGetCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/template/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateGetValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling templateGet(Async)");
        }
        

        okhttp3.Call localVarCall = templateGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * View details of a template
     * Allows the user to view a template and its details.
     * @param id The id of the template to get. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templateGet(UUID id) throws ApiException {
        templateGetWithHttpInfo(id);
    }

    /**
     * View details of a template
     * Allows the user to view a template and its details.
     * @param id The id of the template to get. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templateGetWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = templateGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a template (asynchronously)
     * Allows the user to view a template and its details.
     * @param id The id of the template to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateGetAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateGetgenerated
     * @param jobid The id of the job that is creating the templates. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateGetgeneratedCall(String jobid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/template/getgenerated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jobid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobid", jobid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateGetgeneratedValidateBeforeCall(String jobid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling templateGetgenerated(Async)");
        }
        

        okhttp3.Call localVarCall = templateGetgeneratedCall(jobid, _callback);
        return localVarCall;

    }

    /**
     * View generated templates
     * Allows the user to view templates which have been generated as badges or certificates.
     * @param jobid The id of the job that is creating the templates. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templateGetgenerated(String jobid) throws ApiException {
        templateGetgeneratedWithHttpInfo(jobid);
    }

    /**
     * View generated templates
     * Allows the user to view templates which have been generated as badges or certificates.
     * @param jobid The id of the job that is creating the templates. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templateGetgeneratedWithHttpInfo(String jobid) throws ApiException {
        okhttp3.Call localVarCall = templateGetgeneratedValidateBeforeCall(jobid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View generated templates (asynchronously)
     * Allows the user to view templates which have been generated as badges or certificates.
     * @param jobid The id of the job that is creating the templates. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateGetgeneratedAsync(String jobid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateGetgeneratedValidateBeforeCall(jobid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateList
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param kind The kind of the templates to return. It must be included in (badge, certificate). (required)
     * @param designedonly If true then it only returns the templates that were designed. Otherwise, it returns all. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateListCall(Integer from, Integer count, String kind, Boolean designedonly, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/template/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (kind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kind", kind));
        }

        if (designedonly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("designedonly", designedonly));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateListValidateBeforeCall(Integer from, Integer count, String kind, Boolean designedonly, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling templateList(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling templateList(Async)");
        }
        
        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling templateList(Async)");
        }
        

        okhttp3.Call localVarCall = templateListCall(from, count, kind, designedonly, _callback);
        return localVarCall;

    }

    /**
     * View a list of defined templates
     * Allows the user to view the full list of created templates.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param kind The kind of the templates to return. It must be included in (badge, certificate). (required)
     * @param designedonly If true then it only returns the templates that were designed. Otherwise, it returns all. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templateList(Integer from, Integer count, String kind, Boolean designedonly) throws ApiException {
        templateListWithHttpInfo(from, count, kind, designedonly);
    }

    /**
     * View a list of defined templates
     * Allows the user to view the full list of created templates.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param kind The kind of the templates to return. It must be included in (badge, certificate). (required)
     * @param designedonly If true then it only returns the templates that were designed. Otherwise, it returns all. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templateListWithHttpInfo(Integer from, Integer count, String kind, Boolean designedonly) throws ApiException {
        okhttp3.Call localVarCall = templateListValidateBeforeCall(from, count, kind, designedonly, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of defined templates (asynchronously)
     * Allows the user to view the full list of created templates.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param kind The kind of the templates to return. It must be included in (badge, certificate). (required)
     * @param designedonly If true then it only returns the templates that were designed. Otherwise, it returns all. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateListAsync(Integer from, Integer count, String kind, Boolean designedonly, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateListValidateBeforeCall(from, count, kind, designedonly, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateListsources
     * @param kind The kind of the templates to return. It must be included in (badge, certificate). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateListsourcesCall(String kind, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/template/listsources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (kind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kind", kind));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateListsourcesValidateBeforeCall(String kind, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling templateListsources(Async)");
        }
        

        okhttp3.Call localVarCall = templateListsourcesCall(kind, _callback);
        return localVarCall;

    }

    /**
     * View a list of templates&#39; data sources
     * Allows the user to see tokens to be used in the template
     * @param kind The kind of the templates to return. It must be included in (badge, certificate). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templateListsources(String kind) throws ApiException {
        templateListsourcesWithHttpInfo(kind);
    }

    /**
     * View a list of templates&#39; data sources
     * Allows the user to see tokens to be used in the template
     * @param kind The kind of the templates to return. It must be included in (badge, certificate). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templateListsourcesWithHttpInfo(String kind) throws ApiException {
        okhttp3.Call localVarCall = templateListsourcesValidateBeforeCall(kind, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of templates&#39; data sources (asynchronously)
     * Allows the user to see tokens to be used in the template
     * @param kind The kind of the templates to return. It must be included in (badge, certificate). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateListsourcesAsync(String kind, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateListsourcesValidateBeforeCall(kind, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateSave
     * @param id The id of the template to save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateSaveCall(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/template/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateSaveValidateBeforeCall(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling templateSave(Async)");
        }
        

        okhttp3.Call localVarCall = templateSaveCall(id, UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a template
     * Allows the user to create or edit a template.
     * @param id The id of the template to save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templateSave(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        templateSaveWithHttpInfo(id, UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a template
     * Allows the user to create or edit a template.
     * @param id The id of the template to save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templateSaveWithHttpInfo(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = templateSaveValidateBeforeCall(id, UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a template (asynchronously)
     * Allows the user to create or edit a template.
     * @param id The id of the template to save (leave empty to create a new one). (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateSaveAsync(UUID id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateSaveValidateBeforeCall(id, UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateSavelayout
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateSavelayoutCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/template/savelayout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateSavelayoutValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = templateSavelayoutCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Save the layout of a template
     * Allows the user to edit a template&#39;s layout.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void templateSavelayout(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        templateSavelayoutWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Save the layout of a template
     * Allows the user to edit a template&#39;s layout.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> templateSavelayoutWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = templateSavelayoutValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save the layout of a template (asynchronously)
     * Allows the user to edit a template&#39;s layout.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateSavelayoutAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateSavelayoutValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
