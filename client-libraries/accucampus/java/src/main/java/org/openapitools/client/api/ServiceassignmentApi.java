/*
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServiceassignmentApi {
    private ApiClient localVarApiClient;

    public ServiceassignmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceassignmentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for serviceassignmentAddservice
     * @param serviceid The id of the service to add. (required)
     * @param locationid The id of the location. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceassignmentAddserviceCall(UUID serviceid, UUID locationid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/serviceassignment/addservice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceid", serviceid));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceassignmentAddserviceValidateBeforeCall(UUID serviceid, UUID locationid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serviceid' is set
        if (serviceid == null) {
            throw new ApiException("Missing the required parameter 'serviceid' when calling serviceassignmentAddservice(Async)");
        }
        
        // verify the required parameter 'locationid' is set
        if (locationid == null) {
            throw new ApiException("Missing the required parameter 'locationid' when calling serviceassignmentAddservice(Async)");
        }
        

        okhttp3.Call localVarCall = serviceassignmentAddserviceCall(serviceid, locationid, _callback);
        return localVarCall;

    }

    /**
     * Enable a service in a specific location
     * Allows the user to enable a service in a location to which they are scoped.
     * @param serviceid The id of the service to add. (required)
     * @param locationid The id of the location. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void serviceassignmentAddservice(UUID serviceid, UUID locationid) throws ApiException {
        serviceassignmentAddserviceWithHttpInfo(serviceid, locationid);
    }

    /**
     * Enable a service in a specific location
     * Allows the user to enable a service in a location to which they are scoped.
     * @param serviceid The id of the service to add. (required)
     * @param locationid The id of the location. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serviceassignmentAddserviceWithHttpInfo(UUID serviceid, UUID locationid) throws ApiException {
        okhttp3.Call localVarCall = serviceassignmentAddserviceValidateBeforeCall(serviceid, locationid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enable a service in a specific location (asynchronously)
     * Allows the user to enable a service in a location to which they are scoped.
     * @param serviceid The id of the service to add. (required)
     * @param locationid The id of the location. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceassignmentAddserviceAsync(UUID serviceid, UUID locationid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceassignmentAddserviceValidateBeforeCall(serviceid, locationid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceassignmentGetlocation
     * @param locationid The id of the location to get. (required)
     * @param includegloballyavailable Specifies whether the services available globally must be returned or not. (optional)
     * @param namefilter Filters the name of the services to return. (optional)
     * @param count The max number of services to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceassignmentGetlocationCall(UUID locationid, Boolean includegloballyavailable, Boolean namefilter, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/serviceassignment/getlocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (includegloballyavailable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includegloballyavailable", includegloballyavailable));
        }

        if (namefilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namefilter", namefilter));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceassignmentGetlocationValidateBeforeCall(UUID locationid, Boolean includegloballyavailable, Boolean namefilter, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'locationid' is set
        if (locationid == null) {
            throw new ApiException("Missing the required parameter 'locationid' when calling serviceassignmentGetlocation(Async)");
        }
        

        okhttp3.Call localVarCall = serviceassignmentGetlocationCall(locationid, includegloballyavailable, namefilter, count, _callback);
        return localVarCall;

    }

    /**
     * View a list of services enabled for a specific location
     * Allows the user to view a list of services available in a location to which they are scoped.
     * @param locationid The id of the location to get. (required)
     * @param includegloballyavailable Specifies whether the services available globally must be returned or not. (optional)
     * @param namefilter Filters the name of the services to return. (optional)
     * @param count The max number of services to return. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void serviceassignmentGetlocation(UUID locationid, Boolean includegloballyavailable, Boolean namefilter, Integer count) throws ApiException {
        serviceassignmentGetlocationWithHttpInfo(locationid, includegloballyavailable, namefilter, count);
    }

    /**
     * View a list of services enabled for a specific location
     * Allows the user to view a list of services available in a location to which they are scoped.
     * @param locationid The id of the location to get. (required)
     * @param includegloballyavailable Specifies whether the services available globally must be returned or not. (optional)
     * @param namefilter Filters the name of the services to return. (optional)
     * @param count The max number of services to return. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serviceassignmentGetlocationWithHttpInfo(UUID locationid, Boolean includegloballyavailable, Boolean namefilter, Integer count) throws ApiException {
        okhttp3.Call localVarCall = serviceassignmentGetlocationValidateBeforeCall(locationid, includegloballyavailable, namefilter, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of services enabled for a specific location (asynchronously)
     * Allows the user to view a list of services available in a location to which they are scoped.
     * @param locationid The id of the location to get. (required)
     * @param includegloballyavailable Specifies whether the services available globally must be returned or not. (optional)
     * @param namefilter Filters the name of the services to return. (optional)
     * @param count The max number of services to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceassignmentGetlocationAsync(UUID locationid, Boolean includegloballyavailable, Boolean namefilter, Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceassignmentGetlocationValidateBeforeCall(locationid, includegloballyavailable, namefilter, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceassignmentGetservice
     * @param serviceid The id of the service to get its locations. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceassignmentGetserviceCall(UUID serviceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/serviceassignment/getservice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceid", serviceid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceassignmentGetserviceValidateBeforeCall(UUID serviceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serviceid' is set
        if (serviceid == null) {
            throw new ApiException("Missing the required parameter 'serviceid' when calling serviceassignmentGetservice(Async)");
        }
        

        okhttp3.Call localVarCall = serviceassignmentGetserviceCall(serviceid, _callback);
        return localVarCall;

    }

    /**
     * View a list of locations where a service is available
     * Allows the user to view a list of locations in which a service is available.
     * @param serviceid The id of the service to get its locations. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void serviceassignmentGetservice(UUID serviceid) throws ApiException {
        serviceassignmentGetserviceWithHttpInfo(serviceid);
    }

    /**
     * View a list of locations where a service is available
     * Allows the user to view a list of locations in which a service is available.
     * @param serviceid The id of the service to get its locations. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serviceassignmentGetserviceWithHttpInfo(UUID serviceid) throws ApiException {
        okhttp3.Call localVarCall = serviceassignmentGetserviceValidateBeforeCall(serviceid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of locations where a service is available (asynchronously)
     * Allows the user to view a list of locations in which a service is available.
     * @param serviceid The id of the service to get its locations. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceassignmentGetserviceAsync(UUID serviceid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceassignmentGetserviceValidateBeforeCall(serviceid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceassignmentRemoveservice
     * @param serviceid The id of the service to remove. (required)
     * @param locationid The id of the location to remove the service from. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceassignmentRemoveserviceCall(UUID serviceid, UUID locationid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/serviceassignment/removeservice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceid", serviceid));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceassignmentRemoveserviceValidateBeforeCall(UUID serviceid, UUID locationid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serviceid' is set
        if (serviceid == null) {
            throw new ApiException("Missing the required parameter 'serviceid' when calling serviceassignmentRemoveservice(Async)");
        }
        
        // verify the required parameter 'locationid' is set
        if (locationid == null) {
            throw new ApiException("Missing the required parameter 'locationid' when calling serviceassignmentRemoveservice(Async)");
        }
        

        okhttp3.Call localVarCall = serviceassignmentRemoveserviceCall(serviceid, locationid, _callback);
        return localVarCall;

    }

    /**
     * Remove a service from a location
     * Allows the user to disable a service from a location to which they are scoped.
     * @param serviceid The id of the service to remove. (required)
     * @param locationid The id of the location to remove the service from. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void serviceassignmentRemoveservice(UUID serviceid, UUID locationid) throws ApiException {
        serviceassignmentRemoveserviceWithHttpInfo(serviceid, locationid);
    }

    /**
     * Remove a service from a location
     * Allows the user to disable a service from a location to which they are scoped.
     * @param serviceid The id of the service to remove. (required)
     * @param locationid The id of the location to remove the service from. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serviceassignmentRemoveserviceWithHttpInfo(UUID serviceid, UUID locationid) throws ApiException {
        okhttp3.Call localVarCall = serviceassignmentRemoveserviceValidateBeforeCall(serviceid, locationid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a service from a location (asynchronously)
     * Allows the user to disable a service from a location to which they are scoped.
     * @param serviceid The id of the service to remove. (required)
     * @param locationid The id of the location to remove the service from. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceassignmentRemoveserviceAsync(UUID serviceid, UUID locationid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceassignmentRemoveserviceValidateBeforeCall(serviceid, locationid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
