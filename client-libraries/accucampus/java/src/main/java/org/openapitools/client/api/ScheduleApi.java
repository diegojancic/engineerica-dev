/*
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScheduleApi {
    private ApiClient localVarApiClient;

    public ScheduleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScheduleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for scheduleDelete
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleDeleteCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/schedule/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleDeleteValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = scheduleDeleteCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Delete a schedule slot
     * Allows the user to delete a schedule slot from another user.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleDelete(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        scheduleDeleteWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Delete a schedule slot
     * Allows the user to delete a schedule slot from another user.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleDeleteWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = scheduleDeleteValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a schedule slot (asynchronously)
     * Allows the user to delete a schedule slot from another user.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleDeleteAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleDeleteValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleDeletemine
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleDeletemineCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/schedule/deletemine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleDeletemineValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = scheduleDeletemineCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Delete a specific block from a user&#39;s own schedule
     * Allows the user to delete a schedule block from their own availability.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleDeletemine(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        scheduleDeletemineWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Delete a specific block from a user&#39;s own schedule
     * Allows the user to delete a schedule block from their own availability.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleDeletemineWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = scheduleDeletemineValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a specific block from a user&#39;s own schedule (asynchronously)
     * Allows the user to delete a schedule block from their own availability.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleDeletemineAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleDeletemineValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleEnable
     * @param userid The id of the user to enable or disable the schedule. (required)
     * @param enable True to enable schedules, false to disable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleEnableCall(UUID userid, Boolean enable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/enable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (enable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enable", enable));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleEnableValidateBeforeCall(UUID userid, Boolean enable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling scheduleEnable(Async)");
        }
        
        // verify the required parameter 'enable' is set
        if (enable == null) {
            throw new ApiException("Missing the required parameter 'enable' when calling scheduleEnable(Async)");
        }
        

        okhttp3.Call localVarCall = scheduleEnableCall(userid, enable, _callback);
        return localVarCall;

    }

    /**
     * Enable or disable the schedule for a specific person
     * Allows the user to enable or disable a schedule for another user.
     * @param userid The id of the user to enable or disable the schedule. (required)
     * @param enable True to enable schedules, false to disable. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleEnable(UUID userid, Boolean enable) throws ApiException {
        scheduleEnableWithHttpInfo(userid, enable);
    }

    /**
     * Enable or disable the schedule for a specific person
     * Allows the user to enable or disable a schedule for another user.
     * @param userid The id of the user to enable or disable the schedule. (required)
     * @param enable True to enable schedules, false to disable. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleEnableWithHttpInfo(UUID userid, Boolean enable) throws ApiException {
        okhttp3.Call localVarCall = scheduleEnableValidateBeforeCall(userid, enable, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enable or disable the schedule for a specific person (asynchronously)
     * Allows the user to enable or disable a schedule for another user.
     * @param userid The id of the user to enable or disable the schedule. (required)
     * @param enable True to enable schedules, false to disable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleEnableAsync(UUID userid, Boolean enable, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleEnableValidateBeforeCall(userid, enable, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleEnablemine
     * @param enable True to enable schedules, false to disable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleEnablemineCall(Boolean enable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/enablemine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (enable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enable", enable));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleEnablemineValidateBeforeCall(Boolean enable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'enable' is set
        if (enable == null) {
            throw new ApiException("Missing the required parameter 'enable' when calling scheduleEnablemine(Async)");
        }
        

        okhttp3.Call localVarCall = scheduleEnablemineCall(enable, _callback);
        return localVarCall;

    }

    /**
     * Enable or disable current user&#39;s schedule
     * Allows the user to enable or disable a schedule for himself.
     * @param enable True to enable schedules, false to disable. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleEnablemine(Boolean enable) throws ApiException {
        scheduleEnablemineWithHttpInfo(enable);
    }

    /**
     * Enable or disable current user&#39;s schedule
     * Allows the user to enable or disable a schedule for himself.
     * @param enable True to enable schedules, false to disable. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleEnablemineWithHttpInfo(Boolean enable) throws ApiException {
        okhttp3.Call localVarCall = scheduleEnablemineValidateBeforeCall(enable, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enable or disable current user&#39;s schedule (asynchronously)
     * Allows the user to enable or disable a schedule for himself.
     * @param enable True to enable schedules, false to disable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleEnablemineAsync(Boolean enable, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleEnablemineValidateBeforeCall(enable, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleFindallstaffslots
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param staffid The id of the staff to filter by. (optional)
     * @param serviceids CSV list of the service Ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the location to filter by. (optional)
     * @param staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param availablefor The specific availability type to filter by. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleFindallstaffslotsCall(OffsetDateTime starttime, OffsetDateTime endtime, UUID staffid, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/findallstaffslots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (starttime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starttime", starttime));
        }

        if (endtime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endtime", endtime));
        }

        if (staffid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffid", staffid));
        }

        if (serviceids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceids", serviceids));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (staffroleids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffroleids", staffroleids));
        }

        if (availablefor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availablefor", availablefor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleFindallstaffslotsValidateBeforeCall(OffsetDateTime starttime, OffsetDateTime endtime, UUID staffid, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'starttime' is set
        if (starttime == null) {
            throw new ApiException("Missing the required parameter 'starttime' when calling scheduleFindallstaffslots(Async)");
        }
        
        // verify the required parameter 'endtime' is set
        if (endtime == null) {
            throw new ApiException("Missing the required parameter 'endtime' when calling scheduleFindallstaffslots(Async)");
        }
        

        okhttp3.Call localVarCall = scheduleFindallstaffslotsCall(starttime, endtime, staffid, serviceids, eventid, locationid, staffroleids, availablefor, _callback);
        return localVarCall;

    }

    /**
     * Search available schedule slots by service, event, date
     * Allows users to search available slots.
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param staffid The id of the staff to filter by. (optional)
     * @param serviceids CSV list of the service Ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the location to filter by. (optional)
     * @param staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param availablefor The specific availability type to filter by. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleFindallstaffslots(OffsetDateTime starttime, OffsetDateTime endtime, UUID staffid, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor) throws ApiException {
        scheduleFindallstaffslotsWithHttpInfo(starttime, endtime, staffid, serviceids, eventid, locationid, staffroleids, availablefor);
    }

    /**
     * Search available schedule slots by service, event, date
     * Allows users to search available slots.
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param staffid The id of the staff to filter by. (optional)
     * @param serviceids CSV list of the service Ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the location to filter by. (optional)
     * @param staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param availablefor The specific availability type to filter by. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleFindallstaffslotsWithHttpInfo(OffsetDateTime starttime, OffsetDateTime endtime, UUID staffid, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor) throws ApiException {
        okhttp3.Call localVarCall = scheduleFindallstaffslotsValidateBeforeCall(starttime, endtime, staffid, serviceids, eventid, locationid, staffroleids, availablefor, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search available schedule slots by service, event, date (asynchronously)
     * Allows users to search available slots.
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param staffid The id of the staff to filter by. (optional)
     * @param serviceids CSV list of the service Ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the location to filter by. (optional)
     * @param staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param availablefor The specific availability type to filter by. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleFindallstaffslotsAsync(OffsetDateTime starttime, OffsetDateTime endtime, UUID staffid, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleFindallstaffslotsValidateBeforeCall(starttime, endtime, staffid, serviceids, eventid, locationid, staffroleids, availablefor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleFindslots
     * @param staffid The id of the staff to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param availablefor The specific availability type to filter by. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleFindslotsCall(UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String availablefor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/findslots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (staffid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffid", staffid));
        }

        if (starttime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starttime", starttime));
        }

        if (endtime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endtime", endtime));
        }

        if (serviceids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceids", serviceids));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (availablefor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availablefor", availablefor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleFindslotsValidateBeforeCall(UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String availablefor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'staffid' is set
        if (staffid == null) {
            throw new ApiException("Missing the required parameter 'staffid' when calling scheduleFindslots(Async)");
        }
        
        // verify the required parameter 'starttime' is set
        if (starttime == null) {
            throw new ApiException("Missing the required parameter 'starttime' when calling scheduleFindslots(Async)");
        }
        
        // verify the required parameter 'endtime' is set
        if (endtime == null) {
            throw new ApiException("Missing the required parameter 'endtime' when calling scheduleFindslots(Async)");
        }
        

        okhttp3.Call localVarCall = scheduleFindslotsCall(staffid, starttime, endtime, serviceids, eventid, locationid, availablefor, _callback);
        return localVarCall;

    }

    /**
     * Search available schedule slots by service, event, date and/or staff
     * Allows users to search available slots when making appointments.
     * @param staffid The id of the staff to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param availablefor The specific availability type to filter by. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleFindslots(UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String availablefor) throws ApiException {
        scheduleFindslotsWithHttpInfo(staffid, starttime, endtime, serviceids, eventid, locationid, availablefor);
    }

    /**
     * Search available schedule slots by service, event, date and/or staff
     * Allows users to search available slots when making appointments.
     * @param staffid The id of the staff to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param availablefor The specific availability type to filter by. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleFindslotsWithHttpInfo(UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String availablefor) throws ApiException {
        okhttp3.Call localVarCall = scheduleFindslotsValidateBeforeCall(staffid, starttime, endtime, serviceids, eventid, locationid, availablefor, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search available schedule slots by service, event, date and/or staff (asynchronously)
     * Allows users to search available slots when making appointments.
     * @param staffid The id of the staff to filter by. (required)
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service Ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param availablefor The specific availability type to filter by. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleFindslotsAsync(UUID staffid, OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String availablefor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleFindslotsValidateBeforeCall(staffid, starttime, endtime, serviceids, eventid, locationid, availablefor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleFindstaffavail
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param availablefor Filter slots by a specific availability type. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleFindstaffavailCall(OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor, Integer photosize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/findstaffavail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceids", serviceids));
        }

        if (eventid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventid", eventid));
        }

        if (starttime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starttime", starttime));
        }

        if (endtime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endtime", endtime));
        }

        if (locationid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationid", locationid));
        }

        if (staffroleids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staffroleids", staffroleids));
        }

        if (availablefor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availablefor", availablefor));
        }

        if (photosize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photosize", photosize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleFindstaffavailValidateBeforeCall(OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor, Integer photosize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'starttime' is set
        if (starttime == null) {
            throw new ApiException("Missing the required parameter 'starttime' when calling scheduleFindstaffavail(Async)");
        }
        
        // verify the required parameter 'endtime' is set
        if (endtime == null) {
            throw new ApiException("Missing the required parameter 'endtime' when calling scheduleFindstaffavail(Async)");
        }
        

        okhttp3.Call localVarCall = scheduleFindstaffavailCall(starttime, endtime, serviceids, eventid, locationid, staffroleids, availablefor, photosize, _callback);
        return localVarCall;

    }

    /**
     * Search available staff members slots by service, event, and/or date
     * Allows users to search available staff.
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param availablefor Filter slots by a specific availability type. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleFindstaffavail(OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor, Integer photosize) throws ApiException {
        scheduleFindstaffavailWithHttpInfo(starttime, endtime, serviceids, eventid, locationid, staffroleids, availablefor, photosize);
    }

    /**
     * Search available staff members slots by service, event, and/or date
     * Allows users to search available staff.
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param availablefor Filter slots by a specific availability type. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleFindstaffavailWithHttpInfo(OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor, Integer photosize) throws ApiException {
        okhttp3.Call localVarCall = scheduleFindstaffavailValidateBeforeCall(starttime, endtime, serviceids, eventid, locationid, staffroleids, availablefor, photosize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search available staff members slots by service, event, and/or date (asynchronously)
     * Allows users to search available staff.
     * @param starttime The start time of the range to look for slots. (required)
     * @param endtime The end time of the range to look for slots. (required)
     * @param serviceids CSV list of the service ids to filter by. (optional)
     * @param eventid The id of the event to filter by. (optional)
     * @param locationid The id of the service to filter by. (optional)
     * @param staffroleids CSV list of the staff member role ids to filter by. (optional)
     * @param availablefor Filter slots by a specific availability type. (optional)
     * @param photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleFindstaffavailAsync(OffsetDateTime starttime, OffsetDateTime endtime, String serviceids, UUID eventid, UUID locationid, String staffroleids, String availablefor, Integer photosize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleFindstaffavailValidateBeforeCall(starttime, endtime, serviceids, eventid, locationid, staffroleids, availablefor, photosize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleGet
     * @param scheduleid The id of the schedule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleGetCall(UUID scheduleid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scheduleid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduleid", scheduleid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleGetValidateBeforeCall(UUID scheduleid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scheduleid' is set
        if (scheduleid == null) {
            throw new ApiException("Missing the required parameter 'scheduleid' when calling scheduleGet(Async)");
        }
        

        okhttp3.Call localVarCall = scheduleGetCall(scheduleid, _callback);
        return localVarCall;

    }

    /**
     * Search and view details of a specific schedule slot
     * Allows the user to view the details of schedule shifts for any user role that the user has permission to view.
     * @param scheduleid The id of the schedule. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleGet(UUID scheduleid) throws ApiException {
        scheduleGetWithHttpInfo(scheduleid);
    }

    /**
     * Search and view details of a specific schedule slot
     * Allows the user to view the details of schedule shifts for any user role that the user has permission to view.
     * @param scheduleid The id of the schedule. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleGetWithHttpInfo(UUID scheduleid) throws ApiException {
        okhttp3.Call localVarCall = scheduleGetValidateBeforeCall(scheduleid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search and view details of a specific schedule slot (asynchronously)
     * Allows the user to view the details of schedule shifts for any user role that the user has permission to view.
     * @param scheduleid The id of the schedule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleGetAsync(UUID scheduleid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleGetValidateBeforeCall(scheduleid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleGetmine
     * @param scheduleid The id of the schedule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleGetmineCall(UUID scheduleid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/getmine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scheduleid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduleid", scheduleid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleGetmineValidateBeforeCall(UUID scheduleid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scheduleid' is set
        if (scheduleid == null) {
            throw new ApiException("Missing the required parameter 'scheduleid' when calling scheduleGetmine(Async)");
        }
        

        okhttp3.Call localVarCall = scheduleGetmineCall(scheduleid, _callback);
        return localVarCall;

    }

    /**
     * View details of a specific schedule block, for current user
     * Allows the user to view the details of their own schedule shifts.
     * @param scheduleid The id of the schedule. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleGetmine(UUID scheduleid) throws ApiException {
        scheduleGetmineWithHttpInfo(scheduleid);
    }

    /**
     * View details of a specific schedule block, for current user
     * Allows the user to view the details of their own schedule shifts.
     * @param scheduleid The id of the schedule. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleGetmineWithHttpInfo(UUID scheduleid) throws ApiException {
        okhttp3.Call localVarCall = scheduleGetmineValidateBeforeCall(scheduleid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View details of a specific schedule block, for current user (asynchronously)
     * Allows the user to view the details of their own schedule shifts.
     * @param scheduleid The id of the schedule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleGetmineAsync(UUID scheduleid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleGetmineValidateBeforeCall(scheduleid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleGetstaff
     * @param userid The id of the user to get info. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleGetstaffCall(UUID userid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/getstaff";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleGetstaffValidateBeforeCall(UUID userid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling scheduleGetstaff(Async)");
        }
        

        okhttp3.Call localVarCall = scheduleGetstaffCall(userid, _callback);
        return localVarCall;

    }

    /**
     * View a list of schedule information of a specified person
     * Allows the user to view the schedule shifts for user roles that the user has permission to access.
     * @param userid The id of the user to get info. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleGetstaff(UUID userid) throws ApiException {
        scheduleGetstaffWithHttpInfo(userid);
    }

    /**
     * View a list of schedule information of a specified person
     * Allows the user to view the schedule shifts for user roles that the user has permission to access.
     * @param userid The id of the user to get info. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleGetstaffWithHttpInfo(UUID userid) throws ApiException {
        okhttp3.Call localVarCall = scheduleGetstaffValidateBeforeCall(userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of schedule information of a specified person (asynchronously)
     * Allows the user to view the schedule shifts for user roles that the user has permission to access.
     * @param userid The id of the user to get info. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleGetstaffAsync(UUID userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleGetstaffValidateBeforeCall(userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleGetstaffmine
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleGetstaffmineCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/getstaffmine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleGetstaffmineValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = scheduleGetstaffmineCall(_callback);
        return localVarCall;

    }

    /**
     * View current user&#39;s schedule information
     * Allows the user to view their own schedule.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleGetstaffmine() throws ApiException {
        scheduleGetstaffmineWithHttpInfo();
    }

    /**
     * View current user&#39;s schedule information
     * Allows the user to view their own schedule.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleGetstaffmineWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = scheduleGetstaffmineValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View current user&#39;s schedule information (asynchronously)
     * Allows the user to view their own schedule.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleGetstaffmineAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleGetstaffmineValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleMyofftimes
     * @param includedeleted If true the deleted offtimes are also returned. (optional)
     * @param onlyupcoming If true then only upcoming offtimes are returned. (optional)
     * @param modifiedafter If specified, only offtimes modified after the specified date will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleMyofftimesCall(Boolean includedeleted, Boolean onlyupcoming, OffsetDateTime modifiedafter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/myofftimes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includedeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includedeleted", includedeleted));
        }

        if (onlyupcoming != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyupcoming", onlyupcoming));
        }

        if (modifiedafter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedafter", modifiedafter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleMyofftimesValidateBeforeCall(Boolean includedeleted, Boolean onlyupcoming, OffsetDateTime modifiedafter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = scheduleMyofftimesCall(includedeleted, onlyupcoming, modifiedafter, _callback);
        return localVarCall;

    }

    /**
     * View current user&#39;s schedule exceptions
     * Allows the user to view their own schedule exceptions.
     * @param includedeleted If true the deleted offtimes are also returned. (optional)
     * @param onlyupcoming If true then only upcoming offtimes are returned. (optional)
     * @param modifiedafter If specified, only offtimes modified after the specified date will be returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleMyofftimes(Boolean includedeleted, Boolean onlyupcoming, OffsetDateTime modifiedafter) throws ApiException {
        scheduleMyofftimesWithHttpInfo(includedeleted, onlyupcoming, modifiedafter);
    }

    /**
     * View current user&#39;s schedule exceptions
     * Allows the user to view their own schedule exceptions.
     * @param includedeleted If true the deleted offtimes are also returned. (optional)
     * @param onlyupcoming If true then only upcoming offtimes are returned. (optional)
     * @param modifiedafter If specified, only offtimes modified after the specified date will be returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleMyofftimesWithHttpInfo(Boolean includedeleted, Boolean onlyupcoming, OffsetDateTime modifiedafter) throws ApiException {
        okhttp3.Call localVarCall = scheduleMyofftimesValidateBeforeCall(includedeleted, onlyupcoming, modifiedafter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View current user&#39;s schedule exceptions (asynchronously)
     * Allows the user to view their own schedule exceptions.
     * @param includedeleted If true the deleted offtimes are also returned. (optional)
     * @param onlyupcoming If true then only upcoming offtimes are returned. (optional)
     * @param modifiedafter If specified, only offtimes modified after the specified date will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleMyofftimesAsync(Boolean includedeleted, Boolean onlyupcoming, OffsetDateTime modifiedafter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleMyofftimesValidateBeforeCall(includedeleted, onlyupcoming, modifiedafter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleSave
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleSaveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/schedule/save";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleSaveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = scheduleSaveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a schedule slot
     * Allows the user to create or edit a schedule slot of another user.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleSave(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        scheduleSaveWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a schedule slot
     * Allows the user to create or edit a schedule slot of another user.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleSaveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = scheduleSaveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a schedule slot (asynchronously)
     * Allows the user to create or edit a schedule slot of another user.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleSaveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleSaveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleSavemine
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleSavemineCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/schedule/savemine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleSavemineValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = scheduleSavemineCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create or edit a block in current user&#39;s schedule
     * Allows the user to create or edit a schedule shift in their own availability.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleSavemine(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        scheduleSavemineWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Create or edit a block in current user&#39;s schedule
     * Allows the user to create or edit a schedule shift in their own availability.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleSavemineWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = scheduleSavemineValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or edit a block in current user&#39;s schedule (asynchronously)
     * Allows the user to create or edit a schedule shift in their own availability.
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleSavemineAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleSavemineValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
