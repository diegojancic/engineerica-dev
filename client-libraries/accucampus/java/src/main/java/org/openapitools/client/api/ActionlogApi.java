/*
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActionlogApi {
    private ApiClient localVarApiClient;

    public ActionlogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActionlogApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for actionlogList
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param user The id of the user whose action logs have to be returned. (optional)
     * @param startdate The start date of the period to filter the logs. (optional)
     * @param enddate The end date of the period to filter the logs. (optional)
     * @param resource The resource to filter the action logs. (optional)
     * @param actionfilter The action to filter the action logs. (optional)
     * @param argument The id of the entity that was the argument of the executed action. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionlogListCall(Integer from, Integer count, UUID user, OffsetDateTime startdate, OffsetDateTime enddate, String resource, String actionfilter, String argument, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionlog/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (startdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startdate", startdate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource", resource));
        }

        if (actionfilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actionfilter", actionfilter));
        }

        if (argument != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("argument", argument));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionlogListValidateBeforeCall(Integer from, Integer count, UUID user, OffsetDateTime startdate, OffsetDateTime enddate, String resource, String actionfilter, String argument, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling actionlogList(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling actionlogList(Async)");
        }
        

        okhttp3.Call localVarCall = actionlogListCall(from, count, user, startdate, enddate, resource, actionfilter, argument, _callback);
        return localVarCall;

    }

    /**
     * View a list of users action logs
     * Allows the user to view the audit logs for the account.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param user The id of the user whose action logs have to be returned. (optional)
     * @param startdate The start date of the period to filter the logs. (optional)
     * @param enddate The end date of the period to filter the logs. (optional)
     * @param resource The resource to filter the action logs. (optional)
     * @param actionfilter The action to filter the action logs. (optional)
     * @param argument The id of the entity that was the argument of the executed action. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void actionlogList(Integer from, Integer count, UUID user, OffsetDateTime startdate, OffsetDateTime enddate, String resource, String actionfilter, String argument) throws ApiException {
        actionlogListWithHttpInfo(from, count, user, startdate, enddate, resource, actionfilter, argument);
    }

    /**
     * View a list of users action logs
     * Allows the user to view the audit logs for the account.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param user The id of the user whose action logs have to be returned. (optional)
     * @param startdate The start date of the period to filter the logs. (optional)
     * @param enddate The end date of the period to filter the logs. (optional)
     * @param resource The resource to filter the action logs. (optional)
     * @param actionfilter The action to filter the action logs. (optional)
     * @param argument The id of the entity that was the argument of the executed action. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionlogListWithHttpInfo(Integer from, Integer count, UUID user, OffsetDateTime startdate, OffsetDateTime enddate, String resource, String actionfilter, String argument) throws ApiException {
        okhttp3.Call localVarCall = actionlogListValidateBeforeCall(from, count, user, startdate, enddate, resource, actionfilter, argument, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View a list of users action logs (asynchronously)
     * Allows the user to view the audit logs for the account.
     * @param from The first record to return. (required)
     * @param count The max number of records to return. (required)
     * @param user The id of the user whose action logs have to be returned. (optional)
     * @param startdate The start date of the period to filter the logs. (optional)
     * @param enddate The end date of the period to filter the logs. (optional)
     * @param resource The resource to filter the action logs. (optional)
     * @param actionfilter The action to filter the action logs. (optional)
     * @param argument The id of the entity that was the argument of the executed action. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionlogListAsync(Integer from, Integer count, UUID user, OffsetDateTime startdate, OffsetDateTime enddate, String resource, String actionfilter, String argument, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionlogListValidateBeforeCall(from, count, user, startdate, enddate, resource, actionfilter, argument, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
