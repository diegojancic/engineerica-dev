/*
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BeaconApi
 */
@Ignore
public class BeaconApiTest {

    private final BeaconApi api = new BeaconApi();

    
    /**
     * Delete a beacon profile
     *
     * Allows the user to delete an existing beacon profile.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconDeleteTest() throws ApiException {
        UUID id = null;
        oas_any_type_not_mapped body = null;
        api.beaconDelete(id, body);

        // TODO: test validations
    }
    
    /**
     * Disable beacon support account wide
     *
     * Allows the user to enable or disable beacon usage account wide.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconDisableTest() throws ApiException {
        api.beaconDisable();

        // TODO: test validations
    }
    
    /**
     * View details of a beacon profile
     *
     * Allows the user to view an individual beacon profile and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconGetTest() throws ApiException {
        UUID id = null;
        api.beaconGet(id);

        // TODO: test validations
    }
    
    /**
     * Get the sign-in stations assigned to specific beacons.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconGetlocationsTest() throws ApiException {
        String beacons = null;
        api.beaconGetlocations(beacons);

        // TODO: test validations
    }
    
    /**
     * Get the location settings in the specified sign-in station.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconGetstationlocationTest() throws ApiException {
        UUID station = null;
        UUID location = null;
        api.beaconGetstationlocation(station, location);

        // TODO: test validations
    }
    
    /**
     * View the identifier for the account&#39;s beacon region (for sign-in stations).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconGetuuidTest() throws ApiException {
        api.beaconGetuuid();

        // TODO: test validations
    }
    
    /**
     * View a list of beacon profiles
     *
     * Allows the user to view the list of all beacon profiles without their basic details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconListTest() throws ApiException {
        Integer from = null;
        Integer count = null;
        api.beaconList(from, count);

        // TODO: test validations
    }
    
    /**
     * View a list of beacon profiles with their characteristics
     *
     * Allows the user to view the list of all beacon profiles with their basic details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconListprofilesTest() throws ApiException {
        api.beaconListprofiles();

        // TODO: test validations
    }
    
    /**
     * Generate or reset the identifier for the account&#39;s beacon region.
     *
     * Allows the user to reset the identifier for the beacon region, generally not necessary.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconResetuuidTest() throws ApiException {
        api.beaconResetuuid();

        // TODO: test validations
    }
    
    /**
     * Create or edit a beacon profile
     *
     * Allows the user to create or edit a beacon profile.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconSaveTest() throws ApiException {
        UUID id = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.beaconSave(id, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Check if there&#39;s location available to sign-in / out.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconScanlocationsTest() throws ApiException {
        String beacons = null;
        api.beaconScanlocations(beacons);

        // TODO: test validations
    }
    
    /**
     * Set the identifier for the account&#39;s beacon region (for sign-in stations).
     *
     * Allows the user to set the identifier for the account&#39;s beacon regions for sign-in stations, generally not necessary as each sign-in station profile generates its own region.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconSetuuidTest() throws ApiException {
        UUID id = null;
        api.beaconSetuuid(id);

        // TODO: test validations
    }
    
    /**
     * View all the beacon regions defined for silent tracking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconSilentregionsTest() throws ApiException {
        api.beaconSilentregions();

        // TODO: test validations
    }
    
    /**
     * Sign-in silently from the location specified by a beacon
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconSilentsigninTest() throws ApiException {
        UUID uuid = null;
        api.beaconSilentsignin(uuid);

        // TODO: test validations
    }
    
    /**
     * Sign-out silently from the location specified by a beacon
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconSilentsignoutTest() throws ApiException {
        UUID uuid = null;
        api.beaconSilentsignout(uuid);

        // TODO: test validations
    }
    
}
