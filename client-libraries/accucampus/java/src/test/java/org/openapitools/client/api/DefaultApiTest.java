/*
 * AccuCampus OpenAPI 3 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Remove an action item from an action plan
     *
     * Allows a user to remove an action item from a user&#39;s action plan.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.actionassignmentdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of an action item assigned to a user
     *
     * Allows the user to view an individual action item and its details, minus all the action item&#39;s updates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.actionassignmentget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of action items in a user&#39;s plan
     *
     * Allows the user to view the list of all action items for a specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        Integer assignee = null;
        Integer status = null;
        api.actionassignmentlist(token, from, count, assignee, status);

        // TODO: test validations
    }
    
    /**
     * View the history of an action item assigned to a user
     *
     * Allows the user to view an individual action plan and its details, including all the action plan&#39;s updates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentlisthistoryTest() throws ApiException {
        String token = null;
        UUID actionassignment = null;
        api.actionassignmentlisthistory(token, actionassignment);

        // TODO: test validations
    }
    
    /**
     * List public action assignments assigned to the logged user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentlistmineTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        Integer status = null;
        api.actionassignmentlistmine(token, from, count, status);

        // TODO: test validations
    }
    
    /**
     * List public action assignment history
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentlistpublichistoryTest() throws ApiException {
        String token = null;
        UUID actionassignment = null;
        api.actionassignmentlistpublichistory(token, actionassignment);

        // TODO: test validations
    }
    
    /**
     * Bulk complete action items
     *
     * Allows the user to bulk complete action items.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentmarkcompleteTest() throws ApiException {
        String token = null;
        String item = null;
        UUID assignee = null;
        UUID group = null;
        String notes = null;
        api.actionassignmentmarkcomplete(token, item, assignee, group, notes);

        // TODO: test validations
    }
    
    /**
     * Add an action item to a user&#39;s action plan
     *
     * Allows the user to edit or assign an action item to a user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.actionassignmentsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Update an action item assigned to a user
     *
     * Allows the user to update or mark an action item as complete.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionassignmentsavehistoryTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.actionassignmentsavehistory(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete an action item
     *
     * Allows the user to delete an action item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionitemdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.actionitemdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of an action item
     *
     * Allows the user to view an individual action item and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionitemgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.actionitemget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of action items
     *
     * Allows the user to view a list of action items
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionitemlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.actionitemlist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Create or edit an action item
     *
     * Allows the user to edit an action item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionitemsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.actionitemsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * View a list of users action logs
     *
     * Allows the user to view the audit logs for the account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionloglistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        UUID user = null;
        OffsetDateTime startdate = null;
        OffsetDateTime enddate = null;
        String resource = null;
        String actionfilter = null;
        String argument = null;
        api.actionloglist(token, from, count, user, startdate, enddate, resource, actionfilter, argument);

        // TODO: test validations
    }
    
    /**
     * Assign an action item pack to a user
     *
     * Allows the user to assign an action pack to a user or group of users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionpackassignTest() throws ApiException {
        String token = null;
        UUID pack = null;
        Boolean itemsdata = null;
        UUID assignee = null;
        UUID group = null;
        String notes = null;
        api.actionpackassign(token, pack, itemsdata, assignee, group, notes);

        // TODO: test validations
    }
    
    /**
     * Delete an action item pack
     *
     * Allows the user to delete an action item pack.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionpackdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.actionpackdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of an action item pack
     *
     * Allows the user to view an individual action pack and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionpackgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.actionpackget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of action item packs
     *
     * Allows the user to view the full list of action item packs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionpacklistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.actionpacklist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Create or edit an action item pack
     *
     * Allows the user to edit an action item pack.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actionpacksaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.actionpacksave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete an action item type
     *
     * Allows the user to delete an action item type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actiontypedeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.actiontypedelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of an action item type
     *
     * Allows the user to view an individual action item type and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actiontypegetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.actiontypeget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of action item types
     *
     * Allows the user to view the full list of action item types.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actiontypelistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.actiontypelist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Create or edit an action item type
     *
     * Allows the user to dit an action item type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void actiontypesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.actiontypesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Check the status of an ad hoc query execution
     *
     * Allows the user to check whether a query has executed, viewable on the query&#39;s execution page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adhocquerycheckexecutionTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.adhocquerycheckexecution(token, id);

        // TODO: test validations
    }
    
    /**
     * Delete an ad hoc query
     *
     * Allows the user to delete a previously created ad hoc query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adhocquerydeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.adhocquerydelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Execute an ad hoc query
     *
     * Allows the user to execute an ad hoc query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adhocqueryexecuteTest() throws ApiException {
        String token = null;
        UUID id = null;
        String query = null;
        api.adhocqueryexecute(token, id, query);

        // TODO: test validations
    }
    
    /**
     * View details of an ad hoc query
     *
     * Allows the user to view an individual ad hoc query with its settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adhocquerygetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.adhocqueryget(token, id);

        // TODO: test validations
    }
    
    /**
     * View the database schema for making ad hoc queries
     *
     * Allows the user to view the list of schema for ad hoc queries.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adhocquerygetschemaTest() throws ApiException {
        String token = null;
        api.adhocquerygetschema(token);

        // TODO: test validations
    }
    
    /**
     * View a list of saved ad hoc queries
     *
     * Allows the user to view the full list of saved queries.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adhocquerylistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.adhocquerylist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * View a list of ad hoc queries executions
     *
     * Allows the user to view the full list of past query executions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adhocquerylistexecutionsTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        UUID query = null;
        api.adhocquerylistexecutions(token, from, count, query);

        // TODO: test validations
    }
    
    /**
     * Create or edit an ad hoc query
     *
     * Allows the user to edit an ad hoc query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adhocquerysaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.adhocquerysave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Stops the execution of an ad hoc query
     *
     * Allows the user to halt the execution of a query that is currently being executed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adhocquerystopexecutionTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.adhocquerystopexecution(token, id);

        // TODO: test validations
    }
    
    /**
     * Request access to the ad-hoc reports
     *
     * Allows the user to request access to the ad-hoc reports by clicking, &#39;Request Access&#39; under Institutional Research -&gt; Ad-hoc Reports
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adhocreportsreqaccessTest() throws ApiException {
        String token = null;
        api.adhocreportsreqaccess(token);

        // TODO: test validations
    }
    
    /**
     * Check whether the user is known by the system.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advancedstationcheckunknownuserTest() throws ApiException {
        UUID station = null;
        String user = null;
        UUID location = null;
        api.advancedstationcheckunknownuser(station, user, location);

        // TODO: test validations
    }
    
    /**
     * Check whether the user is a staff member, an attendee or both.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advancedstationcheckuserroleTest() throws ApiException {
        UUID station = null;
        String user = null;
        UUID location = null;
        api.advancedstationcheckuserrole(station, user, location);

        // TODO: test validations
    }
    
    /**
     * Creates a user via a sign-in station.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advancedstationcreateuserTest() throws ApiException {
        UUID station = null;
        String user = null;
        UUID location = null;
        String firstname = null;
        String lastname = null;
        String email = null;
        String middlename = null;
        api.advancedstationcreateuser(station, user, location, firstname, lastname, email, middlename);

        // TODO: test validations
    }
    
    /**
     * Gets the courses available for a specific location and a specific student.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advancedstationgeteventsTest() throws ApiException {
        UUID station = null;
        UUID location = null;
        String user = null;
        api.advancedstationgetevents(station, location, user);

        // TODO: test validations
    }
    
    /**
     * Gets the info to display in the sign-in station by it&#39;s ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advancedstationgetinfoTest() throws ApiException {
        UUID id = null;
        UUID event = null;
        api.advancedstationgetinfo(id, event);

        // TODO: test validations
    }
    
    /**
     * Gets the locations available in a sign-in station.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advancedstationgetlocationsTest() throws ApiException {
        UUID station = null;
        String user = null;
        api.advancedstationgetlocations(station, user);

        // TODO: test validations
    }
    
    /**
     * Gets the staff/tutors available filtered by the location, course and services of the given attendance log.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advancedstationgetlogstaffTest() throws ApiException {
        UUID station = null;
        UUID attendancelog = null;
        Integer photosize = null;
        api.advancedstationgetlogstaff(station, attendancelog, photosize);

        // TODO: test validations
    }
    
    /**
     * Gets the user roles of the user trying to sign-in.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advancedstationgetrolesTest() throws ApiException {
        UUID station = null;
        String signinrole = null;
        String user = null;
        UUID location = null;
        api.advancedstationgetroles(station, signinrole, user, location);

        // TODO: test validations
    }
    
    /**
     * Gets the services available for a specific location.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advancedstationgetservicesTest() throws ApiException {
        UUID station = null;
        UUID location = null;
        String user = null;
        api.advancedstationgetservices(station, location, user);

        // TODO: test validations
    }
    
    /**
     * Gets the staff/tutors available for a specific location, course and service.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advancedstationgetstaffTest() throws ApiException {
        UUID station = null;
        UUID locationid = null;
        String user = null;
        String services = null;
        UUID eventid = null;
        Integer photosize = null;
        api.advancedstationgetstaff(station, locationid, user, services, eventid, photosize);

        // TODO: test validations
    }
    
    /**
     * Gets whether a user is signed-in or not.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advancedstationissignedinTest() throws ApiException {
        UUID station = null;
        OffsetDateTime time = null;
        String user = null;
        UUID location = null;
        api.advancedstationissignedin(station, time, user, location);

        // TODO: test validations
    }
    
    /**
     * Adds the missing permissions to a role. Requires access to advrole.save
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advroleaddmissingTest() throws ApiException {
        String token = null;
        String roles = null;
        String permissions = null;
        api.advroleaddmissing(token, roles, permissions);

        // TODO: test validations
    }
    
    /**
     * Checks the permissions are assigned for the given roles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolecheckpermTest() throws ApiException {
        String token = null;
        String roles = null;
        String permissions = null;
        api.advrolecheckperm(token, roles, permissions);

        // TODO: test validations
    }
    
    /**
     * Delete a role
     *
     * Allows the user to delete a role from the list of available roles.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advroledeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.advroledelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Delete a role mapping
     *
     * Allows the user to delete a role from its mapped categories on the &#39;Role Mapping&#39; page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advroledeletemappingTest() throws ApiException {
        String token = null;
        String map = null;
        UUID roleid = null;
        api.advroledeletemapping(token, map, roleid);

        // TODO: test validations
    }
    
    /**
     * View details of a role
     *
     * Allows the user to view a role and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolegetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.advroleget(token, id);

        // TODO: test validations
    }
    
    /**
     * Lists the roles for the current account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolelistTest() throws ApiException {
        String token = null;
        Boolean includepolicies = null;
        Boolean includeinternal = null;
        String name = null;
        api.advrolelist(token, includepolicies, includeinternal, name);

        // TODO: test validations
    }
    
    /**
     * Lists the maps a roles is mapped to
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolelistmapsTest() throws ApiException {
        String token = null;
        UUID roleid = null;
        api.advrolelistmaps(token, roleid);

        // TODO: test validations
    }
    
    /**
     * Lists the roles mappings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolelistrolesmappedTest() throws ApiException {
        String token = null;
        String map = null;
        api.advrolelistrolesmapped(token, map);

        // TODO: test validations
    }
    
    /**
     * View a list of role templates
     *
     * Allows the user to view the full list of available role templates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolelisttemplatesTest() throws ApiException {
        String token = null;
        api.advrolelisttemplates(token);

        // TODO: test validations
    }
    
    /**
     * Create or edit a role
     *
     * Allows the user to create or edit a role&#39;s permissions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.advrolesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Saves a role mapping
     *
     * Allows the user to add a role to a mapped category on the &#39;Role Mapping&#39; page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolesavemappingTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.advrolesavemapping(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * List users. Alias to user.list, use that one instead.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advrolesuserlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        UUID roleid = null;
        String onlywithoutcard = null;
        Integer photosize = null;
        api.advrolesuserlist(token, from, count, roleid, onlywithoutcard, photosize);

        // TODO: test validations
    }
    
    /**
     * Upgrade a user to another role (requires permission to edit those roles)
     *
     * Allow the user to add a role to another user, given that he has access to view that other user and edit people with that new role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advroleuserupgradeTest() throws ApiException {
        String token = null;
        UUID userid = null;
        UUID roleid = null;
        api.advroleuserupgrade(token, userid, roleid);

        // TODO: test validations
    }
    
    /**
     * Cancel an appointment
     *
     * Allows the user to cancel an appointment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentcancelTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.appointmentcancel(token, id);

        // TODO: test validations
    }
    
    /**
     * Check if an appointment is valid or not
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentcheckisvalidTest() throws ApiException {
        String token = null;
        UUID id = null;
        Boolean editing = null;
        api.appointmentcheckisvalid(token, id, editing);

        // TODO: test validations
    }
    
    /**
     * Edit an appointment even if it breaks activated rules
     *
     * Allows the user to edit an existing appointment even if it breaks the rules or settings of that location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmenteditanywayTest() throws ApiException {
        String token = null;
        UUID id = null;
        UUID attendee = null;
        UUID staff = null;
        UUID location = null;
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        UUID term = null;
        UUID event = null;
        String services = null;
        String notes = null;
        api.appointmenteditanyway(token, id, attendee, staff, location, start, end, term, event, services, notes);

        // TODO: test validations
    }
    
    /**
     * Edit the no-show status of an appointment
     *
     * Allows the user to edit the no-show status of an appointment by marking it as Voided, Restored, or as a Show.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmenteditpresenceTest() throws ApiException {
        String token = null;
        UUID id = null;
        Boolean showedup = null;
        api.appointmenteditpresence(token, id, showedup);

        // TODO: test validations
    }
    
    /**
     * Finds all staff available slots filtered by service, date, etc
     *
     * Allows the user to view available appointment slots when creating an appointment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentfindallstaffslotsTest() throws ApiException {
        String token = null;
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        String serviceids = null;
        UUID locationid = null;
        UUID eventid = null;
        Integer photosize = null;
        api.appointmentfindallstaffslots(token, starttime, endtime, serviceids, locationid, eventid, photosize);

        // TODO: test validations
    }
    
    /**
     * Finds available slots filtered by service, date, staff, etc
     *
     * Allows the user to view available appointment slots when creating an appointment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentfindslotsTest() throws ApiException {
        String token = null;
        UUID staffid = null;
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        String serviceids = null;
        UUID eventid = null;
        UUID locationid = null;
        api.appointmentfindslots(token, staffid, starttime, endtime, serviceids, eventid, locationid);

        // TODO: test validations
    }
    
    /**
     * Finds staff available by service, date, event, etc
     *
     * Allows the user to view staff availability when creating an appointment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentfindstaffTest() throws ApiException {
        String token = null;
        String serviceids = null;
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        UUID eventid = null;
        UUID locationid = null;
        Integer photosize = null;
        api.appointmentfindstaff(token, serviceids, starttime, endtime, eventid, locationid, photosize);

        // TODO: test validations
    }
    
    /**
     * Search and view details of an appointment
     *
     * Allows the user to view an individual appointment and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.appointmentget(token, id);

        // TODO: test validations
    }
    
    /**
     * Get the current appointments for the user that is about to sign-in via the specified sign-in station.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentgetcurrentTest() throws ApiException {
        UUID station = null;
        String user = null;
        UUID location = null;
        api.appointmentgetcurrent(station, user, location);

        // TODO: test validations
    }
    
    /**
     * Find locations where a service is available
     *
     * Allows the user to search for appointment availability by location or service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentgetlocationsTest() throws ApiException {
        String token = null;
        UUID serviceid = null;
        api.appointmentgetlocations(token, serviceid);

        // TODO: test validations
    }
    
    /**
     * View a list of appointments
     *
     * Allows the user to view all upcoming appointments for the location or locations they are scoped to.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        OffsetDateTime startdate = null;
        OffsetDateTime enddate = null;
        UUID userid = null;
        api.appointmentlist(token, from, count, startdate, enddate, userid);

        // TODO: test validations
    }
    
    /**
     * View all my upcoming appointments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentlistmineTest() throws ApiException {
        String token = null;
        OffsetDateTime start = null;
        OffsetDateTime modifiedafter = null;
        api.appointmentlistmine(token, start, modifiedafter);

        // TODO: test validations
    }
    
    /**
     * Search and view details of all my upcoming appointments
     *
     * Allows the user to view all of their own upcoming appointments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentlistupcomingTest() throws ApiException {
        String token = null;
        OffsetDateTime start = null;
        OffsetDateTime modifiedafter = null;
        api.appointmentlistupcoming(token, start, modifiedafter);

        // TODO: test validations
    }
    
    /**
     * Reschedule an appointment from MS Outlook.
     *
     * Allows the user to reschedule, edit, or cancel appointments via MS Outlook if the user has the AccuCampus add-on installed on their Outlook.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentrescheduleoutlookTest() throws ApiException {
        String token = null;
        UUID id = null;
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        api.appointmentrescheduleoutlook(token, id, start, end);

        // TODO: test validations
    }
    
    /**
     * Restore an appointment
     *
     * Allows the user to restore a canceled appointment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentrestoreTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.appointmentrestore(token, id);

        // TODO: test validations
    }
    
    /**
     * Restore an appointment even if it breaks activated rules
     *
     * Allows the user to restore a canceled appointment even if that appointment breaks the rules or settings of that location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentrestoreanywayTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.appointmentrestoreanyway(token, id);

        // TODO: test validations
    }
    
    /**
     * Schedule an appointment
     *
     * Allows the user to schedule an appointment within the rules of the location and the availability of staff members.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.appointmentsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Schedule an appointment even if it breaks activated rules
     *
     * Allows the user to schedule an appointment even if it breaks the rules or settings of that location or if it goes against the availability of the staff member.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentsetasvalidTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.appointmentsetasvalid(token, id);

        // TODO: test validations
    }
    
    /**
     * View the locations with most appointments
     *
     * Allows the user to view suggestions for the most popular locations in which to make appointments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentsuggestlocationsTest() throws ApiException {
        String token = null;
        api.appointmentsuggestlocations(token);

        // TODO: test validations
    }
    
    /**
     * View the services with most appointments
     *
     * Allows the user to view suggestions for the most popular services for which to make appointments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentsuggestservicesTest() throws ApiException {
        String token = null;
        api.appointmentsuggestservices(token);

        // TODO: test validations
    }
    
    /**
     * Void an appointment
     *
     * Allows the user to void an appointment that has been marked as a no-show so that it does not count against the student&#39;s restrictions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentvoidTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.appointmentvoid(token, id);

        // TODO: test validations
    }
    
    /**
     * Gets the phone number of the current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appsharegetphoneTest() throws ApiException {
        String token = null;
        api.appsharegetphone(token);

        // TODO: test validations
    }
    
    /**
     * Sends an SMS with the link to the app
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appsharesendtextTest() throws ApiException {
        String token = null;
        String phonenumber = null;
        api.appsharesendtext(token, phonenumber);

        // TODO: test validations
    }
    
    /**
     * Delete a comment on an attendance log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancelogcommentdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.attendancelogcommentdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View a comment on an attendance log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancelogcommentgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.attendancelogcommentget(token, id);

        // TODO: test validations
    }
    
    /**
     * View all the comments on a specific attendance log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancelogcommentlistTest() throws ApiException {
        UUID attendancelog = null;
        String token = null;
        api.attendancelogcommentlist(attendancelog, token);

        // TODO: test validations
    }
    
    /**
     * Save a comment on an attendance log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancelogcommentsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.attendancelogcommentsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete an attendance log
     *
     * Allows the user to delete an existing attendance log.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancelogdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.attendancelogdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of an attendance log
     *
     * Allows the user to view an individual attendance log and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendanceloggetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.attendancelogget(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of an attendance log&#39;s swipe history
     *
     * Allows the user to view the swipes of an individual attendance logs (sign ins and sign outs).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendanceloggetchangehistoryTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.attendanceloggetchangehistory(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of attendance logs
     *
     * Allows the user to view the list of all attendance logs in the location or locations in which the user is scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendanceloglistTest() throws ApiException {
        Integer from = null;
        Integer count = null;
        String token = null;
        String filter = null;
        UUID userid = null;
        api.attendanceloglist(from, count, token, filter, userid);

        // TODO: test validations
    }
    
    /**
     * Gets the attendance logs of the current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendanceloglistmineTest() throws ApiException {
        Integer from = null;
        Integer count = null;
        String token = null;
        String filter = null;
        api.attendanceloglistmine(from, count, token, filter);

        // TODO: test validations
    }
    
    /**
     * Gets the attendance logs that the current user is involved in as staff
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancelogliststaffTest() throws ApiException {
        Integer from = null;
        Integer count = null;
        String token = null;
        String filter = null;
        api.attendancelogliststaff(from, count, token, filter);

        // TODO: test validations
    }
    
    /**
     * Create or edit an attendance log
     *
     * Allows the user to create or edit an attendance log.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancelogsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.attendancelogsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Sign out an attendance log
     *
     * Allows the user to sign out am attendance log from the Who&#39;s In page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancelogsignoutTest() throws ApiException {
        String token = null;
        UUID id = null;
        UUID location = null;
        UUID event = null;
        OffsetDateTime datetime = null;
        api.attendancelogsignout(token, id, location, event, datetime);

        // TODO: test validations
    }
    
    /**
     * View who&#39;s in a location
     *
     * Allows the user to view the Who&#39;s In page and view all users who are logged into locations in which the user is scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancelogwhosinTest() throws ApiException {
        Integer from = null;
        Integer count = null;
        String token = null;
        UUID location = null;
        UUID event = null;
        String sorting = null;
        String roles = null;
        Integer photosize = null;
        String extensions = null;
        Boolean export = null;
        api.attendancelogwhosin(from, count, token, location, event, sorting, roles, photosize, extensions, export);

        // TODO: test validations
    }
    
    /**
     * Delete an attendance restriction
     *
     * Allows the user to delete an existing attendance restriction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancerestrictiondeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.attendancerestrictiondelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of an attendance restriction
     *
     * Allows the user to view an individual attendance restriction and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancerestrictiongetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.attendancerestrictionget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of attendance restrictions
     *
     * Allows the user to view the list of all attendance restrictions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancerestrictionlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.attendancerestrictionlist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Create or edit an attendance restriction
     *
     * Allows the user to create or edit an attendance restriction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attendancerestrictionsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.attendancerestrictionsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete a beacon profile
     *
     * Allows the user to delete an existing beacon profile.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beacondeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.beacondelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Disable beacon support account wide
     *
     * Allows the user to enable or disable beacon usage account wide.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beacondisableTest() throws ApiException {
        String token = null;
        api.beacondisable(token);

        // TODO: test validations
    }
    
    /**
     * View details of a beacon profile
     *
     * Allows the user to view an individual beacon profile and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beacongetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.beaconget(token, id);

        // TODO: test validations
    }
    
    /**
     * Get the sign-in stations assigned to specific beacons.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beacongetlocationsTest() throws ApiException {
        String token = null;
        String beacons = null;
        api.beacongetlocations(token, beacons);

        // TODO: test validations
    }
    
    /**
     * Get the location settings in the specified sign-in station.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beacongetstationlocationTest() throws ApiException {
        String token = null;
        UUID station = null;
        UUID location = null;
        api.beacongetstationlocation(token, station, location);

        // TODO: test validations
    }
    
    /**
     * View the identifier for the account&#39;s beacon region (for sign-in stations).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beacongetuuidTest() throws ApiException {
        String token = null;
        api.beacongetuuid(token);

        // TODO: test validations
    }
    
    /**
     * View a list of beacon profiles
     *
     * Allows the user to view the list of all beacon profiles without their basic details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.beaconlist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * View a list of beacon profiles with their characteristics
     *
     * Allows the user to view the list of all beacon profiles with their basic details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconlistprofilesTest() throws ApiException {
        String token = null;
        api.beaconlistprofiles(token);

        // TODO: test validations
    }
    
    /**
     * Generate or reset the identifier for the account&#39;s beacon region.
     *
     * Allows the user to reset the identifier for the beacon region, generally not necessary.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconresetuuidTest() throws ApiException {
        String token = null;
        api.beaconresetuuid(token);

        // TODO: test validations
    }
    
    /**
     * Create or edit a beacon profile
     *
     * Allows the user to create or edit a beacon profile.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.beaconsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Check if there&#39;s location available to sign-in / out.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconscanlocationsTest() throws ApiException {
        String token = null;
        String beacons = null;
        api.beaconscanlocations(token, beacons);

        // TODO: test validations
    }
    
    /**
     * Set the identifier for the account&#39;s beacon region (for sign-in stations).
     *
     * Allows the user to set the identifier for the account&#39;s beacon regions for sign-in stations, generally not necessary as each sign-in station profile generates its own region.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconsetuuidTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.beaconsetuuid(token, id);

        // TODO: test validations
    }
    
    /**
     * View all the beacon regions defined for silent tracking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconsilentregionsTest() throws ApiException {
        String token = null;
        api.beaconsilentregions(token);

        // TODO: test validations
    }
    
    /**
     * Sign-in silently from the location specified by a beacon
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconsilentsigninTest() throws ApiException {
        String token = null;
        UUID uuid = null;
        api.beaconsilentsignin(token, uuid);

        // TODO: test validations
    }
    
    /**
     * Sign-out silently from the location specified by a beacon
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beaconsilentsignoutTest() throws ApiException {
        String token = null;
        UUID uuid = null;
        api.beaconsilentsignout(token, uuid);

        // TODO: test validations
    }
    
    /**
     * Get background job status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bgjobgetstatusTest() throws ApiException {
        String token = null;
        UUID jobid = null;
        String jobtype = null;
        api.bgjobgetstatus(token, jobid, jobtype);

        // TODO: test validations
    }
    
    /**
     * Import data into AccuCampus
     *
     * Allows the user to import data into AccuCampus via CSV or flat files either manually or automatically using the import utility.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void callImportTest() throws ApiException {
        String token = null;
        String importtype = null;
        String upload = null;
        String filename = null;
        String parameters = null;
        api.callImport(token, importtype, upload, filename, parameters);

        // TODO: test validations
    }
    
    /**
     * Gets a captcha challenge that the user must complete to do certain requests.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void captchagetchallengeTest() throws ApiException {
        api.captchagetchallenge();

        // TODO: test validations
    }
    
    /**
     * Gets a captcha image that the user must complete to do certain requests.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void captchagetimageTest() throws ApiException {
        String captchatoken = null;
        api.captchagetimage(captchatoken);

        // TODO: test validations
    }
    
    /**
     * Get the application change log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changelogTest() throws ApiException {
        String token = null;
        api.changelog(token);

        // TODO: test validations
    }
    
    /**
     * Get client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientgetTest() throws ApiException {
        String token = null;
        String client = null;
        String clientname = null;
        api.clientget(token, client, clientname);

        // TODO: test validations
    }
    
    /**
     * Gets the clients of the specified conference
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.clientlist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Saves a client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.clientsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Send a message to a client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientsendmessageTest() throws ApiException {
        String token = null;
        UUID uniqueclientid = null;
        String message = null;
        api.clientsendmessage(token, uniqueclientid, message);

        // TODO: test validations
    }
    
    /**
     * Sends an invitation to everyone to AccuCampus Communities
     *
     * Allows the user to invite all other users to the AccuCampus Communities.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void communityinviteTest() throws ApiException {
        String token = null;
        api.communityinvite(token);

        // TODO: test validations
    }
    
    /**
     * Sends an invitation for myself to AccuCampus Communities
     *
     * Allows the user to access the AccuCampus Communities.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void communityjoinTest() throws ApiException {
        String token = null;
        api.communityjoin(token);

        // TODO: test validations
    }
    
    /**
     * Delete a compass category
     *
     * Allows the user to delete an existing compass category.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compasscategorydeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.compasscategorydelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of a compass category
     *
     * Allows the user to view an indvidiaul compass category and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compasscategorygetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.compasscategoryget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of compass categories
     *
     * Allows the user to view the full list of compass categories.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compasscategorylistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        Boolean onlywithservices = null;
        api.compasscategorylist(token, from, count, onlywithservices);

        // TODO: test validations
    }
    
    /**
     * Create or edit a compass category
     *
     * Allows the user to create or edit a compass category.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compasscategorysaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.compasscategorysave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * View all the services added to the compass
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compassservicelistTest() throws ApiException {
        String token = null;
        UUID category = null;
        api.compassservicelist(token, category);

        // TODO: test validations
    }
    
    /**
     * View all the locations where a service added to the compass is available
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compassservicelistlocationsTest() throws ApiException {
        String token = null;
        UUID serviceid = null;
        api.compassservicelistlocations(token, serviceid);

        // TODO: test validations
    }
    
    /**
     * Delete a computer
     *
     * Allows the user to delete an existing computer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void computerlabdeletecomputerTest() throws ApiException {
        String token = null;
        String id = null;
        api.computerlabdeletecomputer(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a computer
     *
     * Allows the user to search and view an individual computer and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void computerlabgetcomputerTest() throws ApiException {
        String token = null;
        String id = null;
        api.computerlabgetcomputer(token, id);

        // TODO: test validations
    }
    
    /**
     * Loads the settings for a computer lab
     *
     * Loads the settings for a computer lab.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void computerlabgetsettingsTest() throws ApiException {
        UUID id = null;
        api.computerlabgetsettings(id);

        // TODO: test validations
    }
    
    /**
     * Gets whether a user is signed-in or not.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void computerlabissignedinTest() throws ApiException {
        UUID station = null;
        String user = null;
        api.computerlabissignedin(station, user);

        // TODO: test validations
    }
    
    /**
     * View a list of computers
     *
     * Allows the user to view the list of all computers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void computerlablistcomputersTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        UUID location = null;
        Boolean freeonly = null;
        api.computerlablistcomputers(token, from, count, location, freeonly);

        // TODO: test validations
    }
    
    /**
     * View a list of the locations that use the Computer Lab add-on
     *
     * Allows the user to view the list of all labs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void computerlablistlabsTest() throws ApiException {
        String token = null;
        api.computerlablistlabs(token);

        // TODO: test validations
    }
    
    /**
     * View a list of sign-in stations available for computer labs.
     *
     * Allows the user to view the list of sign-in stations that are available for computer labs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void computerlabliststationsTest() throws ApiException {
        String token = null;
        api.computerlabliststations(token);

        // TODO: test validations
    }
    
    /**
     * Create or edit a computer
     *
     * Allows the user to create or edit a computer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void computerlabsavecomputerTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.computerlabsavecomputer(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Saves the settings for a computer lab
     *
     * Saves the settings for a computer lab.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void computerlabsavesettingsTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.computerlabsavesettings(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Save a new swipe from a computer in a computer lab.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void computerlabsaveswipeTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.computerlabsaveswipe(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Deletes a dead-end record group
     *
     * Allows the user to delete a dead end record group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deadendrecordingdeleteTest() throws ApiException {
        String token = null;
        String hierarchykey = null;
        api.deadendrecordingdelete(token, hierarchykey);

        // TODO: test validations
    }
    
    /**
     * Lists the recorded dead ends, if enabled
     *
     * Allows the user to view the list of dead ends, provided dead end recording is enabled for the account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deadendrecordinglistTest() throws ApiException {
        String token = null;
        api.deadendrecordinglist(token);

        // TODO: test validations
    }
    
    /**
     * Lists the comments for a specific dead end
     *
     * Allows the user to view the comments made on dead end sessions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deadendrecordinglistcommentsTest() throws ApiException {
        String token = null;
        String hierarchykey = null;
        api.deadendrecordinglistcomments(token, hierarchykey);

        // TODO: test validations
    }
    
    /**
     * Saves a dead-end record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deadendrecordingsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.deadendrecordingsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete a college department
     *
     * Allows the user to delete an existing college department.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void departmentdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.departmentdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a college department
     *
     * Allows the user to view an individual college department and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void departmentgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.departmentget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of college departments
     *
     * Allows the user to view the full list of college departments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void departmentlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.departmentlist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Create or edit a college department
     *
     * Allows the user to create or edit a college department.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void departmentsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.departmentsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Get the documentation
     *
     * Retrieves the list of actions available in the system.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void docTest() throws ApiException {
        Boolean excludeanonymous = null;
        api.doc(excludeanonymous);

        // TODO: test validations
    }
    
    /**
     * Adds background image for the login
     *
     * Allows the user to set the background image that all users will see when logging into an AccuCampus account not using SSO.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void easyloginaddbgimageTest() throws ApiException {
        String token = null;
        String upload = null;
        String filename = null;
        api.easyloginaddbgimage(token, upload, filename);

        // TODO: test validations
    }
    
    /**
     * Edit an event&#39;s sessions according to their schedule
     *
     * Allows the user to edit event sessions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventchecksessionsTest() throws ApiException {
        String token = null;
        UUID eventid = null;
        Boolean autorepair = null;
        api.eventchecksessions(token, eventid, autorepair);

        // TODO: test validations
    }
    
    /**
     * Delete a course
     *
     * Allows the user to delete an existing course.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.eventdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a course
     *
     * Allows the user to view an individual course and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.eventget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of courses by date
     *
     * Allows the user to view a list of courses by date.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventgetsessionsbydateTest() throws ApiException {
        String token = null;
        UUID location = null;
        OffsetDateTime date = null;
        String type = null;
        api.eventgetsessionsbydate(token, location, date, type);

        // TODO: test validations
    }
    
    /**
     * View a list of courses
     *
     * Allows the user to view the full list of courses.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventlistTest() throws ApiException {
        String token = null;
        String from = null;
        String count = null;
        Boolean summaryonly = null;
        UUID termid = null;
        api.eventlist(token, from, count, summaryonly, termid);

        // TODO: test validations
    }
    
    /**
     * View a list of courses I am registered to
     *
     * Allows the user to view the courses they are registered to.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventlistregisteredTest() throws ApiException {
        String token = null;
        String from = null;
        String count = null;
        Boolean summaryonly = null;
        UUID termid = null;
        api.eventlistregistered(token, from, count, summaryonly, termid);

        // TODO: test validations
    }
    
    /**
     * Register current user to a course
     *
     * Allows the user to make themselves available for individual courses.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventregaddmeTest() throws ApiException {
        String token = null;
        UUID eventid = null;
        String listname = null;
        api.eventregaddme(token, eventid, listname);

        // TODO: test validations
    }
    
    /**
     * Register current user to all courses
     *
     * Allows the user to make themselves available for all courses.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventregaddmetoallTest() throws ApiException {
        String token = null;
        String listname = null;
        api.eventregaddmetoall(token, listname);

        // TODO: test validations
    }
    
    /**
     * Register current user to a course group
     *
     * Allows the user to make themselves available for a course group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventregaddmetogroupTest() throws ApiException {
        String token = null;
        String codegroup = null;
        String listname = null;
        api.eventregaddmetogroup(token, codegroup, listname);

        // TODO: test validations
    }
    
    /**
     * Register a user to a course for attendance
     *
     * Allows the user to register a user to a course.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventregadduserTest() throws ApiException {
        String token = null;
        UUID userid = null;
        UUID eventid = null;
        String listname = null;
        api.eventregadduser(token, userid, eventid, listname);

        // TODO: test validations
    }
    
    /**
     * Register a user to assist with all courses
     *
     * Allows the user to make a staff member available to assist with all courses.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventregaddusertoallTest() throws ApiException {
        String token = null;
        UUID userid = null;
        String listname = null;
        api.eventregaddusertoall(token, userid, listname);

        // TODO: test validations
    }
    
    /**
     * Register a user to an course group
     *
     * Allows the user to make a staff member available for a course group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventregaddusertogroupTest() throws ApiException {
        String token = null;
        UUID userid = null;
        String codegroup = null;
        String listname = null;
        api.eventregaddusertogroup(token, userid, codegroup, listname);

        // TODO: test validations
    }
    
    /**
     * View course registration by user
     *
     * Allows the user to view all courses a given user is registered to, provided they have permission to view that user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventreggeteventsTest() throws ApiException {
        String token = null;
        UUID userid = null;
        String listname = null;
        UUID termid = null;
        String namefilter = null;
        api.eventreggetevents(token, userid, listname, termid, namefilter);

        // TODO: test validations
    }
    
    /**
     * Lists the course group registrations of a user
     *
     * Allows the user to view the course groups a staff member is available for.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventreggetgroupsTest() throws ApiException {
        String token = null;
        UUID userid = null;
        String listname = null;
        api.eventreggetgroups(token, userid, listname);

        // TODO: test validations
    }
    
    /**
     * View the event registrations of the current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventreggetmyeventsTest() throws ApiException {
        String token = null;
        String listname = null;
        UUID termid = null;
        String namefilter = null;
        api.eventreggetmyevents(token, listname, termid, namefilter);

        // TODO: test validations
    }
    
    /**
     * View all current user registrations to course groups
     *
     * Allows the user to view all his registrations to course groups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventreggetmygroupsTest() throws ApiException {
        String token = null;
        String listname = null;
        api.eventreggetmygroups(token, listname);

        // TODO: test validations
    }
    
    /**
     * View course registration
     *
     * Allows the user to view all users registered for an individual course.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventreggetusersTest() throws ApiException {
        String token = null;
        UUID eventid = null;
        String listname = null;
        Integer photosize = null;
        api.eventreggetusers(token, eventid, listname, photosize);

        // TODO: test validations
    }
    
    /**
     * Lists the registrations for a course group
     *
     * Allows the user the get the staff members registered to a specific course group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventreggetusersfromgroupTest() throws ApiException {
        String token = null;
        UUID codegroup = null;
        String listname = null;
        api.eventreggetusersfromgroup(token, codegroup, listname);

        // TODO: test validations
    }
    
    /**
     * View the users that are registered to all courses
     *
     * Allows the user to view all staff members available for all courses.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventreggetuserstoallTest() throws ApiException {
        String token = null;
        String listname = null;
        api.eventreggetuserstoall(token, listname);

        // TODO: test validations
    }
    
    /**
     * Unregister current user from a course
     *
     * Allows the user to remove themselves from registration to a course.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventregremovemeTest() throws ApiException {
        String token = null;
        UUID eventid = null;
        String listname = null;
        api.eventregremoveme(token, eventid, listname);

        // TODO: test validations
    }
    
    /**
     * Remove current user from the registration to all courses
     *
     * Allows the user to remove themselves from availability to all courses.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventregremovemefromallTest() throws ApiException {
        String token = null;
        String listname = null;
        api.eventregremovemefromall(token, listname);

        // TODO: test validations
    }
    
    /**
     * Remove current user from a course group
     *
     * Allows the user to remove themselves from availability to a course group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventregremovemefromgroupTest() throws ApiException {
        String token = null;
        UUID codegroup = null;
        String listname = null;
        api.eventregremovemefromgroup(token, codegroup, listname);

        // TODO: test validations
    }
    
    /**
     * Remove a user from a course
     *
     * Allows the user to remove a user from a course&#39;s registration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventregremoveuserTest() throws ApiException {
        String token = null;
        UUID userid = null;
        UUID eventid = null;
        String listname = null;
        api.eventregremoveuser(token, userid, eventid, listname);

        // TODO: test validations
    }
    
    /**
     * Remove a user from the registration to all courses
     *
     * Allows the user to remove a staff member from availability to all courses.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventregremoveuserfromallTest() throws ApiException {
        String token = null;
        UUID userid = null;
        String listname = null;
        api.eventregremoveuserfromall(token, userid, listname);

        // TODO: test validations
    }
    
    /**
     * Remove a user from a course group
     *
     * Allows the user to remove a staff member from availability to a course group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventregremoveuserfromgroupTest() throws ApiException {
        String token = null;
        UUID userid = null;
        UUID codegroup = null;
        String listname = null;
        api.eventregremoveuserfromgroup(token, userid, codegroup, listname);

        // TODO: test validations
    }
    
    /**
     * Create or edit a course
     *
     * Allows the user to create or edit a course.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.eventsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Searches for the available event groups
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventsearchgroupTest() throws ApiException {
        String token = null;
        UUID query = null;
        api.eventsearchgroup(token, query);

        // TODO: test validations
    }
    
    /**
     * Export AccuCampus data
     *
     * Allows the user to export data from AccuCampus into a CSV, HTML, or Excel format.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportTest() throws ApiException {
        String token = null;
        String exporttype = null;
        String exportformat = null;
        String filters = null;
        api.export(token, exporttype, exportformat, filters);

        // TODO: test validations
    }
    
    /**
     * Lists available export types
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportlisttypesTest() throws ApiException {
        String token = null;
        api.exportlisttypes(token);

        // TODO: test validations
    }
    
    /**
     * Lists the available features.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void featurelistTest() throws ApiException {
        String token = null;
        api.featurelist(token);

        // TODO: test validations
    }
    
    /**
     * View a list of entered holidays
     *
     * Allows the user to view all holidays entered.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void holidaylistTest() throws ApiException {
        String token = null;
        UUID term = null;
        api.holidaylist(token, term);

        // TODO: test validations
    }
    
    /**
     * Create or edit a list of holidays
     *
     * Allows the user to create or edit holidays.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void holidaysaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.holidaysave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * View the holiday suggestions in the given term
     *
     * Allows the user to view the holiday suggestions for each term.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void holidaysuggestTest() throws ApiException {
        String token = null;
        UUID term = null;
        api.holidaysuggest(token, term);

        // TODO: test validations
    }
    
    /**
     * Lists available import types
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importlisttypesTest() throws ApiException {
        String token = null;
        api.importlisttypes(token);

        // TODO: test validations
    }
    
    /**
     * Delete an interaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void interactiondeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.interactiondelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Get the interactions feed
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void interactionfeedTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        OffsetDateTime startdate = null;
        Boolean _public = null;
        String contexttype = null;
        UUID contextid = null;
        String types = null;
        Integer photosize = null;
        Boolean showdefaultphoto = null;
        Boolean orderdescending = null;
        api.interactionfeed(token, from, count, startdate, _public, contexttype, contextid, types, photosize, showdefaultphoto, orderdescending);

        // TODO: test validations
    }
    
    /**
     * View an interaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void interactiongetTest() throws ApiException {
        String token = null;
        String id = null;
        Integer thumbnailmediasize = null;
        Integer photosize = null;
        api.interactionget(token, id, thumbnailmediasize, photosize);

        // TODO: test validations
    }
    
    /**
     * Get current user&#39;s latest private interactions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void interactionlistprivatesummaryTest() throws ApiException {
        String token = null;
        Integer photosize = null;
        Boolean showdefaultphoto = null;
        api.interactionlistprivatesummary(token, photosize, showdefaultphoto);

        // TODO: test validations
    }
    
    /**
     * Save an interaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void interactionsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.interactionsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Accept the license agreement
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void licenseacceptagreementTest() throws ApiException {
        String token = null;
        api.licenseacceptagreement(token);

        // TODO: test validations
    }
    
    /**
     * Check if license agreement has been accepted
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void licensegetagreementstatusTest() throws ApiException {
        String token = null;
        api.licensegetagreementstatus(token);

        // TODO: test validations
    }
    
    /**
     * Gets the current license information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void licensegetcurrentTest() throws ApiException {
        String token = null;
        api.licensegetcurrent(token);

        // TODO: test validations
    }
    
    /**
     * Contact Engineerica in order to renew the AccuCampus subscription
     *
     * Allows the user to select the option to contact Engineerica when the AccuCampus account is nearing its renewal date.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void licenserenewTest() throws ApiException {
        String token = null;
        String email = null;
        String phonenumber = null;
        String jobtitle = null;
        String institution = null;
        String comments = null;
        api.licenserenew(token, email, phonenumber, jobtitle, institution, comments);

        // TODO: test validations
    }
    
    /**
     * Delete a like
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void likedeleteTest() throws ApiException {
        String token = null;
        UUID interactionid = null;
        api.likedelete(token, interactionid);

        // TODO: test validations
    }
    
    /**
     * View all the likes associated to a target
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void likelistTest() throws ApiException {
        String token = null;
        UUID interactionid = null;
        Integer photosize = null;
        api.likelist(token, interactionid, photosize);

        // TODO: test validations
    }
    
    /**
     * Save a like
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void likesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.likesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Lists the available timezones
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listtimezonesTest() throws ApiException {
        api.listtimezones();

        // TODO: test validations
    }
    
    /**
     * Delete a location
     *
     * Allows the user to delete an existing location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.locationdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a location
     *
     * Allows the user to search and view an individual location and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.locationget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of locations
     *
     * Allows the user to view the list of all locations to which they are scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        String locations = null;
        Boolean sortbygroup = null;
        api.locationlist(token, from, count, locations, sortbygroup);

        // TODO: test validations
    }
    
    /**
     * Create or edit a location
     *
     * Allows the user to create or edit a location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.locationsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Login
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginTest() throws ApiException {
        String domain = null;
        String username = null;
        String password = null;
        String method = null;
        Boolean rememberme = null;
        api.login(domain, username, password, method, rememberme);

        // TODO: test validations
    }
    
    /**
     * Logout
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logoutTest() throws ApiException {
        String token = null;
        api.logout(token);

        // TODO: test validations
    }
    
    /**
     * Check in media item
     *
     * Allows the user to check in a media item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediacheckinTest() throws ApiException {
        String token = null;
        UUID media = null;
        OffsetDateTime checkindate = null;
        String notes = null;
        api.mediacheckin(token, media, checkindate, notes);

        // TODO: test validations
    }
    
    /**
     * Check out media item
     *
     * Allows the user to check out a media item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediacheckoutTest() throws ApiException {
        String token = null;
        UUID media = null;
        UUID user = null;
        OffsetDateTime checkoutdate = null;
        OffsetDateTime duedate = null;
        UUID staff = null;
        UUID event = null;
        String notes = null;
        api.mediacheckout(token, media, user, checkoutdate, duedate, staff, event, notes);

        // TODO: test validations
    }
    
    /**
     * View a list of past media checkouts
     *
     * Allows the user to view a list of all past checkouts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediacheckoutlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        UUID media = null;
        UUID user = null;
        Integer photosize = null;
        api.mediacheckoutlist(token, from, count, media, user, photosize);

        // TODO: test validations
    }
    
    /**
     * Delete a media item
     *
     * Allows the user to delete an existing media item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediadeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.mediadelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Delete a media checkout log
     *
     * Allows the user to delete a media item&#39;s checkout log.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediadeletecheckoutlogTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.mediadeletecheckoutlog(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a media item
     *
     * Allows the user to view an individual media item and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediagetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.mediaget(token, id);

        // TODO: test validations
    }
    
    /**
     * Search media item by unique code
     *
     * Allows the user to search for media items by their unique code.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediagetbycodeTest() throws ApiException {
        String token = null;
        String code = null;
        UUID location = null;
        api.mediagetbycode(token, code, location);

        // TODO: test validations
    }
    
    /**
     * View details of a media item checkout information
     *
     * Allows the user to view a media item&#39;s checkout information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediagetcheckoutTest() throws ApiException {
        String token = null;
        UUID id = null;
        Integer photosize = null;
        api.mediagetcheckout(token, id, photosize);

        // TODO: test validations
    }
    
    /**
     * View details of a media checkout log
     *
     * Allows the user to view a media item&#39;s checkout history.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediagetcheckoutlogTest() throws ApiException {
        String token = null;
        UUID id = null;
        Integer photosize = null;
        api.mediagetcheckoutlog(token, id, photosize);

        // TODO: test validations
    }
    
    /**
     * View a list of media items
     *
     * Allows the user to view the list of all media items tied to locations in which the user is scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void medialistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        Integer status = null;
        UUID user = null;
        api.medialist(token, from, count, status, user);

        // TODO: test validations
    }
    
    /**
     * Create or edit a media item
     *
     * Allows the user to create or edit a media item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediasaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.mediasave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete a media type
     *
     * Allows the user to delete an existing media type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediatypedeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.mediatypedelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a media type
     *
     * Allows the user to view a media type and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediatypegetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.mediatypeget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of media types
     *
     * Allows the user to view the list of all media types.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediatypelistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.mediatypelist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Create or edit a media type
     *
     * Allows the user to create or edit a media type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediatypesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.mediatypesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete memorized report
     *
     * Allows the user to delete a memorized report that they have created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memorizedreportdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.memorizedreportdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of a memorized report
     *
     * Allows the user to view an individual memorized report and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memorizedreportgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.memorizedreportget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of all his memorized reports
     *
     * Allows the user to view the list of all memorized reports that they have created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memorizedreportlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        String customname = null;
        api.memorizedreportlist(token, from, count, customname);

        // TODO: test validations
    }
    
    /**
     * Create or edit a memorized report
     *
     * Allows the user to create or edit a memorized report for themselves.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memorizedreportsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.memorizedreportsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Gets the items on the menu
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void menugetitemsTest() throws ApiException {
        String menuid = null;
        api.menugetitems(menuid);

        // TODO: test validations
    }
    
    /**
     * Gets the logged in user account.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void myaccountTest() throws ApiException {
        String token = null;
        api.myaccount(token);

        // TODO: test validations
    }
    
    /**
     * Gets the current time zone&#39;s iana name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void myianatimezoneTest() throws ApiException {
        String token = null;
        api.myianatimezone(token);

        // TODO: test validations
    }
    
    /**
     * Gets the logged in user information.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void myprofileTest() throws ApiException {
        String token = null;
        Integer photosize = null;
        api.myprofile(token, photosize);

        // TODO: test validations
    }
    
    /**
     * Gets the list of actions the user can execute.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void myrightsTest() throws ApiException {
        String token = null;
        api.myrights(token);

        // TODO: test validations
    }
    
    /**
     * Updates logged user&#39;s profile information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mysaveprofileTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.mysaveprofile(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete a notification
     *
     * Allows the user to delete an existing notification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.notificationdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View a notification
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.notificationget(token, id);

        // TODO: test validations
    }
    
    /**
     * Gets all public (in station) notifications for the specific user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationgetforstationTest() throws ApiException {
        UUID station = null;
        String user = null;
        api.notificationgetforstation(station, user);

        // TODO: test validations
    }
    
    /**
     * Get the number of unread notifications
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationgetunreadcountTest() throws ApiException {
        String token = null;
        api.notificationgetunreadcount(token);

        // TODO: test validations
    }
    
    /**
     * View a list of all sent notifications
     *
     * Allows the user to view the list of all sent notifications.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        UUID recipient = null;
        Integer status = null;
        OffsetDateTime startdate = null;
        OffsetDateTime enddate = null;
        Boolean sentonscreen = null;
        Boolean sentemail = null;
        Boolean sentsms = null;
        api.notificationlist(token, from, count, recipient, status, startdate, enddate, sentonscreen, sentemail, sentsms);

        // TODO: test validations
    }
    
    /**
     * View all the notifications sent to the current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationlistmineTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        Integer status = null;
        OffsetDateTime startdate = null;
        OffsetDateTime enddate = null;
        api.notificationlistmine(token, from, count, status, startdate, enddate);

        // TODO: test validations
    }
    
    /**
     * Mark a notification as read
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationmarkasreadTest() throws ApiException {
        String token = null;
        UUID id = null;
        Integer status = null;
        OffsetDateTime startdate = null;
        OffsetDateTime enddate = null;
        api.notificationmarkasread(token, id, status, startdate, enddate);

        // TODO: test validations
    }
    
    /**
     * Mark a notification as unread
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationmarkasunreadTest() throws ApiException {
        String token = null;
        UUID id = null;
        Integer status = null;
        OffsetDateTime startdate = null;
        OffsetDateTime enddate = null;
        api.notificationmarkasunread(token, id, status, startdate, enddate);

        // TODO: test validations
    }
    
    /**
     * Send notifications on screen, via email or text to users
     *
     * Allows the user to send notifications to other users through the Send Message link.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationsendTest() throws ApiException {
        String token = null;
        Boolean emailenabled = null;
        Boolean onscreenenabled = null;
        Boolean smsenabled = null;
        String title = null;
        String tousers = null;
        String togroups = null;
        String onscreenbody = null;
        String onscreenclick = null;
        String onscreenurl = null;
        String onscreenclass = null;
        Integer onscreenduration = null;
        Integer showonstation = null;
        String emailfromname = null;
        String emailfrom = null;
        String emailsubject = null;
        String emailbody = null;
        String textmessagebody = null;
        api.notificationsend(token, emailenabled, onscreenenabled, smsenabled, title, tousers, togroups, onscreenbody, onscreenclick, onscreenurl, onscreenclass, onscreenduration, showonstation, emailfromname, emailfrom, emailsubject, emailbody, textmessagebody);

        // TODO: test validations
    }
    
    /**
     * Send on-screen notifications
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationsendonscreenTest() throws ApiException {
        String token = null;
        UUID notification = null;
        api.notificationsendonscreen(token, notification);

        // TODO: test validations
    }
    
    /**
     * Delete a notification topic
     *
     * Allows the user to delete an existing notification topic.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationtopicdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.notificationtopicdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a notification topic
     *
     * Allows the user to view an individual notification topic and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationtopicgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.notificationtopicget(token, id);

        // TODO: test validations
    }
    
    /**
     * List all the notification topics
     *
     * Allows the user to view the list of all notification topics.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationtopiclistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.notificationtopiclist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * List all the notification topics available to subscribe
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationtopiclistsubscribeTest() throws ApiException {
        String token = null;
        api.notificationtopiclistsubscribe(token);

        // TODO: test validations
    }
    
    /**
     * Create or edit a notification topic
     *
     * Allows the user to create and edit a notification topic.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationtopicsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.notificationtopicsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Deregisters the current device to receive push notifications
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pushderegisterTest() throws ApiException {
        String devicetoken = null;
        String platform = null;
        api.pushderegister(devicetoken, platform);

        // TODO: test validations
    }
    
    /**
     * Registers the current device to receive push notifications
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pushregisterTest() throws ApiException {
        String devicetoken = null;
        String platform = null;
        api.pushregister(devicetoken, platform);

        // TODO: test validations
    }
    
    /**
     * Print and email QR labels
     *
     * Allows the user to generate a printable PDF of QR labels containing user Card Numbers to be emailed to users and used as attendance tracking for events.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void qrlabelsprintTest() throws ApiException {
        String token = null;
        UUID user = null;
        UUID group = null;
        api.qrlabelsprint(token, user, group);

        // TODO: test validations
    }
    
    /**
     * Gets an image of a QR token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void qrlogingetTest() throws ApiException {
        String token = null;
        api.qrloginget(token);

        // TODO: test validations
    }
    
    /**
     * Login
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void qrloginloginTest() throws ApiException {
        String onetimetoken = null;
        api.qrloginlogin(onetimetoken);

        // TODO: test validations
    }
    
    /**
     * Deletes a widget from the Quick Panel
     *
     * Allows the user to delete a widget that has been added to the Quick Panel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quickpaneldeletewidgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.quickpaneldeletewidget(token, id);

        // TODO: test validations
    }
    
    /**
     * Fetches the information for a specific widget.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quickpanelfetchwidgetTest() throws ApiException {
        String token = null;
        UUID widgetid = null;
        api.quickpanelfetchwidget(token, widgetid);

        // TODO: test validations
    }
    
    /**
     * View details of a widget included in the Quick Panel
     *
     * Allows the user to view a widget added in as Quick Panel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quickpanelgetwidgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.quickpanelgetwidget(token, id);

        // TODO: test validations
    }
    
    /**
     * Returns the initial information required to show the quick panels
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quickpanelinitTest() throws ApiException {
        String token = null;
        api.quickpanelinit(token);

        // TODO: test validations
    }
    
    /**
     * Lists all the widgets that are added in the Quick Panel
     *
     * Allows the user to view the widgets that have been added to the Quick Panel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quickpanellistwidgetsTest() throws ApiException {
        String token = null;
        api.quickpanellistwidgets(token);

        // TODO: test validations
    }
    
    /**
     * Lists all the widget types available in the system
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quickpanellistwidgettypesTest() throws ApiException {
        String token = null;
        api.quickpanellistwidgettypes(token);

        // TODO: test validations
    }
    
    /**
     * Reorders the widgets and moves them to a specific column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quickpanelreorderwidgetsTest() throws ApiException {
        String token = null;
        String sectionname = null;
        String orderids = null;
        api.quickpanelreorderwidgets(token, sectionname, orderids);

        // TODO: test validations
    }
    
    /**
     * Saves a widget for the Quick Panel
     *
     * Allows the user to save a widget to the Quick Panel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quickpanelsavewidgetTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.quickpanelsavewidget(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Flags one rating for moderation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ratingflagTest() throws ApiException {
        String token = null;
        UUID id = null;
        String comment = null;
        api.ratingflag(token, id, comment);

        // TODO: test validations
    }
    
    /**
     * Flags one comment for moderation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ratingflagcommentTest() throws ApiException {
        String token = null;
        UUID id = null;
        String comment = null;
        api.ratingflagcomment(token, id, comment);

        // TODO: test validations
    }
    
    /**
     * Get rating for one or more entities
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ratinggetTest() throws ApiException {
        String token = null;
        String type = null;
        String entityids = null;
        api.ratingget(token, type, entityids);

        // TODO: test validations
    }
    
    /**
     * Gets the full ratings and comments for a specific entity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ratinggetallTest() throws ApiException {
        String token = null;
        String type = null;
        String entityid = null;
        Boolean mostrecentfirst = null;
        api.ratinggetall(token, type, entityid, mostrecentfirst);

        // TODO: test validations
    }
    
    /**
     * Gets all the comments for a rating
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ratinggetcommentsTest() throws ApiException {
        String token = null;
        UUID ratingid = null;
        api.ratinggetcomments(token, ratingid);

        // TODO: test validations
    }
    
    /**
     * Gets info of pre-saved and pre-approved ratings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ratinggetpendingTest() throws ApiException {
        UUID getgroup = null;
        UUID rateid = null;
        Integer rateval = null;
        api.ratinggetpending(getgroup, rateid, rateval);

        // TODO: test validations
    }
    
    /**
     * Shows a list of the ratings and comments that are pending for moderation
     *
     * Allows the user to view the list of pending ratings and comments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ratinggetpendingmoderationTest() throws ApiException {
        String token = null;
        api.ratinggetpendingmoderation(token);

        // TODO: test validations
    }
    
    /**
     * Allows the user to accept or reject a comment
     *
     * Allows the user to approve or reject a comment or rating.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ratingmoderateTest() throws ApiException {
        String token = null;
        String type = null;
        UUID id = null;
        Boolean approve = null;
        api.ratingmoderate(token, type, id, approve);

        // TODO: test validations
    }
    
    /**
     * Posts a comments for in a rating
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ratingpostcommentTest() throws ApiException {
        String token = null;
        UUID ratingid = null;
        String comment = null;
        Boolean annonymous = null;
        api.ratingpostcomment(token, ratingid, comment, annonymous);

        // TODO: test validations
    }
    
    /**
     * Rates one entity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ratingrateTest() throws ApiException {
        String token = null;
        String type = null;
        String entityid = null;
        Boolean annonymous = null;
        Integer value = null;
        String comment = null;
        Boolean updatecomment = null;
        api.ratingrate(token, type, entityid, annonymous, value, comment, updatecomment);

        // TODO: test validations
    }
    
    /**
     * Rates a pre-saved and pre-approved entity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ratingratependingTest() throws ApiException {
        UUID group = null;
        Boolean annonymous = null;
        UUID rateid = null;
        Integer value = null;
        String comment = null;
        Boolean updatecomment = null;
        api.ratingratepending(group, annonymous, rateid, value, comment, updatecomment);

        // TODO: test validations
    }
    
    /**
     * Votes up or down a rating
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ratingvoteTest() throws ApiException {
        String token = null;
        UUID ratingid = null;
        Integer vote = null;
        api.ratingvote(token, ratingid, vote);

        // TODO: test validations
    }
    
    /**
     * Query and load an attendance analytics report
     *
     * Allows the user to query and load attendance analytics reports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportattanalyticsprepareTest() throws ApiException {
        String token = null;
        String reportname = null;
        String params = null;
        UUID refreshgroup = null;
        api.reportattanalyticsprepare(token, reportname, params, refreshgroup);

        // TODO: test validations
    }
    
    /**
     * View a list of available reports
     *
     * Allows the user to view the complete list of available, canned reports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportlistTest() throws ApiException {
        String token = null;
        api.reportlist(token);

        // TODO: test validations
    }
    
    /**
     * Permissions by user report
     *
     * Lists all the users in the system including their corresponding permissions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportpermissionsbyuserTest() throws ApiException {
        String token = null;
        String params = null;
        api.reportpermissionsbyuser(token, params);

        // TODO: test validations
    }
    
    /**
     * Queries and loads the specified report, in background.
     *
     * Allows the user to run reports, in background, with the exception of attendance analytics reports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportprepareTest() throws ApiException {
        String token = null;
        String reportname = null;
        String params = null;
        String repformat = null;
        UUID fillgroupid = null;
        String groupby = null;
        UUID refreshgroup = null;
        String filtertext = null;
        api.reportprepare(token, reportname, params, repformat, fillgroupid, groupby, refreshgroup, filtertext);

        // TODO: test validations
    }
    
    /**
     * Query and load a specified report
     *
     * Allows the user to run reports with the exception of attendance analytics reports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportqueryTest() throws ApiException {
        String token = null;
        String reportname = null;
        String params = null;
        api.reportquery(token, reportname, params);

        // TODO: test validations
    }
    
    /**
     * Delete a report schedule
     *
     * Allows the user to delete a scheduled report that they created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportscheduledeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.reportscheduledelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Get a report schedule
     *
     * Allows the user to view the list of reports that they scheduled.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportschedulegetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.reportscheduleget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of the scheduled reports
     *
     * Allows the user to view a list of the scheduled reports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportschedulelistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.reportschedulelist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Create or edit a report schedule
     *
     * Allows the user to create or edit a scheduled report.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportschedulesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.reportschedulesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Queries and loads a report in background and assigns (or unassigns) the specified tags to (from) the resulting users.
     *
     * Allows the user to use a report to assign or unassign tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reporttagresultsTest() throws ApiException {
        String token = null;
        String reportname = null;
        Boolean assign = null;
        String tags = null;
        String params = null;
        api.reporttagresults(token, reportname, assign, tags, params);

        // TODO: test validations
    }
    
    /**
     * Check the status of the analysis of a specified risk assessment model
     *
     * Allows the user to check the status of a risk assessment model as it is being processed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void riskmodelcheckanalysisTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.riskmodelcheckanalysis(token, id);

        // TODO: test validations
    }
    
    /**
     * Delete a risk assessment model
     *
     * Allows the user to delete a previously created risk assessment model.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void riskmodeldeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.riskmodeldelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of a risk assessment model
     *
     * Allows the user to view an individual risk assessment model and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void riskmodelgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.riskmodelget(token, id);

        // TODO: test validations
    }
    
    /**
     * View the risk score for a specific user
     *
     * Allows the user to view the risk score of another user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void riskmodelgetscoreTest() throws ApiException {
        String token = null;
        UUID userid = null;
        api.riskmodelgetscore(token, userid);

        // TODO: test validations
    }
    
    /**
     * View a list of risk assessment models
     *
     * Allows the user to view the full list of risk assessment models.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void riskmodellistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.riskmodellist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Predict risk based on an assessment model
     *
     * Allows a user to process a risk prediction from a risk assessment model that has processed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void riskmodelpredictTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.riskmodelpredict(token, id);

        // TODO: test validations
    }
    
    /**
     * Process a risk assessment model
     *
     * Allows the user to process a risk assessment model once it has been created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void riskmodelprocessTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.riskmodelprocess(token, id);

        // TODO: test validations
    }
    
    /**
     * Refresh the information used in a risk assessment model
     *
     * Allows the user to refresh a risk assessment model.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void riskmodelrefreshTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.riskmodelrefresh(token, id);

        // TODO: test validations
    }
    
    /**
     * Create or edit a risk assessment model
     *
     * Allows the user to create or edit a risk assessment model.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void riskmodelsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.riskmodelsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * View all default term precedences
     *
     * Allows the user to view the default term precedences used in a model.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void riskmodeltermprecedencesTest() throws ApiException {
        String token = null;
        api.riskmodeltermprecedences(token);

        // TODO: test validations
    }
    
    /**
     * Show a list of roles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rolelistTest() throws ApiException {
        String token = null;
        String name = null;
        api.rolelist(token, name);

        // TODO: test validations
    }
    
    /**
     * Delete a rule
     *
     * Allows the user to delete an existing rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ruledeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.ruledelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of a rule
     *
     * Allows the user to view an individual rule and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulegetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.ruleget(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of a rule event type
     *
     * Allows the user to view the trigger and its available conditions for the rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulegeteventtypeTest() throws ApiException {
        String token = null;
        String event = null;
        api.rulegeteventtype(token, event);

        // TODO: test validations
    }
    
    /**
     * View a list of user rules
     *
     * Allows the user to view the list of all rules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulelistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.rulelist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * View a list of rule actions available
     *
     * Allows the user to view all the available rule actions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulelistactionsTest() throws ApiException {
        String token = null;
        api.rulelistactions(token);

        // TODO: test validations
    }
    
    /**
     * View a list of rule event types
     *
     * Allows the user to view a list of available triggers for rules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulelisteventtypesTest() throws ApiException {
        String token = null;
        api.rulelisteventtypes(token);

        // TODO: test validations
    }
    
    /**
     * View all the http requests sent as a result of a rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulelisthttprequestsTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        Boolean failed = null;
        Integer status = null;
        api.rulelisthttprequests(token, from, count, failed, status);

        // TODO: test validations
    }
    
    /**
     * Create or edit a rule
     *
     * Allows the user to create or edit a rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.rulesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete a schedule slot
     *
     * Allows the user to delete a schedule slot from another user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scheduledeleteTest() throws ApiException {
        String token = null;
        UUID scheduleid = null;
        api.scheduledelete(token, scheduleid);

        // TODO: test validations
    }
    
    /**
     * Delete a specific block from a user&#39;s own schedule
     *
     * Allows the user to delete a schedule block from their own availability.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scheduledeletemineTest() throws ApiException {
        String token = null;
        UUID scheduleid = null;
        api.scheduledeletemine(token, scheduleid);

        // TODO: test validations
    }
    
    /**
     * Enable or disable the schedule for a specific person
     *
     * Allows the user to enable or disable a schedule for another user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scheduleenableTest() throws ApiException {
        String token = null;
        UUID userid = null;
        Boolean enable = null;
        api.scheduleenable(token, userid, enable);

        // TODO: test validations
    }
    
    /**
     * Enable or disable current user&#39;s schedule
     *
     * Allows the user to enable or disable a schedule for himself.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scheduleenablemineTest() throws ApiException {
        String token = null;
        Boolean enable = null;
        api.scheduleenablemine(token, enable);

        // TODO: test validations
    }
    
    /**
     * Search available schedule slots by service, event, date
     *
     * Allows users to search available slots.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void schedulefindallstaffslotsTest() throws ApiException {
        String token = null;
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        UUID staffid = null;
        String serviceids = null;
        UUID eventid = null;
        UUID locationid = null;
        String staffroleids = null;
        String availablefor = null;
        api.schedulefindallstaffslots(token, starttime, endtime, staffid, serviceids, eventid, locationid, staffroleids, availablefor);

        // TODO: test validations
    }
    
    /**
     * Search available schedule slots by service, event, date and/or staff
     *
     * Allows users to search available slots when making appointments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void schedulefindslotsTest() throws ApiException {
        String token = null;
        UUID staffid = null;
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        String serviceids = null;
        UUID eventid = null;
        UUID locationid = null;
        String availablefor = null;
        api.schedulefindslots(token, staffid, starttime, endtime, serviceids, eventid, locationid, availablefor);

        // TODO: test validations
    }
    
    /**
     * Search available staff members slots by service, event, and/or date
     *
     * Allows users to search available staff.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void schedulefindstaffavailTest() throws ApiException {
        String token = null;
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        String serviceids = null;
        UUID eventid = null;
        UUID locationid = null;
        String staffroleids = null;
        String availablefor = null;
        Integer photosize = null;
        api.schedulefindstaffavail(token, starttime, endtime, serviceids, eventid, locationid, staffroleids, availablefor, photosize);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a specific schedule slot
     *
     * Allows the user to view the details of schedule shifts for any user role that the user has permission to view.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void schedulegetTest() throws ApiException {
        String token = null;
        UUID scheduleid = null;
        api.scheduleget(token, scheduleid);

        // TODO: test validations
    }
    
    /**
     * View details of a specific schedule block, for current user
     *
     * Allows the user to view the details of their own schedule shifts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void schedulegetmineTest() throws ApiException {
        String token = null;
        UUID scheduleid = null;
        api.schedulegetmine(token, scheduleid);

        // TODO: test validations
    }
    
    /**
     * View a list of schedule information of a specified person
     *
     * Allows the user to view the schedule shifts for user roles that the user has permission to access.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void schedulegetstaffTest() throws ApiException {
        String token = null;
        UUID userid = null;
        api.schedulegetstaff(token, userid);

        // TODO: test validations
    }
    
    /**
     * View current user&#39;s schedule information
     *
     * Allows the user to view their own schedule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void schedulegetstaffmineTest() throws ApiException {
        String token = null;
        api.schedulegetstaffmine(token);

        // TODO: test validations
    }
    
    /**
     * Delete a schedule item looking up by a third party ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scheduleintegrationdeleteitemTest() throws ApiException {
        String token = null;
        String thirdpartyid = null;
        api.scheduleintegrationdeleteitem(token, thirdpartyid);

        // TODO: test validations
    }
    
    /**
     * Delete multiple schedule items looking up by a third party master ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scheduleintegrationdeleteitemsbymasteridTest() throws ApiException {
        String token = null;
        String thirdpartymasterid = null;
        api.scheduleintegrationdeleteitemsbymasterid(token, thirdpartymasterid);

        // TODO: test validations
    }
    
    /**
     * Get a schedule item looking up by a third party ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scheduleintegrationgetitemTest() throws ApiException {
        String token = null;
        String thirdpartyid = null;
        api.scheduleintegrationgetitem(token, thirdpartyid);

        // TODO: test validations
    }
    
    /**
     * Save a schedule item looking up by a third party ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scheduleintegrationsaveitemTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.scheduleintegrationsaveitem(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Set a 3rd party ID on a specific schedule item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scheduleintegrationsetidTest() throws ApiException {
        String token = null;
        UUID id = null;
        String thirdpartyid = null;
        String thirdpartymasterid = null;
        api.scheduleintegrationsetid(token, id, thirdpartyid, thirdpartymasterid);

        // TODO: test validations
    }
    
    /**
     * View current user&#39;s schedule exceptions
     *
     * Allows the user to view their own schedule exceptions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void schedulemyofftimesTest() throws ApiException {
        String token = null;
        Boolean includedeleted = null;
        Boolean onlyupcoming = null;
        OffsetDateTime modifiedafter = null;
        api.schedulemyofftimes(token, includedeleted, onlyupcoming, modifiedafter);

        // TODO: test validations
    }
    
    /**
     * Create or edit a schedule slot
     *
     * Allows the user to create or edit a schedule slot of another user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void schedulesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.schedulesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Create or edit a block in current user&#39;s schedule
     *
     * Allows the user to create or edit a schedule shift in their own availability.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void schedulesavemineTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.schedulesavemine(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Search
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchTest() throws ApiException {
        String token = null;
        String query = null;
        Integer page = null;
        api.search(token, query, page);

        // TODO: test validations
    }
    
    /**
     * Get the information of the entities that can be searched
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchgetentitiesTest() throws ApiException {
        String token = null;
        api.searchgetentities(token);

        // TODO: test validations
    }
    
    /**
     * Returns the list of users for a specific permission
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void securityassesspermissionTest() throws ApiException {
        String token = null;
        String commandname = null;
        api.securityassesspermission(token, commandname);

        // TODO: test validations
    }
    
    /**
     * Returns the list of permissions for a specific role
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void securityassessroleTest() throws ApiException {
        String token = null;
        UUID roleid = null;
        api.securityassessrole(token, roleid);

        // TODO: test validations
    }
    
    /**
     * Returns the list of users for a specific user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void securityassessscopeTest() throws ApiException {
        String token = null;
        UUID locationid = null;
        api.securityassessscope(token, locationid);

        // TODO: test validations
    }
    
    /**
     * Returns the list of permissions for a specific user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void securityassessuserTest() throws ApiException {
        String token = null;
        UUID userid = null;
        api.securityassessuser(token, userid);

        // TODO: test validations
    }
    
    /**
     * Delete an event
     *
     * Allows the user to delete an existing event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void seminardeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.seminardelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a event
     *
     * Allows the user to view a event and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void seminargetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.seminarget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of events
     *
     * Allows the user to view the full list of events in the past, present, and future.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void seminarlistTest() throws ApiException {
        String token = null;
        String from = null;
        String count = null;
        Boolean summaryonly = null;
        UUID termid = null;
        api.seminarlist(token, from, count, summaryonly, termid);

        // TODO: test validations
    }
    
    /**
     * Create or edit a event
     *
     * Allows the user to create or edit a event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void seminarsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.seminarsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Enable a service in a specific location
     *
     * Allows the user to enable a service in a location to which they are scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceassignmentaddserviceTest() throws ApiException {
        String token = null;
        UUID serviceid = null;
        UUID locationid = null;
        api.serviceassignmentaddservice(token, serviceid, locationid);

        // TODO: test validations
    }
    
    /**
     * View a list of services enabled for a specific location
     *
     * Allows the user to view a list of services available in a location to which they are scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceassignmentgetlocationTest() throws ApiException {
        String token = null;
        UUID locationid = null;
        Boolean includegloballyavailable = null;
        Boolean namefilter = null;
        Integer count = null;
        api.serviceassignmentgetlocation(token, locationid, includegloballyavailable, namefilter, count);

        // TODO: test validations
    }
    
    /**
     * View a list of locations where a service is available
     *
     * Allows the user to view a list of locations in which a service is available.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceassignmentgetserviceTest() throws ApiException {
        String token = null;
        UUID serviceid = null;
        api.serviceassignmentgetservice(token, serviceid);

        // TODO: test validations
    }
    
    /**
     * Remove a service from a location
     *
     * Allows the user to disable a service from a location to which they are scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceassignmentremoveserviceTest() throws ApiException {
        String token = null;
        UUID serviceid = null;
        UUID locationid = null;
        api.serviceassignmentremoveservice(token, serviceid, locationid);

        // TODO: test validations
    }
    
    /**
     * Delete a service
     *
     * Allows the user to delete a service from the existing list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicedeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.servicedelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a service
     *
     * Allows the user to view an individual service and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicegetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.serviceget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of services
     *
     * Allows the user to view the full list of existing services.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicelistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.servicelist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Create or edit a service
     *
     * Allows the user to create or edit a service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.servicesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Add a note to a class attendance log
     *
     * Allows the user to add a note to a class attendance log.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionattendancelogaddnoteTest() throws ApiException {
        String token = null;
        UUID id = null;
        String text = null;
        api.sessionattendancelogaddnote(token, id, text);

        // TODO: test validations
    }
    
    /**
     * View details of a class attendance log
     *
     * Allows the user to view an individual class attendance log and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionattendanceloggetTest() throws ApiException {
        String token = null;
        UUID id = null;
        Integer photosize = null;
        api.sessionattendancelogget(token, id, photosize);

        // TODO: test validations
    }
    
    /**
     * View the class session attendance information for a specific user
     *
     * Allows the user to view the attendance for a specified student.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionattendanceloggetuserTest() throws ApiException {
        UUID attendee = null;
        UUID eventid = null;
        String token = null;
        api.sessionattendanceloggetuser(attendee, eventid, token);

        // TODO: test validations
    }
    
    /**
     * View attendance logs of the specified session
     *
     * Allows the user to view the full list of logs from a specified session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionattendanceloglistTest() throws ApiException {
        String token = null;
        UUID session = null;
        Integer from = null;
        Integer count = null;
        Integer photosize = null;
        api.sessionattendanceloglist(token, session, from, count, photosize);

        // TODO: test validations
    }
    
    /**
     * View the attendance information of an entire class
     *
     * Allows the user to view the attendance information for an entire class
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionattendanceloglisteventTest() throws ApiException {
        UUID eventid = null;
        String token = null;
        api.sessionattendanceloglistevent(eventid, token);

        // TODO: test validations
    }
    
    /**
     * View the attendance summary for a class and/or a attendee
     *
     * Allows the user to view the attendance summary for a given class and/or attendee.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionattendanceloglistsummaryTest() throws ApiException {
        String token = null;
        UUID eventid = null;
        UUID attendeeid = null;
        UUID groupid = null;
        String start = null;
        String end = null;
        api.sessionattendanceloglistsummary(token, eventid, attendeeid, groupid, start, end);

        // TODO: test validations
    }
    
    /**
     * View my attendance summary
     *
     * Allows the user to view their own attendance summary.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionattendancelogmylistsummaryTest() throws ApiException {
        String token = null;
        UUID eventid = null;
        String start = null;
        String end = null;
        api.sessionattendancelogmylistsummary(token, eventid, start, end);

        // TODO: test validations
    }
    
    /**
     * Create or edit a class attendance log
     *
     * Allows the user to create or edit a class attendance log.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionattendancelogsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.sessionattendancelogsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Create or edit a class attendance log swipe
     *
     * Allows the user to create or edit a class attendance log swipe, which are the details of time in or out.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionattendancelogsaveswipeTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.sessionattendancelogsaveswipe(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Bulk update event sessions
     *
     * Allows the user to bulk update event sessions by setting multiple attendees as present, absent, tardy, etc.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionbulkupdateTest() throws ApiException {
        String token = null;
        UUID eventid = null;
        String sessions = null;
        api.sessionbulkupdate(token, eventid, sessions);

        // TODO: test validations
    }
    
    /**
     * View details of a session
     *
     * Allows the user to view a session in order to take attendance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessiongetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.sessionget(token, id);

        // TODO: test validations
    }
    
    /**
     * Gets the schedule for a location, instructor or attendees
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessiongetscheduleTest() throws ApiException {
        String token = null;
        OffsetDateTime day = null;
        UUID attendee = null;
        UUID location = null;
        UUID instructor = null;
        api.sessiongetschedule(token, day, attendee, location, instructor);

        // TODO: test validations
    }
    
    /**
     * Gets all future sessions of the current semester
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionlistTest() throws ApiException {
        Integer from = null;
        Integer count = null;
        String token = null;
        OffsetDateTime startdate = null;
        OffsetDateTime enddate = null;
        api.sessionlist(from, count, token, startdate, enddate);

        // TODO: test validations
    }
    
    /**
     * Register current user to an event session
     *
     * Allows the user to register themselves for an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregaddcurrentuserTest() throws ApiException {
        String token = null;
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionregaddcurrentuser(token, eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * Register users for events
     *
     * Allows the user to register another user for an upcoming event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregadduserTest() throws ApiException {
        String token = null;
        UUID userid = null;
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionregadduser(token, userid, eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * View all the sessions the logged user is registered to
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionreggetmysessionsTest() throws ApiException {
        String token = null;
        OffsetDateTime date = null;
        api.sessionreggetmysessions(token, date);

        // TODO: test validations
    }
    
    /**
     * Lists the registrations for a specific user
     *
     * Allows the user to view the session registrations for a specified user, provided they have the ability to view that user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionreggetsessionsTest() throws ApiException {
        String token = null;
        UUID userid = null;
        api.sessionreggetsessions(token, userid);

        // TODO: test validations
    }
    
    /**
     * Get the settings for session registration
     *
     * Allows the user to view a event&#39;s session registration settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionreggetsettingsTest() throws ApiException {
        String token = null;
        UUID locationid = null;
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        Boolean noinherit = null;
        api.sessionreggetsettings(token, locationid, eventid, sessiondate, noinherit);

        // TODO: test validations
    }
    
    /**
     * Lists the registrations for a specific session
     *
     * Allows the user to view the registration for a specified event session.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionreggetusersTest() throws ApiException {
        String token = null;
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionreggetusers(token, eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * List the sessions available for a specific event
     *
     * Allows the user to view all the sessions available for a recurring event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionreglistsessionsTest() throws ApiException {
        String token = null;
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionreglistsessions(token, eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * View a list of upcoming event sessions
     *
     * Allows the user to view the full list of upcoming events.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionreglistupcomingTest() throws ApiException {
        String token = null;
        OffsetDateTime date = null;
        api.sessionreglistupcoming(token, date);

        // TODO: test validations
    }
    
    /**
     * View a list of upcoming sessions of a particular event
     *
     * Allows the user to view the upcoming recurring sessions of a specified event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionreglistupcomingeventTest() throws ApiException {
        String token = null;
        OffsetDateTime date = null;
        UUID event = null;
        api.sessionreglistupcomingevent(token, date, event);

        // TODO: test validations
    }
    
    /**
     * Unregister current user from an event session
     *
     * Allows the user to un-register themselves from an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregremovecurrentuserTest() throws ApiException {
        String token = null;
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionregremovecurrentuser(token, eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * Removes a user from an event session
     *
     * Allows the user to un-register another user from an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregremoveuserTest() throws ApiException {
        String token = null;
        UUID userid = null;
        UUID eventid = null;
        OffsetDateTime sessiondate = null;
        api.sessionregremoveuser(token, userid, eventid, sessiondate);

        // TODO: test validations
    }
    
    /**
     * Save the settings for an event&#39;s session registration
     *
     * Allows the user to save the settings for an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionregsavesettingsTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.sessionregsavesettings(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete a session swipe
     *
     * Allows the user to delete an existing class attendance swipe.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionswipedeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.sessionswipedelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of a class attendance swipe
     *
     * Allows the user to view an individual class attendance swipe.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionswipegetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.sessionswipeget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of unresolved swipes
     *
     * Allows the user to view all unresolved swipes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionswipelistunresolvedTest() throws ApiException {
        Integer from = null;
        Integer count = null;
        String token = null;
        api.sessionswipelistunresolved(from, count, token);

        // TODO: test validations
    }
    
    /**
     * Resolve a swipe and create the corresponding attendance log
     *
     * Allows the user to resolve an unresolved swipe, which would result in the creation of an attendance log.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionswiperesolveTest() throws ApiException {
        String token = null;
        UUID id = null;
        UUID session = null;
        UUID user = null;
        api.sessionswiperesolve(token, id, session, user);

        // TODO: test validations
    }
    
    /**
     * Creates a new swipe, and if possible, creates the attendance log
     *
     * Allows the user to create a new swipe, which would usually result in an attendance log.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionswipesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.sessionswipesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Creates a new swipe from a sign-in station, and if possible, creates the attendance log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionswipesaveanonymTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.sessionswipesaveanonym(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Add a logo to the account
     *
     * Allows the user to add the logo for the account, which appears on all pages on the AccuCampus browser version.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingaddlogoTest() throws ApiException {
        String token = null;
        String upload = null;
        String filename = null;
        api.settingaddlogo(token, upload, filename);

        // TODO: test validations
    }
    
    /**
     * Get settings for the account or the specified scope
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settinggetTest() throws ApiException {
        String keys = null;
        String token = null;
        String domain = null;
        String scope = null;
        api.settingget(keys, token, domain, scope);

        // TODO: test validations
    }
    
    /**
     * Save settings for the account or the specified scope
     *
     * Allows the user to affect settings that are not specified elsewhere in permissions. This includes Attendance, Appointments, Compass, Media, and Social Activity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.settingsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * View general settings for the account
     *
     * Allows the user to view the settings&#39; general section.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingviewgeneralTest() throws ApiException {
        String token = null;
        api.settingviewgeneral(token);

        // TODO: test validations
    }
    
    /**
     * Gets the list of contacts in the network
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialcontactsTest() throws ApiException {
        String token = null;
        String filter = null;
        Boolean showdefaultphoto = null;
        api.socialcontacts(token, filter, showdefaultphoto);

        // TODO: test validations
    }
    
    /**
     * Adds new members to a group (which the user must own already)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialgroupaddmembersTest() throws ApiException {
        String token = null;
        UUID id = null;
        String userids = null;
        api.socialgroupaddmembers(token, id, userids);

        // TODO: test validations
    }
    
    /**
     * Deletes a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialgroupdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.socialgroupdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View all the groups the current user is in
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialgrouplistTest() throws ApiException {
        String token = null;
        api.socialgrouplist(token);

        // TODO: test validations
    }
    
    /**
     * Lists the members of a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialgrouplistmembersTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.socialgrouplistmembers(token, id);

        // TODO: test validations
    }
    
    /**
     * Removes members from a group (which the user must own already)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialgroupremovemembersTest() throws ApiException {
        String token = null;
        UUID id = null;
        String userids = null;
        api.socialgroupremovemembers(token, id, userids);

        // TODO: test validations
    }
    
    /**
     * Removes myself from an existent group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialgroupremovemyselfTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.socialgroupremovemyself(token, id);

        // TODO: test validations
    }
    
    /**
     * Saves a new group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialgroupsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.socialgroupsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Generate/reset single sign on access key.
     *
     * Allows the user to generate or reset the access key for single sign-on.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ssogeneratekeyTest() throws ApiException {
        String token = null;
        api.ssogeneratekey(token);

        // TODO: test validations
    }
    
    /**
     * View single sign on settings.
     *
     * Allows the user to view settings for single sign-on.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ssogetsettingsTest() throws ApiException {
        String token = null;
        api.ssogetsettings(token);

        // TODO: test validations
    }
    
    /**
     * Issue single sign-on token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ssoissuetokenTest() throws ApiException {
        String key = null;
        String username = null;
        Boolean expires = null;
        api.ssoissuetoken(key, username, expires);

        // TODO: test validations
    }
    
    /**
     * Edit single sign-on settings.
     *
     * Allows the user to edit settings for single sign-on.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ssosavesettingsTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.ssosavesettings(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Associate current user to all services
     *
     * Allows the user to associate themselves to all services, provided they have a staff role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailaddmetoallservicesTest() throws ApiException {
        String token = null;
        api.staffavailaddmetoallservices(token);

        // TODO: test validations
    }
    
    /**
     * Associate current user to a service
     *
     * Allows the user to associate themselves to a service, provided they have a staff role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailaddmetoserviceTest() throws ApiException {
        String token = null;
        UUID serviceid = null;
        api.staffavailaddmetoservice(token, serviceid);

        // TODO: test validations
    }
    
    /**
     * Associate a staff member to all services
     *
     * Allows the user to make a staff member available for all services.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailaddusertoallservicesTest() throws ApiException {
        String token = null;
        UUID userid = null;
        api.staffavailaddusertoallservices(token, userid);

        // TODO: test validations
    }
    
    /**
     * Associate a staff member to a service
     *
     * Allows the user to make a staff member available for a service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailaddusertoserviceTest() throws ApiException {
        String token = null;
        UUID userid = null;
        UUID serviceid = null;
        api.staffavailaddusertoservice(token, userid, serviceid);

        // TODO: test validations
    }
    
    /**
     * View the services the current user is available for
     *
     * Allows the user to view a list of services that they are associated with.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailgetmyservicesTest() throws ApiException {
        String token = null;
        api.staffavailgetmyservices(token);

        // TODO: test validations
    }
    
    /**
     * View a list of services that a staff member is available for
     *
     * Allows the user to view the list of services that a staff member is available for.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailgetservicesTest() throws ApiException {
        String token = null;
        UUID userid = null;
        api.staffavailgetservices(token, userid);

        // TODO: test validations
    }
    
    /**
     * View a list of staff members that are available for a specific service
     *
     * Allows the user to view all staff members who are available for a service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailgetusersforserviceTest() throws ApiException {
        String token = null;
        UUID serviceid = null;
        api.staffavailgetusersforservice(token, serviceid);

        // TODO: test validations
    }
    
    /**
     * View all the availability types
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavaillisttypesTest() throws ApiException {
        String token = null;
        api.staffavaillisttypes(token);

        // TODO: test validations
    }
    
    /**
     * Remove current user from all services
     *
     * Allows the user to disassociate themselves from all services, provided they have a staff role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailremovemefromallservicesTest() throws ApiException {
        String token = null;
        api.staffavailremovemefromallservices(token);

        // TODO: test validations
    }
    
    /**
     * Remove current user from a service
     *
     * Allows the user to disassociate themselves from a service, provided they have a staff role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailremovemefromserviceTest() throws ApiException {
        String token = null;
        UUID serviceid = null;
        api.staffavailremovemefromservice(token, serviceid);

        // TODO: test validations
    }
    
    /**
     * Removes a staff member from the registration to all services
     *
     * Allows the user to remove a staff member&#39;s availability to all services.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailremoveuserfromallservicesTest() throws ApiException {
        String token = null;
        UUID userid = null;
        api.staffavailremoveuserfromallservices(token, userid);

        // TODO: test validations
    }
    
    /**
     * Remove a staff member from a service
     *
     * Allows the user to remove a staff member&#39;s service availability.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailremoveuserfromserviceTest() throws ApiException {
        String token = null;
        UUID userid = null;
        UUID serviceid = null;
        api.staffavailremoveuserfromservice(token, userid, serviceid);

        // TODO: test validations
    }
    
    /**
     * Make a staff member available for a specific availability type
     *
     * Allows the user to set a staff member as available for walk ins, appointments, or both.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailsetavailabilityTest() throws ApiException {
        String token = null;
        UUID userid = null;
        String availablefor = null;
        api.staffavailsetavailability(token, userid, availablefor);

        // TODO: test validations
    }
    
    /**
     * Change current user&#39;s availability type
     *
     * Allows the user to make themselves available for walk ins, appointments, or both.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailsetmyavailabilityTest() throws ApiException {
        String token = null;
        String availablefor = null;
        api.staffavailsetmyavailability(token, availablefor);

        // TODO: test validations
    }
    
    /**
     * Delete a sign-in station
     *
     * Allows the user to delete a sign-in station from the list of existing sign-in stations that they can view based on their scope.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.stationdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of a sign-in station
     *
     * Allows the user to view an individual sign-in station and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.stationget(token, id);

        // TODO: test validations
    }
    
    /**
     * Get all the current terms
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationgetcurrenttermsTest() throws ApiException {
        UUID station = null;
        api.stationgetcurrentterms(station);

        // TODO: test validations
    }
    
    /**
     * Gets a the info to display in the sign-in station by it&#39;s ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationgetinfoTest() throws ApiException {
        UUID id = null;
        UUID event = null;
        api.stationgetinfo(id, event);

        // TODO: test validations
    }
    
    /**
     * Gets the current license information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationgetlicenseTest() throws ApiException {
        String station = null;
        api.stationgetlicense(station);

        // TODO: test validations
    }
    
    /**
     * View the sign-in station settings of a specified location
     *
     * Allows the user to view the location settings of a sign-in station.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationgetlocationsettingsTest() throws ApiException {
        UUID location = null;
        api.stationgetlocationsettings(location);

        // TODO: test validations
    }
    
    /**
     * View a list of sign-in stations
     *
     * Allows the user to view the list of sign-in stations, limited to the stations in the locations to which they are scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.stationlist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Create or edit a sign-in station
     *
     * Allows the user to create, edit, or install a sign-in station based in an area to which they are scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.stationsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Create or edit a class attendance sign-in station for myself
     *
     * Allows the user to create a class attendance sign-in station for a course for which they are available as staff.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationsavemineTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.stationsavemine(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Unlocks the sign-in station.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stationunlockTest() throws ApiException {
        UUID id = null;
        String passcode = null;
        String method = null;
        api.stationunlock(id, passcode, method);

        // TODO: test validations
    }
    
    /**
     * Delete a swipe
     *
     * Allows the user to delete an existing attendance swipe.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void swipedeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.swipedelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a swipe
     *
     * Allows the user to view an individual attendance swipe.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void swipegetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.swipeget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of swipes
     *
     * Allows the user to view a list of all swipes for the location or locations in which the user is scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void swipelistTest() throws ApiException {
        Integer from = null;
        Integer count = null;
        String token = null;
        api.swipelist(from, count, token);

        // TODO: test validations
    }
    
    /**
     * Create or edit a swipe, and if possible, save the related attendance log
     *
     * Allows the user to save an attendance swipe, which will also save the attendance log if the information in the swipe is enough.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void swipesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.swipesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Creates a new swipe from a sign-in station, and if possible, creates the attendance log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void swipesaveanonymTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.swipesaveanonym(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete a tag
     *
     * Allows the user to delete an existing tag.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tagdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.tagdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of a specified tag
     *
     * Allows the user to click on and view the settings for a tag.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taggetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.tagget(token, id);

        // TODO: test validations
    }
    
    /**
     * View a list of tags
     *
     * Allows the user to view the list of tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taglistTest() throws ApiException {
        String token = null;
        String group = null;
        Integer from = null;
        Integer count = null;
        api.taglist(token, group, from, count);

        // TODO: test validations
    }
    
    /**
     * View a list of entities that can be tagged
     *
     * Allows the user to view the list of user roles that can be tagged, according to that tag&#39;s settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taglistgroupsTest() throws ApiException {
        String token = null;
        api.taglistgroups(token);

        // TODO: test validations
    }
    
    /**
     * Create or edit a tag
     *
     * Allows the user to create or edit a tag.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tagsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.tagsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Search for tags in the account
     *
     * Allows the user to search for tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tagsearchTest() throws ApiException {
        String token = null;
        String query = null;
        Boolean allowcreatingnew = null;
        api.tagsearch(token, query, allowcreatingnew);

        // TODO: test validations
    }
    
    /**
     * Add an image to a template
     *
     * Allows the user to add an image to a badge or certificate template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templateaddimageTest() throws ApiException {
        String token = null;
        UUID template = null;
        String upload = null;
        String filename = null;
        api.templateaddimage(token, template, upload, filename);

        // TODO: test validations
    }
    
    /**
     * Delete a template
     *
     * Allows the user to delete an existing template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templatedeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.templatedelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Send generated templates by email
     *
     * Allows the user to send generated templates via email through AccuCampus.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templateemailTest() throws ApiException {
        String token = null;
        String jobid = null;
        String emailsubject = null;
        String emailbody = null;
        String templatekind = null;
        String emailfrom = null;
        String emailreplyto = null;
        api.templateemail(token, jobid, emailsubject, emailbody, templatekind, emailfrom, emailreplyto);

        // TODO: test validations
    }
    
    /**
     * Generate specified templates
     *
     * Allows the user to generate an existing template as badges or certificates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templategenerateTest() throws ApiException {
        String token = null;
        UUID template = null;
        UUID source = null;
        Boolean singlefile = null;
        String userid = null;
        Boolean forsending = null;
        UUID role = null;
        String filters = null;
        api.templategenerate(token, template, source, singlefile, userid, forsending, role, filters);

        // TODO: test validations
    }
    
    /**
     * View details of a template
     *
     * Allows the user to view a template and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templategetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.templateget(token, id);

        // TODO: test validations
    }
    
    /**
     * View generated templates
     *
     * Allows the user to view templates which have been generated as badges or certificates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templategetgeneratedTest() throws ApiException {
        String token = null;
        String jobid = null;
        api.templategetgenerated(token, jobid);

        // TODO: test validations
    }
    
    /**
     * View a list of defined templates
     *
     * Allows the user to view the full list of created templates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templatelistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        String kind = null;
        Boolean designedonly = null;
        api.templatelist(token, from, count, kind, designedonly);

        // TODO: test validations
    }
    
    /**
     * View a list of templates&#39; data sources
     *
     * Allows the user to see tokens to be used in the template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templatelistsourcesTest() throws ApiException {
        String token = null;
        String kind = null;
        api.templatelistsources(token, kind);

        // TODO: test validations
    }
    
    /**
     * Create or edit a template
     *
     * Allows the user to create or edit a template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templatesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.templatesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Save the layout of a template
     *
     * Allows the user to edit a template&#39;s layout.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templatesavelayoutTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.templatesavelayout(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Delete a term
     *
     * Allows the user to delete a term from the existing list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void termdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.termdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a term
     *
     * Allows the user to view a term and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void termgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.termget(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of all terms
     *
     * Allows the user to view the full list of existing term.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void termlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        Boolean notpast = null;
        api.termlist(token, from, count, notpast);

        // TODO: test validations
    }
    
    /**
     * Create and edit terms
     *
     * Allows the user to create and edit terms.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void termsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.termsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Gets the remaining text credits for the account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void textcreditremainingTest() throws ApiException {
        String token = null;
        api.textcreditremaining(token);

        // TODO: test validations
    }
    
    /**
     * Generates a dynamic image from text
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void texttoimageTest() throws ApiException {
        String token = null;
        String text = null;
        String fontcolor = null;
        Integer fontsize = null;
        String direction = null;
        Integer width = null;
        api.texttoimage(token, text, fontcolor, fontsize, direction, width);

        // TODO: test validations
    }
    
    /**
     * Gets the translations of the specified values
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void translationgetTest() throws ApiException {
        String token = null;
        String universal = null;
        api.translationget(token, universal);

        // TODO: test validations
    }
    
    /**
     * Get the file containing the translations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void translationgetcachefileTest() throws ApiException {
        String token = null;
        String account = null;
        api.translationgetcachefile(token, account);

        // TODO: test validations
    }
    
    /**
     * Lists all the available translations in the system
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void translationlistTest() throws ApiException {
        String token = null;
        String filter = null;
        Boolean nondefaultonly = null;
        Boolean appdefaultasuniversal = null;
        api.translationlist(token, filter, nondefaultonly, appdefaultasuniversal);

        // TODO: test validations
    }
    
    /**
     * Edit a translation
     *
     * Allows the user to edit a translation for the entire account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void translationsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.translationsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Change user&#39;s own password
     *
     * Allows the user to change their own password.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userchangepwdTest() throws ApiException {
        String token = null;
        UUID oldpass = null;
        UUID newpass = null;
        api.userchangepwd(token, oldpass, newpass);

        // TODO: test validations
    }
    
    /**
     * Changes the user password using a change password request id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userchangepwdbyreqTest() throws ApiException {
        String changereq = null;
        String newpass = null;
        api.userchangepwdbyreq(changereq, newpass);

        // TODO: test validations
    }
    
    /**
     * Delete a user
     *
     * Allows the user to delete a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.userdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Finds similar users to prevent duplicates
     *
     * Allows the user to be warned if a user they are creating has the same card number as another user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userfindsimilarTest() throws ApiException {
        String token = null;
        UUID currentid = null;
        String phonenumber = null;
        String cardnumber = null;
        api.userfindsimilar(token, currentid, phonenumber, cardnumber);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a user
     *
     * Allows the user to search and view a user and their details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergetTest() throws ApiException {
        String token = null;
        UUID id = null;
        Integer photosize = null;
        api.userget(token, id, photosize);

        // TODO: test validations
    }
    
    /**
     * Search user by card number
     *
     * Allows the user to search for a user by their card number.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergetbycardTest() throws ApiException {
        String token = null;
        String card = null;
        Integer photosize = null;
        api.usergetbycard(token, card, photosize);

        // TODO: test validations
    }
    
    /**
     * Add a user to a group
     *
     * Allows the user to add a user to a group that they have permission to edit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupaddmemberTest() throws ApiException {
        String token = null;
        UUID userid = null;
        UUID groupid = null;
        api.usergroupaddmember(token, userid, groupid);

        // TODO: test validations
    }
    
    /**
     * Delete a group
     *
     * Allows the user to delete a group that they have permission to edit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupdeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.usergroupdelete(token, id);

        // TODO: test validations
    }
    
    /**
     * Search and view details of a user group
     *
     * Allows the user to view a user group and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupgetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.usergroupget(token, id);

        // TODO: test validations
    }
    
    /**
     * View the members of a user group
     *
     * Allows the user to view the list of users in a group that they have permission to view.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupgetmembersTest() throws ApiException {
        String token = null;
        UUID groupid = null;
        api.usergroupgetmembers(token, groupid);

        // TODO: test validations
    }
    
    /**
     * View the groups which a user is registered to
     *
     * Allows the user to view the groups an individual user is registered to, based on group and user permissions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupgetuserTest() throws ApiException {
        String token = null;
        UUID userid = null;
        api.usergroupgetuser(token, userid);

        // TODO: test validations
    }
    
    /**
     * View a list of user groups
     *
     * Allows the user to view the list of groups that they have permission to view.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergrouplistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        String type = null;
        api.usergrouplist(token, from, count, type);

        // TODO: test validations
    }
    
    /**
     * Refresh the dynamic group
     *
     * Allows the user to refresh a dynamic group that they have permission to edit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergrouprefreshTest() throws ApiException {
        String token = null;
        UUID group = null;
        api.usergrouprefresh(token, group);

        // TODO: test validations
    }
    
    /**
     * Remove a user from a group
     *
     * Allows the user to remove a user from a group that they have permission to edit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupremovememberTest() throws ApiException {
        String token = null;
        UUID userid = null;
        UUID groupid = null;
        api.usergroupremovemember(token, userid, groupid);

        // TODO: test validations
    }
    
    /**
     * Create or edit a group
     *
     * Allows the user to create a new group or edit a group that they have permission to edit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupsaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.usergroupsave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Assign tags to the members of a specified group
     *
     * Allows the user to assign tags to the users of a group that they have permission to edit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergrouptagmembersTest() throws ApiException {
        String token = null;
        UUID group = null;
        String tags = null;
        api.usergrouptagmembers(token, group, tags);

        // TODO: test validations
    }
    
    /**
     * Unassign tags from the members of a specified group
     *
     * Allows the user to unassign tags to the users of a group that they have permission to edit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupuntagmembersTest() throws ApiException {
        String token = null;
        UUID group = null;
        String tags = null;
        api.usergroupuntagmembers(token, group, tags);

        // TODO: test validations
    }
    
    /**
     * View a list of users
     *
     * Allows the user to view the full list of users and is based on role permissions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userlistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        UUID roleid = null;
        String onlywithoutcard = null;
        Integer photosize = null;
        api.userlist(token, from, count, roleid, onlywithoutcard, photosize);

        // TODO: test validations
    }
    
    /**
     * Upload a photo for a specific user
     *
     * Allows the user to upload a photo for a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userloadphotoTest() throws ApiException {
        String token = null;
        String upload = null;
        String filename = null;
        UUID userid = null;
        Boolean automatch = null;
        api.userloadphoto(token, upload, filename, userid, automatch);

        // TODO: test validations
    }
    
    /**
     * Move data between users
     *
     * Allows administrators to move data between users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usermovedataTest() throws ApiException {
        String token = null;
        UUID source = null;
        UUID destination = null;
        api.usermovedata(token, source, destination);

        // TODO: test validations
    }
    
    /**
     * Delete a user profile
     *
     * Allows the user to delete a profile from the list of profiles that they have permission to edit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userprofiledeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.userprofiledelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View a specific user profile
     *
     * Allows the user to view individual user profiles and their details, provided they have permission to view that profile.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userprofilegetTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.userprofileget(token, id);

        // TODO: test validations
    }
    
    /**
     * Shows the profile for a specific (or current) user, based on each profile questionnaire questions.
     *
     * Allows the user to view a profile for a user, provided they have permission to view that user and profile.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userprofilegetallviewTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.userprofilegetallview(token, id);

        // TODO: test validations
    }
    
    /**
     * View the list of user profiles
     *
     * Allows the user to view the full list of profiles that they have permission to view.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userprofilelistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.userprofilelist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Gets the list of all the available user questions
     *
     * Allows the user to view the list of questions in a profile that they have permission to view.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userprofilelistquestionsTest() throws ApiException {
        String token = null;
        api.userprofilelistquestions(token);

        // TODO: test validations
    }
    
    /**
     * Gets the statistics of a user group
     *
     * Allows the user to view the demographic statistics of a user group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userprofilepreparestatsTest() throws ApiException {
        String token = null;
        String params = null;
        api.userprofilepreparestats(token, params);

        // TODO: test validations
    }
    
    /**
     * Create or edit user profile questions
     *
     * Allows the user to create or edit a user profile.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userprofilesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.userprofilesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Saves the profile for a specific (or current) user. Additional security applies on a per profile basis.
     *
     * Allows the user to edit a profile for a user, provided they have permission to edit that user and profile.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userprofilesaveanswersTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.userprofilesaveanswers(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Requests a password change
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userrequestpwdchangeTest() throws ApiException {
        String domain = null;
        String email = null;
        api.userrequestpwdchange(domain, email);

        // TODO: test validations
    }
    
    /**
     * Create or edit a user
     *
     * Allows the user to create or edit a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.usersave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Send email to the specified user(s) to set/change their passwords
     *
     * Allows the user to trigger an email to another user asking them to set or change their password.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersavepwdchangeTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.usersavepwdchange(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Lists available user settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersettingsgetTest() throws ApiException {
        String token = null;
        String keys = null;
        UUID user = null;
        api.usersettingsget(token, keys, user);

        // TODO: test validations
    }
    
    /**
     * Get multiple user settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersettingsgetmultipleTest() throws ApiException {
        String token = null;
        String keys = null;
        UUID user = null;
        api.usersettingsgetmultiple(token, keys, user);

        // TODO: test validations
    }
    
    /**
     * Saves a user setting
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersettingssaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.usersettingssave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Save multiple user settings at once
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersettingssavemultipleTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.usersettingssavemultiple(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Get current version information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void versionTest() throws ApiException {
        String token = null;
        api.version(token);

        // TODO: test validations
    }
    
    /**
     * Add myself to a waiting line
     *
     * Allows the user to add themselves to a waiting line from the AccuCampus mobile app.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void virtuallineaddmyselfTest() throws ApiException {
        String token = null;
        UUID waitinglineid = null;
        api.virtuallineaddmyself(token, waitinglineid);

        // TODO: test validations
    }
    
    /**
     * Lists waiting lines that have remote access enabled
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void virtuallinelistTest() throws ApiException {
        String token = null;
        api.virtuallinelist(token);

        // TODO: test validations
    }
    
    /**
     * Remove myself from a waiting line
     *
     * Allows the user to remove themselves from a waiting line in the AccuCampus mobile app.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void virtuallineremovemyselfTest() throws ApiException {
        String token = null;
        api.virtuallineremovemyself(token);

        // TODO: test validations
    }
    
    /**
     * Put user in a waiting line
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitinglineadduserTest() throws ApiException {
        UUID station = null;
        String user = null;
        UUID locationid = null;
        OffsetDateTime time = null;
        String signinrole = null;
        UUID roleid = null;
        String services = null;
        UUID eventid = null;
        UUID staff = null;
        Integer photosize = null;
        api.waitinglineadduser(station, user, locationid, time, signinrole, roleid, services, eventid, staff, photosize);

        // TODO: test validations
    }
    
    /**
     * Delete a waiting line
     *
     * Allows the user to delete an existing waiting line, provided it is in a location that the user is scoped to.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitinglinedeleteTest() throws ApiException {
        String token = null;
        UUID id = null;
        api.waitinglinedelete(token, id);

        // TODO: test validations
    }
    
    /**
     * View details of a waiting line
     *
     * Allows the user to view the details of a waiting line in a location to which they are scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitinglinegetTest() throws ApiException {
        String token = null;
        UUID id = null;
        Integer photosize = null;
        api.waitinglineget(token, id, photosize);

        // TODO: test validations
    }
    
    /**
     * Check whether a user is in a waiting line, signed-in or is not in the area
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitinglineisuserinTest() throws ApiException {
        UUID station = null;
        OffsetDateTime time = null;
        String user = null;
        UUID location = null;
        api.waitinglineisuserin(station, time, user, location);

        // TODO: test validations
    }
    
    /**
     * View a list of waiting lines
     *
     * Allows the user to view the list of waiting lines in locations to which they are scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitinglinelistTest() throws ApiException {
        String token = null;
        Integer from = null;
        Integer count = null;
        api.waitinglinelist(token, from, count);

        // TODO: test validations
    }
    
    /**
     * Remove a user from a waiting line
     *
     * Allows the user to remove a user from a waiting line, provided they have permission to access that waiting line.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitinglineremoveuserTest() throws ApiException {
        String token = null;
        UUID waitingline = null;
        UUID itemid = null;
        api.waitinglineremoveuser(token, waitingline, itemid);

        // TODO: test validations
    }
    
    /**
     * Create or edit a waiting line
     *
     * Allows the user to create or edit a waiting line in a location to which they are scoped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitinglinesaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.waitinglinesave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Sign a user in from a waiting line
     *
     * Allows the user to sign a user in from a waiting line, provided they have permission to access that waiting line.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitinglinesigninuserTest() throws ApiException {
        String token = null;
        UUID waitingline = null;
        UUID itemid = null;
        UUID staff = null;
        Integer photosize = null;
        api.waitinglinesigninuser(token, waitingline, itemid, staff, photosize);

        // TODO: test validations
    }
    
}
