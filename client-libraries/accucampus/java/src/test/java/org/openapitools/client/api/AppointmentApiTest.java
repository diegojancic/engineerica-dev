/*
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppointmentApi
 */
@Ignore
public class AppointmentApiTest {

    private final AppointmentApi api = new AppointmentApi();

    
    /**
     * Cancel an appointment
     *
     * Allows the user to cancel an appointment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentCancelTest() throws ApiException {
        UUID id = null;
        api.appointmentCancel(id);

        // TODO: test validations
    }
    
    /**
     * Check if an appointment is valid or not
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentCheckisvalidTest() throws ApiException {
        UUID id = null;
        Boolean editing = null;
        api.appointmentCheckisvalid(id, editing);

        // TODO: test validations
    }
    
    /**
     * Edit an appointment even if it breaks activated rules
     *
     * Allows the user to edit an existing appointment even if it breaks the rules or settings of that location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentEditanywayTest() throws ApiException {
        UUID id = null;
        UUID attendee = null;
        UUID staff = null;
        UUID location = null;
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        UUID term = null;
        UUID event = null;
        String services = null;
        String notes = null;
        api.appointmentEditanyway(id, attendee, staff, location, start, end, term, event, services, notes);

        // TODO: test validations
    }
    
    /**
     * Edit the no-show status of an appointment
     *
     * Allows the user to edit the no-show status of an appointment by marking it as Voided, Restored, or as a Show.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentEditpresenceTest() throws ApiException {
        UUID id = null;
        Boolean showedup = null;
        api.appointmentEditpresence(id, showedup);

        // TODO: test validations
    }
    
    /**
     * Finds all staff available slots filtered by service, date, etc
     *
     * Allows the user to view available appointment slots when creating an appointment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentFindallstaffslotsTest() throws ApiException {
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        String serviceids = null;
        UUID locationid = null;
        UUID eventid = null;
        Integer photosize = null;
        api.appointmentFindallstaffslots(starttime, endtime, serviceids, locationid, eventid, photosize);

        // TODO: test validations
    }
    
    /**
     * Finds available slots filtered by service, date, staff, etc
     *
     * Allows the user to view available appointment slots when creating an appointment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentFindslotsTest() throws ApiException {
        UUID staffid = null;
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        String serviceids = null;
        UUID eventid = null;
        UUID locationid = null;
        api.appointmentFindslots(staffid, starttime, endtime, serviceids, eventid, locationid);

        // TODO: test validations
    }
    
    /**
     * Finds staff available by service, date, event, etc
     *
     * Allows the user to view staff availability when creating an appointment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentFindstaffTest() throws ApiException {
        String serviceids = null;
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        UUID eventid = null;
        UUID locationid = null;
        Integer photosize = null;
        api.appointmentFindstaff(serviceids, starttime, endtime, eventid, locationid, photosize);

        // TODO: test validations
    }
    
    /**
     * Search and view details of an appointment
     *
     * Allows the user to view an individual appointment and its details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentGetTest() throws ApiException {
        UUID id = null;
        api.appointmentGet(id);

        // TODO: test validations
    }
    
    /**
     * Get the current appointments for the user that is about to sign-in via the specified sign-in station.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentGetcurrentTest() throws ApiException {
        UUID station = null;
        String user = null;
        UUID location = null;
        api.appointmentGetcurrent(station, user, location);

        // TODO: test validations
    }
    
    /**
     * Find locations where a service is available
     *
     * Allows the user to search for appointment availability by location or service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentGetlocationsTest() throws ApiException {
        UUID serviceid = null;
        api.appointmentGetlocations(serviceid);

        // TODO: test validations
    }
    
    /**
     * View a list of appointments
     *
     * Allows the user to view all upcoming appointments for the location or locations they are scoped to.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentListTest() throws ApiException {
        Integer from = null;
        Integer count = null;
        OffsetDateTime startdate = null;
        OffsetDateTime enddate = null;
        UUID userid = null;
        api.appointmentList(from, count, startdate, enddate, userid);

        // TODO: test validations
    }
    
    /**
     * View all my upcoming appointments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentListmineTest() throws ApiException {
        OffsetDateTime start = null;
        OffsetDateTime modifiedafter = null;
        api.appointmentListmine(start, modifiedafter);

        // TODO: test validations
    }
    
    /**
     * Search and view details of all my upcoming appointments
     *
     * Allows the user to view all of their own upcoming appointments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentListupcomingTest() throws ApiException {
        OffsetDateTime start = null;
        OffsetDateTime modifiedafter = null;
        api.appointmentListupcoming(start, modifiedafter);

        // TODO: test validations
    }
    
    /**
     * Reschedule an appointment from MS Outlook.
     *
     * Allows the user to reschedule, edit, or cancel appointments via MS Outlook if the user has the AccuCampus add-on installed on their Outlook.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentRescheduleoutlookTest() throws ApiException {
        UUID id = null;
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        api.appointmentRescheduleoutlook(id, start, end);

        // TODO: test validations
    }
    
    /**
     * Restore an appointment
     *
     * Allows the user to restore a canceled appointment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentRestoreTest() throws ApiException {
        UUID id = null;
        api.appointmentRestore(id);

        // TODO: test validations
    }
    
    /**
     * Restore an appointment even if it breaks activated rules
     *
     * Allows the user to restore a canceled appointment even if that appointment breaks the rules or settings of that location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentRestoreanywayTest() throws ApiException {
        UUID id = null;
        api.appointmentRestoreanyway(id);

        // TODO: test validations
    }
    
    /**
     * Schedule an appointment
     *
     * Allows the user to schedule an appointment within the rules of the location and the availability of staff members.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentSaveTest() throws ApiException {
        UUID id = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.appointmentSave(id, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Schedule an appointment even if it breaks activated rules
     *
     * Allows the user to schedule an appointment even if it breaks the rules or settings of that location or if it goes against the availability of the staff member.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentSetasvalidTest() throws ApiException {
        UUID id = null;
        api.appointmentSetasvalid(id);

        // TODO: test validations
    }
    
    /**
     * View the locations with most appointments
     *
     * Allows the user to view suggestions for the most popular locations in which to make appointments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentSuggestlocationsTest() throws ApiException {
        api.appointmentSuggestlocations();

        // TODO: test validations
    }
    
    /**
     * View the services with most appointments
     *
     * Allows the user to view suggestions for the most popular services for which to make appointments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentSuggestservicesTest() throws ApiException {
        api.appointmentSuggestservices();

        // TODO: test validations
    }
    
    /**
     * Void an appointment
     *
     * Allows the user to void an appointment that has been marked as a no-show so that it does not count against the student&#39;s restrictions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentVoidTest() throws ApiException {
        UUID id = null;
        api.appointmentVoid(id);

        // TODO: test validations
    }
    
}
