/*
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StaffavailApi
 */
@Ignore
public class StaffavailApiTest {

    private final StaffavailApi api = new StaffavailApi();

    
    /**
     * Associate current user to all services
     *
     * Allows the user to associate themselves to all services, provided they have a staff role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailAddmetoallservicesTest() throws ApiException {
        api.staffavailAddmetoallservices();

        // TODO: test validations
    }
    
    /**
     * Associate current user to a service
     *
     * Allows the user to associate themselves to a service, provided they have a staff role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailAddmetoserviceTest() throws ApiException {
        UUID serviceid = null;
        api.staffavailAddmetoservice(serviceid);

        // TODO: test validations
    }
    
    /**
     * Associate a staff member to all services
     *
     * Allows the user to make a staff member available for all services.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailAddusertoallservicesTest() throws ApiException {
        UUID userid = null;
        api.staffavailAddusertoallservices(userid);

        // TODO: test validations
    }
    
    /**
     * Associate a staff member to a service
     *
     * Allows the user to make a staff member available for a service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailAddusertoserviceTest() throws ApiException {
        UUID userid = null;
        UUID serviceid = null;
        api.staffavailAddusertoservice(userid, serviceid);

        // TODO: test validations
    }
    
    /**
     * View the services the current user is available for
     *
     * Allows the user to view a list of services that they are associated with.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailGetmyservicesTest() throws ApiException {
        api.staffavailGetmyservices();

        // TODO: test validations
    }
    
    /**
     * View a list of services that a staff member is available for
     *
     * Allows the user to view the list of services that a staff member is available for.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailGetservicesTest() throws ApiException {
        UUID userid = null;
        api.staffavailGetservices(userid);

        // TODO: test validations
    }
    
    /**
     * View a list of staff members that are available for a specific service
     *
     * Allows the user to view all staff members who are available for a service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailGetusersforserviceTest() throws ApiException {
        UUID serviceid = null;
        api.staffavailGetusersforservice(serviceid);

        // TODO: test validations
    }
    
    /**
     * View all the availability types
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailListtypesTest() throws ApiException {
        api.staffavailListtypes();

        // TODO: test validations
    }
    
    /**
     * Remove current user from all services
     *
     * Allows the user to disassociate themselves from all services, provided they have a staff role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailRemovemefromallservicesTest() throws ApiException {
        api.staffavailRemovemefromallservices();

        // TODO: test validations
    }
    
    /**
     * Remove current user from a service
     *
     * Allows the user to disassociate themselves from a service, provided they have a staff role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailRemovemefromserviceTest() throws ApiException {
        UUID serviceid = null;
        api.staffavailRemovemefromservice(serviceid);

        // TODO: test validations
    }
    
    /**
     * Removes a staff member from the registration to all services
     *
     * Allows the user to remove a staff member&#39;s availability to all services.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailRemoveuserfromallservicesTest() throws ApiException {
        UUID userid = null;
        api.staffavailRemoveuserfromallservices(userid);

        // TODO: test validations
    }
    
    /**
     * Remove a staff member from a service
     *
     * Allows the user to remove a staff member&#39;s service availability.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailRemoveuserfromserviceTest() throws ApiException {
        UUID userid = null;
        UUID serviceid = null;
        api.staffavailRemoveuserfromservice(userid, serviceid);

        // TODO: test validations
    }
    
    /**
     * Make a staff member available for a specific availability type
     *
     * Allows the user to set a staff member as available for walk ins, appointments, or both.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailSetavailabilityTest() throws ApiException {
        UUID userid = null;
        String availablefor = null;
        api.staffavailSetavailability(userid, availablefor);

        // TODO: test validations
    }
    
    /**
     * Change current user&#39;s availability type
     *
     * Allows the user to make themselves available for walk ins, appointments, or both.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staffavailSetmyavailabilityTest() throws ApiException {
        String availablefor = null;
        api.staffavailSetmyavailability(availablefor);

        // TODO: test validations
    }
    
}
