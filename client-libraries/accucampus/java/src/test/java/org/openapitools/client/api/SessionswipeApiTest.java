/*
 * AccuCampus OpenAPI 3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SessionswipeApi
 */
@Ignore
public class SessionswipeApiTest {

    private final SessionswipeApi api = new SessionswipeApi();

    
    /**
     * Delete a session swipe
     *
     * Allows the user to delete an existing class attendance swipe.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionswipeDeleteTest() throws ApiException {
        UUID id = null;
        oas_any_type_not_mapped body = null;
        api.sessionswipeDelete(id, body);

        // TODO: test validations
    }
    
    /**
     * View details of a class attendance swipe
     *
     * Allows the user to view an individual class attendance swipe.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionswipeGetTest() throws ApiException {
        UUID id = null;
        api.sessionswipeGet(id);

        // TODO: test validations
    }
    
    /**
     * View a list of unresolved swipes
     *
     * Allows the user to view all unresolved swipes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionswipeListunresolvedTest() throws ApiException {
        Integer from = null;
        Integer count = null;
        api.sessionswipeListunresolved(from, count);

        // TODO: test validations
    }
    
    /**
     * Resolve a swipe and create the corresponding attendance log
     *
     * Allows the user to resolve an unresolved swipe, which would result in the creation of an attendance log.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionswipeResolveTest() throws ApiException {
        UUID id = null;
        UUID session = null;
        UUID user = null;
        api.sessionswipeResolve(id, session, user);

        // TODO: test validations
    }
    
    /**
     * Creates a new swipe, and if possible, creates the attendance log
     *
     * Allows the user to create a new swipe, which would usually result in an attendance log.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionswipeSaveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.sessionswipeSave(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Creates a new swipe from a sign-in station, and if possible, creates the attendance log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionswipeSaveanonymTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        api.sessionswipeSaveanonym(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
}
