/*
 * AccuCampus OpenAPI 3
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// ReportApiService ReportApi service
type ReportApiService service

// ReportAttanalyticsprepareOpts Optional parameters for the method 'ReportAttanalyticsprepare'
type ReportAttanalyticsprepareOpts struct {
    Params optional.String
    Refreshgroup optional.Interface
}

/*
ReportAttanalyticsprepare Query and load an attendance analytics report
Allows the user to query and load attendance analytics reports.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param reportname The name of the report to execute
 * @param optional nil or *ReportAttanalyticsprepareOpts - Optional Parameters:
 * @param "Params" (optional.String) -  A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
 * @param "Refreshgroup" (optional.Interface of string) -  The ID of the group to check (and refresh) before processing the report.
*/
func (a *ReportApiService) ReportAttanalyticsprepare(ctx _context.Context, reportname string, localVarOptionals *ReportAttanalyticsprepareOpts) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/report/attanalyticsprepare"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("reportname", parameterToString(reportname, ""))
	if localVarOptionals != nil && localVarOptionals.Params.IsSet() {
		localVarQueryParams.Add("params", parameterToString(localVarOptionals.Params.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Refreshgroup.IsSet() {
		localVarQueryParams.Add("refreshgroup", parameterToString(localVarOptionals.Refreshgroup.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
ReportList View a list of available reports
Allows the user to view the complete list of available, canned reports.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
*/
func (a *ReportApiService) ReportList(ctx _context.Context) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/report/list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

// ReportPermissionsbyuserOpts Optional parameters for the method 'ReportPermissionsbyuser'
type ReportPermissionsbyuserOpts struct {
    Params optional.String
}

/*
ReportPermissionsbyuser Permissions by user report
Lists all the users in the system including their corresponding permissions.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *ReportPermissionsbyuserOpts - Optional Parameters:
 * @param "Params" (optional.String) -  A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
*/
func (a *ReportApiService) ReportPermissionsbyuser(ctx _context.Context, localVarOptionals *ReportPermissionsbyuserOpts) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/report/permissionsbyuser"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Params.IsSet() {
		localVarQueryParams.Add("params", parameterToString(localVarOptionals.Params.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

// ReportPrepareOpts Optional parameters for the method 'ReportPrepare'
type ReportPrepareOpts struct {
    Params optional.String
    Repformat optional.String
    Fillgroupid optional.Interface
    Groupby optional.String
    Refreshgroup optional.Interface
    Filtertext optional.String
}

/*
ReportPrepare Queries and loads the specified report, in background.
Allows the user to run reports, in background, with the exception of attendance analytics reports.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param reportname The name of the report to execute
 * @param optional nil or *ReportPrepareOpts - Optional Parameters:
 * @param "Params" (optional.String) -  A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
 * @param "Repformat" (optional.String) -  The format of the resulting report. Json, pdf, csv, ...
 * @param "Fillgroupid" (optional.Interface of string) -  If specified, the result is used to fill the group with the given ID
 * @param "Groupby" (optional.String) -  How to group the records. In the format 'col1+col2|col3+col4
 * @param "Refreshgroup" (optional.Interface of string) -  The ID of the group to check (and refresh) before processing the report.
 * @param "Filtertext" (optional.String) -  The user friendly text of the applied filters.
*/
func (a *ReportApiService) ReportPrepare(ctx _context.Context, reportname string, localVarOptionals *ReportPrepareOpts) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/report/prepare"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("reportname", parameterToString(reportname, ""))
	if localVarOptionals != nil && localVarOptionals.Params.IsSet() {
		localVarQueryParams.Add("params", parameterToString(localVarOptionals.Params.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Repformat.IsSet() {
		localVarQueryParams.Add("repformat", parameterToString(localVarOptionals.Repformat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Fillgroupid.IsSet() {
		localVarQueryParams.Add("fillgroupid", parameterToString(localVarOptionals.Fillgroupid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Groupby.IsSet() {
		localVarQueryParams.Add("groupby", parameterToString(localVarOptionals.Groupby.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Refreshgroup.IsSet() {
		localVarQueryParams.Add("refreshgroup", parameterToString(localVarOptionals.Refreshgroup.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Filtertext.IsSet() {
		localVarQueryParams.Add("filtertext", parameterToString(localVarOptionals.Filtertext.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

// ReportQueryOpts Optional parameters for the method 'ReportQuery'
type ReportQueryOpts struct {
    Params optional.String
}

/*
ReportQuery Query and load a specified report
Allows the user to run reports with the exception of attendance analytics reports.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param reportname The name of the report to execute
 * @param optional nil or *ReportQueryOpts - Optional Parameters:
 * @param "Params" (optional.String) -  A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
*/
func (a *ReportApiService) ReportQuery(ctx _context.Context, reportname string, localVarOptionals *ReportQueryOpts) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/report/query"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("reportname", parameterToString(reportname, ""))
	if localVarOptionals != nil && localVarOptionals.Params.IsSet() {
		localVarQueryParams.Add("params", parameterToString(localVarOptionals.Params.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

// ReportTagresultsOpts Optional parameters for the method 'ReportTagresults'
type ReportTagresultsOpts struct {
    Params optional.String
}

/*
ReportTagresults Queries and loads a report in background and assigns (or unassigns) the specified tags to (from) the resulting users.
Allows the user to use a report to assign or unassign tags.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param reportname The name of the report to execute
 * @param assign Specify whether the specified tags have to be assigned or unassigned.
 * @param tags The tags to assign (or unassign) to the resulting users in the report, in JSON format.
 * @param optional nil or *ReportTagresultsOpts - Optional Parameters:
 * @param "Params" (optional.String) -  A pipe separated list of the parameters. Example: key1=value1|key2=value2|key3=value3
*/
func (a *ReportApiService) ReportTagresults(ctx _context.Context, reportname string, assign bool, tags string, localVarOptionals *ReportTagresultsOpts) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/report/tagresults"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("reportname", parameterToString(reportname, ""))
	localVarQueryParams.Add("assign", parameterToString(assign, ""))
	localVarQueryParams.Add("tags", parameterToString(tags, ""))
	if localVarOptionals != nil && localVarOptionals.Params.IsSet() {
		localVarQueryParams.Add("params", parameterToString(localVarOptionals.Params.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
