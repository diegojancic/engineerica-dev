<?php
/**
 * AppointmentApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AccuCampus OpenAPI 3
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AppointmentApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AppointmentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation appointmentCancel
     *
     * Cancel an appointment
     *
     * @param  string $id The id of the appointment to cancel. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentCancel($id)
    {
        $this->appointmentCancelWithHttpInfo($id);
    }

    /**
     * Operation appointmentCancelWithHttpInfo
     *
     * Cancel an appointment
     *
     * @param  string $id The id of the appointment to cancel. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentCancelWithHttpInfo($id)
    {
        $request = $this->appointmentCancelRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentCancelAsync
     *
     * Cancel an appointment
     *
     * @param  string $id The id of the appointment to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentCancelAsync($id)
    {
        return $this->appointmentCancelAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentCancelAsyncWithHttpInfo
     *
     * Cancel an appointment
     *
     * @param  string $id The id of the appointment to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentCancelAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->appointmentCancelRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentCancel'
     *
     * @param  string $id The id of the appointment to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentCancelRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appointmentCancel'
            );
        }

        $resourcePath = '/appointment/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentCheckisvalid
     *
     * Check if an appointment is valid or not
     *
     * @param  string $id The id of the appointment to check. (required)
     * @param  bool $editing Specifies whether the check is for a new appointment or an existing one. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentCheckisvalid($id, $editing = null)
    {
        $this->appointmentCheckisvalidWithHttpInfo($id, $editing);
    }

    /**
     * Operation appointmentCheckisvalidWithHttpInfo
     *
     * Check if an appointment is valid or not
     *
     * @param  string $id The id of the appointment to check. (required)
     * @param  bool $editing Specifies whether the check is for a new appointment or an existing one. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentCheckisvalidWithHttpInfo($id, $editing = null)
    {
        $request = $this->appointmentCheckisvalidRequest($id, $editing);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentCheckisvalidAsync
     *
     * Check if an appointment is valid or not
     *
     * @param  string $id The id of the appointment to check. (required)
     * @param  bool $editing Specifies whether the check is for a new appointment or an existing one. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentCheckisvalidAsync($id, $editing = null)
    {
        return $this->appointmentCheckisvalidAsyncWithHttpInfo($id, $editing)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentCheckisvalidAsyncWithHttpInfo
     *
     * Check if an appointment is valid or not
     *
     * @param  string $id The id of the appointment to check. (required)
     * @param  bool $editing Specifies whether the check is for a new appointment or an existing one. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentCheckisvalidAsyncWithHttpInfo($id, $editing = null)
    {
        $returnType = '';
        $request = $this->appointmentCheckisvalidRequest($id, $editing);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentCheckisvalid'
     *
     * @param  string $id The id of the appointment to check. (required)
     * @param  bool $editing Specifies whether the check is for a new appointment or an existing one. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentCheckisvalidRequest($id, $editing = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appointmentCheckisvalid'
            );
        }

        $resourcePath = '/appointment/checkisvalid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }
        // query params
        if ($editing !== null) {
            if('form' === 'form' && is_array($editing)) {
                foreach($editing as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['editing'] = $editing;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentEditanyway
     *
     * Edit an appointment even if it breaks activated rules
     *
     * @param  string $id The id of the appointment to edit. (required)
     * @param  string $attendee The id of the attendee involved in the appointment. (required)
     * @param  string $staff The id of the staff member involved in the appointment. (required)
     * @param  string $location The id of the location where the appointment will take place. (required)
     * @param  \DateTime $start The appointment&#39;s start date &amp; time. (required)
     * @param  \DateTime $end The appointment&#39;s end date &amp; time. (required)
     * @param  string $term The id of the term when the appointment takes place. (optional)
     * @param  string $event The id of the event of the appointment. (optional)
     * @param  string $services Comma-separated string containing the ids of the services of the appointment. (optional)
     * @param  string $notes The notes of the appointment. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentEditanyway($id, $attendee, $staff, $location, $start, $end, $term = null, $event = null, $services = null, $notes = null)
    {
        $this->appointmentEditanywayWithHttpInfo($id, $attendee, $staff, $location, $start, $end, $term, $event, $services, $notes);
    }

    /**
     * Operation appointmentEditanywayWithHttpInfo
     *
     * Edit an appointment even if it breaks activated rules
     *
     * @param  string $id The id of the appointment to edit. (required)
     * @param  string $attendee The id of the attendee involved in the appointment. (required)
     * @param  string $staff The id of the staff member involved in the appointment. (required)
     * @param  string $location The id of the location where the appointment will take place. (required)
     * @param  \DateTime $start The appointment&#39;s start date &amp; time. (required)
     * @param  \DateTime $end The appointment&#39;s end date &amp; time. (required)
     * @param  string $term The id of the term when the appointment takes place. (optional)
     * @param  string $event The id of the event of the appointment. (optional)
     * @param  string $services Comma-separated string containing the ids of the services of the appointment. (optional)
     * @param  string $notes The notes of the appointment. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentEditanywayWithHttpInfo($id, $attendee, $staff, $location, $start, $end, $term = null, $event = null, $services = null, $notes = null)
    {
        $request = $this->appointmentEditanywayRequest($id, $attendee, $staff, $location, $start, $end, $term, $event, $services, $notes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentEditanywayAsync
     *
     * Edit an appointment even if it breaks activated rules
     *
     * @param  string $id The id of the appointment to edit. (required)
     * @param  string $attendee The id of the attendee involved in the appointment. (required)
     * @param  string $staff The id of the staff member involved in the appointment. (required)
     * @param  string $location The id of the location where the appointment will take place. (required)
     * @param  \DateTime $start The appointment&#39;s start date &amp; time. (required)
     * @param  \DateTime $end The appointment&#39;s end date &amp; time. (required)
     * @param  string $term The id of the term when the appointment takes place. (optional)
     * @param  string $event The id of the event of the appointment. (optional)
     * @param  string $services Comma-separated string containing the ids of the services of the appointment. (optional)
     * @param  string $notes The notes of the appointment. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentEditanywayAsync($id, $attendee, $staff, $location, $start, $end, $term = null, $event = null, $services = null, $notes = null)
    {
        return $this->appointmentEditanywayAsyncWithHttpInfo($id, $attendee, $staff, $location, $start, $end, $term, $event, $services, $notes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentEditanywayAsyncWithHttpInfo
     *
     * Edit an appointment even if it breaks activated rules
     *
     * @param  string $id The id of the appointment to edit. (required)
     * @param  string $attendee The id of the attendee involved in the appointment. (required)
     * @param  string $staff The id of the staff member involved in the appointment. (required)
     * @param  string $location The id of the location where the appointment will take place. (required)
     * @param  \DateTime $start The appointment&#39;s start date &amp; time. (required)
     * @param  \DateTime $end The appointment&#39;s end date &amp; time. (required)
     * @param  string $term The id of the term when the appointment takes place. (optional)
     * @param  string $event The id of the event of the appointment. (optional)
     * @param  string $services Comma-separated string containing the ids of the services of the appointment. (optional)
     * @param  string $notes The notes of the appointment. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentEditanywayAsyncWithHttpInfo($id, $attendee, $staff, $location, $start, $end, $term = null, $event = null, $services = null, $notes = null)
    {
        $returnType = '';
        $request = $this->appointmentEditanywayRequest($id, $attendee, $staff, $location, $start, $end, $term, $event, $services, $notes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentEditanyway'
     *
     * @param  string $id The id of the appointment to edit. (required)
     * @param  string $attendee The id of the attendee involved in the appointment. (required)
     * @param  string $staff The id of the staff member involved in the appointment. (required)
     * @param  string $location The id of the location where the appointment will take place. (required)
     * @param  \DateTime $start The appointment&#39;s start date &amp; time. (required)
     * @param  \DateTime $end The appointment&#39;s end date &amp; time. (required)
     * @param  string $term The id of the term when the appointment takes place. (optional)
     * @param  string $event The id of the event of the appointment. (optional)
     * @param  string $services Comma-separated string containing the ids of the services of the appointment. (optional)
     * @param  string $notes The notes of the appointment. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentEditanywayRequest($id, $attendee, $staff, $location, $start, $end, $term = null, $event = null, $services = null, $notes = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appointmentEditanyway'
            );
        }
        // verify the required parameter 'attendee' is set
        if ($attendee === null || (is_array($attendee) && count($attendee) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attendee when calling appointmentEditanyway'
            );
        }
        // verify the required parameter 'staff' is set
        if ($staff === null || (is_array($staff) && count($staff) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staff when calling appointmentEditanyway'
            );
        }
        // verify the required parameter 'location' is set
        if ($location === null || (is_array($location) && count($location) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location when calling appointmentEditanyway'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling appointmentEditanyway'
            );
        }
        // verify the required parameter 'end' is set
        if ($end === null || (is_array($end) && count($end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end when calling appointmentEditanyway'
            );
        }

        $resourcePath = '/appointment/editanyway';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }
        // query params
        if ($term !== null) {
            if('form' === 'form' && is_array($term)) {
                foreach($term as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['term'] = $term;
            }
        }
        // query params
        if ($attendee !== null) {
            if('form' === 'form' && is_array($attendee)) {
                foreach($attendee as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['attendee'] = $attendee;
            }
        }
        // query params
        if ($staff !== null) {
            if('form' === 'form' && is_array($staff)) {
                foreach($staff as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['staff'] = $staff;
            }
        }
        // query params
        if ($location !== null) {
            if('form' === 'form' && is_array($location)) {
                foreach($location as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['location'] = $location;
            }
        }
        // query params
        if ($start !== null) {
            if('form' === 'form' && is_array($start)) {
                foreach($start as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start'] = $start;
            }
        }
        // query params
        if ($end !== null) {
            if('form' === 'form' && is_array($end)) {
                foreach($end as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end'] = $end;
            }
        }
        // query params
        if ($event !== null) {
            if('form' === 'form' && is_array($event)) {
                foreach($event as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['event'] = $event;
            }
        }
        // query params
        if ($services !== null) {
            if('form' === 'form' && is_array($services)) {
                foreach($services as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['services'] = $services;
            }
        }
        // query params
        if ($notes !== null) {
            if('form' === 'form' && is_array($notes)) {
                foreach($notes as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['notes'] = $notes;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentEditpresence
     *
     * Edit the no-show status of an appointment
     *
     * @param  string $id The id of the appointment to edit its presence. (required)
     * @param  bool $showedup Specifies whether the attendee was showed-up or not in the appointment. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentEditpresence($id, $showedup)
    {
        $this->appointmentEditpresenceWithHttpInfo($id, $showedup);
    }

    /**
     * Operation appointmentEditpresenceWithHttpInfo
     *
     * Edit the no-show status of an appointment
     *
     * @param  string $id The id of the appointment to edit its presence. (required)
     * @param  bool $showedup Specifies whether the attendee was showed-up or not in the appointment. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentEditpresenceWithHttpInfo($id, $showedup)
    {
        $request = $this->appointmentEditpresenceRequest($id, $showedup);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentEditpresenceAsync
     *
     * Edit the no-show status of an appointment
     *
     * @param  string $id The id of the appointment to edit its presence. (required)
     * @param  bool $showedup Specifies whether the attendee was showed-up or not in the appointment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentEditpresenceAsync($id, $showedup)
    {
        return $this->appointmentEditpresenceAsyncWithHttpInfo($id, $showedup)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentEditpresenceAsyncWithHttpInfo
     *
     * Edit the no-show status of an appointment
     *
     * @param  string $id The id of the appointment to edit its presence. (required)
     * @param  bool $showedup Specifies whether the attendee was showed-up or not in the appointment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentEditpresenceAsyncWithHttpInfo($id, $showedup)
    {
        $returnType = '';
        $request = $this->appointmentEditpresenceRequest($id, $showedup);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentEditpresence'
     *
     * @param  string $id The id of the appointment to edit its presence. (required)
     * @param  bool $showedup Specifies whether the attendee was showed-up or not in the appointment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentEditpresenceRequest($id, $showedup)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appointmentEditpresence'
            );
        }
        // verify the required parameter 'showedup' is set
        if ($showedup === null || (is_array($showedup) && count($showedup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $showedup when calling appointmentEditpresence'
            );
        }

        $resourcePath = '/appointment/editpresence';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }
        // query params
        if ($showedup !== null) {
            if('form' === 'form' && is_array($showedup)) {
                foreach($showedup as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['showedup'] = $showedup;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentFindallstaffslots
     *
     * Finds all staff available slots filtered by service, date, etc
     *
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service Ids to filter by. (required)
     * @param  string $locationid The id of the service to filter by. (required)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentFindallstaffslots($starttime, $endtime, $serviceids, $locationid, $eventid = null, $photosize = null)
    {
        $this->appointmentFindallstaffslotsWithHttpInfo($starttime, $endtime, $serviceids, $locationid, $eventid, $photosize);
    }

    /**
     * Operation appointmentFindallstaffslotsWithHttpInfo
     *
     * Finds all staff available slots filtered by service, date, etc
     *
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service Ids to filter by. (required)
     * @param  string $locationid The id of the service to filter by. (required)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentFindallstaffslotsWithHttpInfo($starttime, $endtime, $serviceids, $locationid, $eventid = null, $photosize = null)
    {
        $request = $this->appointmentFindallstaffslotsRequest($starttime, $endtime, $serviceids, $locationid, $eventid, $photosize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentFindallstaffslotsAsync
     *
     * Finds all staff available slots filtered by service, date, etc
     *
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service Ids to filter by. (required)
     * @param  string $locationid The id of the service to filter by. (required)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentFindallstaffslotsAsync($starttime, $endtime, $serviceids, $locationid, $eventid = null, $photosize = null)
    {
        return $this->appointmentFindallstaffslotsAsyncWithHttpInfo($starttime, $endtime, $serviceids, $locationid, $eventid, $photosize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentFindallstaffslotsAsyncWithHttpInfo
     *
     * Finds all staff available slots filtered by service, date, etc
     *
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service Ids to filter by. (required)
     * @param  string $locationid The id of the service to filter by. (required)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentFindallstaffslotsAsyncWithHttpInfo($starttime, $endtime, $serviceids, $locationid, $eventid = null, $photosize = null)
    {
        $returnType = '';
        $request = $this->appointmentFindallstaffslotsRequest($starttime, $endtime, $serviceids, $locationid, $eventid, $photosize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentFindallstaffslots'
     *
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service Ids to filter by. (required)
     * @param  string $locationid The id of the service to filter by. (required)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentFindallstaffslotsRequest($starttime, $endtime, $serviceids, $locationid, $eventid = null, $photosize = null)
    {
        // verify the required parameter 'starttime' is set
        if ($starttime === null || (is_array($starttime) && count($starttime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $starttime when calling appointmentFindallstaffslots'
            );
        }
        // verify the required parameter 'endtime' is set
        if ($endtime === null || (is_array($endtime) && count($endtime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endtime when calling appointmentFindallstaffslots'
            );
        }
        // verify the required parameter 'serviceids' is set
        if ($serviceids === null || (is_array($serviceids) && count($serviceids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serviceids when calling appointmentFindallstaffslots'
            );
        }
        // verify the required parameter 'locationid' is set
        if ($locationid === null || (is_array($locationid) && count($locationid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locationid when calling appointmentFindallstaffslots'
            );
        }

        $resourcePath = '/appointment/findallstaffslots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($starttime !== null) {
            if('form' === 'form' && is_array($starttime)) {
                foreach($starttime as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['starttime'] = $starttime;
            }
        }
        // query params
        if ($endtime !== null) {
            if('form' === 'form' && is_array($endtime)) {
                foreach($endtime as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['endtime'] = $endtime;
            }
        }
        // query params
        if ($serviceids !== null) {
            if('form' === 'form' && is_array($serviceids)) {
                foreach($serviceids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceids'] = $serviceids;
            }
        }
        // query params
        if ($eventid !== null) {
            if('form' === 'form' && is_array($eventid)) {
                foreach($eventid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventid'] = $eventid;
            }
        }
        // query params
        if ($locationid !== null) {
            if('form' === 'form' && is_array($locationid)) {
                foreach($locationid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['locationid'] = $locationid;
            }
        }
        // query params
        if ($photosize !== null) {
            if('form' === 'form' && is_array($photosize)) {
                foreach($photosize as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['photosize'] = $photosize;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentFindslots
     *
     * Finds available slots filtered by service, date, staff, etc
     *
     * @param  string $staffid The id of the staff to filter by. (required)
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service Ids to filter by. (required)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentFindslots($staffid, $starttime, $endtime, $serviceids, $eventid = null, $locationid = null)
    {
        $this->appointmentFindslotsWithHttpInfo($staffid, $starttime, $endtime, $serviceids, $eventid, $locationid);
    }

    /**
     * Operation appointmentFindslotsWithHttpInfo
     *
     * Finds available slots filtered by service, date, staff, etc
     *
     * @param  string $staffid The id of the staff to filter by. (required)
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service Ids to filter by. (required)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentFindslotsWithHttpInfo($staffid, $starttime, $endtime, $serviceids, $eventid = null, $locationid = null)
    {
        $request = $this->appointmentFindslotsRequest($staffid, $starttime, $endtime, $serviceids, $eventid, $locationid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentFindslotsAsync
     *
     * Finds available slots filtered by service, date, staff, etc
     *
     * @param  string $staffid The id of the staff to filter by. (required)
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service Ids to filter by. (required)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentFindslotsAsync($staffid, $starttime, $endtime, $serviceids, $eventid = null, $locationid = null)
    {
        return $this->appointmentFindslotsAsyncWithHttpInfo($staffid, $starttime, $endtime, $serviceids, $eventid, $locationid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentFindslotsAsyncWithHttpInfo
     *
     * Finds available slots filtered by service, date, staff, etc
     *
     * @param  string $staffid The id of the staff to filter by. (required)
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service Ids to filter by. (required)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentFindslotsAsyncWithHttpInfo($staffid, $starttime, $endtime, $serviceids, $eventid = null, $locationid = null)
    {
        $returnType = '';
        $request = $this->appointmentFindslotsRequest($staffid, $starttime, $endtime, $serviceids, $eventid, $locationid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentFindslots'
     *
     * @param  string $staffid The id of the staff to filter by. (required)
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $serviceids CSV list of the service Ids to filter by. (required)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentFindslotsRequest($staffid, $starttime, $endtime, $serviceids, $eventid = null, $locationid = null)
    {
        // verify the required parameter 'staffid' is set
        if ($staffid === null || (is_array($staffid) && count($staffid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staffid when calling appointmentFindslots'
            );
        }
        // verify the required parameter 'starttime' is set
        if ($starttime === null || (is_array($starttime) && count($starttime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $starttime when calling appointmentFindslots'
            );
        }
        // verify the required parameter 'endtime' is set
        if ($endtime === null || (is_array($endtime) && count($endtime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endtime when calling appointmentFindslots'
            );
        }
        // verify the required parameter 'serviceids' is set
        if ($serviceids === null || (is_array($serviceids) && count($serviceids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serviceids when calling appointmentFindslots'
            );
        }

        $resourcePath = '/appointment/findslots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($staffid !== null) {
            if('form' === 'form' && is_array($staffid)) {
                foreach($staffid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['staffid'] = $staffid;
            }
        }
        // query params
        if ($starttime !== null) {
            if('form' === 'form' && is_array($starttime)) {
                foreach($starttime as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['starttime'] = $starttime;
            }
        }
        // query params
        if ($endtime !== null) {
            if('form' === 'form' && is_array($endtime)) {
                foreach($endtime as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['endtime'] = $endtime;
            }
        }
        // query params
        if ($serviceids !== null) {
            if('form' === 'form' && is_array($serviceids)) {
                foreach($serviceids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceids'] = $serviceids;
            }
        }
        // query params
        if ($eventid !== null) {
            if('form' === 'form' && is_array($eventid)) {
                foreach($eventid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventid'] = $eventid;
            }
        }
        // query params
        if ($locationid !== null) {
            if('form' === 'form' && is_array($locationid)) {
                foreach($locationid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['locationid'] = $locationid;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentFindstaff
     *
     * Finds staff available by service, date, event, etc
     *
     * @param  string $serviceids CSV list of the service ids to filter by. (required)
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentFindstaff($serviceids, $starttime, $endtime, $eventid = null, $locationid = null, $photosize = null)
    {
        $this->appointmentFindstaffWithHttpInfo($serviceids, $starttime, $endtime, $eventid, $locationid, $photosize);
    }

    /**
     * Operation appointmentFindstaffWithHttpInfo
     *
     * Finds staff available by service, date, event, etc
     *
     * @param  string $serviceids CSV list of the service ids to filter by. (required)
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentFindstaffWithHttpInfo($serviceids, $starttime, $endtime, $eventid = null, $locationid = null, $photosize = null)
    {
        $request = $this->appointmentFindstaffRequest($serviceids, $starttime, $endtime, $eventid, $locationid, $photosize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentFindstaffAsync
     *
     * Finds staff available by service, date, event, etc
     *
     * @param  string $serviceids CSV list of the service ids to filter by. (required)
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentFindstaffAsync($serviceids, $starttime, $endtime, $eventid = null, $locationid = null, $photosize = null)
    {
        return $this->appointmentFindstaffAsyncWithHttpInfo($serviceids, $starttime, $endtime, $eventid, $locationid, $photosize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentFindstaffAsyncWithHttpInfo
     *
     * Finds staff available by service, date, event, etc
     *
     * @param  string $serviceids CSV list of the service ids to filter by. (required)
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentFindstaffAsyncWithHttpInfo($serviceids, $starttime, $endtime, $eventid = null, $locationid = null, $photosize = null)
    {
        $returnType = '';
        $request = $this->appointmentFindstaffRequest($serviceids, $starttime, $endtime, $eventid, $locationid, $photosize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentFindstaff'
     *
     * @param  string $serviceids CSV list of the service ids to filter by. (required)
     * @param  \DateTime $starttime The start time of the range to look for slots. (required)
     * @param  \DateTime $endtime The end time of the range to look for slots. (required)
     * @param  string $eventid The id of the event to filter by. (optional)
     * @param  string $locationid The id of the service to filter by. (optional)
     * @param  int $photosize The size in pixels of the photo URLs returned. Defaults to 40. If the size specified is not available, a similar one will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentFindstaffRequest($serviceids, $starttime, $endtime, $eventid = null, $locationid = null, $photosize = null)
    {
        // verify the required parameter 'serviceids' is set
        if ($serviceids === null || (is_array($serviceids) && count($serviceids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serviceids when calling appointmentFindstaff'
            );
        }
        // verify the required parameter 'starttime' is set
        if ($starttime === null || (is_array($starttime) && count($starttime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $starttime when calling appointmentFindstaff'
            );
        }
        // verify the required parameter 'endtime' is set
        if ($endtime === null || (is_array($endtime) && count($endtime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endtime when calling appointmentFindstaff'
            );
        }

        $resourcePath = '/appointment/findstaff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($serviceids !== null) {
            if('form' === 'form' && is_array($serviceids)) {
                foreach($serviceids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceids'] = $serviceids;
            }
        }
        // query params
        if ($eventid !== null) {
            if('form' === 'form' && is_array($eventid)) {
                foreach($eventid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventid'] = $eventid;
            }
        }
        // query params
        if ($starttime !== null) {
            if('form' === 'form' && is_array($starttime)) {
                foreach($starttime as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['starttime'] = $starttime;
            }
        }
        // query params
        if ($endtime !== null) {
            if('form' === 'form' && is_array($endtime)) {
                foreach($endtime as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['endtime'] = $endtime;
            }
        }
        // query params
        if ($locationid !== null) {
            if('form' === 'form' && is_array($locationid)) {
                foreach($locationid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['locationid'] = $locationid;
            }
        }
        // query params
        if ($photosize !== null) {
            if('form' === 'form' && is_array($photosize)) {
                foreach($photosize as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['photosize'] = $photosize;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentGet
     *
     * Search and view details of an appointment
     *
     * @param  string $id The id of the appointment to get. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentGet($id)
    {
        $this->appointmentGetWithHttpInfo($id);
    }

    /**
     * Operation appointmentGetWithHttpInfo
     *
     * Search and view details of an appointment
     *
     * @param  string $id The id of the appointment to get. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentGetWithHttpInfo($id)
    {
        $request = $this->appointmentGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentGetAsync
     *
     * Search and view details of an appointment
     *
     * @param  string $id The id of the appointment to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentGetAsync($id)
    {
        return $this->appointmentGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentGetAsyncWithHttpInfo
     *
     * Search and view details of an appointment
     *
     * @param  string $id The id of the appointment to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentGetAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->appointmentGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentGet'
     *
     * @param  string $id The id of the appointment to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appointmentGet'
            );
        }

        $resourcePath = '/appointment/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentGetcurrent
     *
     * Get the current appointments for the user that is about to sign-in via the specified sign-in station.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location where the user wants to sign-in. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentGetcurrent($station, $user, $location)
    {
        $this->appointmentGetcurrentWithHttpInfo($station, $user, $location);
    }

    /**
     * Operation appointmentGetcurrentWithHttpInfo
     *
     * Get the current appointments for the user that is about to sign-in via the specified sign-in station.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location where the user wants to sign-in. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentGetcurrentWithHttpInfo($station, $user, $location)
    {
        $request = $this->appointmentGetcurrentRequest($station, $user, $location);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentGetcurrentAsync
     *
     * Get the current appointments for the user that is about to sign-in via the specified sign-in station.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location where the user wants to sign-in. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentGetcurrentAsync($station, $user, $location)
    {
        return $this->appointmentGetcurrentAsyncWithHttpInfo($station, $user, $location)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentGetcurrentAsyncWithHttpInfo
     *
     * Get the current appointments for the user that is about to sign-in via the specified sign-in station.
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location where the user wants to sign-in. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentGetcurrentAsyncWithHttpInfo($station, $user, $location)
    {
        $returnType = '';
        $request = $this->appointmentGetcurrentRequest($station, $user, $location);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentGetcurrent'
     *
     * @param  string $station The id of the sign-in station to get. (required)
     * @param  string $user The card of the user. (required)
     * @param  string $location The id of the location where the user wants to sign-in. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentGetcurrentRequest($station, $user, $location)
    {
        // verify the required parameter 'station' is set
        if ($station === null || (is_array($station) && count($station) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station when calling appointmentGetcurrent'
            );
        }
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling appointmentGetcurrent'
            );
        }
        // verify the required parameter 'location' is set
        if ($location === null || (is_array($location) && count($location) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location when calling appointmentGetcurrent'
            );
        }

        $resourcePath = '/appointment/getcurrent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($station !== null) {
            if('form' === 'form' && is_array($station)) {
                foreach($station as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['station'] = $station;
            }
        }
        // query params
        if ($user !== null) {
            if('form' === 'form' && is_array($user)) {
                foreach($user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user'] = $user;
            }
        }
        // query params
        if ($location !== null) {
            if('form' === 'form' && is_array($location)) {
                foreach($location as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['location'] = $location;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentGetlocations
     *
     * Find locations where a service is available
     *
     * @param  string $serviceid The id of the service to get its locations. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentGetlocations($serviceid)
    {
        $this->appointmentGetlocationsWithHttpInfo($serviceid);
    }

    /**
     * Operation appointmentGetlocationsWithHttpInfo
     *
     * Find locations where a service is available
     *
     * @param  string $serviceid The id of the service to get its locations. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentGetlocationsWithHttpInfo($serviceid)
    {
        $request = $this->appointmentGetlocationsRequest($serviceid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentGetlocationsAsync
     *
     * Find locations where a service is available
     *
     * @param  string $serviceid The id of the service to get its locations. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentGetlocationsAsync($serviceid)
    {
        return $this->appointmentGetlocationsAsyncWithHttpInfo($serviceid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentGetlocationsAsyncWithHttpInfo
     *
     * Find locations where a service is available
     *
     * @param  string $serviceid The id of the service to get its locations. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentGetlocationsAsyncWithHttpInfo($serviceid)
    {
        $returnType = '';
        $request = $this->appointmentGetlocationsRequest($serviceid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentGetlocations'
     *
     * @param  string $serviceid The id of the service to get its locations. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentGetlocationsRequest($serviceid)
    {
        // verify the required parameter 'serviceid' is set
        if ($serviceid === null || (is_array($serviceid) && count($serviceid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serviceid when calling appointmentGetlocations'
            );
        }

        $resourcePath = '/appointment/getlocations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($serviceid !== null) {
            if('form' === 'form' && is_array($serviceid)) {
                foreach($serviceid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceid'] = $serviceid;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentList
     *
     * View a list of appointments
     *
     * @param  int $from The first record to return. (required)
     * @param  int $count The max number of records to return. (required)
     * @param  \DateTime $startdate The start date of the period to filter the appointments. (optional)
     * @param  \DateTime $enddate The end date of the period to filter the appointments. (optional)
     * @param  string $userid The attendee id to filter the appointments. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentList($from, $count, $startdate = null, $enddate = null, $userid = null)
    {
        $this->appointmentListWithHttpInfo($from, $count, $startdate, $enddate, $userid);
    }

    /**
     * Operation appointmentListWithHttpInfo
     *
     * View a list of appointments
     *
     * @param  int $from The first record to return. (required)
     * @param  int $count The max number of records to return. (required)
     * @param  \DateTime $startdate The start date of the period to filter the appointments. (optional)
     * @param  \DateTime $enddate The end date of the period to filter the appointments. (optional)
     * @param  string $userid The attendee id to filter the appointments. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentListWithHttpInfo($from, $count, $startdate = null, $enddate = null, $userid = null)
    {
        $request = $this->appointmentListRequest($from, $count, $startdate, $enddate, $userid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentListAsync
     *
     * View a list of appointments
     *
     * @param  int $from The first record to return. (required)
     * @param  int $count The max number of records to return. (required)
     * @param  \DateTime $startdate The start date of the period to filter the appointments. (optional)
     * @param  \DateTime $enddate The end date of the period to filter the appointments. (optional)
     * @param  string $userid The attendee id to filter the appointments. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentListAsync($from, $count, $startdate = null, $enddate = null, $userid = null)
    {
        return $this->appointmentListAsyncWithHttpInfo($from, $count, $startdate, $enddate, $userid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentListAsyncWithHttpInfo
     *
     * View a list of appointments
     *
     * @param  int $from The first record to return. (required)
     * @param  int $count The max number of records to return. (required)
     * @param  \DateTime $startdate The start date of the period to filter the appointments. (optional)
     * @param  \DateTime $enddate The end date of the period to filter the appointments. (optional)
     * @param  string $userid The attendee id to filter the appointments. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentListAsyncWithHttpInfo($from, $count, $startdate = null, $enddate = null, $userid = null)
    {
        $returnType = '';
        $request = $this->appointmentListRequest($from, $count, $startdate, $enddate, $userid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentList'
     *
     * @param  int $from The first record to return. (required)
     * @param  int $count The max number of records to return. (required)
     * @param  \DateTime $startdate The start date of the period to filter the appointments. (optional)
     * @param  \DateTime $enddate The end date of the period to filter the appointments. (optional)
     * @param  string $userid The attendee id to filter the appointments. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentListRequest($from, $count, $startdate = null, $enddate = null, $userid = null)
    {
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling appointmentList'
            );
        }
        // verify the required parameter 'count' is set
        if ($count === null || (is_array($count) && count($count) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $count when calling appointmentList'
            );
        }

        $resourcePath = '/appointment/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            if('form' === 'form' && is_array($from)) {
                foreach($from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from'] = $from;
            }
        }
        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($startdate !== null) {
            if('form' === 'form' && is_array($startdate)) {
                foreach($startdate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startdate'] = $startdate;
            }
        }
        // query params
        if ($enddate !== null) {
            if('form' === 'form' && is_array($enddate)) {
                foreach($enddate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['enddate'] = $enddate;
            }
        }
        // query params
        if ($userid !== null) {
            if('form' === 'form' && is_array($userid)) {
                foreach($userid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userid'] = $userid;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentListmine
     *
     * View all my upcoming appointments
     *
     * @param  \DateTime $start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param  \DateTime $modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentListmine($start = null, $modifiedafter = null)
    {
        $this->appointmentListmineWithHttpInfo($start, $modifiedafter);
    }

    /**
     * Operation appointmentListmineWithHttpInfo
     *
     * View all my upcoming appointments
     *
     * @param  \DateTime $start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param  \DateTime $modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentListmineWithHttpInfo($start = null, $modifiedafter = null)
    {
        $request = $this->appointmentListmineRequest($start, $modifiedafter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentListmineAsync
     *
     * View all my upcoming appointments
     *
     * @param  \DateTime $start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param  \DateTime $modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentListmineAsync($start = null, $modifiedafter = null)
    {
        return $this->appointmentListmineAsyncWithHttpInfo($start, $modifiedafter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentListmineAsyncWithHttpInfo
     *
     * View all my upcoming appointments
     *
     * @param  \DateTime $start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param  \DateTime $modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentListmineAsyncWithHttpInfo($start = null, $modifiedafter = null)
    {
        $returnType = '';
        $request = $this->appointmentListmineRequest($start, $modifiedafter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentListmine'
     *
     * @param  \DateTime $start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param  \DateTime $modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentListmineRequest($start = null, $modifiedafter = null)
    {

        $resourcePath = '/appointment/listmine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start !== null) {
            if('form' === 'form' && is_array($start)) {
                foreach($start as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start'] = $start;
            }
        }
        // query params
        if ($modifiedafter !== null) {
            if('form' === 'form' && is_array($modifiedafter)) {
                foreach($modifiedafter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['modifiedafter'] = $modifiedafter;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentListupcoming
     *
     * Search and view details of all my upcoming appointments
     *
     * @param  \DateTime $start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param  \DateTime $modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentListupcoming($start = null, $modifiedafter = null)
    {
        $this->appointmentListupcomingWithHttpInfo($start, $modifiedafter);
    }

    /**
     * Operation appointmentListupcomingWithHttpInfo
     *
     * Search and view details of all my upcoming appointments
     *
     * @param  \DateTime $start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param  \DateTime $modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentListupcomingWithHttpInfo($start = null, $modifiedafter = null)
    {
        $request = $this->appointmentListupcomingRequest($start, $modifiedafter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentListupcomingAsync
     *
     * Search and view details of all my upcoming appointments
     *
     * @param  \DateTime $start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param  \DateTime $modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentListupcomingAsync($start = null, $modifiedafter = null)
    {
        return $this->appointmentListupcomingAsyncWithHttpInfo($start, $modifiedafter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentListupcomingAsyncWithHttpInfo
     *
     * Search and view details of all my upcoming appointments
     *
     * @param  \DateTime $start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param  \DateTime $modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentListupcomingAsyncWithHttpInfo($start = null, $modifiedafter = null)
    {
        $returnType = '';
        $request = $this->appointmentListupcomingRequest($start, $modifiedafter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentListupcoming'
     *
     * @param  \DateTime $start If specified, only appointments that start after the specified date will be returned. (optional)
     * @param  \DateTime $modifiedafter If specified, only appointments modified after the specified date will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentListupcomingRequest($start = null, $modifiedafter = null)
    {

        $resourcePath = '/appointment/listupcoming';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start !== null) {
            if('form' === 'form' && is_array($start)) {
                foreach($start as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start'] = $start;
            }
        }
        // query params
        if ($modifiedafter !== null) {
            if('form' === 'form' && is_array($modifiedafter)) {
                foreach($modifiedafter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['modifiedafter'] = $modifiedafter;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentRescheduleoutlook
     *
     * Reschedule an appointment from MS Outlook.
     *
     * @param  string $id The id of the appointment to edit. (required)
     * @param  \DateTime $start The appointment&#39;s start date &amp; time. (required)
     * @param  \DateTime $end The appointment&#39;s end date &amp; time. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentRescheduleoutlook($id, $start, $end)
    {
        $this->appointmentRescheduleoutlookWithHttpInfo($id, $start, $end);
    }

    /**
     * Operation appointmentRescheduleoutlookWithHttpInfo
     *
     * Reschedule an appointment from MS Outlook.
     *
     * @param  string $id The id of the appointment to edit. (required)
     * @param  \DateTime $start The appointment&#39;s start date &amp; time. (required)
     * @param  \DateTime $end The appointment&#39;s end date &amp; time. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentRescheduleoutlookWithHttpInfo($id, $start, $end)
    {
        $request = $this->appointmentRescheduleoutlookRequest($id, $start, $end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentRescheduleoutlookAsync
     *
     * Reschedule an appointment from MS Outlook.
     *
     * @param  string $id The id of the appointment to edit. (required)
     * @param  \DateTime $start The appointment&#39;s start date &amp; time. (required)
     * @param  \DateTime $end The appointment&#39;s end date &amp; time. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentRescheduleoutlookAsync($id, $start, $end)
    {
        return $this->appointmentRescheduleoutlookAsyncWithHttpInfo($id, $start, $end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentRescheduleoutlookAsyncWithHttpInfo
     *
     * Reschedule an appointment from MS Outlook.
     *
     * @param  string $id The id of the appointment to edit. (required)
     * @param  \DateTime $start The appointment&#39;s start date &amp; time. (required)
     * @param  \DateTime $end The appointment&#39;s end date &amp; time. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentRescheduleoutlookAsyncWithHttpInfo($id, $start, $end)
    {
        $returnType = '';
        $request = $this->appointmentRescheduleoutlookRequest($id, $start, $end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentRescheduleoutlook'
     *
     * @param  string $id The id of the appointment to edit. (required)
     * @param  \DateTime $start The appointment&#39;s start date &amp; time. (required)
     * @param  \DateTime $end The appointment&#39;s end date &amp; time. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentRescheduleoutlookRequest($id, $start, $end)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appointmentRescheduleoutlook'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling appointmentRescheduleoutlook'
            );
        }
        // verify the required parameter 'end' is set
        if ($end === null || (is_array($end) && count($end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end when calling appointmentRescheduleoutlook'
            );
        }

        $resourcePath = '/appointment/rescheduleoutlook';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }
        // query params
        if ($start !== null) {
            if('form' === 'form' && is_array($start)) {
                foreach($start as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start'] = $start;
            }
        }
        // query params
        if ($end !== null) {
            if('form' === 'form' && is_array($end)) {
                foreach($end as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end'] = $end;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentRestore
     *
     * Restore an appointment
     *
     * @param  string $id The id of the appointment to restore. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentRestore($id)
    {
        $this->appointmentRestoreWithHttpInfo($id);
    }

    /**
     * Operation appointmentRestoreWithHttpInfo
     *
     * Restore an appointment
     *
     * @param  string $id The id of the appointment to restore. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentRestoreWithHttpInfo($id)
    {
        $request = $this->appointmentRestoreRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentRestoreAsync
     *
     * Restore an appointment
     *
     * @param  string $id The id of the appointment to restore. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentRestoreAsync($id)
    {
        return $this->appointmentRestoreAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentRestoreAsyncWithHttpInfo
     *
     * Restore an appointment
     *
     * @param  string $id The id of the appointment to restore. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentRestoreAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->appointmentRestoreRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentRestore'
     *
     * @param  string $id The id of the appointment to restore. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentRestoreRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appointmentRestore'
            );
        }

        $resourcePath = '/appointment/restore';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentRestoreanyway
     *
     * Restore an appointment even if it breaks activated rules
     *
     * @param  string $id The id of the appointment to restore. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentRestoreanyway($id)
    {
        $this->appointmentRestoreanywayWithHttpInfo($id);
    }

    /**
     * Operation appointmentRestoreanywayWithHttpInfo
     *
     * Restore an appointment even if it breaks activated rules
     *
     * @param  string $id The id of the appointment to restore. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentRestoreanywayWithHttpInfo($id)
    {
        $request = $this->appointmentRestoreanywayRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentRestoreanywayAsync
     *
     * Restore an appointment even if it breaks activated rules
     *
     * @param  string $id The id of the appointment to restore. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentRestoreanywayAsync($id)
    {
        return $this->appointmentRestoreanywayAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentRestoreanywayAsyncWithHttpInfo
     *
     * Restore an appointment even if it breaks activated rules
     *
     * @param  string $id The id of the appointment to restore. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentRestoreanywayAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->appointmentRestoreanywayRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentRestoreanyway'
     *
     * @param  string $id The id of the appointment to restore. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentRestoreanywayRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appointmentRestoreanyway'
            );
        }

        $resourcePath = '/appointment/restoreanyway';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentSave
     *
     * Schedule an appointment
     *
     * @param  string $id The id of the appointment to save (leave empty to create a new one). (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentSave($id, $unknown_base_type = null)
    {
        $this->appointmentSaveWithHttpInfo($id, $unknown_base_type);
    }

    /**
     * Operation appointmentSaveWithHttpInfo
     *
     * Schedule an appointment
     *
     * @param  string $id The id of the appointment to save (leave empty to create a new one). (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentSaveWithHttpInfo($id, $unknown_base_type = null)
    {
        $request = $this->appointmentSaveRequest($id, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentSaveAsync
     *
     * Schedule an appointment
     *
     * @param  string $id The id of the appointment to save (leave empty to create a new one). (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentSaveAsync($id, $unknown_base_type = null)
    {
        return $this->appointmentSaveAsyncWithHttpInfo($id, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentSaveAsyncWithHttpInfo
     *
     * Schedule an appointment
     *
     * @param  string $id The id of the appointment to save (leave empty to create a new one). (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentSaveAsyncWithHttpInfo($id, $unknown_base_type = null)
    {
        $returnType = '';
        $request = $this->appointmentSaveRequest($id, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentSave'
     *
     * @param  string $id The id of the appointment to save (leave empty to create a new one). (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentSaveRequest($id, $unknown_base_type = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appointmentSave'
            );
        }

        $resourcePath = '/appointment/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($unknown_base_type)) {
            $_tempBody = $unknown_base_type;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentSetasvalid
     *
     * Schedule an appointment even if it breaks activated rules
     *
     * @param  string $id The id of the appointment to set as valid. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentSetasvalid($id)
    {
        $this->appointmentSetasvalidWithHttpInfo($id);
    }

    /**
     * Operation appointmentSetasvalidWithHttpInfo
     *
     * Schedule an appointment even if it breaks activated rules
     *
     * @param  string $id The id of the appointment to set as valid. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentSetasvalidWithHttpInfo($id)
    {
        $request = $this->appointmentSetasvalidRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentSetasvalidAsync
     *
     * Schedule an appointment even if it breaks activated rules
     *
     * @param  string $id The id of the appointment to set as valid. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentSetasvalidAsync($id)
    {
        return $this->appointmentSetasvalidAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentSetasvalidAsyncWithHttpInfo
     *
     * Schedule an appointment even if it breaks activated rules
     *
     * @param  string $id The id of the appointment to set as valid. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentSetasvalidAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->appointmentSetasvalidRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentSetasvalid'
     *
     * @param  string $id The id of the appointment to set as valid. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentSetasvalidRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appointmentSetasvalid'
            );
        }

        $resourcePath = '/appointment/setasvalid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentSuggestlocations
     *
     * View the locations with most appointments
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentSuggestlocations()
    {
        $this->appointmentSuggestlocationsWithHttpInfo();
    }

    /**
     * Operation appointmentSuggestlocationsWithHttpInfo
     *
     * View the locations with most appointments
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentSuggestlocationsWithHttpInfo()
    {
        $request = $this->appointmentSuggestlocationsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentSuggestlocationsAsync
     *
     * View the locations with most appointments
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentSuggestlocationsAsync()
    {
        return $this->appointmentSuggestlocationsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentSuggestlocationsAsyncWithHttpInfo
     *
     * View the locations with most appointments
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentSuggestlocationsAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->appointmentSuggestlocationsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentSuggestlocations'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentSuggestlocationsRequest()
    {

        $resourcePath = '/appointment/suggestlocations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentSuggestservices
     *
     * View the services with most appointments
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentSuggestservices()
    {
        $this->appointmentSuggestservicesWithHttpInfo();
    }

    /**
     * Operation appointmentSuggestservicesWithHttpInfo
     *
     * View the services with most appointments
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentSuggestservicesWithHttpInfo()
    {
        $request = $this->appointmentSuggestservicesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentSuggestservicesAsync
     *
     * View the services with most appointments
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentSuggestservicesAsync()
    {
        return $this->appointmentSuggestservicesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentSuggestservicesAsyncWithHttpInfo
     *
     * View the services with most appointments
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentSuggestservicesAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->appointmentSuggestservicesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentSuggestservices'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentSuggestservicesRequest()
    {

        $resourcePath = '/appointment/suggestservices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentVoid
     *
     * Void an appointment
     *
     * @param  string $id The id of the appointment to cancel. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appointmentVoid($id)
    {
        $this->appointmentVoidWithHttpInfo($id);
    }

    /**
     * Operation appointmentVoidWithHttpInfo
     *
     * Void an appointment
     *
     * @param  string $id The id of the appointment to cancel. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentVoidWithHttpInfo($id)
    {
        $request = $this->appointmentVoidRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentVoidAsync
     *
     * Void an appointment
     *
     * @param  string $id The id of the appointment to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentVoidAsync($id)
    {
        return $this->appointmentVoidAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentVoidAsyncWithHttpInfo
     *
     * Void an appointment
     *
     * @param  string $id The id of the appointment to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentVoidAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->appointmentVoidRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentVoid'
     *
     * @param  string $id The id of the appointment to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentVoidRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appointmentVoid'
            );
        }

        $resourcePath = '/appointment/void';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (string) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
